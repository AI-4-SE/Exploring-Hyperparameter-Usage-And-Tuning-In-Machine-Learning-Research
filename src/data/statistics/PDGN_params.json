{
    "evaluation/evaluation_metrics.py": {
        "sklearn": {
            "NearestNeighbors_262": {
                "variable": {
                    "value": "nn",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "bmm_38": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(B, N, 3)",
                            "Call"
                        ],
                        [
                            "a",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_39": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(B, N, 3)",
                            "Call"
                        ],
                        [
                            "b",
                            "variable"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_40": {
                "variable": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(B, N, 3)",
                            "Call"
                        ],
                        [
                            "a",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_41": {
                "variable": {
                    "value": "diag_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_118": {
                "variable": {
                    "value": "all_cd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_cd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_cd, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "all_emd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_emd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_emd, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones(n0), torch.zeros(n1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "(Mxy.transpose(0, 1), Myy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n0 + n1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ge_138": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(n0 + n1).to(Mxx)",
                            "Call"
                        ],
                        [
                            "count + label.index_select(0, idx[i])",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "float(k) / 2 * torch.ones(n0 + n1).to(Mxx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_159": {
                "variable": {
                    "value": "(min_val_fromsmp, min_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_dist",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_160": {
                "variable": {
                    "value": "(min_val, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_dist",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(min_idx.unique().view(-1).size(0)) / float(N_ref)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(cov).to(all_dist)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_326": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "sample.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_327": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "sample.size(0)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "cd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cd_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cd_lst, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_72": {
                "variable": {
                    "value": "cd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "emd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "emd_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(emd_lst, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_73": {
                "variable": {
                    "value": "emd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "cd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cd_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cd_lst, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_76": {
                "variable": {
                    "value": "emd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "emd_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(emd_lst, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_113": {
                "variable": {
                    "value": "cd_lst",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cd_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cd_lst, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "emd_lst",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "emd_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(emd_lst, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_152": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.ones(n0), torch.zeros(n1))).to(Mxx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ge(count, float(k) / 2 * torch.ones(n0 + n1).to(Mxx)).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_133": {
                "input": {
                    "value": "INFINITY * torch.ones(n0 + n1).to(Mxx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_128": {
                "*size": {
                    "value": "n0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Mxx.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_128": {
                "*size": {
                    "value": "n1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Myy.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_138": {
                "*size": {
                    "value": "n0 + n1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_133": {
                "*size": {
                    "value": "n0 + n1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/nn_utils.py": {
        "sklearn": {},
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_17": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_18": {
                "variable": {
                    "value": "self.ac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_34": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.ac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_50": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_51": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_52": {
                "variable": {
                    "value": "self.ac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_68": {
                "variable": {
                    "value": "self.ac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "datasets_4point.py": {
        "torch": {
            "from_numpy_98": {
                "variable": {
                    "value": "point_set1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "point_set1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_set[choice1, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(point_set1)",
                            "Call"
                        ],
                        [
                            "point_set[0:self.npoints1, :]",
                            "Subscript"
                        ],
                        [
                            "point_set1[:, 0:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "point_set2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "point_set2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_set[choice2, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(point_set2)",
                            "Call"
                        ],
                        [
                            "point_set[0:self.npoints2, :]",
                            "Subscript"
                        ],
                        [
                            "point_set2[:, 0:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_100": {
                "variable": {
                    "value": "point_set3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "point_set3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_set[choice3, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(point_set3)",
                            "Call"
                        ],
                        [
                            "point_set[0:self.npoints3, :]",
                            "Subscript"
                        ],
                        [
                            "point_set3[:, 0:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "point_set4",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "point_set4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_set[choice4, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(point_set4)",
                            "Call"
                        ],
                        [
                            "point_set[0:self.npoints4, :]",
                            "Subscript"
                        ],
                        [
                            "point_set4[:, 0:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt(fn[2]).astype(np.int64)",
                            "Call"
                        ],
                        [
                            "seg[choice3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seg)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([cls]).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "all_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pointclouds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_303": {
                "variable": {
                    "value": "self.stats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "stats_save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(stats_dir, 'stats_all.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(stats_dir, 'stats_' + '_'.join(self.cate_synsetids) + '.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_318": {
                "obj": {
                    "value": "self.stats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "stats_save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(stats_dir, 'stats_all.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(stats_dir, 'stats_' + '_'.join(self.cate_synsetids) + '.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_310": {
                "ndarray": {
                    "value": "f[synsetid][split][...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_327": {
                "ndarray": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pc - centroid",
                            "BinOp"
                        ],
                        [
                            "pc / m",
                            "BinOp"
                        ],
                        [
                            "_enumerate_pointclouds(f)",
                            "Call"
                        ],
                        [
                            "(pc - shift) / scale",
                            "BinOp"
                        ],
                        [
                            "pc in enumerate(f[synsetid][self.split])",
                            "Call"
                        ],
                        [
                            "pc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_350": {
                "variable": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_351": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/pytorch_structural_losses/match_cost.py": {
        "torch": {}
    },
    "evaluation/pytorch_structural_losses/nn_distance.py": {
        "torch": {}
    },
    "evaluation/pytorch_structural_losses/setup.py": {
        "torch": {}
    },
    "lib/pointops/functions/pointops.py": {
        "torch": {
            "transpose_358": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_361": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_365": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_norm + y_norm - 2.0 * torch.mm(x, y_t)",
                            "BinOp"
                        ],
                        [
                            "(new_xyz.repeat(1, 1, n).view(b, m * n, 3) - xyz.repeat(1, m, 1).view(b, m * n, 3)).pow(2).sum(dim=2).view(b, m, n)",
                            "Call"
                        ],
                        [
                            "(new_xyz.repeat(1, 1, n).view(b, m * n, 3) - xyz.repeat(1, m, 1).view(b, m * n, 3)).pow(2).sum(dim=2).view(b, m, n)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_396": {
                "variable": {
                    "value": "[_, idxs]",
                    "type": "List",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_norm + y_norm - 2.0 * torch.mm(x, y_t)",
                            "BinOp"
                        ],
                        [
                            "(new_xyz.repeat(1, 1, n).view(b, m * n, 3) - xyz.repeat(1, m, 1).view(b, m * n, 3)).pow(2).sum(dim=2).view(b, m, n)",
                            "Call"
                        ],
                        [
                            "(new_xyz.repeat(1, 1, n).view(b, m * n, 3) - xyz.repeat(1, m, 1).view(b, m * n, 3)).pow(2).sum(dim=2).view(b, m, n)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_465": {
                "variable": {
                    "value": "[_, idxs]",
                    "type": "List",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_norm + y_norm - 2.0 * torch.mm(x, y_t)",
                            "BinOp"
                        ],
                        [
                            "(new_xyz.repeat(1, 1, n).view(b, m * n, 3) - xyz.repeat(1, m, 1).view(b, m * n, 3)).pow(2).sum(dim=2).view(b, m, n)",
                            "Call"
                        ],
                        [
                            "(new_xyz.repeat(1, 1, n).view(b, m * n, 3) - xyz.repeat(1, m, 1).view(b, m * n, 3)).pow(2).sum(dim=2).view(b, m, n)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_77": {
                "input": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(b, n, 3)",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(b, m, nsample).zero_()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_363": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(y, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_563": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_614": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_772": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/pointops/pointops/setup.py": {
        "torch": {}
    },
    "lib/pointops/setup.py": {
        "torch": {}
    },
    "lib/sync_bn/batchnorm.py": {
        "torch": {
            "batch_norm_51": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/sync_bn/replicate.py": {
        "torch": {}
    },
    "lib/sync_bn/unittest.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "manual_seed_82": {
                "seed": {
                    "value": "args.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/PDGNet.py": {
        "torch": {
            "sum_444": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xt ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_449": {
                "variable": {
                    "value": "(_, idx_o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xi + xs + xst",
                            "BinOp"
                        ],
                        [
                            "xi + xs + xst",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_461": {
                "variable": {
                    "value": "neighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neighbors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(neighbors)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(neighbors)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_467": {
                "variable": {
                    "value": "ee",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[central, neighbors - central]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_487": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xt ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_492": {
                "variable": {
                    "value": "(_, idx_o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xi + xs + xst",
                            "BinOp"
                        ],
                        [
                            "xi + xs + xst",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_509": {
                "variable": {
                    "value": "neighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neighbors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(neighbors)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(neighbors)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_510": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(xyz)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_516": {
                "variable": {
                    "value": "e_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[central, neighbors - central]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_517": {
                "variable": {
                    "value": "e_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[central_xyz, xyz - central_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(self.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_101": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_102": {
                "variable": {
                    "value": "self.discriminator1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.discriminator1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_103": {
                "variable": {
                    "value": "self.discriminator2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.discriminator2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_104": {
                "variable": {
                    "value": "self.discriminator3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.discriminator3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_105": {
                "variable": {
                    "value": "self.discriminator4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.discriminator4",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_116": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_117": {
                "variable": {
                    "value": "self.shape_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_121": {
                "variable": {
                    "value": "self.optimizerG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_122": {
                "variable": {
                    "value": "self.optimizerD1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator1.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_123": {
                "variable": {
                    "value": "self.optimizerD2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_124": {
                "variable": {
                    "value": "self.optimizerD3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator3.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_125": {
                "variable": {
                    "value": "self.optimizerD4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator4.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "bmm_134": {
                "variable": {
                    "value": "covariance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(x[b], 1, idx[b])",
                            "Call"
                        ],
                        [
                            "tmp.view(dims, N, k)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x[b], 1, idx[b])",
                            "Call"
                        ],
                        [
                            "tmp.view(dims, N, k)",
                            "Call"
                        ],
                        [
                            "points - mu.repeat(1, 1, nump)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "tmp_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_310": {
                "variable": {
                    "value": "ref_pcs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ref_pcs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ref_pcs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_457": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_501": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_505": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_529": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_530": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_531": {
                "variable": {
                    "value": "self.ac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_555": {
                "variable": {
                    "value": "self.inte_conv_hk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2 * Fin, 4 * Fin, [1, k // 2 + 1], [1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_577": {
                "variable": {
                    "value": "merge_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, inte_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_605": {
                "variable": {
                    "value": "self.conv_xyz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(6, 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_610": {
                "variable": {
                    "value": "self.conv_fea",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2 * Fin, 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_615": {
                "variable": {
                    "value": "self.conv_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(16, 64, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_624": {
                "variable": {
                    "value": "self.inte_conv_hk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2 * Fin, 4 * Fin, [1, k // 2 + 1], [1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_656": {
                "variable": {
                    "value": "merge_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, inte_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_683": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generator(z)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.ac(x)",
                            "Call"
                        ],
                        [
                            "get_edge_features(x, self.k, self.num)",
                            "Call"
                        ],
                        [
                            "self.conv2(merge_x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2, N)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2 * N)",
                            "Call"
                        ],
                        [
                            "get_edge_features_xyz(x, pc, self.k, self.num)",
                            "Call"
                        ],
                        [
                            "self.conv2(merge_x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2, N)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2 * N)",
                            "Call"
                        ],
                        [
                            "get_edge_features(x, self.k)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 3)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, 32, 128)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_690": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, maxpool)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_692": {
                "variable": {
                    "value": "self.upsample_cov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "upsample_edgeConv(Fin, Fout, num_k // 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_697": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(Fin, Fin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_708": {
                "variable": {
                    "value": "self.g_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(Fout, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_728": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xs, x_ec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_730": {
                "variable": {
                    "value": "g_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(g, x_ec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_737": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, maxpool)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm1d_740": {
                "variable": {
                    "value": "self.bn_uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_741": {
                "variable": {
                    "value": "self.relu_uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_743": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(Fin, Fin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_754": {
                "variable": {
                    "value": "self.g_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(Fout, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_774": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xs, x_ec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_776": {
                "variable": {
                    "value": "g_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(g, x_ec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_784": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, maxpool)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm1d_787": {
                "variable": {
                    "value": "self.bn_uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_788": {
                "variable": {
                    "value": "self.relu_uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_790": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(Fin, Fin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_801": {
                "variable": {
                    "value": "self.g_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(Fout, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_822": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xs, x_ec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_824": {
                "variable": {
                    "value": "g_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(g, x_ec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_832": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, maxpool)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm1d_835": {
                "variable": {
                    "value": "self.bn_uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_836": {
                "variable": {
                    "value": "self.relu_uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_838": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(Fin, Fin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_860": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xs, x_ec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_869": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_879": {
                "variable": {
                    "value": "self.mlp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(512 + 32, 256, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_886": {
                "variable": {
                    "value": "self.mlp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(512 + 64, 256, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_893": {
                "variable": {
                    "value": "self.mlp3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(512 + 128, 256, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_900": {
                "variable": {
                    "value": "self.mlp4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(512, 256, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_938": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(3, 64, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool1d_952": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "num_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_953": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_978": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(3, 64, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool1d_992": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "num_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_993": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_1014": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(3, 64, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool1d_1028": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "num_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_1029": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_1054": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(3, 64, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool1d_1068": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "num_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_1069": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_404": {
                "obj": {
                    "value": "{'G_model': self.generator.state_dict(), 'G_optimizer': self.optimizerG.state_dict(), 'G_epoch': index_epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path_save_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, save_name + '_G.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_409": {
                "obj": {
                    "value": "{'D_model1': self.discriminator1.state_dict(), 'D_model2': self.discriminator2.state_dict(), 'D_model3': self.discriminator3.state_dict(), 'D_model4': self.discriminator4.state_dict(), 'D_optimizer1': self.optimizerD1.state_dict(), 'D_optimizer2': self.optimizerD2.state_dict(), 'D_optimizer3': self.optimizerD3.state_dict(), 'D_optimizer4': self.optimizerD4.state_dict(), 'D_epoch': index_epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path_save_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, save_name + '_D.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_443": {
                "input": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generator(z)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.ac(x)",
                            "Call"
                        ],
                        [
                            "get_edge_features(x, self.k, self.num)",
                            "Call"
                        ],
                        [
                            "self.conv2(merge_x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2, N)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2 * N)",
                            "Call"
                        ],
                        [
                            "get_edge_features_xyz(x, pc, self.k, self.num)",
                            "Call"
                        ],
                        [
                            "self.conv2(merge_x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2, N)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2 * N)",
                            "Call"
                        ],
                        [
                            "get_edge_features(x, self.k)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 3)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, 32, 128)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_486": {
                "input": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generator(z)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.ac(x)",
                            "Call"
                        ],
                        [
                            "get_edge_features(x, self.k, self.num)",
                            "Call"
                        ],
                        [
                            "self.conv2(merge_x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2, N)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2 * N)",
                            "Call"
                        ],
                        [
                            "get_edge_features_xyz(x, pc, self.k, self.num)",
                            "Call"
                        ],
                        [
                            "self.conv2(merge_x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2, N)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2 * N)",
                            "Call"
                        ],
                        [
                            "get_edge_features(x, self.k)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 3)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, 32, 128)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_643": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "w_fea * w_xyz",
                            "BinOp"
                        ],
                        [
                            "self.conv_all(w)",
                            "Call"
                        ],
                        [
                            "F.softmax(w, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_186": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_190": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_255": {
                "variable": {
                    "value": "target_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_316": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.batch_size, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_320": {
                "tensors": {
                    "value": "gen_pcs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gen_pcs, dim=0)[:len(test_dset)]",
                            "Subscript"
                        ],
                        [
                            "self.normalize_point_clouds(gen_pcs, mode=self.normalize, logger=logger)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_361": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_file_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, self.pretrain_model_G)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_378": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_file_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, self.pretrain_model_D)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_557": {
                "in_channels": {
                    "value": "2 * Fin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * Fin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, k // 2 + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm2d_558": {
                "num_features": {
                    "value": "4 * Fin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_559": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_606": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_607": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_608": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_611": {
                "in_channels": {
                    "value": "2 * Fin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_612": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_613": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_616": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_617": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_618": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_619": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * Fin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_620": {
                "num_features": {
                    "value": "2 * Fin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_621": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_626": {
                "in_channels": {
                    "value": "2 * Fin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * Fin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, k // 2 + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm2d_627": {
                "num_features": {
                    "value": "4 * Fin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_628": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_694": {
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_695": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_698": {
                "in_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_699": {
                "num_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_700": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_704": {
                "in_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_705": {
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_706": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_709": {
                "in_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_710": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_711": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_744": {
                "in_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_745": {
                "num_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_746": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_750": {
                "in_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_751": {
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_752": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_755": {
                "in_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_756": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_757": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_791": {
                "in_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_792": {
                "num_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_793": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_797": {
                "in_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_798": {
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_799": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_802": {
                "in_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_803": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_804": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_839": {
                "in_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_840": {
                "num_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_841": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_845": {
                "in_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_846": {
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_847": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_870": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_871": {
                "num_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_872": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_880": {
                "in_channels": {
                    "value": "512 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_881": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_882": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_883": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_884": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_887": {
                "in_channels": {
                    "value": "512 + 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_888": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_889": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_890": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_891": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_894": {
                "in_channels": {
                    "value": "512 + 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_895": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_896": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_897": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_898": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_901": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_902": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_903": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_904": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_905": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_939": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_940": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_941": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_942": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_943": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_944": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_945": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_946": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_947": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_956": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_957": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_958": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_959": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_960": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_979": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_980": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_981": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_982": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_983": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_984": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_985": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_986": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_987": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_988": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_989": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_990": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_994": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_995": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_996": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_997": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_998": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_1015": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_1016": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1017": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_1018": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_1019": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1020": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_1021": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_1022": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1023": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_1024": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_1025": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1026": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1032": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1033": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1034": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1035": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1036": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_1055": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_1056": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1057": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_1058": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_1059": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1060": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_1061": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_1062": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1063": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_1064": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_1065": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1066": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1070": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1071": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1072": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1073": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1074": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1075": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1076": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_186": {
                "ndarray": {
                    "value": "np.ones(self.batch_size).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_190": {
                "ndarray": {
                    "value": "np.zeros(self.batch_size).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_255": {
                "ndarray": {
                    "value": "np.ones(self.batch_size).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/PDGNet_v2.py": {
        "torch": {
            "sum_452": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xt ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_457": {
                "variable": {
                    "value": "(_, idx_o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xi + xs + xst",
                            "BinOp"
                        ],
                        [
                            "xi + xs + xst",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_469": {
                "variable": {
                    "value": "neighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neighbors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(neighbors)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(neighbors)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_475": {
                "variable": {
                    "value": "ee",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[central, neighbors - central]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_495": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xt ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_500": {
                "variable": {
                    "value": "(_, idx_o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xi + xs + xst",
                            "BinOp"
                        ],
                        [
                            "xi + xs + xst",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_517": {
                "variable": {
                    "value": "neighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neighbors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(neighbors)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(neighbors)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_518": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(xyz)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_524": {
                "variable": {
                    "value": "e_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[central, neighbors - central]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_525": {
                "variable": {
                    "value": "e_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[central_xyz, xyz - central_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(self.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_101": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_102": {
                "variable": {
                    "value": "self.discriminator1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.discriminator1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_103": {
                "variable": {
                    "value": "self.discriminator2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.discriminator2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_104": {
                "variable": {
                    "value": "self.discriminator3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.discriminator3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_105": {
                "variable": {
                    "value": "self.discriminator4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.discriminator4",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_116": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_117": {
                "variable": {
                    "value": "self.shape_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_121": {
                "variable": {
                    "value": "self.optimizerG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_122": {
                "variable": {
                    "value": "self.optimizerD1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator1.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_123": {
                "variable": {
                    "value": "self.optimizerD2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_124": {
                "variable": {
                    "value": "self.optimizerD3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator3.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_125": {
                "variable": {
                    "value": "self.optimizerD4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator4.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "bmm_132": {
                "variable": {
                    "value": "covariance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(x[b], 1, idx[b])",
                            "Call"
                        ],
                        [
                            "tmp.view(dims, N, k)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x[b], 1, idx[b])",
                            "Call"
                        ],
                        [
                            "tmp.view(dims, N, k)",
                            "Call"
                        ],
                        [
                            "points - mu.repeat(1, 1, nump)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "tmp_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_298": {
                "variable": {
                    "value": "ref_pcs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ref_pcs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ref_pcs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_465": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_509": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_513": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_537": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_538": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_539": {
                "variable": {
                    "value": "self.ac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_561": {
                "variable": {
                    "value": "self.inte_conv_hk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2 * Fin, 4 * Fin, [1, k // 2 + 1], [1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_579": {
                "variable": {
                    "value": "merge_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, inte_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_603": {
                "variable": {
                    "value": "self.conv_xyz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(6, 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_608": {
                "variable": {
                    "value": "self.conv_fea",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2 * Fin, 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_613": {
                "variable": {
                    "value": "self.conv_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(16, 64, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_621": {
                "variable": {
                    "value": "self.inte_conv_hk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2 * Fin, 4 * Fin, [1, k // 2 + 1], [1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_643": {
                "variable": {
                    "value": "merge_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, inte_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_668": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generator(z)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.ac(x)",
                            "Call"
                        ],
                        [
                            "get_edge_features(x, self.k, self.num)",
                            "Call"
                        ],
                        [
                            "self.conv2(merge_x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2, N)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2 * N)",
                            "Call"
                        ],
                        [
                            "get_edge_features_xyz(x, pc, self.k, self.num)",
                            "Call"
                        ],
                        [
                            "self.conv2(merge_x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2, N)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2 * N)",
                            "Call"
                        ],
                        [
                            "get_edge_features(x, self.k)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 3)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, 32, 128)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_675": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, maxpool)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_677": {
                "variable": {
                    "value": "self.upsample_cov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "upsample_edgeConv(Fin, Fout, num_k // 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_682": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(Fin, Fin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_690": {
                "variable": {
                    "value": "self.g_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(Fout, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_708": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xs, x_ec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_709": {
                "variable": {
                    "value": "g_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(g, x_ec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_716": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, maxpool)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm1d_718": {
                "variable": {
                    "value": "self.bn_uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_719": {
                "variable": {
                    "value": "self.relu_uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_720": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(Fin, Fin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_728": {
                "variable": {
                    "value": "self.g_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(Fout, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_745": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xs, x_ec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_746": {
                "variable": {
                    "value": "g_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(g, x_ec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_754": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, maxpool)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm1d_757": {
                "variable": {
                    "value": "self.bn_uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_758": {
                "variable": {
                    "value": "self.relu_uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_760": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(Fin, Fin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_768": {
                "variable": {
                    "value": "self.g_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(Fout, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_786": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xs, x_ec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_787": {
                "variable": {
                    "value": "g_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(g, x_ec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_794": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, maxpool)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm1d_796": {
                "variable": {
                    "value": "self.bn_uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_797": {
                "variable": {
                    "value": "self.relu_uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_798": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(Fin, Fin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_816": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xs, x_ec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_825": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_835": {
                "variable": {
                    "value": "self.mlp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(512 + 32, 256, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_842": {
                "variable": {
                    "value": "self.mlp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(512 + 64, 256, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_849": {
                "variable": {
                    "value": "self.mlp3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(512 + 128, 256, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_856": {
                "variable": {
                    "value": "self.mlp4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(512, 256, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_886": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(3, 64, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool1d_897": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "num_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_898": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_919": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(3, 64, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool1d_933": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "num_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_934": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_955": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(3, 64, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool1d_969": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "num_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_970": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_991": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(3, 64, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool1d_1005": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "num_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_1006": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_393": {
                "obj": {
                    "value": "{'G_model': self.generator.state_dict(), 'G_optimizer': self.optimizerG.state_dict(), 'G_epoch': index_epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path_save_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, save_name + '_G.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_398": {
                "obj": {
                    "value": "{'D_model1': self.discriminator1.state_dict(), 'D_model2': self.discriminator2.state_dict(), 'D_model3': self.discriminator3.state_dict(), 'D_model4': self.discriminator4.state_dict(), 'D_optimizer1': self.optimizerD1.state_dict(), 'D_optimizer2': self.optimizerD2.state_dict(), 'D_optimizer3': self.optimizerD3.state_dict(), 'D_optimizer4': self.optimizerD4.state_dict(), 'D_epoch': index_epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path_save_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, save_name + '_D.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_451": {
                "input": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generator(z)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.ac(x)",
                            "Call"
                        ],
                        [
                            "get_edge_features(x, self.k, self.num)",
                            "Call"
                        ],
                        [
                            "self.conv2(merge_x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2, N)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2 * N)",
                            "Call"
                        ],
                        [
                            "get_edge_features_xyz(x, pc, self.k, self.num)",
                            "Call"
                        ],
                        [
                            "self.conv2(merge_x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2, N)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2 * N)",
                            "Call"
                        ],
                        [
                            "get_edge_features(x, self.k)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 3)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, 32, 128)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_494": {
                "input": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generator(z)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.ac(x)",
                            "Call"
                        ],
                        [
                            "get_edge_features(x, self.k, self.num)",
                            "Call"
                        ],
                        [
                            "self.conv2(merge_x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2, N)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2 * N)",
                            "Call"
                        ],
                        [
                            "get_edge_features_xyz(x, pc, self.k, self.num)",
                            "Call"
                        ],
                        [
                            "self.conv2(merge_x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2, N)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(B, self.Fout, 2 * N)",
                            "Call"
                        ],
                        [
                            "get_edge_features(x, self.k)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 3)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, 32, 128)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_635": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "w_fea * w_xyz",
                            "BinOp"
                        ],
                        [
                            "self.conv_all(w)",
                            "Call"
                        ],
                        [
                            "F.softmax(w, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_176": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_180": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_243": {
                "variable": {
                    "value": "target_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_304": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.batch_size, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_308": {
                "tensors": {
                    "value": "gen_pcs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gen_pcs, dim=0)[:len(test_dset)]",
                            "Subscript"
                        ],
                        [
                            "self.normalize_point_clouds(gen_pcs, mode=self.normalize, logger=logger)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_350": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_file_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, self.pretrain_model_G)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_367": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_file_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, self.pretrain_model_D)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_562": {
                "in_channels": {
                    "value": "2 * Fin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * Fin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, k // 2 + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm2d_563": {
                "num_features": {
                    "value": "4 * Fin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_564": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_604": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_605": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_606": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_609": {
                "in_channels": {
                    "value": "2 * Fin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_610": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_611": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_614": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_615": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_616": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_617": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * Fin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_618": {
                "num_features": {
                    "value": "2 * Fin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_619": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_622": {
                "in_channels": {
                    "value": "2 * Fin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * Fin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, k // 2 + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm2d_623": {
                "num_features": {
                    "value": "4 * Fin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_624": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_679": {
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_680": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_683": {
                "in_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_684": {
                "num_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_685": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_686": {
                "in_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_687": {
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_688": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_691": {
                "in_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_692": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_693": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_721": {
                "in_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_722": {
                "num_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_723": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_724": {
                "in_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_725": {
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_726": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_729": {
                "in_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_730": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_731": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_761": {
                "in_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_762": {
                "num_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_763": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_764": {
                "in_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_765": {
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_766": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_769": {
                "in_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_770": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_771": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_799": {
                "in_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_800": {
                "num_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_801": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_802": {
                "in_features": {
                    "value": "Fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ],
                        [
                            "Fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_803": {
                "num_features": {
                    "value": "Fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ],
                        [
                            "Fout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_804": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_826": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_827": {
                "num_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_828": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_836": {
                "in_channels": {
                    "value": "512 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_837": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_838": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_839": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_840": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_843": {
                "in_channels": {
                    "value": "512 + 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_844": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_845": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_846": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_847": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_850": {
                "in_channels": {
                    "value": "512 + 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_851": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_852": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_853": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_854": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_857": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_858": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_859": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_860": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_861": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_887": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_888": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_889": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_890": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_891": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_892": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_893": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_894": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_895": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_899": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_900": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_901": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_902": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_903": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_920": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_921": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_922": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_923": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_924": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_925": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_926": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_927": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_928": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_929": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_930": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_931": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_935": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_936": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_937": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_938": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_939": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_956": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_957": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_958": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_959": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_960": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_961": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_962": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_963": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_964": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_965": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_966": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_967": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_971": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_972": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_973": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_974": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_975": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_992": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_993": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_994": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_995": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_996": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_997": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_998": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_999": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1000": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_1001": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_1002": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1003": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1007": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1008": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1009": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1010": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1011": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1012": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1013": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_176": {
                "ndarray": {
                    "value": "np.ones(self.batch_size).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_180": {
                "ndarray": {
                    "value": "np.zeros(self.batch_size).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_243": {
                "ndarray": {
                    "value": "np.ones(self.batch_size).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/chamfer_loss.py": {
        "torch": {
            "is_available_11": {
                "variable": {
                    "value": "self.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_15": {
                "variable": {
                    "value": "(mins, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_pairwise_dist(gts, preds)",
                            "Call"
                        ],
                        [
                            "rx.transpose(2, 1) + ry - 2 * zz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_16": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(P, 1)",
                            "Call"
                        ],
                        [
                            "torch.min(P, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_17": {
                "variable": {
                    "value": "(mins, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_pairwise_dist(gts, preds)",
                            "Call"
                        ],
                        [
                            "rx.transpose(2, 1) + ry - 2 * zz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_18": {
                "variable": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(P, 1)",
                            "Call"
                        ],
                        [
                            "torch.min(P, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_26": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_27": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_28": {
                "variable": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_33": {
                "variable": {
                    "value": "diag_ind_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_points_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_34": {
                "variable": {
                    "value": "diag_ind_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_points_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.size()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/data.py": {
        "torch": {
            "DataLoader_18": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_split(dataset, [train_size, val_size, test_size])",
                            "Call"
                        ],
                        [
                            "get_train_val_test_datasets(dataset, train_ratio, val_ratio)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_19": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_split(dataset, [train_size, val_size, test_size])",
                            "Call"
                        ],
                        [
                            "get_train_val_test_datasets(dataset, train_ratio, val_ratio)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "val_test_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_test_batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_20": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_split(dataset, [train_size, val_size, test_size])",
                            "Call"
                        ],
                        [
                            "get_train_val_test_datasets(dataset, train_ratio, val_ratio)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "val_test_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_test_batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/misc.py": {
        "torch": {
            "load_94": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.save_dir, self.ckpts[idx]['file'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_101": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.save_dir, self.ckpts[idx]['file'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_105": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.save_dir, file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_110": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_77": {
                "obj": {
                    "value": "{'args': args, 'state_dict': model.state_dict(), 'others': others}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, fname)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}