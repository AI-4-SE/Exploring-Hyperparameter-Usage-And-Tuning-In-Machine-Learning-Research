{
    "image_remeshing_cnn/trainer.py": {
        "sklearn": {
            "roc_auc_score_66": {
                "variable": {
                    "value": "auroc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_gt_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate(y_gt)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_gt)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate(y_pred)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_67": {
                "variable": {
                    "value": "average_precision",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_gt_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate(y_gt)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_gt)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate(y_pred)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_86": {
                "variable": {
                    "value": "auroc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_gt_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate(y_gt)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_gt)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate(y_pred)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_87": {
                "variable": {
                    "value": "average_precision",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_gt_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate(y_gt)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_gt)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred_all",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate(y_pred)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_pred)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_51": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.dataloaders['train'].dataset.class_weights]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.dataloaders['train'].dataset.class_weights]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_52": {
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([self.dataloaders['train'].dataset.class_weights]).float().to(logit_pred.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([self.dataloaders['train'].dataset.class_weights]).float().to(logit_pred.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_78": {
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([self.dataloaders['train'].dataset.class_weights]).float().to(logit_pred.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([self.dataloaders['train'].dataset.class_weights]).float().to(logit_pred.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "image_remeshing_cnn/architecture.py": {
        "torch": {
            "Sequential_49": {
                "*args": {
                    "value": "LinearOperatorGP(chin, chout, kernel=kernel, d=d, nounc=nounc)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self._unc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(-2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ReLuLinearConvGP(channels_in, k, kernel=kernel, d=d, nounc=nounc)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_141": {
                "variable": {
                    "value": "self._gp_unc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(-1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GPinterpolateLayer(channels_in, d=d, nounc=nounc)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_167": {
                "*args": {
                    "value": "ChannelSeperateLinOpGP(chin, chout, kernel=kernel, d=d, nounc=nounc)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_176": {
                "variable": {
                    "value": "self._gp_unc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(-1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GPinterpolateLayer(channels_in, d=d, nounc=nounc, res=res)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, demos_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_158": {
                "variable": {
                    "value": "zeroed_demos",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "demos_mask > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "const_time_demos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "demos.unsqueeze(1).repeat((1, vals.shape[1], 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros_like(const_time_demos)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vals, zeroed_demos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "data": {
                    "value": "-2.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_86": {
                "input": {
                    "value": "vals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([vals, zeroed_demos], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_86": {
                "input": {
                    "value": "self._unc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_161": {
                "input": {
                    "value": "vals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([vals, zeroed_demos], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_161": {
                "input": {
                    "value": "self._unc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_163": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([mask, demos_mask], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_176": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_158": {
                "input": {
                    "value": "const_time_demos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "demos.unsqueeze(1).repeat((1, vals.shape[1], 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_24": {
                "input": {
                    "value": "meanout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "super().forward(meanin)",
                            "Call"
                        ],
                        [
                            "meanin * Phis + stdin * density",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_39": {
                "input": {
                    "value": "stdin",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(stdin + 1e-06).clamp(min=1e-06)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(vals) * F.softplus(self._unc)",
                            "BinOp"
                        ],
                        [
                            "torch.ones_like(vals) * F.softplus(self._unc)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_like_113": {
                "input": {
                    "value": "meanin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "isnan_156": {
                "input": {
                    "value": "const_time_demos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "demos.unsqueeze(1).repeat((1, vals.shape[1], 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "image_remeshing_cnn/datasets.py": {
        "torch": {
            "load_372": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "osp.join(folder, filename)",
                            "Call"
                        ],
                        [
                            "osp.join(self.processed_dir, 'pre_transform.pt')",
                            "Call"
                        ],
                        [
                            "osp.join(self.processed_dir, 'pre_filter.pt')",
                            "Call"
                        ],
                        [
                            "self.processed_paths[0] if train else self.processed_paths[1]",
                            "IfExp"
                        ],
                        [
                            "download_url(self.url, self.raw_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_47": {
                "obj": {
                    "value": "props[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "props",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_266": {
                "obj": {
                    "value": "__repr__(self.pre_transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "osp.join(folder, filename)",
                            "Call"
                        ],
                        [
                            "osp.join(self.processed_dir, 'pre_transform.pt')",
                            "Call"
                        ],
                        [
                            "osp.join(self.processed_dir, 'pre_filter.pt')",
                            "Call"
                        ],
                        [
                            "self.processed_paths[0] if train else self.processed_paths[1]",
                            "IfExp"
                        ],
                        [
                            "download_url(self.url, self.raw_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_268": {
                "obj": {
                    "value": "__repr__(self.pre_filter)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "osp.join(folder, filename)",
                            "Call"
                        ],
                        [
                            "osp.join(self.processed_dir, 'pre_transform.pt')",
                            "Call"
                        ],
                        [
                            "osp.join(self.processed_dir, 'pre_filter.pt')",
                            "Call"
                        ],
                        [
                            "self.processed_paths[0] if train else self.processed_paths[1]",
                            "IfExp"
                        ],
                        [
                            "download_url(self.url, self.raw_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_389": {
                "variable": {
                    "value": "(x, edge_index, edge_slice, pos, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "raw_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_403": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_50": {
                "tensors": {
                    "value": "props",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_sequence_52": {
                "sequences": {
                    "value": "props",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_392": {
                "obj": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "osp.join(folder, filename)",
                            "Call"
                        ],
                        [
                            "osp.join(self.processed_dir, 'pre_transform.pt')",
                            "Call"
                        ],
                        [
                            "osp.join(self.processed_dir, 'pre_filter.pt')",
                            "Call"
                        ],
                        [
                            "self.processed_paths[0] if train else self.processed_paths[1]",
                            "IfExp"
                        ],
                        [
                            "download_url(self.url, self.raw_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_243": {
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "osp.join(self.processed_dir, 'pre_transform.pt')",
                            "Call"
                        ],
                        [
                            "osp.join(self.processed_dir, 'pre_filter.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_250": {
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "osp.join(self.processed_dir, 'pre_transform.pt')",
                            "Call"
                        ],
                        [
                            "osp.join(self.processed_dir, 'pre_filter.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "image_remeshing_cnn/equivariant/equivariant.py": {
        "torch": {
            "zeros_like_224": {
                "variable": {
                    "value": "out_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_225": {
                "variable": {
                    "value": "out_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self._heat_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(active_dims) * 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self._blur_lengthscale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(-1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_56": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "rot_gen[0].shape[-1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "delta.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_69": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "rot_gen[0].shape[-1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "delta.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "scalar_grad_hessian",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scalar, gradient, hessian]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_93": {
                "variable": {
                    "value": "scalar_grad_hessian",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_103": {
                "variable": {
                    "value": "scalar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "op1j",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scalar[..., None], d1[..., None], d2[..., None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "op3j",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d2.reshape(bs, m, n, 1, d * d), d3.reshape(bs, m, n, d, d * d), d4.reshape(bs, m, n, d * d, d * d)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "opij",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[op1j, op2j, op3j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_122": {
                "variable": {
                    "value": "scalar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "op1j",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scalar[..., None], d1[..., None], d2[..., None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "op3j",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d2.reshape(bs, m, 1, d * d), d3.reshape(bs, m, d, d * d), d4.reshape(bs, m, d * d, d * d)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "opij",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[op1j, op2j, op3j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_161": {
                "variable": {
                    "value": "self._weight_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(active_dims) * init_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_162": {
                "variable": {
                    "value": "self._bias_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bias_active_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_267": {
                "variable": {
                    "value": "self._weight_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(active_dims) * init_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_290": {
                "variable": {
                    "value": "self._unc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(-2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_292": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "EquivariantLinearOperatorGP(channels_in * Scalar, feature_rep, d=d, nounc=nounc, nonlinearity=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_82": {
                "input": {
                    "value": "self._blur_lengthscale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_214": {
                "loc": {
                    "value": "gate_mean[None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "gate_std[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_227": {
                "input": {
                    "value": "-(mean / std) ** 2 / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_282": {
                "variable": {
                    "value": "stdout",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meanout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "meanin @ weight.T + self.bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_43": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_110": {
                "tensors": {
                    "value": "[d1.reshape(bs, m, n, 1, d), d2.reshape(bs, m, n, d, d), d3.reshape(bs, m, n, d * d, d)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "[d1.reshape(bs, m, 1, d), d2.reshape(bs, m, d, d), d3.reshape(bs, m, d * d, d)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_162": {
                "*size": {
                    "value": "bias_active_dims",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "isinf_189": {
                "input": {
                    "value": "self.op_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_192": {
                "input": {
                    "value": "outputs_and_gates",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_193": {
                "input": {
                    "value": "outputs_and_gates_std",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_207": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "isnan_223": {
                "input": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_255": {
                "input": {
                    "value": "out_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_290": {
                "data": {
                    "value": "-2.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_306": {
                "input": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softplus_306": {
                "input": {
                    "value": "self._unc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_23": {
                "*size": {
                    "value": "active_dims",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_50": {
                "n": {
                    "value": "d",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "rot_gen[0].shape[-1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "delta.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_161": {
                "*size": {
                    "value": "active_dims",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_215": {
                "start": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_267": {
                "*size": {
                    "value": "active_dims",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "image_remeshing_cnn/equivariant/symmetric_subspaces.py": {
        "torch": {
            "cat_76": {
                "tensors": {
                    "value": "[idx for idx in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "argsort_77": {
                "variable": {
                    "value": "inverse_permutation",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "permutation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([idx for idx in indices]) for indices in ranks_indices.values()])",
                            "Call"
                        ],
                        [
                            "_multilinear_reshape(arange, rep_out_list, rep_in_list, d=d).reshape(-1).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "reshaped_W",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*[cumsum[-1] for cumsum in size_cumsums]",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "flat_W.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "flat_W.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_131": {
                "variable": {
                    "value": "arange",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.prod([repsize(rep, d) for rep in rep_out_list + rep_in_list])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_106": {
                "variable": {
                    "value": "Ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Ws",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(Ws, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "ndarray": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "orthogonal_complement(P)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_74": {
                "start": {
                    "value": "tensor_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d ** (p + q)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "image_remeshing_cnn/kernel.py": {
        "torch": {
            "Parameter_43": {
                "variable": {
                    "value": "self._gp_length_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(-1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "self._gp_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(-1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_101": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones_like(delta), -delta / sigma ** 2, -1 / sigma ** 2 + delta ** 2 / sigma ** 4, 3 * delta / sigma ** 4 - delta ** 3 / sigma ** 6, 3 / sigma ** 4 - 6 * delta ** 2 / sigma ** 6 + delta ** 4 / sigma ** 8]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_126": {
                "variable": {
                    "value": "Dxxp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[D[:, :3], -D[:, 1:4], D[:, 2:5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_137": {
                "variable": {
                    "value": "Dxxp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[D[:, :3], -D[:, 1:4], D[:, 2:5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_167": {
                "variable": {
                    "value": "self._blur_lengthscale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(-3.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_204": {
                "variable": {
                    "value": "self._means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.1 * torch.randn(num_basis, d)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_205": {
                "variable": {
                    "value": "self._tril_cov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5 * torch.randn(num_basis, d, d) if d == 1 else 0.05 * torch.randn(num_basis, d, d)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "eye_227": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "S.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "S.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "S.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_227": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_245": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "S.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "S.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "S.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_261": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "S.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "S.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "S.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_264": {
                "variable": {
                    "value": "b_prec_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijd,ijdc,ijc->ij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "delta_beta",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "beta[:, None] - beta[None, :]",
                            "BinOp"
                        ],
                        [
                            "beta[:, None] - beta[None, :]",
                            "BinOp"
                        ],
                        [
                            "beta[:, None] + beta[None, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_265": {
                "variable": {
                    "value": "b_prec_xm",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijd,ijdc,bmc->bijm",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "delta_beta",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "beta[:, None] - beta[None, :]",
                            "BinOp"
                        ],
                        [
                            "beta[:, None] - beta[None, :]",
                            "BinOp"
                        ],
                        [
                            "beta[:, None] + beta[None, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_266": {
                "variable": {
                    "value": "b_prec_xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijd,ijdc,bnc->bijn",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "delta_beta",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "beta[:, None] - beta[None, :]",
                            "BinOp"
                        ],
                        [
                            "beta[:, None] - beta[None, :]",
                            "BinOp"
                        ],
                        [
                            "beta[:, None] + beta[None, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_267": {
                "variable": {
                    "value": "xm_prec_xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bmd,ijdc,bnc->bijmn",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x_m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_268": {
                "variable": {
                    "value": "xn_prec_xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnd,ijdc,bnc->bijn",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x_n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_269": {
                "variable": {
                    "value": "xm_prec_xm",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bmd,ijdc,bmc->bijm",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x_m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_285": {
                "variable": {
                    "value": "self.op_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cin * self.opkernel.ksize",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cout",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "mu.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "W.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_436": {
                "variable": {
                    "value": "M0",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.mask > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(M)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diagonal_444": {
                "variable": {
                    "value": "Kxxdiag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Kxx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_444": {
                "variable": {
                    "value": "Kxxdiag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_444": {
                "variable": {
                    "value": "Kxxdiag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bs",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "self.opiKmn.shape[0]",
                            "Subscript"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_532": {
                "variable": {
                    "value": "probes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "self.opiKmn.shape[0]",
                            "Subscript"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "mco",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.W.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.W.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_546": {
                "variable": {
                    "value": "self._gp_unc_scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.55 * torch.ones(cin)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_588": {
                "variable": {
                    "value": "mask_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.op_linear(kf)",
                            "Call"
                        ],
                        [
                            "self.op_linear(opiKinvf.permute(0, 2, 3, 1).reshape(bs, m, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_608": {
                "variable": {
                    "value": "mean_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_608": {
                "variable": {
                    "value": "mean_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bs",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "self.opiKmn.shape[0]",
                            "Subscript"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_685": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meanin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_698": {
                "variable": {
                    "value": "self._unc_scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.55 * torch.ones(cin)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_730": {
                "variable": {
                    "value": "mean_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_730": {
                "variable": {
                    "value": "mean_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bs",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "self.opiKmn.shape[0]",
                            "Subscript"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_784": {
                "variable": {
                    "value": "self._gp_unc_scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.55 * torch.ones(cin)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_818": {
                "variable": {
                    "value": "mask_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meanout",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(intKxKinv * (mask * meanin)).sum(1)",
                            "Call"
                        ],
                        [
                            "(intKxKinv.unsqueeze(-1) * meanin).sum(1)",
                            "Call"
                        ],
                        [
                            "(meanin[..., None] * KinvKxy).sum(1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_830": {
                "variable": {
                    "value": "mean_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_830": {
                "variable": {
                    "value": "mean_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bs",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "self.opiKmn.shape[0]",
                            "Subscript"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_20": {
                "input": {
                    "value": "-x ** 2 / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_52": {
                "input": {
                    "value": "self._gp_length_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_57": {
                "input": {
                    "value": "self._gp_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_171": {
                "input": {
                    "value": "self._blur_lengthscale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_551": {
                "input": {
                    "value": "self._gp_unc_scales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_566": {
                "variable": {
                    "value": "masked_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "in_mask > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_703": {
                "input": {
                    "value": "self._unc_scales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_791": {
                "input": {
                    "value": "self._gp_unc_scales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_812": {
                "variable": {
                    "value": "std_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meanout",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(intKxKinv * (mask * meanin)).sum(1)",
                            "Call"
                        ],
                        [
                            "(intKxKinv.unsqueeze(-1) * meanin).sum(1)",
                            "Call"
                        ],
                        [
                            "(meanin[..., None] * KinvKxy).sum(1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_813": {
                "variable": {
                    "value": "mask_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meanout",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(intKxKinv * (mask * meanin)).sum(1)",
                            "Call"
                        ],
                        [
                            "(intKxKinv.unsqueeze(-1) * meanin).sum(1)",
                            "Call"
                        ],
                        [
                            "(meanin[..., None] * KinvKxy).sum(1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_16": {
                "input": {
                    "value": "x / np.sqrt(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_24": {
                "input": {
                    "value": "-x ** 2 / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_144": {
                "input": {
                    "value": "x_n[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "data": {
                    "value": "-3.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_239": {
                "input": {
                    "value": "-quadratic / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_249": {
                "input": {
                    "value": "-quadratic / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_273": {
                "input": {
                    "value": "-quadratic / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_354": {
                "variable": {
                    "value": "self.op_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.op_linear.weight.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_363": {
                "variable": {
                    "value": "x_large",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid(torch.linspace(0, 1, h), torch.linspace(0, 1, w))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_363": {
                "variable": {
                    "value": "x_large",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_363": {
                "variable": {
                    "value": "x_large",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_367": {
                "variable": {
                    "value": "self.op_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_368": {
                "variable": {
                    "value": "self.op_weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "cin",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "xin.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_388": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inp, in_std, op_mean[..., :3], op_std[..., :3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_429": {
                "input": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_436": {
                "input": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "isnan_556": {
                "input": {
                    "value": "sigin",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.01 * torch.ones_like(sigin)",
                            "BinOp"
                        ],
                        [
                            "0.0001 * torch.ones_like(sigin)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_556": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_631": {
                "variable": {
                    "value": "self.op_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_632": {
                "variable": {
                    "value": "self.op_weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "cin",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "xin.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_837": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_69": {
                "input": {
                    "value": "-sqdist / (2 * ls ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_75": {
                "input": {
                    "value": "x_n[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_101": {
                "input": {
                    "value": "delta",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x_m[:, :, None, :] - x_n[:, None, :, :]",
                            "BinOp"
                        ],
                        [
                            "x_m[:, :, None] - x_n[:, None]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_204": {
                "*size": {
                    "value": "num_basis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "isnan_302": {
                "input": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_307": {
                "input": {
                    "value": "sigin",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.01 * torch.ones_like(sigin)",
                            "BinOp"
                        ],
                        [
                            "0.0001 * torch.ones_like(sigin)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_321": {
                "input": {
                    "value": "mu",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.op_linear(kf)",
                            "Call"
                        ],
                        [
                            "self.op_linear(opiKinvf.permute(0, 2, 3, 1).reshape(bs, m, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_546": {
                "*size": {
                    "value": "cin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_557": {
                "input": {
                    "value": "sigin",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.01 * torch.ones_like(sigin)",
                            "BinOp"
                        ],
                        [
                            "0.0001 * torch.ones_like(sigin)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_566": {
                "input": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "isnan_567": {
                "input": {
                    "value": "masked_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(in_mask > 0, f, torch.zeros_like(f))",
                            "Call"
                        ]
                    ]
                }
            },
            "any_567": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_577": {
                "input": {
                    "value": "mu",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.op_linear(kf)",
                            "Call"
                        ],
                        [
                            "self.op_linear(opiKinvf.permute(0, 2, 3, 1).reshape(bs, m, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_577": {
                "input": {
                    "value": "mu",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.op_linear(kf)",
                            "Call"
                        ],
                        [
                            "self.op_linear(opiKinvf.permute(0, 2, 3, 1).reshape(bs, m, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_618": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_698": {
                "*size": {
                    "value": "cin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_719": {
                "input": {
                    "value": "meanout",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(intKxKinv * (mask * meanin)).sum(1)",
                            "Call"
                        ],
                        [
                            "(intKxKinv.unsqueeze(-1) * meanin).sum(1)",
                            "Call"
                        ],
                        [
                            "(meanin[..., None] * KinvKxy).sum(1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_784": {
                "*size": {
                    "value": "cin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_815": {
                "input": {
                    "value": "meanout",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(intKxKinv * (mask * meanin)).sum(1)",
                            "Call"
                        ],
                        [
                            "(intKxKinv.unsqueeze(-1) * meanin).sum(1)",
                            "Call"
                        ],
                        [
                            "(meanin[..., None] * KinvKxy).sum(1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_205": {
                "*size": {
                    "value": "num_basis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "d",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_636": {
                "input": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_763": {
                "input": {
                    "value": "meanout",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(intKxKinv * (mask * meanin)).sum(1)",
                            "Call"
                        ],
                        [
                            "(intKxKinv.unsqueeze(-1) * meanin).sum(1)",
                            "Call"
                        ],
                        [
                            "(meanin[..., None] * KinvKxy).sum(1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_801": {
                "start": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opiKopj.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "self.res",
                            "Attribute"
                        ]
                    ]
                }
            },
            "linspace_626": {
                "start": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_626": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "meshgrid_363": {
                "*tensors": {
                    "value": "torch.linspace(0, 1, h)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.linspace(0, 1, w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_363": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_383": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "image_remeshing_cnn/kernel_utils.py": {
        "torch": {
            "arange_16": {
                "variable": {
                    "value": "ix",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-filter_size",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "filter_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "signal.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "signal.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_24": {
                "variable": {
                    "value": "padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transposed.reshape(-1, 1, dim_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(filter_size, filter_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_25": {
                "variable": {
                    "value": "conved",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.pad(transposed.reshape(-1, 1, dim_size), (filter_size, filter_size), mode='reflect')",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "blur_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(-(ix / std) ** 2 / 2).exp()",
                            "Call"
                        ],
                        [
                            "blur_weights / blur_weights.sum()",
                            "BinOp"
                        ],
                        [
                            "blur_weights[None, None, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "image_remeshing_cnn/opinterplayer.py": {
        "torch": {
            "zeros_like_166": {
                "variable": {
                    "value": "invM",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "logdet_59": {
                "variable": {
                    "value": "logdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kxx + uncin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "self.opkernel._gp_scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5414",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.op_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cin * self.opkernel.ksize",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_87": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "xin.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "xin.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_97": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "xin.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_145": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "xin.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "xin.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diagonal_189": {
                "variable": {
                    "value": "kdiag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kin + torch.eye(n, device=xin.device) * 1e-06",
                            "BinOp"
                        ]
                    ]
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_196": {
                "variable": {
                    "value": "K1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[kdiag[..., None].repeat((1, 1, n)), kin]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_197": {
                "variable": {
                    "value": "K2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[kin.transpose(-1, -2), kdiag[..., None, :].repeat((1, n, 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_198": {
                "variable": {
                    "value": "K12",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[K1, K2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "diag_embed_224": {
                "variable": {
                    "value": "diag_covar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((meanin ** 2 + stdin ** 2) * Phis + meanin * stdin * phis - Eh ** 2).mean(-1).clamp(min=1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_225": {
                "variable": {
                    "value": "full_covar",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "diag_covar > 1e-07",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "diag_covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.diag_embed(((meanin ** 2 + stdin ** 2) * Phis + meanin * stdin * phis - Eh ** 2).mean(-1).clamp(min=1e-06))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(EhhT - Eh[:, :, None, :] * Eh[:, None, :, :]).mean(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_237": {
                "variable": {
                    "value": "self._unc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(-1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_239": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GP(d=d)",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_160": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "M.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_embed_42": {
                "input": {
                    "value": "stdin.mean(-1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "symeig_122": {
                "input": {
                    "value": "AkAyy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(ijkyy * W2[None, :, :, None, None]).sum(2).sum(1) + 1e-05 * I",
                            "BinOp"
                        ]
                    ]
                }
            },
            "symeig_125": {
                "input": {
                    "value": "AkinA",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Ak_interp @ opiKmn.permute(0, 3, 1, 2).reshape(bs, n * k, m) + 0.0001 * I",
                            "BinOp"
                        ]
                    ]
                }
            },
            "symeig_183": {
                "input": {
                    "value": "kin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kin + torch.eye(n, device=xin.device) * 1e-06",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_188": {
                "n": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "xin.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "symeig_226": {
                "input": {
                    "value": "full_covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(diag_covar > 1e-07, diag_covar, covar)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_237": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_251": {
                "input": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softplus_251": {
                "input": {
                    "value": "self._unc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_19": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "isinf_19": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_42": {
                "n": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "xin.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_55": {
                "n": {
                    "value": "xout.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "xin.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_228": {
                "n": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "xin.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "image_remeshing_cnn/train.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "datasets['train'].default_aug_layers()",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_37": {
                "dataset": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "k == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "image_remeshing_cnn/train_equivariant.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "datasets['train'].default_aug_layers()",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_37": {
                "dataset": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "k == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/resolution_test_ordinarycnn.py": {
        "torch": {
            "device_80": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Expression(lambda x: F.interpolate(x, (res, res), mode='bilinear'))",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_39": {
                "variable": {
                    "value": "self.coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "(np.mgrid[:28, :28] / 28).reshape(2, -1).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 3, padding=1, stride=stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBNrelu(1, k)",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_60": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_63": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_84": {
                "dataset": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "k == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_82": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(res, res)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_99": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(test_res, test_res)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/train_equivariant.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "datasets['train'].default_aug_layers()",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_34": {
                "dataset": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "k == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/train_superpixel.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_32": {
                "dataset": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "k == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}