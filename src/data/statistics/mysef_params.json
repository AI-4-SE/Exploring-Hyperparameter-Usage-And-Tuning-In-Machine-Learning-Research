{
    "eval.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() > 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_52": {
                "variable": {
                    "value": "load_params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(modelpath, modelname)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "finfo_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1 if torch.cuda.is_available() > 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SummaryWriter_76": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "comment": {
                    "value": "'-' + log_items",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_153": {
                "variable": {
                    "value": "state_params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "state_dict_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(modelzoopath, 'resnet50-19c8e357.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "new_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(class_names)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_180": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_191": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_194": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.SGD(model.parameters(), lr=lr, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_229": {
                "obj": {
                    "value": "{'model_params': model.state_dict(), 'train_params': train_rsltparams}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(modelpath, modelname)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "dataset": {
                    "value": "datasplits[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "nthreads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modellearning.py": {
        "torch": {
            "Softmax_12": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LogSoftmax_13": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "KLDivLoss_14": {
                "variable": {
                    "value": "kldiv",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "div_303": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "running_corrects.double()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "datasize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dataloader.dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_282": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax(xglobal)",
                            "Call"
                        ],
                        [
                            "softmax(outputs)",
                            "Call"
                        ],
                        [
                            "softmax(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_294": {
                "variable": {
                    "value": "bad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "good_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds == labels.data",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_290": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_134": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax(xglobal)",
                            "Call"
                        ],
                        [
                            "softmax(outputs)",
                            "Call"
                        ],
                        [
                            "softmax(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_145": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "set_grad_enabled_91": {
                "mode": {
                    "value": "phase == 'trainval'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "mul_129": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax(xglobal)",
                            "Call"
                        ],
                        [
                            "softmax(outputs)",
                            "Call"
                        ],
                        [
                            "softmax(outputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logsoftmax(outputs)",
                            "Call"
                        ],
                        [
                            "logsoftmax(xglobal)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_129": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "neg_129": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "div_129": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_148": {
                "input": {
                    "value": "predl[i] == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "mul_112": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax(xglobal)",
                            "Call"
                        ],
                        [
                            "softmax(outputs)",
                            "Call"
                        ],
                        [
                            "softmax(outputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logsoftmax(outputs)",
                            "Call"
                        ],
                        [
                            "logsoftmax(xglobal)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "div_112": {
                "input": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_115": {
                "input": {
                    "value": "torch.neg(probs)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "logprobl[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "div_115": {
                "input": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "input": {
                    "value": "xlocal[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_105": {
                "input": {
                    "value": "probl[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_106": {
                "input": {
                    "value": "xlocal[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "neg_115": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax(xglobal)",
                            "Call"
                        ],
                        [
                            "softmax(outputs)",
                            "Call"
                        ],
                        [
                            "softmax(outputs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sef.py": {
        "torch": {
            "finfo_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_201": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_203": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_204": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_209": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_230": {
                "variable": {
                    "value": "self.fclocal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*fc_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_232": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_235": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_262": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_276": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "bmm_295": {
                "variable": {
                    "value": "xcosin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xnorm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xview.div(xview.norm(dim=-1, keepdim=True) + eps)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "xnorm.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_306": {
                "variable": {
                    "value": "xlocal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_312": {
                "variable": {
                    "value": "xpool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xpool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(xpool, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_320": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.pow(2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_224": {
                "in_features": {
                    "value": "nlocal_channels_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nchannels // self.nparts",
                            "BinOp"
                        ],
                        [
                            "nfeatures // self.nparts",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_228": {
                "in_features": {
                    "value": "nlocal_channels_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlocal_channels_norm",
                            "variable"
                        ],
                        [
                            "nlocal_channels_norm + reminder",
                            "BinOp"
                        ],
                        [
                            "nlocal_channels_norm",
                            "variable"
                        ],
                        [
                            "nlocal_channels_norm + reminder",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/_utils/__init__.py": {
        "torch": {}
    },
    "utils/_utils/collate.py": {
        "torch": {
            "stack_55": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "elem.new(storage)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_26": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_66": {
                "data": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_64": {
                "data": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/_utils/pin_memory.py": {
        "torch": {
            "set_num_threads_17": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_19": {
                "device": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/_utils/signal_handling.py": {
        "torch": {}
    },
    "utils/_utils/worker.py": {
        "torch": {
            "set_num_threads_121": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_123": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/dataloader.py": {
        "torch": {
            "empty_332": {
                "variable": {
                    "value": "self._base_seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_730": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/dataset.py": {
        "torch": {
            "randperm_274": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "sum(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/distributed.py": {
        "torch": {
            "Generator_58": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_61": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/imdb.py": {
        "torch": {}
    },
    "utils/misc.py": {
        "torch": {
            "div_24": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.mul(p, torch.neg(torch.log(q))))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "nsamples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_9": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_10": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reciprocal_14": {
                "variable": {
                    "value": "sval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 + torch.exp(torch.neg(torch.mul(x, self.weight) + self.bias))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_24": {
                "input": {
                    "value": "torch.mul(p, torch.neg(torch.log(q)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_9": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_10": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mul_24": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.neg(torch.log(q))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_14": {
                "input": {
                    "value": "torch.neg(torch.mul(x, self.weight) + self.bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "neg_24": {
                "input": {
                    "value": "torch.log(q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "neg_14": {
                "input": {
                    "value": "torch.mul(x, self.weight) + self.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_24": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mul_14": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/modelserial.py": {
        "torch": {
            "device_3": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() > 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_20": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename.format(datasetname)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() > 0 else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_14": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename.format(datasetname)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_3": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/mydataloader.py": {
        "torch": {
            "empty_332": {
                "variable": {
                    "value": "self._base_seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_730": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/receptivesize.py": {
        "torch": {}
    },
    "utils/sampler.py": {
        "torch": {
            "as_tensor_155": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_107": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.data_source)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_160": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "self.replacement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_106": {
                "high": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.data_source)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.num_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_124": {
                "n": {
                    "value": "len(self.indices)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/vision.py": {
        "torch": {}
    }
}