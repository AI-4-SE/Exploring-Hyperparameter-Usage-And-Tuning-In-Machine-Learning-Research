{
    "models/modeling_discriminator.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_96": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mlp(hidden_state)",
                            "Call"
                        ],
                        [
                            "self.classifier_head(avg_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_81": {
                "variable": {
                    "value": "avg_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_121": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "head_checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(model_fi)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_78": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.ne(0).unsqueeze(2).repeat(1, 1, self.embed_size).float().to(self.device).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/modeling_gpt2.py": {
        "torch": {
            "Linear_22": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_69": {
                "variable": {
                    "value": "loss_fct1",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_75": {
                "variable": {
                    "value": "label_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels != -1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_76": {
                "variable": {
                    "value": "ppl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(torch.sum(loss1, dim=1).float() / label_size.float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_76": {
                "input": {
                    "value": "torch.sum(loss1, dim=1).float() / label_size.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_82": {
                "input": {
                    "value": "label_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(labels != -1, dim=1).type(loss1.type())",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_76": {
                "input": {
                    "value": "loss1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss_fct1(lm_logits.view(-1, lm_logits.size(-1)), labels.view(-1))",
                            "Call"
                        ],
                        [
                            "loss1.view(labels.size(0), labels.size(1))",
                            "Call"
                        ],
                        [
                            "loss1 * element_weights",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/optim.py": {
        "torch": {
            "cos_26": {
                "input": {
                    "value": "math.pi * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_145": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_147": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_285": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_287": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "norm_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[exp_inf.mul_(beta2).unsqueeze(0), grad.abs().add_(eps).unsqueeze_(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_174": {
                "variable": {
                    "value": "state[next_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_176": {
                "variable": {
                    "value": "state[next_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_314": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_315": {
                "variable": {
                    "value": "state[exp_inf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_331": {
                "input": {
                    "value": "norm_buf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([exp_inf.mul_(beta2).unsqueeze(0), grad.abs().add_(eps).unsqueeze_(0)], 0)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(exp_inf, exp_inf.new().long())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clip_grad_norm__183": {
                "parameters": {
                    "value": "p",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__322": {
                "parameters": {
                    "value": "p",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "style_dialogpt/data_loader.py": {
        "torch": {
            "DataLoader_258": {
                "variable": {
                    "value": "self.loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.data_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "self.sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "GPT2Dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_269": {
                "variable": {
                    "value": "self.sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self.data_set",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_199": {
                "variable": {
                    "value": "batch_contexts",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "contexts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[e.context_id for e in examples]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_208": {
                "variable": {
                    "value": "batch_responses",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "responses",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[e.response_id for e in examples]",
                            "ListComp"
                        ],
                        [
                            "[_[:max_rep] + [-1] * (max_rep - len(_)) for _ in responses]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_272": {
                "dataset": {
                    "value": "self.data_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "self.sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "GPT2Dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "style_dialogpt/evaluate.py": {
        "torch": {
            "DataLoader_58": {
                "variable": {
                    "value": "eval_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "GPT2Dataset(eval_input_file, tokenizer=tokenizer, is_test=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BucketBatchSampler(eval_data_set.context_lens, batch_size, False, False)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "eval_data_set.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_161": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda' if torch.cuda.is_available() and args.gpu >= 0 else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_54": {
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_126": {
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_165": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_166": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_93": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "disc_model(rp[0]).exp()[:, 1]",
                            "Subscript"
                        ],
                        [
                            "ss.tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "style_dialogpt/losses.py": {
        "torch": {
            "softmax_18": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_19": {
                "variable": {
                    "value": "sty_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sty_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "style_dialogpt/train_gumbel_kl.py": {
        "torch": {
            "device_137": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_138": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_143": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_152": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_153": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_142": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_156": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_299": {
                "variable": {
                    "value": "rep_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gumbel_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "style_lm_model.transformer.wte.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_306": {
                "variable": {
                    "value": "dis_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "style_dis_model(inputs_embeds=rep_embs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.ones(log_probs.size(0), dtype=torch.long, device=log_probs.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "seq_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_ids, response_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_316": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_ids, response_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_306": {
                "*size": {
                    "value": "log_probs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "log_probs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__345": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__347": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_381": {
                "obj": {
                    "value": "{k: v.cpu() if v is not None else None for (k, v) in model.state_dict().items()}",
                    "type": "DictComp",
                    "possible_values": []
                },
                "f": {
                    "value": "join(output_dir, f'GP2-pretrain-step-{global_step}.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "style_dialogpt/utils.py": {
        "torch": {
            "rand_206": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_274": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "logits[1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(logits, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "logits[1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_275": {
                "variable": {
                    "value": "embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embeds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embeds[:-1]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(embeds, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_299": {
                "variable": {
                    "value": "sample_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "rep_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_332": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "logits[1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(logits, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "logits[1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_333": {
                "variable": {
                    "value": "gumbel_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gumbel_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gumbel_softmax(next_token_logits, temperature)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gumbel_weights[:-1]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(gumbel_weights, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_54": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_212": {
                "input": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_265": {
                "variable": {
                    "value": "input_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gumbel_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gumbel_softmax(next_token_logits, temperature)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gumbel_weights[:-1]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(gumbel_weights, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "model.transformer.wte.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_318": {
                "variable": {
                    "value": "input_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gumbel_softmax(next_token_logits, temperature)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "model.transformer.wte.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_207": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "style_discriminator/eval_style_dis.py": {
        "torch": {
            "pad_sequence_23": {
                "variable": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "ids",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[tokenizer.encode(_.strip())[:50] + [tokenizer.eos_token_id] for _ in sentences[i:i + bsz]]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(_, dtype=torch.long) for _ in ids]",
                            "ListComp"
                        ],
                        [
                            "pad_sequence(ids, batch_first=True, padding_value=0)",
                            "Call"
                        ],
                        [
                            "ids.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor([tokenizer.encode(text.strip()) + [tokenizer.eos_token_id]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "ids.cuda()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tokenizer.encode(text.strip()) + [tokenizer.eos_token_id]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_22": {
                "data": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "style_discriminator/train_style_dis.py": {
        "torch": {
            "manual_seed_29": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "y_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "item_info['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "x_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "item_info['X']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "y_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "item_info['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "input_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[input_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_158": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_172": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset(xs, ys)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "cached_collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_278": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "data[X]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.X[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "padded_sequences",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_102": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "discriminator(input_t)",
                            "Call"
                        ],
                        [
                            "discriminator(input_t)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_267": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_271": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unbind_168": {
                "variable": {
                    "value": "avg_rep_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avg_rep.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_305": {
                "obj": {
                    "value": "discriminator.get_classifier().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'classifier_head_epoch_{}.pt'.format(epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_127": {
                "input": {
                    "value": "output_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "discriminator(input_t)",
                            "Call"
                        ],
                        [
                            "discriminator(input_t)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "style_lm/train_style_lm.py": {
        "torch": {
            "DataLoader_131": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SequentialSampler_341": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_342": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_371": {
                "variable": {
                    "value": "perplexity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(eval_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_71": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_123": {
                "variable": {
                    "value": "tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_186": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model.module if hasattr(model, 'module') else model",
                            "IfExp"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_190": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model.module if hasattr(model, 'module') else model",
                            "IfExp"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_349": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model.module if hasattr(model, 'module') else model",
                            "IfExp"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_562": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_566": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_619": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "self.examples[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_73": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_128": {
                "sequences": {
                    "value": "examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "RandomSampler_130": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_130": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_sequence_339": {
                "sequences": {
                    "value": "examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_371": {
                "data": {
                    "value": "eval_loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "eval_loss / nb_eval_steps",
                            "BinOp"
                        ],
                        [
                            "eval_loss + lm_loss.mean().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_device_565": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_667": {
                "obj": {
                    "value": "args",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_174": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_175": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_563": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__269": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__271": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_303": {
                "obj": {
                    "value": "args",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_308": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_309": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_562": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}