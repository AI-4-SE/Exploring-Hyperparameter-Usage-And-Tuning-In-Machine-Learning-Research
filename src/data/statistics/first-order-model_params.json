{
    "frames_dataset.py": {
        "sklearn": {
            "train_test_split_83": {
                "variable": {
                    "value": "(train_videos, test_videos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self.videos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "animate.py": {
        "torch": {
            "DataLoader_45": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PairedDataset(initial_dataset=dataset, number_of_pairs=animate_params['num_pairs'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_33": {
                "variable": {
                    "value": "jacobian_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kp_driving['jacobian']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.inverse(kp_driving_initial['jacobian'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "variable": {
                    "value": "kp_new[jacobian]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "jacobian_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(kp_driving['jacobian'], torch.inverse(kp_driving_initial['jacobian']))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "kp_source['jacobian']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_33": {
                "input": {
                    "value": "kp_driving_initial['jacobian']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "load_40": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "source_image[np.newaxis].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_60": {
                "variable": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "driving",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(driving_video)[np.newaxis].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_63": {
                "variable": {
                    "value": "driving",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_40": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "logger.py": {
        "torch": {
            "load_53": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "interpolate_174": {
                "variable": {
                    "value": "occlusion_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occlusion_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out['occlusion_map'].data.cpu().repeat(1, 3, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(occlusion_map, size=source.shape[1:3]).numpy()",
                            "Call"
                        ],
                        [
                            "np.transpose(occlusion_map, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "source.shape[1:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_48": {
                "obj": {
                    "value": "cpk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{k: v.state_dict() for (k, v) in self.models.items()}",
                            "DictComp"
                        ]
                    ]
                },
                "f": {
                    "value": "cpk_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.cpk_dir, '%s-checkpoint.pth.tar' % str(self.epoch).zfill(self.zfill_num))",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_183": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.visualizer.visualize(inp['driving'], inp['source'], out)",
                            "Call"
                        ],
                        [
                            "np.copy(image)",
                            "Call"
                        ],
                        [
                            "self.create_image_grid(*images)",
                            "Call"
                        ],
                        [
                            "(255 * image).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "out['sparse_deformed'][:, i].data.cpu()",
                            "Call"
                        ],
                        [
                            "F.interpolate(image, size=source.shape[1:3])",
                            "Call"
                        ],
                        [
                            "np.transpose(image.numpy(), (0, 2, 3, 1))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "source.shape[1:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_185": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out['mask'][:, i:i + 1].data.cpu().repeat(1, 3, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask, size=source.shape[1:3])",
                            "Call"
                        ],
                        [
                            "np.transpose(mask.numpy(), (0, 2, 3, 1))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "source.shape[1:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "modules/dense_motion.py": {
        "torch": {
            "Conv2d_18": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hourglass.out_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_kp + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "heatmap.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "spatial_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "spatial_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "heatmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zeros, heatmap]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "sparse_motions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[identity_grid, driving_to_source]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_77": {
                "variable": {
                    "value": "sparse_deformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_repeat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "source_image.unsqueeze(1).unsqueeze(1).repeat(1, self.num_kp + 1, 1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "source_repeat.view(bs * (self.num_kp + 1), -1, h, w)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "sparse_motions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([identity_grid, driving_to_source], dim=1)",
                            "Call"
                        ],
                        [
                            "sparse_motions.view((bs * (self.num_kp + 1), h, w, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_93": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[heatmap_representation, deformed_source]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_99": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mask(prediction)",
                            "Call"
                        ],
                        [
                            "F.softmax(mask, dim=1)",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.occlusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hourglass.out_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "variable": {
                    "value": "jacobian",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kp_source['jacobian']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.inverse(kp_driving['jacobian'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_59": {
                "variable": {
                    "value": "coordinate_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "jacobian",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(kp_source['jacobian'], torch.inverse(kp_driving['jacobian']))",
                            "Call"
                        ],
                        [
                            "jacobian.unsqueeze(-3).unsqueeze(-3)",
                            "Call"
                        ],
                        [
                            "jacobian.repeat(1, 1, h, w, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "coordinate_grid.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_110": {
                "variable": {
                    "value": "occlusion_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.occlusion(prediction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_56": {
                "input": {
                    "value": "kp_driving['jacobian']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "modules/discriminator.py": {
        "torch": {
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "leaky_relu_30": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, (2, 2))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "torch.cat([out, heatmap], dim=1)",
                            "Call"
                        ],
                        [
                            "feature_maps[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.down_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "down_blocks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.down_blocks[-1].conv.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleDict_85": {
                "variable": {
                    "value": "self.discs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "discs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "spectral_norm_17": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_20": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_32": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, (2, 2))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "torch.cat([out, heatmap], dim=1)",
                            "Call"
                        ],
                        [
                            "feature_maps[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "spectral_norm_55": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, heatmap]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "modules/generator.py": {
        "torch": {
            "ModuleList_32": {
                "variable": {
                    "value": "self.down_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "down_blocks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "self.up_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "up_blocks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "block_expansion",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_93": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.first(source_image)",
                            "Call"
                        ],
                        [
                            "self.down_blocks[i](out)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(out)",
                            "Call"
                        ],
                        [
                            "self.deform_input(out, deformation)",
                            "Call"
                        ],
                        [
                            "self.up_blocks[i](out)",
                            "Call"
                        ],
                        [
                            "self.final(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "out * occlusion_map",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_55": {
                "variable": {
                    "value": "deformation",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "deformation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deformation.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(deformation, size=(h, w), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "deformation.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "dense_motion['deformation']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_57": {
                "input": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "deformation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deformation.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(deformation, size=(h, w), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "deformation.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "dense_motion['deformation']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "interpolate_83": {
                "variable": {
                    "value": "occlusion_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occlusion_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dense_motion['occlusion_map']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "F.interpolate(occlusion_map, size=out.shape[2:], mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "out.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "modules/keypoint_detector.py": {
        "torch": {
            "Conv2d_20": {
                "variable": {
                    "value": "self.kp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.predictor.out_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_kp",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_58": {
                "variable": {
                    "value": "heatmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmap / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.jacobian",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.predictor.out_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * self.num_jacobian_maps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_28": {
                "data": {
                    "value": "[1, 0, 0, 1] * self.num_jacobian_maps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "modules/model.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(np.array([0.485, 0.456, 0.406]).reshape((1, 3, 1, 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(np.array([0.229, 0.224, 0.225]).reshape((1, 3, 1, 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleDict_62": {
                "variable": {
                    "value": "self.downs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "downs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "normal_76": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "kwargs['sigma_affine'] * torch.ones([bs, 2, 3])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_117": {
                "variable": {
                    "value": "grad_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "new_coordinates[..., 0].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "coordinates",
                    "type": "Variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_118": {
                "variable": {
                    "value": "grad_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "new_coordinates[..., 1].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "coordinates",
                    "type": "Variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "jacobian",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grad_x[0].unsqueeze(-2), grad_y[0].unsqueeze(-2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normal_84": {
                "variable": {
                    "value": "self.control_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "kwargs['sigma_tps'] * torch.ones([bs, 1, kwargs['points_tps'] ** 2])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grid_sample_93": {
                "input": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "make_coordinate_grid(frame.shape[2:], type=frame.type()).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "grid.view(1, frame.shape[2] * frame.shape[3], 2)",
                            "Call"
                        ],
                        [
                            "self.warp_coordinates(grid).view(self.bs, frame.shape[2], frame.shape[3], 2)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "reflection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_105": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coordinates.view(coordinates.shape[0], -1, 1, 2) - control_points.view(1, 1, -1, 2)",
                            "BinOp"
                        ],
                        [
                            "torch.abs(distances).sum(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_105": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_77": {
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "input": {
                    "value": "theta[:, :, :, :2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "coordinates.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_205": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kp_driving['value'] - transform.warp_coordinates(transformed_kp['value'])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_205": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_210": {
                "variable": {
                    "value": "jacobian_transformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transform.jacobian(transformed_kp['value'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "transformed_kp['jacobian']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "inverse_213": {
                "variable": {
                    "value": "normed_driving",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kp_driving['jacobian']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_215": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normed_driving",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.inverse(kp_driving['jacobian'])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "normed_transformed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "jacobian_transformed",
                            "Name"
                        ]
                    ]
                }
            },
            "eye_217": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_219": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eye - value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_219": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_108": {
                "input": {
                    "value": "distances + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_170": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_vgg[i] - y_vgg[i].detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_170": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_76": {
                "*size": {
                    "value": "[bs, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_191": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_191": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_85": {
                "*size": {
                    "value": "[bs, 1, kwargs['points_tps'] ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "modules/util.py": {
        "torch": {
            "exp_28": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 * (mean_sub ** 2).sum(-1) / kp_variance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_38": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_39": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "meshed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xx.unsqueeze_(2), yy.unsqueeze_(2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * round(sigma * 4) + 1",
                            "BinOp"
                        ],
                        [
                            "[kernel_size, kernel_size]",
                            "List"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * round(sigma * 4) + 1",
                            "BinOp"
                        ],
                        [
                            "[kernel_size, kernel_size]",
                            "List"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_68": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-0.5 * (mean_sub ** 2).sum(-1) / kp_variance)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.norm2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + x",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.pool(out)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "x.pop()",
                            "Call"
                        ],
                        [
                            "up_block(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out, skip], dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.ka, self.kb, self.ka, self.kb))",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, weight=self.weight, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "out[:, :, ::self.int_inv_scale, ::self.int_inv_scale]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_71": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-0.5 * (mean_sub ** 2).sum(-1) / kp_variance)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.norm2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + x",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.pool(out)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "x.pop()",
                            "Call"
                        ],
                        [
                            "up_block(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out, skip], dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.ka, self.kb, self.ka, self.kb))",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, weight=self.weight, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "out[:, :, ::self.int_inv_scale, ::self.int_inv_scale]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * round(sigma * 4) + 1",
                            "BinOp"
                        ],
                        [
                            "[kernel_size, kernel_size]",
                            "List"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_90": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(w).type(type)",
                            "Call"
                        ],
                        [
                            "2 * (x / (w - 1)) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-0.5 * (mean_sub ** 2).sum(-1) / kp_variance)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.norm2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + x",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.pool(out)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "x.pop()",
                            "Call"
                        ],
                        [
                            "up_block(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out, skip], dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.ka, self.kb, self.ka, self.kb))",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, weight=self.weight, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "out[:, :, ::self.int_inv_scale, ::self.int_inv_scale]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * round(sigma * 4) + 1",
                            "BinOp"
                        ],
                        [
                            "[kernel_size, kernel_size]",
                            "List"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AvgPool2d_107": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-0.5 * (mean_sub ** 2).sum(-1) / kp_variance)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.norm2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + x",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.pool(out)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "x.pop()",
                            "Call"
                        ],
                        [
                            "up_block(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out, skip], dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.ka, self.kb, self.ka, self.kb))",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, weight=self.weight, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "out[:, :, ::self.int_inv_scale, ::self.int_inv_scale]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * round(sigma * 4) + 1",
                            "BinOp"
                        ],
                        [
                            "[kernel_size, kernel_size]",
                            "List"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_131": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-0.5 * (mean_sub ** 2).sum(-1) / kp_variance)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.norm2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + x",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.pool(out)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "x.pop()",
                            "Call"
                        ],
                        [
                            "up_block(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out, skip], dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.ka, self.kb, self.ka, self.kb))",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, weight=self.weight, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "out[:, :, ::self.int_inv_scale, ::self.int_inv_scale]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_148": {
                "variable": {
                    "value": "self.down_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "down_blocks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_172": {
                "variable": {
                    "value": "self.up_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "up_blocks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "meshgrid_215": {
                "variable": {
                    "value": "meshgrids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(size, dtype=torch.float32) for size in kernel_size]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pad_241": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(self.ka, self.kb, self.ka, self.kb)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_242": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-0.5 * (mean_sub ** 2).sum(-1) / kp_variance)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.norm2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + x",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.pool(out)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "x.pop()",
                            "Call"
                        ],
                        [
                            "up_block(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out, skip], dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.ka, self.kb, self.ka, self.kb))",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, weight=self.weight, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "out[:, :, ::self.int_inv_scale, ::self.int_inv_scale]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_223": {
                "input": {
                    "value": "-(mgrid - mean) ** 2 / (2 * std ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_226": {
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "kernel * torch.exp(-(mgrid - mean) ** 2 / (2 * std ** 2))",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel.view(1, 1, *kernel.size())",
                            "Call"
                        ],
                        [
                            "kernel.repeat(channels, *[1] * (kernel.dim() - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_217": {
                "start": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reconstruction.py": {
        "torch": {
            "DataLoader_19": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_59": {
                "input": {
                    "value": "out['prediction'] - driving",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run.py": {
        "torch": {
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sync_batchnorm/batchnorm.py": {
        "torch": {
            "batch_norm_51": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sync_batchnorm/replicate.py": {
        "torch": {}
    },
    "sync_batchnorm/unittest.py": {
        "torch": {}
    },
    "train.py": {
        "torch": {
            "Adam_19": {
                "variable": {
                    "value": "optimizer_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "train_params['lr_generator']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['train_params']",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_20": {
                "variable": {
                    "value": "optimizer_discriminator",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "train_params['lr_discriminator']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['train_params']",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_21": {
                "variable": {
                    "value": "optimizer_kp_detector",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "kp_detector.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "train_params['lr_kp_detector']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['train_params']",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MultiStepLR_30": {
                "variable": {
                    "value": "scheduler_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_generator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(generator.parameters(), lr=train_params['lr_generator'], betas=(0.5, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "train_params['epoch_milestones']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "start_epoch - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MultiStepLR_32": {
                "variable": {
                    "value": "scheduler_discriminator",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_discriminator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(discriminator.parameters(), lr=train_params['lr_discriminator'], betas=(0.5, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "train_params['epoch_milestones']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "start_epoch - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MultiStepLR_34": {
                "variable": {
                    "value": "scheduler_kp_detector",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_kp_detector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(kp_detector.parameters(), lr=train_params['lr_kp_detector'], betas=(0.5, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "train_params['epoch_milestones']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1 + start_epoch * (train_params['lr_kp_detector'] != 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_39": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DatasetRepeater(dataset, train_params['num_repeats'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['train_params']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}