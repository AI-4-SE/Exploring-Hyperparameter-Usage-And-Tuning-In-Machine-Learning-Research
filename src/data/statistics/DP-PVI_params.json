{
    "data/preprocess_data.py": {
        "sklearn": {
            "Binarizer_84": {
                "variable": {
                    "value": "be",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "9.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "OrdinalEncoder_96": {
                "variable": {
                    "value": "oe",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ColumnTransformer_49": {
                "variable": {
                    "value": "preprocessor",
                    "type": "variable",
                    "possible_values": []
                },
                "transformers": {
                    "value": "[('num', numerical_transformer, config['numerical_features']), ('cat', categorical_transformer, config['categorical_features'])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "OrdinalEncoder_69": {
                "variable": {
                    "value": "oe",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_29": {
                "variable": {
                    "value": "numerical_transformer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_32": {
                "variable": {
                    "value": "numerical_transformer",
                    "type": "variable",
                    "possible_values": []
                },
                "with_mean": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "with_std": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "OneHotEncoder_35": {
                "variable": {
                    "value": "categorical_transformer",
                    "type": "variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Pipeline_37": {
                "variable": {
                    "value": "categorical_transformer",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('labeler', OrdinalEncoder()), ('scaler', StandardScaler())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Binarizer_108": {
                "threshold": {
                    "value": "20.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "as_float_array_85": {
                "X": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_float_array_108": {
                "X": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "OrdinalEncoder_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/client_level/client_level.py": {
        "torch": {
            "set_num_threads_118": {
                "int": {
                    "value": "int(ray_cfg['num_cpus'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_120": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/client_level/ingredients/data_distribution.py": {
        "torch": {}
    },
    "experiments/workshop/PVI_experiment.py": {
        "torch": {
            "set_num_threads_124": {
                "int": {
                    "value": "int(ray_cfg['num_cpus'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_126": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/workshop/batch_vi_experiment.py": {
        "torch": {
            "set_num_threads_105": {
                "int": {
                    "value": "int(ray_cfg['num_cpus'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_107": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/workshop/datapoint_experiment.py": {
        "torch": {
            "set_num_threads_116": {
                "int": {
                    "value": "int(ray_cfg['num_cpus'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_118": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/workshop/dp_batch_vi_experiment.py": {
        "torch": {
            "set_num_threads_117": {
                "int": {
                    "value": "int(ray_cfg['num_cpus'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_119": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/workshop/ingredients/data_distribution.py": {
        "torch": {}
    },
    "src/client/client.py": {
        "torch": {}
    },
    "src/model/logistic_regression_models.py": {
        "torch": {
            "Parameter_95": {
                "variable": {
                    "value": "self.w_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_in, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "variable": {
                    "value": "self.w_log_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_in, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LogSigmoid_100": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_101": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_104": {
                "variable": {
                    "value": "self.normal_dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor([0], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor([1], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "self.N_full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "self.N_full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "N_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hyperparameters['N_full']",
                            "Subscript"
                        ],
                        [
                            "x_full.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_167": {
                "variable": {
                    "value": "mean_1d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x_full[mini_batch_indices, :], dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "self.w_mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_168": {
                "variable": {
                    "value": "cov_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(self.w_log_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_169": {
                "variable": {
                    "value": "cov_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(x, torch.mm(cov_mat, x.t()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_171": {
                "variable": {
                    "value": "p_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(mean_vars)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mv_201": {
                "variable": {
                    "value": "mean_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x_full[mini_batch_indices, :], dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "self.w_mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_202": {
                "variable": {
                    "value": "cov_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(self.w_log_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_203": {
                "variable": {
                    "value": "std_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(torch.mm(x, torch.mm(cov_mat, x.t())))",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "flatten_206": {
                "variable": {
                    "value": "z_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.normal_dist.sample([self.N_samples])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mv_270": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x_full[mini_batch_indices, :], dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "w_nat_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameters['w_mu']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Bernoulli_273": {
                "variable": {
                    "value": "output_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.act(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_377": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x_full[mini_batch_indices, :], dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "self.w_mu.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "parameters_numpy['w_mu']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "self.w_log_var.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "parameters_numpy['w_log_var']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "self.prior_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "prior_params['w_mu']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "self.prior_log_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "prior_params['w_log_var']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_228": {
                "variable": {
                    "value": "q_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(q_log_var_diag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_230": {
                "variable": {
                    "value": "p_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_log_var_diag",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "diag_232": {
                "variable": {
                    "value": "p_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(p_log_var_diag)",
                            "Call"
                        ],
                        [
                            "1 / p_inv",
                            "BinOp"
                        ],
                        [
                            "torch.diag(p_inv)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_430": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_full[mini_batch_indices, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_431": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_full[mini_batch_indices]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "*size": {
                    "value": "self.n_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "*size": {
                    "value": "self.n_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_168": {
                "input": {
                    "value": "self.w_log_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_169": {
                "input": {
                    "value": "cov_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(torch.exp(self.w_log_var))",
                            "Call"
                        ],
                        [
                            "torch.diag(torch.exp(self.w_log_var))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "p_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._prediction_func(mu, var)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_202": {
                "input": {
                    "value": "self.w_log_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_203": {
                "input": {
                    "value": "torch.mm(x, torch.mm(cov_mat, x.t()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_209": {
                "equation": {
                    "value": "i,j->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "std_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(torch.diag(torch.mm(x, torch.mm(cov_mat, x.t()))), 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_104": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_203": {
                "input": {
                    "value": "cov_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(torch.exp(self.w_log_var))",
                            "Call"
                        ],
                        [
                            "torch.diag(torch.exp(self.w_log_var))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_228": {
                "input": {
                    "value": "q_log_var_diag",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_236": {
                "input": {
                    "value": "q_log_var_diag",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "einsum_252": {
                "equation": {
                    "value": "ij->i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.act(activation_mat * mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_235": {
                "input": {
                    "value": "p_log_var_diag",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trace_235": {
                "input": {
                    "value": "torch.mm(p_inv, q_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_235": {
                "input": {
                    "value": "m1_m2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_mean - q_mean",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mv(p_inv, m1_m2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_235": {
                "input": {
                    "value": "p_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(p_log_var_diag)",
                            "Call"
                        ],
                        [
                            "1 / p_inv",
                            "BinOp"
                        ],
                        [
                            "torch.diag(p_inv)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "q_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(torch.exp(q_log_var_diag))",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_235": {
                "input": {
                    "value": "p_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(p_log_var_diag)",
                            "Call"
                        ],
                        [
                            "1 / p_inv",
                            "BinOp"
                        ],
                        [
                            "torch.diag(p_inv)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "m1_m2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_mean - q_mean",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/model/reparam_logistic_regression_models.py": {
        "torch": {
            "Parameter_54": {
                "variable": {
                    "value": "self.w_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_in, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self.w_log_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_in, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LogSigmoid_59": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_60": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_63": {
                "variable": {
                    "value": "self.normal_dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor([0], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor([1], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "self.N_full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "self.N_full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "N_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hyperparameters['N_full']",
                            "Subscript"
                        ],
                        [
                            "x_full.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_126": {
                "variable": {
                    "value": "mean_1d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x_full[mini_batch_indices, :], dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "self.w_mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_127": {
                "variable": {
                    "value": "cov_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(10 * self.w_log_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_128": {
                "variable": {
                    "value": "cov_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(x, torch.mm(cov_mat, x.t()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_130": {
                "variable": {
                    "value": "p_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(mean_vars)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mv_160": {
                "variable": {
                    "value": "mean_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x_full[mini_batch_indices, :], dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "self.w_mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_161": {
                "variable": {
                    "value": "cov_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(10 * self.w_log_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_162": {
                "variable": {
                    "value": "std_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(torch.mm(x, torch.mm(cov_mat, x.t())))",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "flatten_165": {
                "variable": {
                    "value": "z_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.normal_dist.sample([self.N_samples])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mv_229": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x_full[mini_batch_indices, :], dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "w_nat_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameters['w_mu']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Bernoulli_232": {
                "variable": {
                    "value": "output_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.act(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_333": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x_full[mini_batch_indices, :], dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "self.w_mu.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "parameters_numpy['w_mu']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "self.w_log_var.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "parameters_numpy['w_log_var']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "self.prior_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "prior_params['w_mu']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "self.prior_log_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "prior_params['w_log_var']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_187": {
                "variable": {
                    "value": "q_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(q_log_var_diag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_189": {
                "variable": {
                    "value": "p_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_log_var_diag",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "diag_191": {
                "variable": {
                    "value": "p_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(p_log_var_diag)",
                            "Call"
                        ],
                        [
                            "1 / p_inv",
                            "BinOp"
                        ],
                        [
                            "torch.diag(p_inv)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_389": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_full[mini_batch_indices, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_390": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_full[mini_batch_indices]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "self.n_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "self.n_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_127": {
                "input": {
                    "value": "10 * self.w_log_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_128": {
                "input": {
                    "value": "cov_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(torch.exp(10 * self.w_log_var))",
                            "Call"
                        ],
                        [
                            "torch.diag(torch.exp(10 * self.w_log_var))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "p_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._prediction_func(mu, var)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_161": {
                "input": {
                    "value": "10 * self.w_log_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_162": {
                "input": {
                    "value": "torch.mm(x, torch.mm(cov_mat, x.t()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_168": {
                "equation": {
                    "value": "i,j->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "std_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(torch.diag(torch.mm(x, torch.mm(cov_mat, x.t()))), 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_63": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_162": {
                "input": {
                    "value": "cov_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(torch.exp(10 * self.w_log_var))",
                            "Call"
                        ],
                        [
                            "torch.diag(torch.exp(10 * self.w_log_var))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_187": {
                "input": {
                    "value": "q_log_var_diag",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_195": {
                "input": {
                    "value": "q_log_var_diag",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "einsum_211": {
                "equation": {
                    "value": "ij->i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.act(activation_mat * mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_194": {
                "input": {
                    "value": "p_log_var_diag",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trace_194": {
                "input": {
                    "value": "torch.mm(p_inv, q_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_194": {
                "input": {
                    "value": "m1_m2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_mean - q_mean",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mv(p_inv, m1_m2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_194": {
                "input": {
                    "value": "p_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(p_log_var_diag)",
                            "Call"
                        ],
                        [
                            "1 / p_inv",
                            "BinOp"
                        ],
                        [
                            "torch.diag(p_inv)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "q_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(torch.exp(q_log_var_diag))",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_194": {
                "input": {
                    "value": "p_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(p_log_var_diag)",
                            "Call"
                        ],
                        [
                            "1 / p_inv",
                            "BinOp"
                        ],
                        [
                            "torch.diag(p_inv)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "m1_m2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_mean - q_mean",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/privacy/analysis/privacy_ledger.py": {
        "torch": {
            "Tensor_81": {}
        }
    },
    "src/privacy/dp_query/dp_query.py": {
        "torch": {}
    },
    "src/privacy/dp_query/gaussian_query.py": {
        "torch": {
            "sqrt_66": {
                "variable": {
                    "value": "l2_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nest.reduce_structure(lambda p: torch.norm(torch.flatten(p), p=2) ** 2, torch.add, record)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "l2_norm_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "variable"
                        ],
                        [
                            "params",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "noise_stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_73": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.abs(l2_norm / l2_norm_clip)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_77": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_66": {
                "input": {
                    "value": "torch.flatten(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_73": {
                "input": {
                    "value": "l2_norm / l2_norm_clip",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_66": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/privacy/optimizer/dp_optimizer.py": {
        "torch": {
            "sum_91": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss_per_example(self.model(x), y)",
                            "Call"
                        ],
                        [
                            "self.loss_per_example(self.model(x), y)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_187": {
                "variable": {
                    "value": "grad_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_193": {
                "variable": {
                    "value": "norms[ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((grad, grad_t))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_231": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss_per_example(self.model(x), y)",
                            "Call"
                        ],
                        [
                            "self.loss_per_example(self.model(x), y)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_190": {
                "variable": {
                    "value": "grad_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grad, grad_t)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/privacy/optimizer/standard_optimizer.py": {
        "torch": {
            "sum_17": {
                "variable": {
                    "value": "self._total_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss_per_example(self.model(X), y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/torch_tensor_buffer.py": {
        "torch": {
            "zeros_26": {
                "variable": {
                    "value": "self._buffer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(shape)",
                            "Call"
                        ],
                        [
                            "[capacity] + shape",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "self._current_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "self._capacity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[capacity]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_38": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._buffer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "self._buffer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._buffer, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}