{
    "cnn_gauge.py": {
        "sklearn": {
            "train_test_split_33": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "cnn_ice.py": {
        "sklearn": {
            "train_test_split_31": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "mlp_ising.py": {
        "sklearn": {
            "train_test_split_39": {
                "variable": {
                    "value": "(X_hex_train, X_hex_test, y_hex_train, y_hex_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_hex",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_hex",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "classification_report_62": {
                "y_true": {
                    "value": "np.argmax(y_hex_test, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_hex_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(model.predict(X_hex_test), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_65": {
                "y_true": {
                    "value": "np.argmax(y_tri, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_tri_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(model.predict(X_tri), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_68": {
                "y_true": {
                    "value": "np.argmax(y_sq, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_sq_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(model.predict(X_sq), axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}