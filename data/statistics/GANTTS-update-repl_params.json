{
    "train.py": {
        "sklearn": {
            "train_test_split_88": {
                "variable": {
                    "value": "(train_files, test_files)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "npy_files",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.112",
                            "float"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "int"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "is_available_68": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_183": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VCDataset(X_train_cache_dataset, Y_train_cache_dataset, data_mean, data_std)",
                            "Call"
                        ],
                        [
                            "TTSDataset(X_train_cache_dataset, Y_train_cache_dataset, X_data_min, X_data_max, Y_data_mean, Y_data_std)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "hp.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "hp.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "hp.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_193": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VCDataset(X_test_cache_dataset, Y_test_cache_dataset, data_mean, data_std)",
                            "Call"
                        ],
                        [
                            "TTSDataset(X_test_cache_dataset, Y_test_cache_dataset, X_data_min, X_data_max, Y_data_mean, Y_data_std)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "hp.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "hp.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "hp.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_212": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VCDataset(X_train_cache_dataset, Y_train_cache_dataset, data_mean, data_std)",
                            "Call"
                        ],
                        [
                            "TTSDataset(X_train_cache_dataset, Y_train_cache_dataset, X_data_min, X_data_max, Y_data_mean, Y_data_std)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "hp.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "hp.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "hp.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_223": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VCDataset(X_test_cache_dataset, Y_test_cache_dataset, data_mean, data_std)",
                            "Call"
                        ],
                        [
                            "TTSDataset(X_test_cache_dataset, Y_test_cache_dataset, X_data_min, X_data_max, Y_data_mean, Y_data_std)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "hp.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "hp.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "hp.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_453": {
                "variable": {
                    "value": "Y_data_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y_data_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P.meanvar(Y[phase])",
                            "Call"
                        ],
                        [
                            "dataset_loaders['train'].dataset.data_mean",
                            "Attribute"
                        ],
                        [
                            "dataset_loaders['train'].dataset.Y_data_mean",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(Y_data_mean)",
                            "Call"
                        ],
                        [
                            "Y_data_mean.cuda()",
                            "Call"
                        ],
                        [
                            "Y_data_mean",
                            "Method Argument"
                        ],
                        [
                            "Y_data_mean",
                            "Method Argument"
                        ],
                        [
                            "Y_data_mean",
                            "Method Argument"
                        ],
                        [
                            "Y_data_mean",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_454": {
                "variable": {
                    "value": "Y_data_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y_data_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sqrt(Y_data_var)",
                            "Call"
                        ],
                        [
                            "dataset_loaders['train'].dataset.data_std",
                            "Attribute"
                        ],
                        [
                            "dataset_loaders['train'].dataset.Y_data_std",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(Y_data_std)",
                            "Call"
                        ],
                        [
                            "Y_data_std.cuda()",
                            "Call"
                        ],
                        [
                            "Y_data_std",
                            "Method Argument"
                        ],
                        [
                            "Y_data_std",
                            "Method Argument"
                        ],
                        [
                            "Y_data_std",
                            "Method Argument"
                        ],
                        [
                            "Y_data_std",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_654": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join(checkpoint_dir, 'checkpoint_epoch{}_{}.pth'.format(epoch, name))",
                            "Call"
                        ],
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_166": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'global_epoch': epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join(checkpoint_dir, 'checkpoint_epoch{}_{}.pth'.format(epoch, name))",
                            "Call"
                        ],
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_255": {
                "variable": {
                    "value": "y_static_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y_static_adv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "y_hat_static_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y_hat_static_adv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__275": {
                "parameters": {
                    "value": "model_d.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_305": {
                "variable": {
                    "value": "y_hat_static_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y_hat_static_adv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__317": {
                "parameters": {
                    "value": "model_g.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_349": {
                "variable": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_hat.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, x.size(1) - y_hat.size(-2), 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_349": {
                "variable": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_494": {
                "variable": {
                    "value": "(sorted_lengths, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_505": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.max(input_lengths)",
                            "Call"
                        ],
                        [
                            "sorted_lengths[0]",
                            "Subscript"
                        ],
                        [
                            "max_len",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hp.generator_noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_512": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unit_variance_mlpg_matrix(hp.windows, max_len)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R)",
                            "Call"
                        ],
                        [
                            "R.cuda() if use_cuda else R",
                            "IfExp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_542": {
                "tensors": {
                    "value": "(x, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_269": {
                "input": {
                    "value": "D_real + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_270": {
                "input": {
                    "value": "1 - D_fake + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_307": {
                "input": {
                    "value": "model_d(y_hat_static_adv, lengths=lengths) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "hparams.py": {
        "tensorflow": {}
    },
    "evaluation_tts.py": {
        "torch": {
            "is_available_46": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_230": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "duration_checkpoint if hp == hp_duration else acoustic_checkpoint",
                            "IfExp"
                        ],
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_137": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hp.generator_noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_135": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_139": {
                "tensors": {
                    "value": "(x, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_162": {
                "ndarray": {
                    "value": "duration_linguistic_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fe.linguistic_features(hts_labels, binary_dict, continuous_dict, add_frame_features=hp_duration.add_frame_features, subphone_features=hp_duration.subphone_features).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "P.minmax_scale(duration_linguistic_features, X_min[ty], X_max[ty], feature_range=(0.01, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_216": {
                "ndarray": {
                    "value": "linguistic_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fe.linguistic_features(duration_modified_hts_labels, binary_dict, continuous_dict, add_frame_features=hp_acoustic.add_frame_features, subphone_features=hp_acoustic.subphone_features)",
                            "Call"
                        ],
                        [
                            "np.delete(linguistic_features, indices, axis=0)",
                            "Call"
                        ],
                        [
                            "P.minmax_scale(linguistic_features, X_min[ty], X_max[ty], feature_range=(0.01, 0.99))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "evaluation_vc.py": {
        "torch": {
            "from_numpy_74": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unit_variance_mlpg_matrix(hp.windows, T)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_118": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['<checkpoint>']",
                            "Subscript"
                        ],
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_66": {
                "ndarray": {
                    "value": "mc_scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P.scale(mc, data_mean, data_std)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(mc_scaled))",
                            "Call"
                        ],
                        [
                            "mc_scaled.view(1, -1, mc_scaled.size(-1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gantts/models.py": {
        "torch": {
            "LeakyReLU_37": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_38": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "static_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "118 // 2",
                            "Method Argument"
                        ],
                        [
                            "118 // 2",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "static_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "118 // 2",
                            "Method Argument"
                        ],
                        [
                            "118 // 2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_size, out_size) for (in_size, out_size) in zip(in_sizes, out_sizes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.last_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_49": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_79": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "static_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "118 // 2",
                            "Method Argument"
                        ],
                        [
                            "118 // 2",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "static_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "118 // 2",
                            "Method Argument"
                        ],
                        [
                            "118 // 2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_84": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.hidden2out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * self.num_direction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_87": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_128": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_size, out_size) for (in_size, out_size) in zip(in_sizes, out_sizes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.last_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_132": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_133": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_134": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "self.hidden2out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * self.num_direction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_156": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_175": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.hidden2out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * self.num_direction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_178": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_184": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(sequence, lengths, batch_first=True)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(sequence, lengths, batch_first=True)",
                            "Call"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.data.cpu().long().numpy()",
                            "Call"
                        ],
                        [
                            "lengths.data.cpu().long().numpy()",
                            "Call"
                        ],
                        [
                            "lengths.data.cpu().long().numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_187": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(inputs)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(output, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.hidden2out(output)",
                            "Call"
                        ],
                        [
                            "self.gru(sequence)",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.hidden2out(output)",
                            "Call"
                        ],
                        [
                            "self.gru(sequence)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(output, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.hidden2out(output)",
                            "Call"
                        ],
                        [
                            "self.lstm(sequence)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(output, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.hidden2out(output)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_198": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.hidden2out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * self.num_direction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ],
                        [
                            "118",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_201": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_207": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(sequence, lengths, batch_first=True)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(sequence, lengths, batch_first=True)",
                            "Call"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.data.cpu().long().numpy()",
                            "Call"
                        ],
                        [
                            "lengths.data.cpu().long().numpy()",
                            "Call"
                        ],
                        [
                            "lengths.data.cpu().long().numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_210": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(inputs)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(output, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.hidden2out(output)",
                            "Call"
                        ],
                        [
                            "self.gru(sequence)",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.hidden2out(output)",
                            "Call"
                        ],
                        [
                            "self.gru(sequence)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(output, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.hidden2out(output)",
                            "Call"
                        ],
                        [
                            "self.lstm(sequence)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(output, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.hidden2out(output)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_104": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(0) if x.dim() == 2 else x",
                            "IfExp"
                        ],
                        [
                            "self.dropout(self.relu(layer(x)))",
                            "Call"
                        ],
                        [
                            "self.last_linear(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0) if x.dim() == 2 else x",
                            "IfExp"
                        ],
                        [
                            "self.dropout(self.relu(layer(x)))",
                            "Call"
                        ],
                        [
                            "self.last_linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.data.cpu().long().numpy()",
                            "Call"
                        ],
                        [
                            "lengths.data.cpu().long().numpy()",
                            "Call"
                        ],
                        [
                            "lengths.data.cpu().long().numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_112": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(inputs)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(output, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.hidden2out(output)",
                            "Call"
                        ],
                        [
                            "self.gru(sequence)",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.hidden2out(output)",
                            "Call"
                        ],
                        [
                            "self.gru(sequence)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(output, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.hidden2out(output)",
                            "Call"
                        ],
                        [
                            "self.lstm(sequence)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(output, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.hidden2out(output)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "gantts/multistream.py": {
        "torch": {
            "cat_43": {
                "tensors": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "gantts/seqloss.py": {
        "torch": {
            "arange_13": {
                "variable": {
                    "value": "seq_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_length.data.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MSELoss_30": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_gantts.py": {
        "torch": {
            "from_numpy_32": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unit_variance_mlpg_matrix(windows, T)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R)",
                            "Call"
                        ],
                        [
                            "R.cuda()",
                            "Call"
                        ],
                        [
                            "unit_variance_mlpg_matrix(windows, T)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "63",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "63",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unit_variance_mlpg_matrix(windows, T)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R)",
                            "Call"
                        ],
                        [
                            "R.cuda()",
                            "Call"
                        ],
                        [
                            "unit_variance_mlpg_matrix(windows, T)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_30": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "118",
                            "int"
                        ],
                        [
                            "187",
                            "int"
                        ],
                        [
                            "187",
                            "int"
                        ]
                    ]
                }
            },
            "rand_40": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "118",
                            "int"
                        ],
                        [
                            "187",
                            "int"
                        ],
                        [
                            "187",
                            "int"
                        ]
                    ]
                }
            },
            "rand_42": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "static_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_109": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "118",
                            "int"
                        ],
                        [
                            "187",
                            "int"
                        ],
                        [
                            "187",
                            "int"
                        ]
                    ]
                }
            },
            "rand_144": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "118",
                            "int"
                        ],
                        [
                            "187",
                            "int"
                        ],
                        [
                            "187",
                            "int"
                        ]
                    ]
                }
            }
        }
    }
}