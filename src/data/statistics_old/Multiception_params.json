{
    "dataset.py": {
        "tensorflow": {},
        "torch": {
            "DataLoader_44": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_cls(data_path, train=True, download=download, transform=transforms.Compose([transforms.RandomCrop(32, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalizer]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_cls(data_path, train=False, download=download, transform=transforms.Compose([transforms.ToTensor(), normalizer]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_cls(data_path, split='train', download=download, transform=transforms.Compose([transforms.RandomCrop(96, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalizer]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_cls(data_path, split='test', download=download, transform=transforms.Compose([transforms.ToTensor(), normalizer]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_82": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ImageNet32Dataset(data_path + '/imagenet-tfr', True)",
                            "Call"
                        ],
                        [
                            "'cifar'",
                            "MethodArgument"
                        ],
                        [
                            "'cifar'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_84": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ImageNet32Dataset(data_path + '/imagenet-tfr', False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imagenet32dataset.py": {
        "tensorflow": {
            "parse_single_example_51": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "{'shape': tf.io.FixedLenFeature([3], tf.int64), 'data': tf.io.FixedLenFeature([], tf.string), 'label': tf.io.FixedLenFeature([1], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "cast_57": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(label, shape=[])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_58": {
                "variable": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.io.decode_raw(data, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [32, 32, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "make_one_shot_iterator_79": {
                "variable": {
                    "value": "itr",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "filenames.apply(tf.data.experimental.parallel_interleave(lambda filename: tf.data.TFRecordDataset(filename), cycle_length=16))",
                            "Call"
                        ],
                        [
                            "dset.shuffle(buffer_size=128 * 4)",
                            "Call"
                        ],
                        [
                            "dset.repeat()",
                            "Call"
                        ],
                        [
                            "dset.map(lambda x: self.parse_tfrecord_tf(x), num_parallel_calls=16)",
                            "Call"
                        ],
                        [
                            "dset.prefetch(256)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_57": {
                "tensor": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(label, shape=[]), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "parallel_interleave_70": {
                "map_func": {
                    "value": "lambda filename: tf.data.TFRecordDataset(filename)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "cycle_length": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_52": {
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_53": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_54": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordDataset_70": {
                "filenames": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "convolution.py": {
        "torch": {
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nin",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "nin",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self.seps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channel * len(kernels)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel * len(kernels)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "out_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_123": {
                "variable": {
                    "value": "xx",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(tuple(out), dim=self.axis)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.splitted_in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "sep",
                    "type": "Name",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kernels",
                            "Name"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_dict[kernel]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{1: 0, 3: 1, 5: 2, 7: 3}",
                            "Dict"
                        ],
                        [
                            "{1: 0, 3: 1, 5: 2, 7: 3}",
                            "Dict"
                        ]
                    ]
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "self.splitted_in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "splitted_out_channels[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.split_channels(out_channels, kernel_count)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_dict[ksize]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{1: 0, 3: 1, 5: 2, 7: 3}",
                            "Dict"
                        ],
                        [
                            "{1: 0, 3: 1, 5: 2, 7: 3}",
                            "Dict"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "splitted_out_channels[i] if out_channels == groups else groups",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataParallel_69": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ShakeResNet(args.convBN, args.depth, args.factor, args.label, cifar=cifarlike)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "se_resnet56(num_classes=args.label, reduction=8, convBN=args.convBN, cifar=cifarlike)",
                            "Call"
                        ],
                        [
                            "resnet20(num_classes=args.label, convBN=args.convBN, cifar=cifarlike)",
                            "Call"
                        ],
                        [
                            "resnet50(num_classes=args.label, convBN=args.convBN, cifar=cifarlike)",
                            "Call"
                        ],
                        [
                            "MobileNetV2(num_classes=args.label, convBN=args.convBN, large=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_74": {
                "variable": {
                    "value": "opt",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_79": {
                "variable": {
                    "value": "loss_func",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mobilenet.py": {
        "torch": {
            "Sequential_64": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_130": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1).reshape(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU6_39": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_111": {
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "self.last_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "num_features": {
                    "value": "oup",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "resnet.py": {
        "torch": {
            "ReLU_29": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplane",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplane",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_62": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "senet.py": {
        "torch": {
            "AdaptiveAvgPool2d_30": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplane",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1 if cifar else 2",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplane",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_90": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "shakenet.py": {
        "torch": {
            "Conv2d_64": {
                "variable": {
                    "value": "self.c_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_chs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_chs[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ShakeShake.apply(h1, h2, self.training)",
                            "Call"
                        ],
                        [
                            "self.c_in(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(h)",
                            "Call"
                        ],
                        [
                            "self.layer2(h)",
                            "Call"
                        ],
                        [
                            "self.layer3(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, 8)",
                            "Call"
                        ],
                        [
                            "h.view(-1, self.in_chs[3])",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(h, 1)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc_out(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_88": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ShakeShake.apply(h1, h2, self.training)",
                            "Call"
                        ],
                        [
                            "self.c_in(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(h)",
                            "Call"
                        ],
                        [
                            "self.layer2(h)",
                            "Call"
                        ],
                        [
                            "self.layer3(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, 8)",
                            "Call"
                        ],
                        [
                            "h.view(-1, self.in_chs[3])",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(h, 1)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc_out(h)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_91": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ShakeShake.apply(h1, h2, self.training)",
                            "Call"
                        ],
                        [
                            "self.c_in(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(h)",
                            "Call"
                        ],
                        [
                            "self.layer2(h)",
                            "Call"
                        ],
                        [
                            "self.layer3(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, 8)",
                            "Call"
                        ],
                        [
                            "h.view(-1, self.in_chs[3])",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(h, 1)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc_out(h)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "out_ch",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "shakeshake.py": {
        "torch": {
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_ch",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "avg_pool2d_57": {
                "variable": {
                    "value": "h1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h1, h2), 1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_60": {
                "variable": {
                    "value": "h2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.pad(h, (-1, 1, -1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_60": {
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h1, h2), 1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(-1, 1, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}