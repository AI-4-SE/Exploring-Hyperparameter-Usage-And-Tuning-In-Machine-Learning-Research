{
    "koalanet.py": {
        "tensorflow": {
            "shuffle_and_repeat_155": {
                "buffer_size": {
                    "value": "len(data.list_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unbatch_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ops.py": {
        "tensorflow": {
            "conv2d_81": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "k_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_sz",
                            "Method Argument"
                        ],
                        [
                            "k_sz",
                            "Method Argument"
                        ],
                        [
                            "k_sz",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "k_sz",
                            "Method Argument"
                        ],
                        [
                            "k_sz",
                            "Method Argument"
                        ],
                        [
                            "k_sz",
                            "Method Argument"
                        ],
                        [
                            "k_sz",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer(uniform=False)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer(uniform=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_88": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "k_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_sz",
                            "Method Argument"
                        ],
                        [
                            "k_sz",
                            "Method Argument"
                        ],
                        [
                            "k_sz",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "k_sz",
                            "Method Argument"
                        ],
                        [
                            "k_sz",
                            "Method Argument"
                        ],
                        [
                            "k_sz",
                            "Method Argument"
                        ],
                        [
                            "k_sz",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer(uniform=False)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer(uniform=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_94": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, pool_factor, pool_factor, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, pool_factor, pool_factor, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "extract_image_patches_104": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(img, [1, 1, 1, 1, factor * factor])",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, factor, factor, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "ksizes": {
                    "value": "(1, k_sz, k_sz, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "rates": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_105": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(img, [1, 1, 1, 1, factor * factor])",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, factor, factor, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "k_sz * k_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_106": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(img, [1, 1, 1, 1, factor * factor])",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, factor, factor, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_107": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(img, [1, 1, 1, 1, factor * factor])",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, factor, factor, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, 1, factor * factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_109": {
                "variable": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(kernel_2d, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(kernel_2d, axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_2d - tf.reduce_mean(kernel_2d, axis=3, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kernel_2d + 1.0 / k_sz ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.pad(kernel_2d, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'constant')",
                            "Call"
                        ],
                        [
                            "2.0 * (kernel_2d - kernel_min) / (kernel_max - kernel_min) - 1.0",
                            "BinOp"
                        ],
                        [
                            "nearest_neighbor(kernel_2d, scale)",
                            "Call"
                        ],
                        [
                            "tf.concat((kernel_2d, kernel_2d, kernel_2d), axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "k_sz * k_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(kernel_2d, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(kernel_2d, axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_2d - tf.reduce_mean(kernel_2d, axis=3, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kernel_2d + 1.0 / k_sz ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.pad(kernel_2d, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'constant')",
                            "Call"
                        ],
                        [
                            "2.0 * (kernel_2d - kernel_min) / (kernel_max - kernel_min) - 1.0",
                            "BinOp"
                        ],
                        [
                            "nearest_neighbor(kernel_2d, scale)",
                            "Call"
                        ],
                        [
                            "tf.concat((kernel_2d, kernel_2d, kernel_2d), axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_113": {
                "variable": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(kernel_2d, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(kernel_2d, axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_2d - tf.reduce_mean(kernel_2d, axis=3, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kernel_2d + 1.0 / k_sz ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.pad(kernel_2d, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'constant')",
                            "Call"
                        ],
                        [
                            "2.0 * (kernel_2d - kernel_min) / (kernel_max - kernel_min) - 1.0",
                            "BinOp"
                        ],
                        [
                            "nearest_neighbor(kernel_2d, scale)",
                            "Call"
                        ],
                        [
                            "tf.concat((kernel_2d, kernel_2d, kernel_2d), axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_114": {
                "variable": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(kernel_2d, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(kernel_2d, axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_2d - tf.reduce_mean(kernel_2d, axis=3, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kernel_2d + 1.0 / k_sz ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.pad(kernel_2d, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'constant')",
                            "Call"
                        ],
                        [
                            "2.0 * (kernel_2d - kernel_min) / (kernel_max - kernel_min) - 1.0",
                            "BinOp"
                        ],
                        [
                            "nearest_neighbor(kernel_2d, scale)",
                            "Call"
                        ],
                        [
                            "tf.concat((kernel_2d, kernel_2d, kernel_2d), axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, 1, 1, num_ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_115": {
                "variable": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(kernel_2d, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(kernel_2d, axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_2d - tf.reduce_mean(kernel_2d, axis=3, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kernel_2d + 1.0 / k_sz ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.pad(kernel_2d, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'constant')",
                            "Call"
                        ],
                        [
                            "2.0 * (kernel_2d - kernel_min) / (kernel_max - kernel_min) - 1.0",
                            "BinOp"
                        ],
                        [
                            "nearest_neighbor(kernel_2d, scale)",
                            "Call"
                        ],
                        [
                            "tf.concat((kernel_2d, kernel_2d, kernel_2d), axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_116": {
                "variable": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(kernel_2d, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(kernel_2d, axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_2d - tf.reduce_mean(kernel_2d, axis=3, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kernel_2d + 1.0 / k_sz ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.pad(kernel_2d, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'constant')",
                            "Call"
                        ],
                        [
                            "2.0 * (kernel_2d - kernel_min) / (kernel_max - kernel_min) - 1.0",
                            "BinOp"
                        ],
                        [
                            "nearest_neighbor(kernel_2d, scale)",
                            "Call"
                        ],
                        [
                            "tf.concat((kernel_2d, kernel_2d, kernel_2d), axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_118": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(img, [1, 1, 1, 1, factor * factor])",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, factor, factor, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(kernel_2d, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(kernel_2d, axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_2d - tf.reduce_mean(kernel_2d, axis=3, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kernel_2d + 1.0 / k_sz ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.pad(kernel_2d, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'constant')",
                            "Call"
                        ],
                        [
                            "2.0 * (kernel_2d - kernel_min) / (kernel_max - kernel_min) - 1.0",
                            "BinOp"
                        ],
                        [
                            "nearest_neighbor(kernel_2d, scale)",
                            "Call"
                        ],
                        [
                            "tf.concat((kernel_2d, kernel_2d, kernel_2d), axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_119": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(img, kernel_2d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(result, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(result, factor)",
                            "Call"
                        ],
                        [
                            "tf.multiply(img, kernel_2d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(result, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.multiply(img, kernel_2d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(result, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "depth_to_space_120": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(img, kernel_2d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(result, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(result, factor)",
                            "Call"
                        ],
                        [
                            "tf.multiply(img, kernel_2d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(result, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.multiply(img, kernel_2d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(result, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factor",
                            "Method Argument"
                        ],
                        [
                            "factor",
                            "Method Argument"
                        ],
                        [
                            "factor",
                            "Method Argument"
                        ],
                        [
                            "factor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "extract_image_patches_131": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(img, [1, 1, 1, 1, factor * factor])",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, factor, factor, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "ksizes": {
                    "value": "(1, k_sz, k_sz, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, factor, factor, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "rates": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_132": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(img, [1, 1, 1, 1, factor * factor])",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, factor, factor, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "k_sz * k_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_133": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(img, [1, 1, 1, 1, factor * factor])",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, factor, factor, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_136": {
                "variable": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(kernel_2d, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(kernel_2d, axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_2d - tf.reduce_mean(kernel_2d, axis=3, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kernel_2d + 1.0 / k_sz ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.pad(kernel_2d, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'constant')",
                            "Call"
                        ],
                        [
                            "2.0 * (kernel_2d - kernel_min) / (kernel_max - kernel_min) - 1.0",
                            "BinOp"
                        ],
                        [
                            "nearest_neighbor(kernel_2d, scale)",
                            "Call"
                        ],
                        [
                            "tf.concat((kernel_2d, kernel_2d, kernel_2d), axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_137": {
                "variable": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(kernel_2d, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(kernel_2d, axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_2d - tf.reduce_mean(kernel_2d, axis=3, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kernel_2d + 1.0 / k_sz ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.pad(kernel_2d, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'constant')",
                            "Call"
                        ],
                        [
                            "2.0 * (kernel_2d - kernel_min) / (kernel_max - kernel_min) - 1.0",
                            "BinOp"
                        ],
                        [
                            "nearest_neighbor(kernel_2d, scale)",
                            "Call"
                        ],
                        [
                            "tf.concat((kernel_2d, kernel_2d, kernel_2d), axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, 1, num_ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_139": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(img, [1, 1, 1, 1, factor * factor])",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, factor, factor, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(kernel_2d, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(kernel_2d, axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_2d - tf.reduce_mean(kernel_2d, axis=3, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kernel_2d + 1.0 / k_sz ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.pad(kernel_2d, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'constant')",
                            "Call"
                        ],
                        [
                            "2.0 * (kernel_2d - kernel_min) / (kernel_max - kernel_min) - 1.0",
                            "BinOp"
                        ],
                        [
                            "nearest_neighbor(kernel_2d, scale)",
                            "Call"
                        ],
                        [
                            "tf.concat((kernel_2d, kernel_2d, kernel_2d), axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_140": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(img, kernel_2d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(result, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(result, factor)",
                            "Call"
                        ],
                        [
                            "tf.multiply(img, kernel_2d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(result, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.multiply(img, kernel_2d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(result, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "extract_image_patches_151": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(img, [1, 1, 1, 1, factor * factor])",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, factor, factor, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "ksizes": {
                    "value": "(1, k_sz, k_sz, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "rates": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_152": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(img, [1, 1, 1, 1, factor * factor])",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, factor, factor, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "k_sz * k_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_153": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(img, [1, 1, 1, 1, factor * factor])",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, factor, factor, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_156": {
                "variable": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(kernel_2d, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(kernel_2d, axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_2d - tf.reduce_mean(kernel_2d, axis=3, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kernel_2d + 1.0 / k_sz ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.pad(kernel_2d, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'constant')",
                            "Call"
                        ],
                        [
                            "2.0 * (kernel_2d - kernel_min) / (kernel_max - kernel_min) - 1.0",
                            "BinOp"
                        ],
                        [
                            "nearest_neighbor(kernel_2d, scale)",
                            "Call"
                        ],
                        [
                            "tf.concat((kernel_2d, kernel_2d, kernel_2d), axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_157": {
                "variable": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(kernel_2d, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(kernel_2d, axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_2d - tf.reduce_mean(kernel_2d, axis=3, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kernel_2d + 1.0 / k_sz ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.pad(kernel_2d, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'constant')",
                            "Call"
                        ],
                        [
                            "2.0 * (kernel_2d - kernel_min) / (kernel_max - kernel_min) - 1.0",
                            "BinOp"
                        ],
                        [
                            "nearest_neighbor(kernel_2d, scale)",
                            "Call"
                        ],
                        [
                            "tf.concat((kernel_2d, kernel_2d, kernel_2d), axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, 1, num_ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_159": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(img, [1, 1, 1, 1, factor * factor])",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, factor, factor, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_image_patches(img, ksizes=(1, k_sz, k_sz, 1), strides=(1, 1, 1, 1), rates=(1, 1, 1, 1), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.split(img, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(img, axis=3)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(kernel_2d, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(kernel_2d, axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_2d - tf.reduce_mean(kernel_2d, axis=3, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kernel_2d + 1.0 / k_sz ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.pad(kernel_2d, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'constant')",
                            "Call"
                        ],
                        [
                            "2.0 * (kernel_2d - kernel_min) / (kernel_max - kernel_min) - 1.0",
                            "BinOp"
                        ],
                        [
                            "nearest_neighbor(kernel_2d, scale)",
                            "Call"
                        ],
                        [
                            "tf.concat((kernel_2d, kernel_2d, kernel_2d), axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_160": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(img, kernel_2d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(result, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(result, factor)",
                            "Call"
                        ],
                        [
                            "tf.multiply(img, kernel_2d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(result, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.multiply(img, kernel_2d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(result, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_176": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(x - y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_187": {
                "variable": {
                    "value": "rand_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "rand_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(rand_kernel, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "rand_kernel",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_188": {
                "variable": {
                    "value": "ds_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "base_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_kernel",
                            "Method Argument"
                        ]
                    ]
                },
                "filter": {
                    "value": "rand_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(rand_kernel, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "rand_kernel",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_194": {
                "variable": {
                    "value": "ds_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ds_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.depthwise_conv2d(base_kernel, filter=rand_kernel, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ds_kernel, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ds_kernel, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(ds_kernel, [1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(ds_kernel, batch_size, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat(ds_kernel, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ds_kernel, 3)",
                            "Call"
                        ],
                        [
                            "ds_kernel",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_195": {
                "variable": {
                    "value": "ds_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ds_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.depthwise_conv2d(base_kernel, filter=rand_kernel, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ds_kernel, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ds_kernel, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(ds_kernel, [1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(ds_kernel, batch_size, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat(ds_kernel, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ds_kernel, 3)",
                            "Call"
                        ],
                        [
                            "ds_kernel",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_196": {
                "variable": {
                    "value": "ds_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ds_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.depthwise_conv2d(base_kernel, filter=rand_kernel, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ds_kernel, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ds_kernel, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(ds_kernel, [1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(ds_kernel, batch_size, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat(ds_kernel, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ds_kernel, 3)",
                            "Call"
                        ],
                        [
                            "ds_kernel",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, num_ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_197": {
                "variable": {
                    "value": "ds_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "ds_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.depthwise_conv2d(base_kernel, filter=rand_kernel, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ds_kernel, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ds_kernel, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(ds_kernel, [1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(ds_kernel, batch_size, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat(ds_kernel, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ds_kernel, 3)",
                            "Call"
                        ],
                        [
                            "ds_kernel",
                            "Method Argument"
                        ]
                    ]
                },
                "num": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_198": {
                "variable": {
                    "value": "ds_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "ds_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.depthwise_conv2d(base_kernel, filter=rand_kernel, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ds_kernel, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ds_kernel, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(ds_kernel, [1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(ds_kernel, batch_size, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat(ds_kernel, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ds_kernel, 3)",
                            "Call"
                        ],
                        [
                            "ds_kernel",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_199": {
                "variable": {
                    "value": "ds_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ds_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.depthwise_conv2d(base_kernel, filter=rand_kernel, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ds_kernel, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ds_kernel, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(ds_kernel, [1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(ds_kernel, batch_size, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat(ds_kernel, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ds_kernel, 3)",
                            "Call"
                        ],
                        [
                            "ds_kernel",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_201": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hr",
                            "Method Argument"
                        ]
                    ]
                },
                "num": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_202": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unstack(hr, batch_size, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(lr, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(lr, 0)",
                            "Call"
                        ],
                        [
                            "tf.pad(lr, [[0, 0], [pad_l, pad_r], [pad_l, pad_r], [0, 0]], 'symmetric')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(lr, filter=ds_kernel, strides=[1, factor, factor, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.split(lr, batch_size, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat(lr, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_203": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unstack(hr, batch_size, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(lr, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(lr, 0)",
                            "Call"
                        ],
                        [
                            "tf.pad(lr, [[0, 0], [pad_l, pad_r], [pad_l, pad_r], [0, 0]], 'symmetric')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(lr, filter=ds_kernel, strides=[1, factor, factor, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.split(lr, batch_size, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat(lr, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_204": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unstack(hr, batch_size, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(lr, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(lr, 0)",
                            "Call"
                        ],
                        [
                            "tf.pad(lr, [[0, 0], [pad_l, pad_r], [pad_l, pad_r], [0, 0]], 'symmetric')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(lr, filter=ds_kernel, strides=[1, factor, factor, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.split(lr, batch_size, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat(lr, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_l, pad_r], [pad_l, pad_r], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "symmetric",
                    "type": "str",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_205": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unstack(hr, batch_size, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(lr, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(lr, 0)",
                            "Call"
                        ],
                        [
                            "tf.pad(lr, [[0, 0], [pad_l, pad_r], [pad_l, pad_r], [0, 0]], 'symmetric')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(lr, filter=ds_kernel, strides=[1, factor, factor, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.split(lr, batch_size, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat(lr, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "ds_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.depthwise_conv2d(base_kernel, filter=rand_kernel, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ds_kernel, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ds_kernel, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(ds_kernel, [1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(ds_kernel, batch_size, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat(ds_kernel, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ds_kernel, 3)",
                            "Call"
                        ],
                        [
                            "ds_kernel",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, factor, factor, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_206": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unstack(hr, batch_size, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(lr, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(lr, 0)",
                            "Call"
                        ],
                        [
                            "tf.pad(lr, [[0, 0], [pad_l, pad_r], [pad_l, pad_r], [0, 0]], 'symmetric')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(lr, filter=ds_kernel, strides=[1, factor, factor, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.split(lr, batch_size, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat(lr, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_207": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unstack(hr, batch_size, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(lr, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(lr, 0)",
                            "Call"
                        ],
                        [
                            "tf.pad(lr, [[0, 0], [pad_l, pad_r], [pad_l, pad_r], [0, 0]], 'symmetric')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(lr, filter=ds_kernel, strides=[1, factor, factor, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.split(lr, batch_size, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat(lr, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_214": {
                "variable": {
                    "value": "kernel_1d",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "flattened_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flattened_kernel",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[3, 1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_215": {
                "variable": {
                    "value": "kernel_1d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel_1d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(flattened_kernel, [3, 1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(kernel_1d, [batch_size, 1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_233": {
                "variable": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(kernel_2d, kernel_2d, kernel_2d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_238": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, factor * factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "depth_to_space_239": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(x, [1, 1, 1, factor * factor])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(y, factor)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "block_size": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factor",
                            "Method Argument"
                        ],
                        [
                            "factor",
                            "Method Argument"
                        ],
                        [
                            "factor",
                            "Method Argument"
                        ],
                        [
                            "factor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_21": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res_block(n, out_ch, 3, 'res_block/1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res_block(n, out_ch, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[n, skip]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res_block(n, out_ch, 3, 'res_block/1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_59": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(x), out_ch, k_sz)",
                            "Call"
                        ],
                        [
                            "conv2d(tf.nn.relu(n), out_ch, k_sz)",
                            "Call"
                        ],
                        [
                            "conv2d(x, out_ch, 3)",
                            "Call"
                        ],
                        [
                            "res_block(n, out_ch, 3, 'res_block/0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(res_block(n, out_ch, 3, 'res_block/1'))",
                            "Call"
                        ],
                        [
                            "max_pool(n, pool_factor)",
                            "Call"
                        ],
                        [
                            "conv2d(x, out_ch, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(res_block(n, out_ch, 3))",
                            "Call"
                        ],
                        [
                            "deconv2d(x, out_ch, 4, stride)",
                            "Call"
                        ],
                        [
                            "tf.concat([n, skip], 3)",
                            "Call"
                        ],
                        [
                            "conv2d(n, out_ch, 3)",
                            "Call"
                        ],
                        [
                            "res_block(n, out_ch, 3, 'res_block/0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(res_block(n, out_ch, 3, 'res_block/1'))",
                            "Call"
                        ],
                        [
                            "conv2d(tf.nn.relu(x), feat_ch, conv_k_sz)",
                            "Call"
                        ],
                        [
                            "conv2d(tf.nn.relu(n), feat_ch, conv_k_sz)",
                            "Call"
                        ],
                        [
                            "tf.multiply(n, mul_p)",
                            "Call"
                        ],
                        [
                            "local_conv_feat(n, filter_p, feat_ch, lc_k_sz)",
                            "Call"
                        ],
                        [
                            "x + n",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(conv2d(x, out_ch, k_sz))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2d(n, out_ch, k_sz))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_ch, k_sz, stride, 'same', kernel_initializer=init)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, out_ch, k_sz, stride, 'same', kernel_initializer=init)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, pool_factor, pool_factor, 1], [1, pool_factor, pool_factor, 1], 'SAME')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mul_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(kernel, feat_ch, conv_k_sz)",
                            "Call"
                        ],
                        [
                            "conv2d(tf.nn.relu(mul_p), feat_ch, conv_k_sz)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_68": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(x, out_ch, k_sz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_min_225": {
                "variable": {
                    "value": "kernel_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(kernel_2d, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(kernel_2d, axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_2d - tf.reduce_mean(kernel_2d, axis=3, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kernel_2d + 1.0 / k_sz ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.pad(kernel_2d, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'constant')",
                            "Call"
                        ],
                        [
                            "2.0 * (kernel_2d - kernel_min) / (kernel_max - kernel_min) - 1.0",
                            "BinOp"
                        ],
                        [
                            "nearest_neighbor(kernel_2d, scale)",
                            "Call"
                        ],
                        [
                            "tf.concat((kernel_2d, kernel_2d, kernel_2d), axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_227": {
                "variable": {
                    "value": "kernel_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(kernel_2d, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(kernel_2d, axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_2d - tf.reduce_mean(kernel_2d, axis=3, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kernel_2d + 1.0 / k_sz ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.pad(kernel_2d, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'constant')",
                            "Call"
                        ],
                        [
                            "2.0 * (kernel_2d - kernel_min) / (kernel_max - kernel_min) - 1.0",
                            "BinOp"
                        ],
                        [
                            "nearest_neighbor(kernel_2d, scale)",
                            "Call"
                        ],
                        [
                            "tf.concat((kernel_2d, kernel_2d, kernel_2d), axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_229": {
                "variable": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(kernel_2d, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(kernel_2d, axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_2d - tf.reduce_mean(kernel_2d, axis=3, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kernel_2d + 1.0 / k_sz ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.pad(kernel_2d, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'constant')",
                            "Call"
                        ],
                        [
                            "2.0 * (kernel_2d - kernel_min) / (kernel_max - kernel_min) - 1.0",
                            "BinOp"
                        ],
                        [
                            "nearest_neighbor(kernel_2d, scale)",
                            "Call"
                        ],
                        [
                            "tf.concat((kernel_2d, kernel_2d, kernel_2d), axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [padding, padding], [padding, padding], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Residual_block'",
                            "Method Argument"
                        ],
                        [
                            "'enc_block_res'",
                            "Method Argument"
                        ],
                        [
                            "'bottleneck_res'",
                            "Method Argument"
                        ],
                        [
                            "'dec_block_res'",
                            "Method Argument"
                        ],
                        [
                            "'KOALA_module'",
                            "Method Argument"
                        ],
                        [
                            "'condition'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Residual_block'",
                            "Method Argument"
                        ],
                        [
                            "'enc_block_res'",
                            "Method Argument"
                        ],
                        [
                            "'bottleneck_res'",
                            "Method Argument"
                        ],
                        [
                            "'dec_block_res'",
                            "Method Argument"
                        ],
                        [
                            "'KOALA_module'",
                            "Method Argument"
                        ],
                        [
                            "'condition'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Residual_block'",
                            "Method Argument"
                        ],
                        [
                            "'enc_block_res'",
                            "Method Argument"
                        ],
                        [
                            "'bottleneck_res'",
                            "Method Argument"
                        ],
                        [
                            "'dec_block_res'",
                            "Method Argument"
                        ],
                        [
                            "'KOALA_module'",
                            "Method Argument"
                        ],
                        [
                            "'condition'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Residual_block'",
                            "Method Argument"
                        ],
                        [
                            "'enc_block_res'",
                            "Method Argument"
                        ],
                        [
                            "'bottleneck_res'",
                            "Method Argument"
                        ],
                        [
                            "'dec_block_res'",
                            "Method Argument"
                        ],
                        [
                            "'KOALA_module'",
                            "Method Argument"
                        ],
                        [
                            "'condition'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "scope_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Residual_block0_'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Residual_block'",
                            "Method Argument"
                        ],
                        [
                            "'enc_block_res'",
                            "Method Argument"
                        ],
                        [
                            "'bottleneck_res'",
                            "Method Argument"
                        ],
                        [
                            "'dec_block_res'",
                            "Method Argument"
                        ],
                        [
                            "'KOALA_module'",
                            "Method Argument"
                        ],
                        [
                            "'condition'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Residual_block'",
                            "Method Argument"
                        ],
                        [
                            "'enc_block_res'",
                            "Method Argument"
                        ],
                        [
                            "'bottleneck_res'",
                            "Method Argument"
                        ],
                        [
                            "'dec_block_res'",
                            "Method Argument"
                        ],
                        [
                            "'KOALA_module'",
                            "Method Argument"
                        ],
                        [
                            "'condition'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_70": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(n, out_ch, k_sz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_166": {
                "input_tensor": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(kernel_2d, k_sz * k_sz, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack(kernel_2d, axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "tf.unstack(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(kernel_2d, axis=4)",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_normalize(kernel_2d, k_sz)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel_2d, [1, 1, 1, 1, num_ch])",
                            "Call"
                        ],
                        [
                            "kernel_2d - tf.reduce_mean(kernel_2d, axis=3, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kernel_2d + 1.0 / k_sz ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.pad(kernel_2d, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'constant')",
                            "Call"
                        ],
                        [
                            "2.0 * (kernel_2d - kernel_min) / (kernel_max - kernel_min) - 1.0",
                            "BinOp"
                        ],
                        [
                            "nearest_neighbor(kernel_2d, scale)",
                            "Call"
                        ],
                        [
                            "tf.concat((kernel_2d, kernel_2d, kernel_2d), axis=3)",
                            "Call"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ],
                        [
                            "kernel_2d",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_176": {
                "x": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_11": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_12": {
                "features": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(x), out_ch, k_sz)",
                            "Call"
                        ],
                        [
                            "conv2d(tf.nn.relu(n), out_ch, k_sz)",
                            "Call"
                        ],
                        [
                            "conv2d(x, out_ch, 3)",
                            "Call"
                        ],
                        [
                            "res_block(n, out_ch, 3, 'res_block/0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(res_block(n, out_ch, 3, 'res_block/1'))",
                            "Call"
                        ],
                        [
                            "max_pool(n, pool_factor)",
                            "Call"
                        ],
                        [
                            "conv2d(x, out_ch, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(res_block(n, out_ch, 3))",
                            "Call"
                        ],
                        [
                            "deconv2d(x, out_ch, 4, stride)",
                            "Call"
                        ],
                        [
                            "tf.concat([n, skip], 3)",
                            "Call"
                        ],
                        [
                            "conv2d(n, out_ch, 3)",
                            "Call"
                        ],
                        [
                            "res_block(n, out_ch, 3, 'res_block/0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(res_block(n, out_ch, 3, 'res_block/1'))",
                            "Call"
                        ],
                        [
                            "conv2d(tf.nn.relu(x), feat_ch, conv_k_sz)",
                            "Call"
                        ],
                        [
                            "conv2d(tf.nn.relu(n), feat_ch, conv_k_sz)",
                            "Call"
                        ],
                        [
                            "tf.multiply(n, mul_p)",
                            "Call"
                        ],
                        [
                            "local_conv_feat(n, filter_p, feat_ch, lc_k_sz)",
                            "Call"
                        ],
                        [
                            "x + n",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(conv2d(x, out_ch, k_sz))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2d(n, out_ch, k_sz))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_ch, k_sz, stride, 'same', kernel_initializer=init)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, out_ch, k_sz, stride, 'same', kernel_initializer=init)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, pool_factor, pool_factor, 1], [1, pool_factor, pool_factor, 1], 'SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_49": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_50": {
                "features": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tf.nn.relu(x), out_ch, k_sz)",
                            "Call"
                        ],
                        [
                            "conv2d(tf.nn.relu(n), out_ch, k_sz)",
                            "Call"
                        ],
                        [
                            "conv2d(x, out_ch, 3)",
                            "Call"
                        ],
                        [
                            "res_block(n, out_ch, 3, 'res_block/0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(res_block(n, out_ch, 3, 'res_block/1'))",
                            "Call"
                        ],
                        [
                            "max_pool(n, pool_factor)",
                            "Call"
                        ],
                        [
                            "conv2d(x, out_ch, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(res_block(n, out_ch, 3))",
                            "Call"
                        ],
                        [
                            "deconv2d(x, out_ch, 4, stride)",
                            "Call"
                        ],
                        [
                            "tf.concat([n, skip], 3)",
                            "Call"
                        ],
                        [
                            "conv2d(n, out_ch, 3)",
                            "Call"
                        ],
                        [
                            "res_block(n, out_ch, 3, 'res_block/0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(res_block(n, out_ch, 3, 'res_block/1'))",
                            "Call"
                        ],
                        [
                            "conv2d(tf.nn.relu(x), feat_ch, conv_k_sz)",
                            "Call"
                        ],
                        [
                            "conv2d(tf.nn.relu(n), feat_ch, conv_k_sz)",
                            "Call"
                        ],
                        [
                            "tf.multiply(n, mul_p)",
                            "Call"
                        ],
                        [
                            "local_conv_feat(n, filter_p, feat_ch, lc_k_sz)",
                            "Call"
                        ],
                        [
                            "x + n",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(conv2d(x, out_ch, k_sz))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2d(n, out_ch, k_sz))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_ch, k_sz, stride, 'same', kernel_initializer=init)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, out_ch, k_sz, stride, 'same', kernel_initializer=init)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, pool_factor, pool_factor, 1], [1, pool_factor, pool_factor, 1], 'SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_54": {
                "features": {
                    "value": "mul_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(kernel, feat_ch, conv_k_sz)",
                            "Call"
                        ],
                        [
                            "conv2d(tf.nn.relu(mul_p), feat_ch, conv_k_sz)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_57": {
                "features": {
                    "value": "filter_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(kernel, ker_ch, k_sz=1)",
                            "Call"
                        ],
                        [
                            "conv2d(tf.nn.relu(filter_p), lc_k_sz * lc_k_sz, k_sz=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "constant_53": {
                "variable": {
                    "value": "self.bicubic_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.bicubic_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.bicubic_size, self.bicubic_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_54": {
                "variable": {
                    "value": "self.bicubic_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bicubic_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_59": {
                "variable": {
                    "value": "(y, gaussian_kernel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "self.image_processing_py",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[img_path]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}