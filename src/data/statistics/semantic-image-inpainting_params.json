{
    "exporting/exportgraph.py": {
        "tensorflow": {
            "import_meta_graph_14": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "model_folder",
                    "type": "Variable",
                    "possible_values": []
                },
                "clear_devices": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_default_graph_24": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_54": {
                "variable": {
                    "value": "output_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "input_graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph.as_graph_def()",
                            "Call"
                        ]
                    ]
                },
                "output_node_names": {
                    "value": "onames",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output_nodes.split(',')",
                            "Call"
                        ],
                        [
                            "nnames",
                            "Name"
                        ]
                    ]
                }
            },
            "Session_50": {
                "graph": {
                    "value": "graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_default_graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_34": {
                "variable": {
                    "value": "_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "graph.get_tensor_by_name(o + ':0')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GFile_60": {
                "name": {
                    "value": "output_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_filename",
                            "Name"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/inpaint.py": {
        "tensorflow": {}
    },
    "src/model.py": {
        "tensorflow": {
            "Session_62": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_144": {
                "variable": {
                    "value": "numerator",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_145": {
                "variable": {
                    "value": "denominator",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(10, dtype=numerator.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "self.masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.image_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_154": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.image_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "images",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_158": {
                "variable": {
                    "value": "self.context_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.contrib.layers.flatten(tf.abs(tf.multiply(self.masks, self.go) - tf.multiply(self.masks, self.images)))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_172": {
                "variable": {
                    "value": "self.perceptual_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.perceptual_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "hessians_177": {
                "variable": {
                    "value": "self.generator_grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.inpaint_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.go",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_178": {
                "variable": {
                    "value": "self.inpaint_grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "tf.reduce_sum(self.inpaint_loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.gi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GraphDef_271": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_145": {
                "value": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "numerator.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_270": {
                "name": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_275": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "input_map": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "op_dict": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "producer_op_list": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "model_name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'dcgan'",
                            "MethodArgument"
                        ],
                        [
                            "'dcgan'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_159": {
                "structure": {
                    "value": "tf.abs(tf.multiply(self.masks, self.go) - tf.multiply(self.masks, self.images))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_178": {
                "input_tensor": {
                    "value": "self.inpaint_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_160": {
                "x": {
                    "value": "tf.multiply(self.masks, self.go) - tf.multiply(self.masks, self.images)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_162": {
                "x": {
                    "value": "self.masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/visgraph.py": {
        "tensorflow": {
            "GraphDef_12": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_11": {
                "name": {
                    "value": "../graphs/awesomegan-50k.pb",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_16": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "asdf",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}