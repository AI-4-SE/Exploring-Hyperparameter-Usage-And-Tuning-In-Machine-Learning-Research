{
    "layers.py": {
        "torch": {
            "Parameter_12": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "t.randn(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_26": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "input.div(degree_sqrt)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_27": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "input.div(degree_sqrt)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_44": {
                "variable": {
                    "value": "degree_sqrt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.matmul(adj, t.ones(adj.size(0), 1).cuda())",
                            "Call"
                        ],
                        [
                            "t.matmul(adj, t.ones(adj.size(0), 1))",
                            "Call"
                        ],
                        [
                            "t.matmul(adj, t.ones(adj.size(0), 1).cuda())",
                            "Call"
                        ],
                        [
                            "t.matmul(adj, t.ones(adj.size(0), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_45": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "input.div(degree_sqrt)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "input.div(degree_sqrt)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_62": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "input.div(degree_sqrt)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "input.div(degree_sqrt)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_14": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "t.randn(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_41": {
                "variable": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "t.ones(adj.size(0), 1).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "variable": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "t.ones(adj.size(0), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_59": {
                "variable": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "t.ones(adj.size(0), 1).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "variable": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "t.ones(adj.size(0), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_12": {
                "*size": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_14": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_41": {
                "*size": {
                    "value": "adj.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_43": {
                "*size": {
                    "value": "adj.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_59": {
                "*size": {
                    "value": "adj.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_61": {
                "*size": {
                    "value": "adj.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "matmul_52": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.matmul(adj, output)",
                            "Call"
                        ],
                        [
                            "output.div(degree)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_15": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Linear1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "t.ones(adj.size(0), 1).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "variable": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "t.ones(adj.size(0), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_16": {
                "input": {
                    "value": "self.Linear2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conlayer1(self.Linear1(x), adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conlayer2(self.Linear2(x), adj)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_35": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.Linear1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conlayer1(self.Linear1(x), adj))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conlayer2(self.Linear2(x), adj), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.Linear1(x))",
                            "Call"
                        ],
                        [
                            "self.Linear2(x)",
                            "Call"
                        ],
                        [
                            "conlayer(x, adj)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Linear1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.Linear1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conlayer1(self.Linear1(x), adj))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conlayer2(self.Linear2(x), adj), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.Linear1(x))",
                            "Call"
                        ],
                        [
                            "self.Linear2(x)",
                            "Call"
                        ],
                        [
                            "conlayer(x, adj)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_49": {
                "*size": {
                    "value": "adj.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_51": {
                "*size": {
                    "value": "adj.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_42": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.Linear1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conlayer1(self.Linear1(x), adj))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conlayer2(self.Linear2(x), adj), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.Linear1(x))",
                            "Call"
                        ],
                        [
                            "self.Linear2(x)",
                            "Call"
                        ],
                        [
                            "conlayer(x, adj)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_GCN.py": {
        "torch": {
            "Adam_37": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_52": {
                "variable": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_63": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_80": {
                "variable": {
                    "value": "loss_test",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_MC_base.py": {
        "torch": {
            "Adam_41": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_26": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_57": {
                "variable": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pre_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_batch)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nll_loss_70": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_89": {
                "variable": {
                    "value": "loss_test",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "from_numpy_124": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_126": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}