{
    "resnet50_dwt_mec_officehome.py": {
        "torch": {
            "load_367": {
                "variable": {
                    "value": "state_dict_",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiStepLR_398": {
                "variable": {
                    "value": "exp_lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD([{'params': rest_of_the_net_params}, {'params': final_layer_params, 'lr': args.lr}], lr=args.lr * 0.1, momentum=0.9, weight_decay=0.0005)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[6000]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_524": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_558": {
                "variable": {
                    "value": "source_trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "folder.ImageFolder(root=args.s_dset_path, transform=data_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.source_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_564": {
                "variable": {
                    "value": "target_trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "target_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "folder.ImageFolder(root=args.t_dset_path, transform=data_transform, transform_aug=data_transform_dup)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.source_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_571": {
                "variable": {
                    "value": "target_testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "target_dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "folder.ImageFolder(root=args.t_dset_path, transform=data_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_587": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': rest_of_the_net_params}, {'params': final_layer_params, 'lr': args.lr}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * 0.1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_176": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_271": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_287": {
                "variable": {
                    "value": "self.gamma1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.bn_dict['bn1.gamma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_288": {
                "variable": {
                    "value": "self.beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.bn_dict['bn1.beta']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_290": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_291": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_296": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_297": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "65",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_416": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(source_data, target_data, target_data_dup)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_421": {
                "variable": {
                    "value": "(source_output, target_output, target_output_dup)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "output.shape[0] // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_425": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(source_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "source_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(source_iter)",
                            "Call"
                        ],
                        [
                            "next(source_iter)",
                            "Call"
                        ],
                        [
                            "source_y.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_487": {
                "ndarray": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.warpAffine(np.transpose(x.numpy(), [1, 2, 0]), M, (cols, rows))",
                            "Call"
                        ],
                        [
                            "np.transpose(dst, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "cv2.GaussianBlur(x.numpy(), (ksize, ksize), sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_492": {
                "ndarray": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.warpAffine(np.transpose(x.numpy(), [1, 2, 0]), M, (cols, rows))",
                            "Call"
                        ],
                        [
                            "np.transpose(dst, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "cv2.GaussianBlur(x.numpy(), (ksize, ksize), sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_522": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.planes, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.planes, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "variable": {
                    "value": "self.gamma1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_dict['layer' + str(layer) + '.' + str(sub_layer) + '.bn1.gamma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_dict['layer' + str(layer) + '.' + str(sub_layer) + '.bn1.beta']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_104": {
                "variable": {
                    "value": "self.gamma1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_dict['layer' + str(layer) + '.' + str(sub_layer) + '.bn1.weight'].view(-1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_105": {
                "variable": {
                    "value": "self.beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_dict['layer' + str(layer) + '.' + str(sub_layer) + '.bn1.bias'].view(-1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self.gamma2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_dict['layer' + str(layer) + '.' + str(sub_layer) + '.bn2.gamma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_125": {
                "variable": {
                    "value": "self.beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_dict['layer' + str(layer) + '.' + str(sub_layer) + '.bn2.beta']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_139": {
                "variable": {
                    "value": "self.gamma2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_dict['layer' + str(layer) + '.' + str(sub_layer) + '.bn2.weight'].view(-1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_140": {
                "variable": {
                    "value": "self.beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_dict['layer' + str(layer) + '.' + str(sub_layer) + '.bn2.bias'].view(-1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_159": {
                "variable": {
                    "value": "self.gamma3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_dict['layer' + str(layer) + '.' + str(sub_layer) + '.bn3.gamma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_160": {
                "variable": {
                    "value": "self.beta3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_dict['layer' + str(layer) + '.' + str(sub_layer) + '.bn3.beta']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_174": {
                "variable": {
                    "value": "self.gamma3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_dict['layer' + str(layer) + '.' + str(sub_layer) + '.bn3.weight'].view(-1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_175": {
                "variable": {
                    "value": "self.beta3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_dict['layer' + str(layer) + '.' + str(sub_layer) + '.bn3.bias'].view(-1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_220": {
                "variable": {
                    "value": "(out_s, out_t, out_t_dup)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wh(x)",
                            "Call"
                        ],
                        [
                            "out * self.gamma + self.beta",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.bns1(out_s), torch.cat((self.bnt1(out_t), self.bnt1_aug(out_t_dup)), dim=0)), dim=0) * self.gamma1 + self.beta1",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.bns2(out_s), torch.cat((self.bnt2(out_t), self.bnt2_aug(out_t_dup)), dim=0)), dim=0) * self.gamma2 + self.beta2",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.bns3(out_s), torch.cat((self.bnt3(out_t), self.bnt3_aug(out_t_dup)), dim=0)), dim=0) * self.gamma3 + self.beta3",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bnt1(out) * self.gamma1 + self.beta1",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bnt2(out) * self.gamma2 + self.beta2",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bnt3(out) * self.gamma3 + self.beta3",
                            "BinOp"
                        ],
                        [
                            "out.clone() + identity",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "out.clone() + identity",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "out.shape[0] // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_225": {
                "variable": {
                    "value": "(out_s, out_t, out_t_dup)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wh(x)",
                            "Call"
                        ],
                        [
                            "out * self.gamma + self.beta",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.bns1(out_s), torch.cat((self.bnt1(out_t), self.bnt1_aug(out_t_dup)), dim=0)), dim=0) * self.gamma1 + self.beta1",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.bns2(out_s), torch.cat((self.bnt2(out_t), self.bnt2_aug(out_t_dup)), dim=0)), dim=0) * self.gamma2 + self.beta2",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.bns3(out_s), torch.cat((self.bnt3(out_t), self.bnt3_aug(out_t_dup)), dim=0)), dim=0) * self.gamma3 + self.beta3",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bnt1(out) * self.gamma1 + self.beta1",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bnt2(out) * self.gamma2 + self.beta2",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bnt3(out) * self.gamma3 + self.beta3",
                            "BinOp"
                        ],
                        [
                            "out.clone() + identity",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "out.clone() + identity",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "out.shape[0] // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_230": {
                "variable": {
                    "value": "(out_s, out_t, out_t_dup)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wh(x)",
                            "Call"
                        ],
                        [
                            "out * self.gamma + self.beta",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.bns1(out_s), torch.cat((self.bnt1(out_t), self.bnt1_aug(out_t_dup)), dim=0)), dim=0) * self.gamma1 + self.beta1",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.bns2(out_s), torch.cat((self.bnt2(out_t), self.bnt2_aug(out_t_dup)), dim=0)), dim=0) * self.gamma2 + self.beta2",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.bns3(out_s), torch.cat((self.bnt3(out_t), self.bnt3_aug(out_t_dup)), dim=0)), dim=0) * self.gamma3 + self.beta3",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bnt1(out) * self.gamma1 + self.beta1",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bnt2(out) * self.gamma2 + self.beta2",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bnt3(out) * self.gamma3 + self.beta3",
                            "BinOp"
                        ],
                        [
                            "out.clone() + identity",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "out.clone() + identity",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "out.shape[0] // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_319": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_330": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "split_335": {
                "variable": {
                    "value": "(x_s, x_t, x_t_dup)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.bns1(x_s), torch.cat((self.bnt1(x_t), self.bnt1_aug(x_t_dup)), dim=0)), dim=0) * self.gamma1 + self.beta1",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bnt1(x) * self.gamma1 + self.beta1",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "x.shape[0] // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_451": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_197": {
                "variable": {
                    "value": "self.downsample_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_dict['layer' + str(layer) + '.0.downsample_bn.gamma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_198": {
                "variable": {
                    "value": "self.downsample_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_dict['layer' + str(layer) + '.0.downsample_bn.beta']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_212": {
                "variable": {
                    "value": "self.downsample_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_dict['layer' + str(layer) + '.0.downsample_bn.weight'].view(-1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_213": {
                "variable": {
                    "value": "self.downsample_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_dict['layer' + str(layer) + '.0.downsample_bn.bias'].view(-1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_235": {
                "variable": {
                    "value": "(identity_s, identity_t, identity_t_dup)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.downsample_bns(identity_s), torch.cat((self.downsample_bnt(identity_t), self.downsample_bnt_aug(identity_t_dup)), dim=0)), dim=0) * self.downsample_gamma + self.downsample_beta",
                            "BinOp"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample_bnt(identity) * self.downsample_gamma + self.downsample_beta",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "identity.shape[0] // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_387": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data, data, data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_425": {
                "input": {
                    "value": "source_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(output, split_size_or_sections=output.shape[0] // 3, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_455": {
                "input": {
                    "value": "F.log_softmax(output, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_test_loader",
                            "variable"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_56": {
                "*size": {
                    "value": "self.planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "*size": {
                    "value": "self.planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_456": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_456": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_221": {
                "tensors": {
                    "value": "(self.bnt1(out_t), self.bnt1_aug(out_t_dup))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "tensors": {
                    "value": "(self.bnt2(out_t), self.bnt2_aug(out_t_dup))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_231": {
                "tensors": {
                    "value": "(self.bnt3(out_t), self.bnt3_aug(out_t_dup))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_336": {
                "tensors": {
                    "value": "(self.bnt1(x_t), self.bnt1_aug(x_t_dup))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_236": {
                "tensors": {
                    "value": "(self.downsample_bns(identity_s), torch.cat((self.downsample_bnt(identity_t), self.downsample_bnt_aug(identity_t_dup)), dim=0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_455": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_237": {
                "tensors": {
                    "value": "(self.downsample_bnt(identity_t), self.downsample_bnt_aug(identity_t_dup))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "usps_mnist.py": {
        "torch": {
            "device_352": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_355": {
                "variable": {
                    "value": "train_loader_mnist",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MNIST('../data/mnist', train=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize(mean=[0.1307], std=[0.3081])]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.source_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_363": {
                "variable": {
                    "value": "test_loader_mnist",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MNIST('../data/mnist', train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize(mean=[0.1307], std=[0.3081])]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_372": {
                "variable": {
                    "value": "train_loader_usps",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "USPS(root='../data/usps', train=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize(mean=[0.5], std=[0.5])]), download=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.target_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_380": {
                "variable": {
                    "value": "test_loader_usps",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "USPS(root='../data/usps', train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize(mean=[0.5], std=[0.5])]), download=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_389": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_390": {
                "variable": {
                    "value": "exp_lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=0.0005)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[50, 80]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_77": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.LongTensor([np.int64(label).item()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_153": {
                "variable": {
                    "value": "(self.data, self.targets)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.root, self.processed_folder, data_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_189": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(torch.cat((self.ws1(x_source), self.wt1(x_target)), dim=0) * self.gamma1 + self.beta1), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(torch.cat((self.ws2(x_source), self.wt2(x_target)), dim=0) * self.gamma2 + self.beta2), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat((self.bns3(x_source), self.bnt3(x_target)), dim=0) * self.gamma3 + self.beta3)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat((self.bns4(x_source), self.bnt4(x_target)), dim=0) * self.gamma4 + self.beta4)",
                            "Call"
                        ],
                        [
                            "self.fc5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.bns5(x_source), self.bnt5(x_target)), dim=0) * self.gamma5 + self.beta5",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.wt1(x) * self.gamma1 + self.beta1), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.wt2(x) * self.gamma2 + self.beta2), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bnt3(x) * self.gamma3 + self.beta3)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bnt4(x) * self.gamma4 + self.beta4)",
                            "Call"
                        ],
                        [
                            "self.fc5(x)",
                            "Call"
                        ],
                        [
                            "self.bnt5(x) * self.gamma5 + self.beta5",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_190": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(torch.cat((self.ws1(x_source), self.wt1(x_target)), dim=0) * self.gamma1 + self.beta1), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(torch.cat((self.ws2(x_source), self.wt2(x_target)), dim=0) * self.gamma2 + self.beta2), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat((self.bns3(x_source), self.bnt3(x_target)), dim=0) * self.gamma3 + self.beta3)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat((self.bns4(x_source), self.bnt4(x_target)), dim=0) * self.gamma4 + self.beta4)",
                            "Call"
                        ],
                        [
                            "self.fc5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.bns5(x_source), self.bnt5(x_target)), dim=0) * self.gamma5 + self.beta5",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.wt1(x) * self.gamma1 + self.beta1), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.wt2(x) * self.gamma2 + self.beta2), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bnt3(x) * self.gamma3 + self.beta3)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bnt4(x) * self.gamma4 + self.beta4)",
                            "Call"
                        ],
                        [
                            "self.fc5(x)",
                            "Call"
                        ],
                        [
                            "self.bnt5(x) * self.gamma5 + self.beta5",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_202": {
                "variable": {
                    "value": "self.gamma1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(32, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_203": {
                "variable": {
                    "value": "self.beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(32, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_206": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_209": {
                "variable": {
                    "value": "self.gamma2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(48, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_210": {
                "variable": {
                    "value": "self.beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(48, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_213": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2352",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_214": {
                "variable": {
                    "value": "self.bns3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_215": {
                "variable": {
                    "value": "self.bnt3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_216": {
                "variable": {
                    "value": "self.gamma3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_217": {
                "variable": {
                    "value": "self.beta3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_219": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_220": {
                "variable": {
                    "value": "self.bns4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_221": {
                "variable": {
                    "value": "self.bnt4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_222": {
                "variable": {
                    "value": "self.gamma4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_223": {
                "variable": {
                    "value": "self.beta4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_225": {
                "variable": {
                    "value": "self.fc5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_226": {
                "variable": {
                    "value": "self.bns5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_227": {
                "variable": {
                    "value": "self.bnt5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_228": {
                "variable": {
                    "value": "self.gamma5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_229": {
                "variable": {
                    "value": "self.beta5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_288": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(source_data, target_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_294": {
                "variable": {
                    "value": "(source_output, target_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "output.shape[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_298": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(source_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "source_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source[1]",
                            "Subscript"
                        ],
                        [
                            "source_y.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_351": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_235": {
                "variable": {
                    "value": "(x_source, x_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(torch.cat((self.ws1(x_source), self.wt1(x_target)), dim=0) * self.gamma1 + self.beta1), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(torch.cat((self.ws2(x_source), self.wt2(x_target)), dim=0) * self.gamma2 + self.beta2), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat((self.bns3(x_source), self.bnt3(x_target)), dim=0) * self.gamma3 + self.beta3)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat((self.bns4(x_source), self.bnt4(x_target)), dim=0) * self.gamma4 + self.beta4)",
                            "Call"
                        ],
                        [
                            "self.fc5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.bns5(x_source), self.bnt5(x_target)), dim=0) * self.gamma5 + self.beta5",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.wt1(x) * self.gamma1 + self.beta1), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.wt2(x) * self.gamma2 + self.beta2), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bnt3(x) * self.gamma3 + self.beta3)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bnt4(x) * self.gamma4 + self.beta4)",
                            "Call"
                        ],
                        [
                            "self.fc5(x)",
                            "Call"
                        ],
                        [
                            "self.bnt5(x) * self.gamma5 + self.beta5",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "x.shape[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_237": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(torch.cat((self.ws1(x_source), self.wt1(x_target)), dim=0) * self.gamma1 + self.beta1)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_240": {
                "variable": {
                    "value": "(x_source, x_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(torch.cat((self.ws1(x_source), self.wt1(x_target)), dim=0) * self.gamma1 + self.beta1), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(torch.cat((self.ws2(x_source), self.wt2(x_target)), dim=0) * self.gamma2 + self.beta2), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat((self.bns3(x_source), self.bnt3(x_target)), dim=0) * self.gamma3 + self.beta3)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat((self.bns4(x_source), self.bnt4(x_target)), dim=0) * self.gamma4 + self.beta4)",
                            "Call"
                        ],
                        [
                            "self.fc5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.bns5(x_source), self.bnt5(x_target)), dim=0) * self.gamma5 + self.beta5",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.wt1(x) * self.gamma1 + self.beta1), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.wt2(x) * self.gamma2 + self.beta2), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bnt3(x) * self.gamma3 + self.beta3)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bnt4(x) * self.gamma4 + self.beta4)",
                            "Call"
                        ],
                        [
                            "self.fc5(x)",
                            "Call"
                        ],
                        [
                            "self.bnt5(x) * self.gamma5 + self.beta5",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "x.shape[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_242": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(torch.cat((self.ws2(x_source), self.wt2(x_target)), dim=0) * self.gamma2 + self.beta2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_246": {
                "variable": {
                    "value": "(x_source, x_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(torch.cat((self.ws1(x_source), self.wt1(x_target)), dim=0) * self.gamma1 + self.beta1), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(torch.cat((self.ws2(x_source), self.wt2(x_target)), dim=0) * self.gamma2 + self.beta2), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat((self.bns3(x_source), self.bnt3(x_target)), dim=0) * self.gamma3 + self.beta3)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat((self.bns4(x_source), self.bnt4(x_target)), dim=0) * self.gamma4 + self.beta4)",
                            "Call"
                        ],
                        [
                            "self.fc5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.bns5(x_source), self.bnt5(x_target)), dim=0) * self.gamma5 + self.beta5",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.wt1(x) * self.gamma1 + self.beta1), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.wt2(x) * self.gamma2 + self.beta2), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bnt3(x) * self.gamma3 + self.beta3)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bnt4(x) * self.gamma4 + self.beta4)",
                            "Call"
                        ],
                        [
                            "self.fc5(x)",
                            "Call"
                        ],
                        [
                            "self.bnt5(x) * self.gamma5 + self.beta5",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "x.shape[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_248": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((self.bns3(x_source), self.bnt3(x_target)), dim=0) * self.gamma3 + self.beta3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_251": {
                "variable": {
                    "value": "(x_source, x_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(torch.cat((self.ws1(x_source), self.wt1(x_target)), dim=0) * self.gamma1 + self.beta1), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(torch.cat((self.ws2(x_source), self.wt2(x_target)), dim=0) * self.gamma2 + self.beta2), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat((self.bns3(x_source), self.bnt3(x_target)), dim=0) * self.gamma3 + self.beta3)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat((self.bns4(x_source), self.bnt4(x_target)), dim=0) * self.gamma4 + self.beta4)",
                            "Call"
                        ],
                        [
                            "self.fc5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.bns5(x_source), self.bnt5(x_target)), dim=0) * self.gamma5 + self.beta5",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.wt1(x) * self.gamma1 + self.beta1), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.wt2(x) * self.gamma2 + self.beta2), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bnt3(x) * self.gamma3 + self.beta3)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bnt4(x) * self.gamma4 + self.beta4)",
                            "Call"
                        ],
                        [
                            "self.fc5(x)",
                            "Call"
                        ],
                        [
                            "self.bnt5(x) * self.gamma5 + self.beta5",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "x.shape[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_253": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((self.bns4(x_source), self.bnt4(x_target)), dim=0) * self.gamma4 + self.beta4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_256": {
                "variable": {
                    "value": "(x_source, x_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(torch.cat((self.ws1(x_source), self.wt1(x_target)), dim=0) * self.gamma1 + self.beta1), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(torch.cat((self.ws2(x_source), self.wt2(x_target)), dim=0) * self.gamma2 + self.beta2), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat((self.bns3(x_source), self.bnt3(x_target)), dim=0) * self.gamma3 + self.beta3)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat((self.bns4(x_source), self.bnt4(x_target)), dim=0) * self.gamma4 + self.beta4)",
                            "Call"
                        ],
                        [
                            "self.fc5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.bns5(x_source), self.bnt5(x_target)), dim=0) * self.gamma5 + self.beta5",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.wt1(x) * self.gamma1 + self.beta1), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.wt2(x) * self.gamma2 + self.beta2), kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bnt3(x) * self.gamma3 + self.beta3)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bnt4(x) * self.gamma4 + self.beta4)",
                            "Call"
                        ],
                        [
                            "self.fc5(x)",
                            "Call"
                        ],
                        [
                            "self.bnt5(x) * self.gamma5 + self.beta5",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "x.shape[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_261": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.wt1(x) * self.gamma1 + self.beta1)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_265": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.wt2(x) * self.gamma2 + self.beta2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_270": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bnt3(x) * self.gamma3 + self.beta3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_274": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bnt4(x) * self.gamma4 + self.beta4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_202": {
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_203": {
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_209": {
                "*size": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_210": {
                "*size": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_216": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_217": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_222": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_223": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_228": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_229": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_298": {
                "input": {
                    "value": "source_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(output, split_size_or_sections=output.shape[0] // 2, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_318": {
                "input": {
                    "value": "F.log_softmax(output, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_test_loader",
                            "variable"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_237": {
                "input": {
                    "value": "torch.cat((self.ws1(x_source), self.wt1(x_target)), dim=0) * self.gamma1 + self.beta1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_242": {
                "input": {
                    "value": "torch.cat((self.ws2(x_source), self.wt2(x_target)), dim=0) * self.gamma2 + self.beta2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_261": {
                "input": {
                    "value": "self.wt1(x) * self.gamma1 + self.beta1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_265": {
                "input": {
                    "value": "self.wt2(x) * self.gamma2 + self.beta2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_319": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_319": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_257": {
                "tensors": {
                    "value": "(self.bns5(x_source), self.bnt5(x_target))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "tensors": {
                    "value": "(self.bns3(x_source), self.bnt3(x_target))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_253": {
                "tensors": {
                    "value": "(self.bns4(x_source), self.bnt4(x_target))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_318": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_237": {
                "tensors": {
                    "value": "(self.ws1(x_source), self.wt1(x_target))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_242": {
                "tensors": {
                    "value": "(self.ws2(x_source), self.wt2(x_target))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/batch_norm.py": {
        "torch": {
            "Parameter_27": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_norm_66": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "exponential_average_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "1.0 / self.num_batches_tracked.item()",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "state_dict[num_batches_tracked_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/consensus_loss.py": {
        "torch": {
            "eye_12": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_12": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_13": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_14": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(y, dim=1)",
                            "Call"
                        ],
                        [
                            "y.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/folder.py": {
        "torch": {}
    },
    "utils/whitening.py": {
        "torch": {
            "inverse_53": {
                "variable": {
                    "value": "inv_sqrt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cholesky(f_cov_shrinked)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_55": {
                "variable": {
                    "value": "decorrelated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - m",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "inv_sqrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(torch.cholesky(f_cov_shrinked)).contiguous().view(self.num_features, self.group_size, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.num_groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_58": {
                "variable": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.momentum * m.detach()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "(1 - self.momentum) * self.running_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_59": {
                "variable": {
                    "value": "self.running_variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.momentum * f_cov.detach()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "(1 - self.momentum) * self.running_variance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.running_variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_47": {
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xn.permute(1, 0, 2, 3).contiguous().view(self.num_groups, self.group_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "T.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "[1, self.num_features, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.cuda.FloatTensor() if torch.cuda.is_available() else torch.FloatTensor()",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ones_24": {
                "*size": {
                    "value": "[self.num_groups, self.group_size, self.group_size]",
                    "type": "List",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.cuda.FloatTensor() if torch.cuda.is_available() else torch.FloatTensor()",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "eye_48": {
                "n": {
                    "value": "self.group_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.cuda.FloatTensor() if torch.cuda.is_available() else torch.FloatTensor()",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "eye_51": {
                "n": {
                    "value": "self.group_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.cuda.FloatTensor() if torch.cuda.is_available() else torch.FloatTensor()",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cholesky_53": {
                "input": {
                    "value": "f_cov_shrinked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - self.eps) * f_cov + self.eps * torch.eye(self.group_size, out=torch.cuda.FloatTensor() if torch.cuda.is_available() else torch.FloatTensor()).repeat(self.num_groups, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "(1 - self.eps) * self.running_variance + self.eps * torch.eye(self.group_size, out=torch.cuda.FloatTensor() if torch.cuda.is_available() else torch.FloatTensor()).repeat(self.num_groups, 1, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}