{
    "optimal_stopping/algorithms/backward_induction/backward_induction_pricer.py": {
        "sklearn": {
            "LinearRegression_564": {
                "variable": {
                    "value": "linreg",
                    "type": "variable",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "optimal_stopping/algorithms/backward_induction/regression.py": {
        "sklearn": {},
        "torch": {
            "from_numpy_106": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_unsorted",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_128": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_unsorted",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_99": {
                "negative_slope": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_120": {
                "negative_slope": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "optimal_stopping/algorithms/reinforcement_learning/FQI.py": {
        "sklearn": {
            "LinearRegression_306": {
                "variable": {
                    "value": "linreg",
                    "type": "variable",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "optimal_stopping/algorithms/reinforcement_learning/RFQI.py": {
        "sklearn": {},
        "torch": {
            "from_numpy_70": {
                "variable": {
                    "value": "stocks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "stock_price",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_72": {
                "variable": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "stocks.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "stocks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[stocks, time, 1 - time]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "random_base",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[random_base, torch.ones([stocks.shape[0], stocks.shape[1], 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_109": {
                "variable": {
                    "value": "stocks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "stock_price",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_111": {
                "variable": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "stocks.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_111": {
                "variable": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "stocks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[stocks, time, 1 - time]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "random_base",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[random_base, torch.ones([stocks.shape[0], stocks.shape[1], 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "stocks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "stock_price",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_185": {
                "variable": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "stocks.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_185": {
                "variable": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "stocks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[stocks, time, 1 - time]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "random_base",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[random_base, torch.ones([random_base.shape[0], random_base.shape[1], 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_66": {
                "negative_slope": {
                    "value": "factors[0] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_77": {
                "*size": {
                    "value": "[stocks.shape[0], stocks.shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_105": {
                "negative_slope": {
                    "value": "factors[0] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_116": {
                "*size": {
                    "value": "[stocks.shape[0], stocks.shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tanh_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_192": {
                "*size": {
                    "value": "[random_base.shape[0], random_base.shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "optimal_stopping/utilities/comparison_table.py": {
        "tensorflow": {
            "GFile_320": {
                "name": {
                    "value": "table_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(os.path.join(os.path.dirname(__file__), f'../../../latex/tables_draft/{label}.tex'))",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "optimal_stopping/utilities/plot_hurst.py": {
        "tensorflow": {
            "GFile_222": {
                "name": {
                    "value": "table_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(os.path.join(os.path.dirname(__file__), f'../../../latex/tables_draft/{label}.tex'))",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "optimal_stopping/algorithms/backward_induction/DOS.py": {
        "torch": {
            "Adam_93": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "discounted_next_values",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "discounted_next_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(discounted_next_values).double()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "immediate_exercise_value",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "immediate_exercise_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(immediate_exercise_value).double()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "X_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stock_values",
                            "variable"
                        ],
                        [
                            "stock_values",
                            "variable"
                        ]
                    ]
                }
            },
            "ones_100": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(discounted_next_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_117": {
                "variable": {
                    "value": "X_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(inputs).double()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_inputs).double()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_89": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchSampler_102": {
                "sampler": {
                    "value": "tdata.RandomSampler(range(len(X_inputs)), replacement=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RandomSampler_103": {
                "data_source": {
                    "value": "range(len(X_inputs))",
                    "type": "Call",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_107": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "optimal_stopping/algorithms/backward_induction/NLSM.py": {
        "torch": {
            "Adam_80": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.neural_network.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "X_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X_inputs).double()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_inputs).double()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "Y_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Y_labels).double().view(len(Y_labels), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "X_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X_inputs).double()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_inputs).double()",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchSampler_86": {
                "sampler": {
                    "value": "tdata.RandomSampler(range(len(X_inputs)), replacement=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RandomSampler_87": {
                "data_source": {
                    "value": "range(len(X_inputs))",
                    "type": "Call",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_90": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_92": {
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "optimal_stopping/algorithms/backward_induction/RLSM.py": {
        "torch": {
            "LeakyReLU_39": {
                "negative_slope": {
                    "value": "factors[0] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_67": {
                "beta": {
                    "value": "factors[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(1.0",
                            "Method Argument"
                        ],
                        [
                            "(1.0",
                            "Method Argument"
                        ],
                        [
                            "(1.0",
                            "Method Argument"
                        ],
                        [
                            "(1.0",
                            "Method Argument"
                        ],
                        [
                            "(1.0",
                            "Method Argument"
                        ],
                        [
                            "(1.0",
                            "Method Argument"
                        ],
                        [
                            "(1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GELU_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SiLU_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_109": {
                "alpha": {
                    "value": "factors[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(1.0",
                            "Method Argument"
                        ],
                        [
                            "(1.0",
                            "Method Argument"
                        ],
                        [
                            "(1.0",
                            "Method Argument"
                        ],
                        [
                            "(1.0",
                            "Method Argument"
                        ],
                        [
                            "(1.0",
                            "Method Argument"
                        ],
                        [
                            "(1.0",
                            "Method Argument"
                        ],
                        [
                            "(1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_123": {
                "negative_slope": {
                    "value": "factors[0] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "optimal_stopping/algorithms/backward_induction/RRLSM.py": {
        "torch": {
            "from_numpy_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "stock_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([stock_paths, var_paths], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "optimal_stopping/algorithms/utils/neural_networks.py": {
        "torch": {
            "Linear_8": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nb_stocks",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ]
                    ]
                }
            },
            "LeakyReLU_9": {
                "variable": {
                    "value": "self.leakyReLU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sigmoid_10": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_11": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ]
                    ]
                }
            },
            "BatchNorm1d_13": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_15": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_16": {
                "variable": {
                    "value": "self.Softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_17": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_30": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nb_stocks",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nb_stocks",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ]
                    ]
                }
            },
            "LeakyReLU_32": {
                "variable": {
                    "value": "self.leakyReLU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Softplus_33": {
                "variable": {
                    "value": "self.Softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_34": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_35": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_37": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ]
                    ]
                }
            },
            "BatchNorm1d_39": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_41": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "optimal_stopping/algorithms/utils/randomized_neural_networks.py": {
        "torch": {
            "Sequential_67": {
                "variable": {
                    "value": "self.NN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.NN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_59": {
                "negative_slope": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.NN2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "hs_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(input.shape[:-1]) + [self.hidden_size * 2]",
                            "BinOp"
                        ],
                        [
                            "list(input.shape[:-1]) + [self.hidden_size]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "hs_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(input.shape[:-1]) + [self.hidden_size * 2]",
                            "BinOp"
                        ],
                        [
                            "list(input.shape[:-1]) + [self.hidden_size]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "state_size + self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tanh(input[i] * self.factors[0]), h * self.factors[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "hs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, self.NN2(input[i] * self.factors[2])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input[i] * self.factors[0], h * self.factors[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "in_features": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_109": {
                "input": {
                    "value": "input[i] * self.factors[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}