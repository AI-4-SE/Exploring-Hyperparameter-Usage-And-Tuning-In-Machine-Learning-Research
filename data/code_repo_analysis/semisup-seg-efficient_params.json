{
    "generate_images.py": {
        "torch": {
            "ones_like_17": {
                "variable": {
                    "value": "loss_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y[:, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_55": {
                "variable": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dir / 'input_examples'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_46": {
                "obj": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.load(dir / 'input_examples')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dir / 'input_examples'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "run.py": {
        "torch": {
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "profile_67": {
                "use_cuda": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "use_deterministic_algorithms_260": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_269": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "vidlu_ext/configs.py": {
        "torch": {}
    },
    "vidlu_ext/models/deeplabv2.py": {
        "torch": {
            "randn_69": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "513",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "513",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate in enumerate(rates)",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate in enumerate(rates)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "vidlu_ext/models/resnet.py": {
        "torch": {
            "randn_141": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_76": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reduce(x)",
                            "Call"
                        ],
                        [
                            "self.conv3x3(h)",
                            "Call"
                        ],
                        [
                            "self.increase(h)",
                            "Call"
                        ],
                        [
                            "h + self.shortcut(x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_121": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_133": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_135": {
                "in_features": {
                    "value": "ch[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vidlu_ext/steps.py": {
        "torch": {
            "ones_like_27": {
                "variable": {
                    "value": "loss_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attack_target[:, 0, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}