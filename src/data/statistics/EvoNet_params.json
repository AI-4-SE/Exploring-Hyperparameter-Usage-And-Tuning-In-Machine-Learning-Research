{
    "data_factory/takedata.py": {
        "sklearn": {
            "StratifiedKFold_114": {
                "variable": {
                    "value": "sf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model_core/metrics.py": {
        "sklearn": {
            "roc_auc_score_37": {
                "y_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "homogeneity_score_13": {
                "labels_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "completeness_score_14": {
                "labels_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "v_measure_score_15": {
                "labels_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_16": {
                "labels_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_17": {
                "labels_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_21": {
                "X": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "Constant",
                    "possible_values": []
                },
                "sample_size": {
                    "value": "4000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "confusion_matrix_40": {
                "y_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "classification_report_40": {
                "y_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "accuracy_score_26": {
                "y_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "precision_score_27": {
                "y_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "recall_score_28": {
                "y_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "f1_score_29": {
                "y_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "accuracy_score_32": {
                "y_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "confusion_matrix_33": {
                "y_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model_core/models/EvoNet/evonet_tsc.py": {
        "sklearn": {},
        "tensorflow": {
            "placeholder_17": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.param.his_len, self.param.segment_len, self.param.segment_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_raw_sequence",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_18": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.param.his_len, self.param.n_state]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_state_sequence",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.param.n_state, self.param.node_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_state_features",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.param.his_len + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_event_label",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_22": {
                "variable": {
                    "value": "y_clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.param.n_event",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_28": {
                "variable": {
                    "value": "self.attention_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "patterns",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "graph_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.param.graph_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_32": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "patterns",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(graph_logits, [-1, self.param.graph_dim])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "outnet_fc1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_33": {
                "variable": {
                    "value": "out_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "net",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(patterns, 512, activation=tf.nn.relu, name='outnet_fc1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.param.n_event",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "outnet_fc2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_36": {
                "variable": {
                    "value": "self.net_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.softmax_cross_entropy(tf.reshape(y_clf[:, 2:], [-1, self.param.n_event]), out_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_37": {
                "variable": {
                    "value": "self.net_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.param.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_40": {
                "variable": {
                    "value": "patterns_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "graph_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_41": {
                "variable": {
                    "value": "patterns_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(node_logits, [-1, (self.param.his_len - 1) * self.param.n_state, self.param.node_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_42": {
                "variable": {
                    "value": "patterns_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(self.x, [-1, self.param.his_len, self.param.segment_len * self.param.segment_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_43": {
                "variable": {
                    "value": "self.patterns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[patterns_g, patterns_n, patterns_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Saver_47": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_36": {
                "onehot_labels": {
                    "value": "tf.reshape(y_clf[:, 2:], [-1, self.param.n_event])",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "out_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(net, self.param.n_event, activation=tf.nn.relu, name='outnet_fc2')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_41": {
                "tensor": {
                    "value": "node_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, (self.param.his_len - 1) * self.param.n_state, self.param.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.param.his_len, self.param.segment_len * self.param.segment_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "tensor": {
                    "value": "y_clf[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.param.n_event]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "model_core/state_model/cluster.py": {
        "sklearn": {
            "GaussianMixture_13": {
                "variable": {
                    "value": "self.model_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.param.n_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "self.param.covariance_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model_core/state_model/saxword.py": {
        "sklearn": {}
    },
    "model_core/state_model/shaplets.py": {
        "sklearn": {}
    },
    "model_core/models/EvoNet/evonet.py": {
        "tensorflow": {
            "matmul_88": {
                "variable": {
                    "value": "Min",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(send_nodes, [-1, self.n_nodes, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.reshape(receive_nodes, [-1, 1, self.n_nodes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_89": {
                "variable": {
                    "value": "Mout",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(receive_nodes, [-1, self.n_nodes, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.reshape(send_nodes, [-1, 1, self.n_nodes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "Hin_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(Min, prev_node_embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_93": {
                "variable": {
                    "value": "Hin",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(Hin_, self.Win) + self.bin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "Hout_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(Mout, prev_node_embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_95": {
                "variable": {
                    "value": "Hout",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(Hout_, self.Wout) + self.bout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_99": {
                "variable": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(tf.concat([Hin, Hout], axis=-1), [-1, self.n_nodes, self.n_features, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_114": {
                "variable": {
                    "value": "cur_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.concat([tf.reduce_mean(middle_node_emb, axis=1), prev_graph_emb], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wa",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_119": {
                "variable": {
                    "value": "h_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[g_, middle_node_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_124": {
                "variable": {
                    "value": "g_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h_, event]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_185": {
                "variable": {
                    "value": "state_sequence",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "state_sequence",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(state_sequence, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_186": {
                "variable": {
                    "value": "event_sequence",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "event_sequence",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(event_sequence, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_191": {
                "variable": {
                    "value": "cur_graph_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.graph_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_192": {
                "variable": {
                    "value": "cur_graph_mem",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.graph_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_203": {
                "variable": {
                    "value": "graph_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "graph_embs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(graph_embs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_204": {
                "variable": {
                    "value": "node_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "node_embs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(node_embs, [1, 0, 2, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_205": {
                "variable": {
                    "value": "attention_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(attention_logits, [1, 0, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.timesteps - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input_x, [-1, self.n_features + self.graph_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_features + self.graph_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "prev_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prev_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(prev_hidden, [-1, self.n_features])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "prev_memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prev_memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(prev_memory, [-1, self.n_features])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_139": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(input_x, self.Wi_n) + tf.matmul(prev_hidden, self.Ui_n) + self.bf_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_141": {
                "variable": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(input_x, self.Wf_n) + tf.matmul(prev_hidden, self.Uf_n) + self.bf_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_143": {
                "variable": {
                    "value": "O",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(input_x, self.Wo_n) + tf.matmul(prev_hidden, self.Uo_n) + self.bo_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_145": {
                "variable": {
                    "value": "C_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(input_x, self.Wc_n) + tf.matmul(F * prev_hidden, self.Uc_n) + self.bc_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_149": {
                "variable": {
                    "value": "current_memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Ct",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "F * prev_memory + I * C_",
                            "BinOp"
                        ],
                        [
                            "F * prev_memory + I * C_",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_nodes, self.n_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_150": {
                "variable": {
                    "value": "current_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "O * tf.nn.tanh(Ct)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_nodes, self.n_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_27": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_dim, output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0.0, std)",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "reg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_29": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_dim, output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_35": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "tensor": {
                    "value": "receive_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, self.n_nodes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "tensor": {
                    "value": "send_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, self.n_nodes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "a": {
                    "value": "Min",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(send_nodes, [-1, self.n_nodes, 1]), tf.reshape(receive_nodes, [-1, 1, self.n_nodes]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "prev_node_embedding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "a": {
                    "value": "Mout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(receive_nodes, [-1, self.n_nodes, 1]), tf.reshape(send_nodes, [-1, 1, self.n_nodes]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "prev_node_embedding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "tf.concat([Hin, Hout], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_nodes, self.n_features, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_114": {
                "values": {
                    "value": "[tf.reduce_mean(middle_node_emb, axis=1), prev_graph_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_118": {
                "shape": {
                    "value": "[self.batch_size, self.n_nodes, self.graph_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_118": {
                "input": {
                    "value": "cur_a * prev_graph_emb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_123": {
                "input_tensor": {
                    "value": "cur_node_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones([self.batch_size, self.n_nodes, self.n_features], dtype=tf.float32) * initial_node_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_153": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(input_x, self.Wi_g) + tf.matmul(prev_hidden, self.Ui_g) + self.bf_g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_155": {
                "variable": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(input_x, self.Wf_g) + tf.matmul(prev_hidden, self.Uf_g) + self.bf_g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_157": {
                "variable": {
                    "value": "O",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(input_x, self.Wo_g) + tf.matmul(prev_hidden, self.Uo_g) + self.bo_g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_159": {
                "variable": {
                    "value": "C_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(input_x, self.Wc_g) + tf.matmul(F * prev_hidden, self.Uc_g) + self.bc_g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "ETNet_Unit",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_183": {
                "input": {
                    "value": "state_sequence",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(state_sequence, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_189": {
                "shape": {
                    "value": "[self.batch_size, self.n_nodes, self.n_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_190": {
                "shape": {
                    "value": "[self.batch_size, self.n_nodes, self.n_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_205": {
                "a": {
                    "value": "attention_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(attention_logits, [1, 0, 2]), [-1, self.timesteps - 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_93": {
                "a": {
                    "value": "Hin_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(Min, prev_node_embedding), [-1, self.n_features])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Win",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_95": {
                "a": {
                    "value": "Hout_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(Mout, prev_node_embedding), [-1, self.n_features])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_99": {
                "values": {
                    "value": "[Hin, Hout]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_27": {
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_33": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "input_tensor": {
                    "value": "middle_node_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_150": {
                "x": {
                    "value": "Ct",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "F * prev_memory + I * C_",
                            "BinOp"
                        ],
                        [
                            "F * prev_memory + I * C_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_164": {
                "x": {
                    "value": "Ct",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "F * prev_memory + I * C_",
                            "BinOp"
                        ],
                        [
                            "F * prev_memory + I * C_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_139": {
                "a": {
                    "value": "prev_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(prev_hidden, [-1, self.n_features])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Ui_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "a": {
                    "value": "prev_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(prev_hidden, [-1, self.n_features])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Uf_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_143": {
                "a": {
                    "value": "prev_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(prev_hidden, [-1, self.n_features])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Uo_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_145": {
                "a": {
                    "value": "F * prev_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_153": {
                "a": {
                    "value": "prev_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(prev_hidden, [-1, self.n_features])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Ui_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_155": {
                "a": {
                    "value": "prev_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(prev_hidden, [-1, self.n_features])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Uf_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_157": {
                "a": {
                    "value": "prev_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(prev_hidden, [-1, self.n_features])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Uo_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_159": {
                "a": {
                    "value": "F * prev_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "run.py": {
        "tensorflow": {
            "GPUOptions_64": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_65": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_69": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_67": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_89": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_137": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_89": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_137": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}