{
    "datasets.py": {
        "torch": {
            "cat_74": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ind)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_73": {
                "data": {
                    "value": "i_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice(np.nonzero(self.targets == i).squeeze(), samples_per_target, replace=False)",
                            "Call"
                        ],
                        [
                            "np.nonzero(self.targets == i).squeeze()[:samples_per_target]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mlp.py": {
        "torch": {
            "Sequential_40": {
                "variable": {
                    "value": "self.enc_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*h",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.z_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.z_log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.dec_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*h",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.dec_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_hidden[-1], num_pixels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "num_hidden[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.prod(im_shape)",
                            "Call"
                        ],
                        [
                            "np.prod(im_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sigmoid_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_pixels",
                            "variable"
                        ],
                        [
                            "i",
                            "variable"
                        ],
                        [
                            "dim_z",
                            "variable"
                        ],
                        [
                            "i",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "variable"
                        ],
                        [
                            "num_hidden",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_pixels",
                            "variable"
                        ],
                        [
                            "i",
                            "variable"
                        ],
                        [
                            "dim_z",
                            "variable"
                        ],
                        [
                            "i",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "variable"
                        ],
                        [
                            "num_hidden",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "plot_agg_posterior.py": {
        "torch": {
            "manual_seed_31": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack(z, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_47": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.optimal_weights(z, train_mu=mus, train_log_std=log_stds)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_37": {
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MiniMNIST('.', train=True, seed=args.seed, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(train_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "plot_capacity_vs_recons.py": {
        "torch": {
            "DataLoader_38": {
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.HoldoutMNIST('.', targets=train_targets, train=True, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(train_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "plot_compare_recons_wavg.py": {
        "torch": {
            "stack_48": {
                "variable": {
                    "value": "test_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_data[ind][0] for ind in args.index]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_67": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_imgs, recons, wavgs, *torch.unbind(wmax_imgs, dim=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.HoldoutMNIST('.', targets=train_targets, train=True, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(train_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unbind_67": {
                "input": {
                    "value": "wmax_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_imgs[max_w_inds, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "plot_kde_bce.py": {
        "torch": {
            "cat_68": {
                "variable": {
                    "value": "bce_in_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bce_in_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(bce_in_out).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_69": {
                "variable": {
                    "value": "bce_wa_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bce_wa_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(bce_wa_out).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_54": {
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.HoldoutMNIST('.', targets=train_targets, train=True, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(train_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.HoldoutMNIST('.', targets=test_targets, train=False, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "plot_perplexity_histogram.py": {
        "torch": {
            "cat_61": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_44": {
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.HoldoutMNIST('.', targets=test_targets, train=False, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_51": {
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.HoldoutMNIST('.', targets=train_targets, train=True, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(train_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "plot_utils.py": {
        "torch": {
            "randn_45": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "model.num_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "model.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unique_117": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "train_vaes.py": {
        "torch": {
            "DataLoader_67": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MiniMNIST('.', samples_per_target=args.spt, train=True, download=True, transform=transforms.ToTensor(), random=True, seed=args.seed)",
                            "Call"
                        ],
                        [
                            "datasets.HoldoutMNIST('.', targets=train_targets, train=True, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MiniMNIST('.', samples_per_target=args.spt, train=False, download=True, transform=transforms.ToTensor(), random=True, seed=args.seed)",
                            "Call"
                        ],
                        [
                            "datasets.HoldoutMNIST('.', targets=test_targets, train=False, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "vae.py": {
        "torch": {
            "exp_67": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc(x[i:i + batch_size])",
                            "Call"
                        ],
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "self(data)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size)",
                            "Call"
                        ],
                        [
                            "log_std",
                            "Method Argument"
                        ],
                        [
                            "log_std",
                            "Method Argument"
                        ],
                        [
                            "log_std",
                            "Method Argument"
                        ],
                        [
                            "log_std",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_like_68": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(log_std)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_139": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'_'.join([self.enc.filename, self.dec.filename]) + '.tar'",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_113": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_135": {
                "obj": {
                    "value": "param_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'enc_state_dict': self.enc.state_dict(), 'dec_state_dict': self.dec.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(model_dir, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_143": {
                "variable": {
                    "value": "model.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "enc_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_147": {
                "variable": {
                    "value": "model.dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "enc_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_152": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[normal_logprob(z[:, i:i + batch_size], train_mu, train_log_std).sum(-1) for i in range(0, z.shape[1], batch_size)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(weights, -1)",
                            "Call"
                        ],
                        [
                            "weights.reshape(batch_dims + weights.shape[-1:])",
                            "Call"
                        ],
                        [
                            "self.log_posterior(z=z, train_data=train_data, train_mu=train_mu, train_log_std=train_log_std, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "weights - weights.logsumexp(dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.optimal_weights(test_mu, train_data=train_data, train_mu=train_mu, train_log_std=train_log_std, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_199": {
                "variable": {
                    "value": "weighted_average",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "li, i...jk->l...jk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[normal_logprob(z[:, i:i + batch_size], train_mu, train_log_std).sum(-1) for i in range(0, z.shape[1], batch_size)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(weights, -1)",
                            "Call"
                        ],
                        [
                            "weights.reshape(batch_dims + weights.shape[-1:])",
                            "Call"
                        ],
                        [
                            "self.log_posterior(z=z, train_data=train_data, train_mu=train_mu, train_log_std=train_log_std, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "weights - weights.logsumexp(dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.optimal_weights(test_mu, train_data=train_data, train_mu=train_mu, train_log_std=train_log_std, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_214": {
                "variable": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss_fn(recon_batch, data, mu, log_std)",
                            "Call"
                        ],
                        [
                            "rate",
                            "Call"
                        ],
                        [
                            "-0.5 * (1 + 2 * log_std - mu ** 2 - (2 * log_std).exp())",
                            "BinOp"
                        ],
                        [
                            "torch.sum(rate)",
                            "Call"
                        ],
                        [
                            "torch.mean(rate)",
                            "Call"
                        ],
                        [
                            "self.rate(mu, log_std, reduction=self.reduction)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_225": {
                "input": {
                    "value": "recon_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recon_x.clamp(min=eps, max=1 - eps)",
                            "Call"
                        ],
                        [
                            "recon_x",
                            "Method Argument"
                        ],
                        [
                            "recon_x",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduction.lower()",
                            "Call"
                        ],
                        [
                            "'sum'",
                            "Method Argument"
                        ],
                        [
                            "'sum'",
                            "Method Argument"
                        ],
                        [
                            "'sum'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_75": {
                "tensors": {
                    "value": "[self.dec(z[i:i + batch_size]) for i in range(0, z.shape[0], batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_88": {
                "mode": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_216": {
                "variable": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss_fn(recon_batch, data, mu, log_std)",
                            "Call"
                        ],
                        [
                            "rate",
                            "Call"
                        ],
                        [
                            "-0.5 * (1 + 2 * log_std - mu ** 2 - (2 * log_std).exp())",
                            "BinOp"
                        ],
                        [
                            "torch.sum(rate)",
                            "Call"
                        ],
                        [
                            "torch.mean(rate)",
                            "Call"
                        ],
                        [
                            "self.rate(mu, log_std, reduction=self.reduction)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "logstd_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}