{
    "facepy/learning.py": {
        "sklearn": {}
    },
    "utils.py": {
        "sklearn": {
            "KFold_205": {
                "variable": {
                    "value": "self.kf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.kf.get_n_splits(self.classes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nets/lemur_net.py": {
        "tensorflow": {
            "constant_initializer_49": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_53": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_59": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_69": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_kernels, kernel_size=kernel_size, stride=stride, padding=padding, scope=scope, **xargs)",
                            "Call"
                        ],
                        [
                            "convolution(net, num_kernels, kernel_size=3, groups=groups, shuffle=False, stride=1, padding='SAME', scope='transform', xargs=trans_conv_args)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "convolution(net, num_kernels, kernel_size=1, groups=groups, shuffle=True, stride=1, padding='SAME', scope='res_%d_1' % i, xargs=res_conv_args)",
                            "Call"
                        ],
                        [
                            "convolution(net, num_kernels, kernel_size=3, groups=groups, shuffle=False, stride=1, padding='SAME', scope='res_%d_2' % i, xargs=res_conv_args)",
                            "Call"
                        ],
                        [
                            "se_module(net)",
                            "Call"
                        ],
                        [
                            "net + shortcut",
                            "BinOp"
                        ],
                        [
                            "conv_module(images, num_layers[0], num_kernels[0], groups[0], scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv_module(net, num_layers[1], num_kernels[1], groups[1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv_module(net, num_layers[2], num_kernels[2], groups[2], scope='conv3')",
                            "Call"
                        ],
                        [
                            "conv_module(net, num_layers[3], num_kernels[3], groups[3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "convolution(net, bottleneck_layer_size, kernel_size=[net.shape[1], net.shape[2]], groups=groups[4], shuffle=False, stride=1, padding='VALID', scope='bottleneck', xargs=fc_args)",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_kernels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "x_reshaped",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, h, w, num_groups, c // num_groups]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_87": {
                "variable": {
                    "value": "x_transposed",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_reshaped",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, h, w, num_groups, c // num_groups])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 2, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_transposed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x_reshaped, [0, 1, 2, 4, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, h, w, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_94": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1, 1, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_98": {
                "variable": {
                    "value": "mask_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x >= 0",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_99": {
                "variable": {
                    "value": "mask_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_not(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_107": {
                "variable": {
                    "value": "squeeze",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_108": {
                "variable": {
                    "value": "excitation",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "squeeze",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.avg_pool2d(input_net, [h, w], padding='VALID')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "excitation",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "excitation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.flatten(squeeze)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(excitation, hidden_units, scope='se_fc1', weights_initializer=slim.xavier_initializer(), activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(excitation, c, scope='se_fc2', weights_initializer=slim.xavier_initializer(), activation_fn=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.reshape(excitation, [-1, 1, 1, c])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "PReLU_122": {
                "shared_axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_130": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_kernels, kernel_size=kernel_size, stride=stride, padding=padding, scope=scope, **xargs)",
                            "Call"
                        ],
                        [
                            "convolution(net, num_kernels, kernel_size=3, groups=groups, shuffle=False, stride=1, padding='SAME', scope='transform', xargs=trans_conv_args)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "convolution(net, num_kernels, kernel_size=1, groups=groups, shuffle=True, stride=1, padding='SAME', scope='res_%d_1' % i, xargs=res_conv_args)",
                            "Call"
                        ],
                        [
                            "convolution(net, num_kernels, kernel_size=3, groups=groups, shuffle=False, stride=1, padding='SAME', scope='res_%d_2' % i, xargs=res_conv_args)",
                            "Call"
                        ],
                        [
                            "se_module(net)",
                            "Call"
                        ],
                        [
                            "net + shortcut",
                            "BinOp"
                        ],
                        [
                            "conv_module(images, num_layers[0], num_kernels[0], groups[0], scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv_module(net, num_layers[1], num_kernels[1], groups[1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv_module(net, num_layers[2], num_kernels[2], groups[2], scope='conv3')",
                            "Call"
                        ],
                        [
                            "conv_module(net, num_layers[3], num_kernels[3], groups[3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "convolution(net, bottleneck_layer_size, kernel_size=[net.shape[1], net.shape[2]], groups=groups[4], shuffle=False, stride=1, padding='VALID', scope='bottleneck', xargs=fc_args)",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_70": {
                "x": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_kernels, kernel_size=kernel_size, stride=stride, padding=padding, scope=scope, **xargs)",
                            "Call"
                        ],
                        [
                            "convolution(net, num_kernels, kernel_size=3, groups=groups, shuffle=False, stride=1, padding='SAME', scope='transform', xargs=trans_conv_args)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "convolution(net, num_kernels, kernel_size=1, groups=groups, shuffle=True, stride=1, padding='SAME', scope='res_%d_1' % i, xargs=res_conv_args)",
                            "Call"
                        ],
                        [
                            "convolution(net, num_kernels, kernel_size=3, groups=groups, shuffle=False, stride=1, padding='SAME', scope='res_%d_2' % i, xargs=res_conv_args)",
                            "Call"
                        ],
                        [
                            "se_module(net)",
                            "Call"
                        ],
                        [
                            "net + shortcut",
                            "BinOp"
                        ],
                        [
                            "conv_module(images, num_layers[0], num_kernels[0], groups[0], scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv_module(net, num_layers[1], num_kernels[1], groups[1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv_module(net, num_layers[2], num_kernels[2], groups[2], scope='conv3')",
                            "Call"
                        ],
                        [
                            "conv_module(net, num_layers[3], num_kernels[3], groups[3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "convolution(net, bottleneck_layer_size, kernel_size=[net.shape[1], net.shape[2]], groups=groups[4], shuffle=False, stride=1, padding='VALID', scope='bottleneck', xargs=fc_args)",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_74": {
                "variable": {
                    "value": "input_splits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_kernels, kernel_size=kernel_size, stride=stride, padding=padding, scope=scope, **xargs)",
                            "Call"
                        ],
                        [
                            "convolution(net, num_kernels, kernel_size=3, groups=groups, shuffle=False, stride=1, padding='SAME', scope='transform', xargs=trans_conv_args)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "convolution(net, num_kernels, kernel_size=1, groups=groups, shuffle=True, stride=1, padding='SAME', scope='res_%d_1' % i, xargs=res_conv_args)",
                            "Call"
                        ],
                        [
                            "convolution(net, num_kernels, kernel_size=3, groups=groups, shuffle=False, stride=1, padding='SAME', scope='res_%d_2' % i, xargs=res_conv_args)",
                            "Call"
                        ],
                        [
                            "se_module(net)",
                            "Call"
                        ],
                        [
                            "net + shortcut",
                            "BinOp"
                        ],
                        [
                            "conv_module(images, num_layers[0], num_kernels[0], groups[0], scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv_module(net, num_layers[1], num_kernels[1], groups[1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv_module(net, num_layers[2], num_kernels[2], groups[2], scope='conv3')",
                            "Call"
                        ],
                        [
                            "conv_module(net, num_layers[3], num_kernels[3], groups[3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "convolution(net, bottleneck_layer_size, kernel_size=[net.shape[1], net.shape[2]], groups=groups[4], shuffle=False, stride=1, padding='VALID', scope='bottleneck', xargs=fc_args)",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_78": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "output_splits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[slim.conv2d(input_split, num_kernels_split, kernel_size=kernel_size, stride=stride, padding=padding, **xargs) for input_split in input_splits]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "PRELU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "SE",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "group_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "logical_not_99": {
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x >= 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "conv2d_75": {
                "input": {
                    "value": "input_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_kernels_split",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(num_kernels / groups)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_95": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "SphereNet",
                    "type": "str",
                    "possible_values": []
                },
                "default_name": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_179": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_kernels, kernel_size=kernel_size, stride=stride, padding=padding, scope=scope, **xargs)",
                            "Call"
                        ],
                        [
                            "convolution(net, num_kernels, kernel_size=3, groups=groups, shuffle=False, stride=1, padding='SAME', scope='transform', xargs=trans_conv_args)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "convolution(net, num_kernels, kernel_size=1, groups=groups, shuffle=True, stride=1, padding='SAME', scope='res_%d_1' % i, xargs=res_conv_args)",
                            "Call"
                        ],
                        [
                            "convolution(net, num_kernels, kernel_size=3, groups=groups, shuffle=False, stride=1, padding='SAME', scope='res_%d_2' % i, xargs=res_conv_args)",
                            "Call"
                        ],
                        [
                            "se_module(net)",
                            "Call"
                        ],
                        [
                            "net + shortcut",
                            "BinOp"
                        ],
                        [
                            "conv_module(images, num_layers[0], num_kernels[0], groups[0], scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv_module(net, num_layers[1], num_kernels[1], groups[1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv_module(net, num_layers[2], num_kernels[2], groups[2], scope='conv3')",
                            "Call"
                        ],
                        [
                            "conv_module(net, num_layers[3], num_kernels[3], groups[3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "convolution(net, bottleneck_layer_size, kernel_size=[net.shape[1], net.shape[2]], groups=groups[4], shuffle=False, stride=1, padding='VALID', scope='bottleneck', xargs=fc_args)",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_183": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "histogram_184": {
                "name": {
                    "value": "unormed_prelogits",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_kernels, kernel_size=kernel_size, stride=stride, padding=padding, scope=scope, **xargs)",
                            "Call"
                        ],
                        [
                            "convolution(net, num_kernels, kernel_size=3, groups=groups, shuffle=False, stride=1, padding='SAME', scope='transform', xargs=trans_conv_args)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "convolution(net, num_kernels, kernel_size=1, groups=groups, shuffle=True, stride=1, padding='SAME', scope='res_%d_1' % i, xargs=res_conv_args)",
                            "Call"
                        ],
                        [
                            "convolution(net, num_kernels, kernel_size=3, groups=groups, shuffle=False, stride=1, padding='SAME', scope='res_%d_2' % i, xargs=res_conv_args)",
                            "Call"
                        ],
                        [
                            "se_module(net)",
                            "Call"
                        ],
                        [
                            "net + shortcut",
                            "BinOp"
                        ],
                        [
                            "conv_module(images, num_layers[0], num_kernels[0], groups[0], scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv_module(net, num_layers[1], num_kernels[1], groups[1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv_module(net, num_layers[2], num_kernels[2], groups[2], scope='conv3')",
                            "Call"
                        ],
                        [
                            "conv_module(net, num_layers[3], num_kernels[3], groups[3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "convolution(net, bottleneck_layer_size, kernel_size=[net.shape[1], net.shape[2]], groups=groups[4], shuffle=False, stride=1, padding='VALID', scope='bottleneck', xargs=fc_args)",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "network.py": {
        "tensorflow": {
            "Graph_34": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_35": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_36": {
                "variable": {
                    "value": "tf_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_38": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options, allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_203": {
                "variable": {
                    "value": "trainable_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "image_batch_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, h, w, channels]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "label_batch_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "label_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "learning_rate_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "keep_prob_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "phase_train_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "phase_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_54": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_56": {
                "variable": {
                    "value": "image_splits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image_batch_placeholder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, h, w, channels], name='image_batch')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "config.num_gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_57": {
                "variable": {
                    "value": "label_splits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "label_batch_placeholder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None], name='label_batch')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "config.num_gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_add_162": {
                "variable": {
                    "value": "update_global_step_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, dtype=tf.int32, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_164": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_167": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*train_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "merge_all_170": {
                "variable": {
                    "value": "summary_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_175": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "scalar_169": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate_placeholder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, name='learning_rate')",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_66": {
                "name": {
                    "value": "scope_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'' if i == 0 else 'gpu_%d' % i",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_153": {
                "name": {
                    "value": "'losses/' + k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tflib.average_tensors(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_155": {
                "name": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tflib.average_tensors(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "identity_69": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_splits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_70": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_splits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_93": {
                "variable": {
                    "value": "prelogits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prelogits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "network.inference(images, keep_prob_placeholder, phase_train_placeholder, bottleneck_layer_size=config.embedding_size, weight_decay=config.weight_decay, model_version=config.model_version)",
                            "Call"
                        ],
                        [
                            "tf.identity(prelogits, name='prelogits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "prelogits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_94": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prelogits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "network.inference(images, keep_prob_placeholder, phase_train_placeholder, bottleneck_layer_size=config.embedding_size, weight_decay=config.weight_decay, model_version=config.model_version)",
                            "Call"
                        ],
                        [
                            "tf.identity(prelogits, name='prelogits')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_137": {
                "variable": {
                    "value": "reg_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "reg_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_141": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_142": {
                "variable": {
                    "value": "grads_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n(losses, name='total_loss')",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_68": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_82": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(image_splits[i], name='inputs')",
                            "Call"
                        ],
                        [
                            "tf.identity(images, name='transformed_image')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ]
                    ]
                },
                "name": {
                    "value": "transformed_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_96": {
                "variable": {
                    "value": "self.outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1, name='embeddings')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_109": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_137": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "image_84": {
                "name": {
                    "value": "transformed_image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(image_splits[i], name='inputs')",
                            "Call"
                        ],
                        [
                            "tf.identity(images, name='transformed_image')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_109": {
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(label_splits[i], name='labels')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(prelogits, num_classes, weights_regularizer=slim.l2_regularizer(config.weight_decay), weights_initializer=slim.xavier_initializer(), biases_initializer=tf.constant_initializer(0.0), activation_fn=None, scope='Logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_107": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tflib.py": {
        "tensorflow": {
            "group_117": {
                "variable": {
                    "value": "apply_gradient_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*apply_gradient_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "top_k_123": {
                "variable": {
                    "value": "(_, arg_top)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gamma * tf.matmul(prelogits_normed, weights_normed)",
                            "BinOp"
                        ],
                        [
                            "cos_theta",
                            "Name"
                        ],
                        [
                            "logits + label_dense * phi_theta * 1.0 / (1.0 + lamb)",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.floor(m * theta / 3.14159265)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_124": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(label, [1, k])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(label, [1, k])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_126": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(label, [1, k])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_any_127": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.equal(label, arg_top)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_244": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=label, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_259": {
                "variable": {
                    "value": "prelogits_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(prelogits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_262": {
                "variable": {
                    "value": "norm_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "norm_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alpha * prelogits_norm",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(norm_loss, axis=0, name='norm_loss')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "norm_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unique_with_counts_636": {
                "variable": {
                    "value": "(unique_label, unique_idx, unique_count)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(label, [1, k])",
                            "Call"
                        ]
                    ]
                }
            },
            "size_637": {
                "variable": {
                    "value": "num_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unique_label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_638": {
                "variable": {
                    "value": "appear_times",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unique_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "unique_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_639": {
                "variable": {
                    "value": "appear_times",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "appear_times",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(unique_count, unique_idx)",
                            "Call"
                        ],
                        [
                            "tf.reshape(appear_times, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.gather(unique_count, unique_idx)",
                            "Call"
                        ],
                        [
                            "tf.reshape(appear_times, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_641": {
                "variable": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weighted_prelogits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features / tf.cast(appear_times, tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "unique_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_segments": {
                    "value": "num_centers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.size(unique_label)",
                            "Call"
                        ],
                        [
                            "tf.size(label_center)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_717": {
                "variable": {
                    "value": "weights_normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=(nrof_features, num_classes), regularizer=slim.l2_regularizer(weight_decay), initializer=slim.xavier_initializer(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_features, num_classes), regularizer=slim.l2_regularizer(0.0001), initializer=slim.xavier_initializer(), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_classes, nrof_features), regularizer=slim.l2_regularizer(weight_decay), initializer=slim.xavier_initializer(), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_classes, nrof_features), initializer=tf.truncated_normal_initializer(stddev=1.0), trainable=True, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_720": {
                "variable": {
                    "value": "weights_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "weights_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(weights, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(weights)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(label, [1, k])",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_721": {
                "variable": {
                    "value": "closs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "prelogits_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ],
                        [
                            "prelogits",
                            "Name"
                        ]
                    ]
                },
                "labels": {
                    "value": "weights_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(weights, label)",
                            "Call"
                        ],
                        [
                            "tf.gather(weights_normed, label)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_722": {
                "variable": {
                    "value": "closs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "closs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=prelogits_normed, labels=weights_batch)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(closs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(closs, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_723": {
                "variable": {
                    "value": "closs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "closs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=prelogits_normed, labels=weights_batch)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(closs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(closs, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_725": {
                "variable": {
                    "value": "p_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weights_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(weights, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(weights)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_726": {
                "variable": {
                    "value": "p_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 - weights_normed",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_728": {
                "variable": {
                    "value": "eloss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "eloss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p_pos * tf.log(p_pos) + p_neg * tf.log(p_neg)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(eloss, name='entropy')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_40": {
                "variable": {
                    "value": "average_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "expanded_tensors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_41": {
                "variable": {
                    "value": "average_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "average_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=expanded_tensors)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(average_tensor, 0, name=name)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_collection_141": {
                "key": {
                    "value": "watch_list",
                    "type": "str",
                    "possible_values": []
                }
            },
            "latest_checkpoint_165": {
                "variable": {
                    "value": "ckpt_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.expanduser(model_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_168": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[var for var in var_list if any([scope in var.name for scope in restore_scopes])]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reduce_sum_208": {
                "variable": {
                    "value": "XX",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_209": {
                "variable": {
                    "value": "YY",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_210": {
                "variable": {
                    "value": "XY",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_221": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nrof_features, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "slim.l2_regularizer(weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "slim.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_226": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "slim.l2_regularizer(0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_232": {
                "variable": {
                    "value": "weights_normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=(nrof_features, num_classes), regularizer=slim.l2_regularizer(weight_decay), initializer=slim.xavier_initializer(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_features, num_classes), regularizer=slim.l2_regularizer(0.0001), initializer=slim.xavier_initializer(), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_classes, nrof_features), regularizer=slim.l2_regularizer(weight_decay), initializer=slim.xavier_initializer(), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_classes, nrof_features), initializer=tf.truncated_normal_initializer(stddev=1.0), trainable=True, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_233": {
                "variable": {
                    "value": "prelogits_normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prelogits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_247": {
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softplus(alpha)",
                            "Call"
                        ],
                        [
                            "tf.constant(gamma)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.exp(1.0) + tf.exp(alpha))",
                            "Call"
                        ],
                        [
                            "1.0 / t",
                            "BinOp"
                        ],
                        [
                            "tf.constant(gamma)",
                            "Call"
                        ],
                        [
                            "gamma",
                            "Name"
                        ],
                        [
                            "20.0",
                            "Constant"
                        ],
                        [
                            "16.0",
                            "MethodArgument"
                        ],
                        [
                            "16.0",
                            "MethodArgument"
                        ],
                        [
                            "16.0",
                            "MethodArgument"
                        ],
                        [
                            "16.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_to_collection_248": {
                "name": {
                    "value": "watch_list",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "('gamma', gamma)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_254": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "sigma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_284": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_features, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "slim.l2_regularizer(0.0001)",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "slim.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_290": {
                "variable": {
                    "value": "lamb",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(lamb_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_294": {
                "variable": {
                    "value": "prelogits_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(prelogits), axis=1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_295": {
                "variable": {
                    "value": "weights_normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=(nrof_features, num_classes), regularizer=slim.l2_regularizer(weight_decay), initializer=slim.xavier_initializer(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_features, num_classes), regularizer=slim.l2_regularizer(0.0001), initializer=slim.xavier_initializer(), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_classes, nrof_features), regularizer=slim.l2_regularizer(weight_decay), initializer=slim.xavier_initializer(), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_classes, nrof_features), initializer=tf.truncated_normal_initializer(stddev=1.0), trainable=True, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_296": {
                "variable": {
                    "value": "prelogits_normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prelogits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_299": {
                "variable": {
                    "value": "cos_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "prelogits_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ],
                        [
                            "prelogits",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "weights_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(weights, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_300": {
                "variable": {
                    "value": "cos_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.maximum(-1.0, cos_theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_301": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cos_theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(prelogits_normed, weights_normed)",
                            "Call"
                        ],
                        [
                            "tf.minimum(1.0, tf.maximum(-1.0, cos_theta))",
                            "Call"
                        ],
                        [
                            "cos_theta * prelogits_norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_303": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m * theta / 3.14159265",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_309": {
                "variable": {
                    "value": "lamb_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lamb_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lamb_min",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "lamb_max / (1.0 + 0.1 * tf.cast(global_step, tf.float32))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_310": {
                "variable": {
                    "value": "update_lamb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "lamb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('lambda', shape=(), initializer=tf.constant_initializer(lamb_max), trainable=False, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "lamb_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(lamb_min, lamb_max / (1.0 + 0.1 * tf.cast(global_step, tf.float32)))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_333": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_classes, nrof_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "slim.l2_regularizer(weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "slim.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_340": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "slim.l2_regularizer(0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_345": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_350": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "sigma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "slim.l2_regularizer(0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_355": {
                "variable": {
                    "value": "threshold_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "threshold_pos",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(16.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_359": {
                "variable": {
                    "value": "threshold_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "threshold_neg",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_365": {
                "variable": {
                    "value": "weights_normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=(nrof_features, num_classes), regularizer=slim.l2_regularizer(weight_decay), initializer=slim.xavier_initializer(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_features, num_classes), regularizer=slim.l2_regularizer(0.0001), initializer=slim.xavier_initializer(), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_classes, nrof_features), regularizer=slim.l2_regularizer(weight_decay), initializer=slim.xavier_initializer(), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_classes, nrof_features), initializer=tf.truncated_normal_initializer(stddev=1.0), trainable=True, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_366": {
                "variable": {
                    "value": "prelogits_normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prelogits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_372": {
                "variable": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(centers, center_idx)",
                            "Call"
                        ],
                        [
                            "tf.unsorted_segment_sum(weighted_prelogits, unique_idx, num_centers)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(centers, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "center_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "l2_normalize_373": {
                "variable": {
                    "value": "centers_normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(centers, center_idx)",
                            "Call"
                        ],
                        [
                            "tf.unsorted_segment_sum(weighted_prelogits, unique_idx, num_centers)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(centers, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_377": {
                "variable": {
                    "value": "label_mat_glob",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(label, [1, k])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_378": {
                "variable": {
                    "value": "label_mask_pos_glob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_mat_glob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(label, num_classes, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_not_379": {
                "variable": {
                    "value": "label_mask_neg_glob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_mask_pos_glob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label_mat_glob, tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_387": {
                "variable": {
                    "value": "dist_mat_glob",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "prelogits_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ],
                        [
                            "prelogits",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(weights_normed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_388": {
                "variable": {
                    "value": "dist_pos_glob",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dist_mat_glob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(prelogits_normed, tf.transpose(weights_normed))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_mask_pos_glob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label_mat_glob, tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_389": {
                "variable": {
                    "value": "dist_neg_glob",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dist_mat_glob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(prelogits_normed, tf.transpose(weights_normed))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_mask_neg_glob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_not(label_mask_pos_glob)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_392": {
                "variable": {
                    "value": "logits_pos_glob",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits_glob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coef * dist_mat_glob",
                            "BinOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_mask_pos_glob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label_mat_glob, tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_393": {
                "variable": {
                    "value": "logits_neg_glob",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits_glob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coef * dist_mat_glob",
                            "BinOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_mask_neg_glob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_not(label_mask_pos_glob)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_397": {
                "variable": {
                    "value": "label_exp_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(label, [1, k])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_398": {
                "variable": {
                    "value": "label_mat_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_exp_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(label, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(label_exp_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_399": {
                "variable": {
                    "value": "label_mask_pos_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_mat_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(label_exp_batch, tf.transpose(label_exp_batch))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_not_400": {
                "variable": {
                    "value": "label_mask_neg_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_mask_pos_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label_mat_batch, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(label_mask_pos_batch, mask_non_diag)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_401": {
                "variable": {
                    "value": "mask_non_diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.eye(batch_size), tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_402": {
                "variable": {
                    "value": "label_mask_pos_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_mask_pos_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label_mat_batch, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(label_mask_pos_batch, mask_non_diag)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_non_diag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_not(tf.cast(tf.eye(batch_size), tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.logical_not(tf.cast(tf.eye(num_centers), tf.bool))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_405": {
                "variable": {
                    "value": "dist_mat_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "prelogits_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ],
                        [
                            "prelogits",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(prelogits_normed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_406": {
                "variable": {
                    "value": "dist_pos_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dist_mat_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(prelogits_normed, tf.transpose(prelogits_normed))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_mask_pos_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label_mat_batch, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(label_mask_pos_batch, mask_non_diag)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_407": {
                "variable": {
                    "value": "dist_neg_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dist_mat_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(prelogits_normed, tf.transpose(prelogits_normed))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_mask_neg_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_not(label_mask_pos_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_410": {
                "variable": {
                    "value": "logits_pos_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coef * dist_mat_batch",
                            "BinOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_mask_pos_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label_mat_batch, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(label_mask_pos_batch, mask_non_diag)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_411": {
                "variable": {
                    "value": "logits_neg_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coef * dist_mat_batch",
                            "BinOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_mask_neg_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_not(label_mask_pos_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_464": {
                "variable": {
                    "value": "_logits_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits_pos_glob",
                            "Name"
                        ],
                        [
                            "-0.5 * 2 * dist_instance_pos * gamma",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_465": {
                "variable": {
                    "value": "_logits_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits_neg_glob",
                            "Name"
                        ],
                        [
                            "-0.5 * dist_centers_vec * gamma",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_logsumexp(logits_neg)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_467": {
                "x": {
                    "value": "prelogits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_468": {
                "variable": {
                    "value": "norm_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(weights, label)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_498": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(num_classes, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_501": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_pos + loss_neg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "split_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_510": {
                "variable": {
                    "value": "_logits_neg_glob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_logits_neg_glob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits_neg_glob, [batch_size, -1]) * gamma",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_logsumexp(_logits_neg_glob)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_511": {
                "variable": {
                    "value": "loss_glob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(1 + _logits_neg_glob - _logits_pos_glob)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_glob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_516": {
                "variable": {
                    "value": "loss_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1e-07 * tf.square(weights_normed)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_535": {
                "variable": {
                    "value": "centers_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "weights_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(weights, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(weights)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(label, [1, k])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_536": {
                "variable": {
                    "value": "dist_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(prelogits_normed - centers_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_537": {
                "variable": {
                    "value": "loss_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1.0 * dist_center",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_center",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_599": {
                "variable": {
                    "value": "mean_dist_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dist_pos_glob",
                            "Name"
                        ]
                    ]
                },
                "name": {
                    "value": "mean_dist_pos",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_600": {
                "variable": {
                    "value": "mean_dist_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dist_neg_glob",
                            "Name"
                        ]
                    ]
                },
                "name": {
                    "value": "mean_dist_neg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_601": {
                "variable": {
                    "value": "acc_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.greater_equal(logits_pos, t_pos), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "acc_pos",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_602": {
                "variable": {
                    "value": "acc_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.less(logits_neg, t_neg), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "acc_neg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_649": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_655": {
                "variable": {
                    "value": "prelogits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prelogits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_657": {
                "variable": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(centers, center_idx)",
                            "Call"
                        ],
                        [
                            "tf.unsorted_segment_sum(weighted_prelogits, unique_idx, num_centers)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(centers, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "size_658": {
                "variable": {
                    "value": "num_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_center",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "logical_not_662": {
                "variable": {
                    "value": "mask_non_diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.eye(num_centers), tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_663": {
                "variable": {
                    "value": "mask_triu",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matrix_band_part(tf.ones((num_centers, num_centers)), 0, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_664": {
                "variable": {
                    "value": "mask_triu",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_non_diag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_not(tf.cast(tf.eye(batch_size), tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.logical_not(tf.cast(tf.eye(num_centers), tf.bool))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_triu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.matrix_band_part(tf.ones((num_centers, num_centers)), 0, -1), tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(mask_non_diag, mask_triu)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_665": {
                "variable": {
                    "value": "dist_centers_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dist_centers_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "euclidean_distance(centers, tf.transpose(centers))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask_triu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.matrix_band_part(tf.ones((num_centers, num_centers)), 0, -1), tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(mask_non_diag, mask_triu)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_668": {
                "variable": {
                    "value": "centers_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(centers, center_idx)",
                            "Call"
                        ],
                        [
                            "tf.unsorted_segment_sum(weighted_prelogits, unique_idx, num_centers)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(centers, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "center_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "one_hot_671": {
                "variable": {
                    "value": "label_dense",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "center_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_centers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.size(unique_label)",
                            "Call"
                        ],
                        [
                            "tf.size(label_center)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_672": {
                "variable": {
                    "value": "label_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_dense",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(label, num_classes, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(center_idx, num_centers, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_not_673": {
                "variable": {
                    "value": "label_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label_dense, tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_674": {
                "variable": {
                    "value": "dist_instance_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dist_instance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "euclidean_distance(prelogits, tf.transpose(centers))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label_dense, tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_675": {
                "variable": {
                    "value": "dist_instance_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dist_instance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "euclidean_distance(prelogits, tf.transpose(centers))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_not(label_pos)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_682": {
                "variable": {
                    "value": "dist_instance_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dist_instance_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(dist_instance, label_pos)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dist_instance_pos, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_683": {
                "variable": {
                    "value": "dist_instance_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dist_instance_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(dist_instance, label_neg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dist_instance_neg, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_687": {
                "variable": {
                    "value": "logits_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits_neg_glob",
                            "Name"
                        ],
                        [
                            "-0.5 * dist_centers_vec * gamma",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_logsumexp(logits_neg)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_690": {
                "variable": {
                    "value": "loss_instance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softplus(logits_neg - logits_pos)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_710": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_classes, nrof_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_732": {
                "name": {
                    "value": "watch_list",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "('closs', closs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_to_collection_733": {
                "name": {
                    "value": "watch_list",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "('eloss', eloss)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "identity_31": {
                "input": {
                    "value": "tensors[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_37": {
                "variable": {
                    "value": "expanded_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensors",
                            "Name"
                        ],
                        [
                            "t_min + 1.0 / (epsilon + decay * tf.cast(global_step, tf.float32))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_102": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "scope_learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "multiplier * learning_rate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_127": {
                "x": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(label, [1, k])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "arg_top",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_128": {
                "x": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_any(tf.equal(label, arg_top), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_189": {
                "variable": {
                    "value": "ckpt_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.expanduser(model_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "import_meta_graph_193": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "meta_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_path, meta_files[0])",
                            "Call"
                        ]
                    ]
                },
                "clear_devices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "import_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scopes",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_207": {
                "name": {
                    "value": "EuclideanDistance",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_213": {
                "variable": {
                    "value": "diffs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(0.0, diffs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softplus_236": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('alpha', shape=(), regularizer=slim.l2_regularizer(0.01), initializer=tf.constant_initializer(1.0), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('alpha', shape=(), regularizer=slim.l2_regularizer(0.01), initializer=tf.constant_initializer(1.0), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('alpha', shape=(), initializer=tf.constant_initializer(1.0), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "constant_239": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softplus(alpha)",
                            "Call"
                        ],
                        [
                            "tf.constant(gamma)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.exp(1.0) + tf.exp(alpha))",
                            "Call"
                        ],
                        [
                            "1.0 / t",
                            "BinOp"
                        ],
                        [
                            "tf.constant(gamma)",
                            "Call"
                        ],
                        [
                            "gamma",
                            "Name"
                        ],
                        [
                            "20.0",
                            "Constant"
                        ],
                        [
                            "16.0",
                            "MethodArgument"
                        ],
                        [
                            "16.0",
                            "MethodArgument"
                        ],
                        [
                            "16.0",
                            "MethodArgument"
                        ],
                        [
                            "16.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_244": {
                "labels": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(label, [1, k])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gamma * tf.matmul(prelogits_normed, weights_normed)",
                            "BinOp"
                        ],
                        [
                            "cos_theta",
                            "Name"
                        ],
                        [
                            "logits + label_dense * phi_theta * 1.0 / (1.0 + lamb)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_253": {
                "name_or_scope": {
                    "value": "NormLoss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "square_259": {
                "x": {
                    "value": "prelogits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_271": {
                "input": {
                    "value": "prelogits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_283": {
                "name_or_scope": {
                    "value": "AngularSoftmax",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "one_hot_314": {
                "variable": {
                    "value": "label_dense",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(label, [1, k])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_320": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=label, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_323": {
                "name": {
                    "value": "watch_list",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "('lamb', lamb)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_331": {
                "input": {
                    "value": "prelogits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_332": {
                "name_or_scope": {
                    "value": "SplitSoftmax",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_435": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(1.0) + tf.exp(alpha)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_to_collection_503": {
                "name": {
                    "value": "watch_list",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "('split_loss', loss)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "moments_545": {
                "variable": {
                    "value": "(mean_pos, var_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "dist_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dist_pos_glob",
                            "Name"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_546": {
                "variable": {
                    "value": "(mean_neg, var_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "dist_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dist_neg_glob",
                            "Name"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_547": {
                "variable": {
                    "value": "std_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "var_pos",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_548": {
                "variable": {
                    "value": "std_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "var_neg",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_min_559": {
                "variable": {
                    "value": "threshold_neg_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_logits_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits_pos, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "_logits_pos * gamma",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_560": {
                "variable": {
                    "value": "threshold_pos_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_logits_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits_neg, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "_logits_neg * gamma",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_logsumexp(_logits_neg, axis=1)[:, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "assign_sub_566": {
                "variable": {
                    "value": "threshold_pos_update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "threshold_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('threshold_pos', shape=(), initializer=tf.constant_initializer(16.0), trainable=False, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "diff_threshold_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "threshold_pos - threshold_pos_batch",
                            "BinOp"
                        ],
                        [
                            "0.1 * diff_threshold_pos",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_sub_567": {
                "variable": {
                    "value": "threshold_neg_update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "threshold_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('threshold_neg', shape=(), initializer=tf.constant_initializer(0.0), trainable=False, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "diff_threshold_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "threshold_neg - threshold_neg_batch",
                            "BinOp"
                        ],
                        [
                            "0.1 * diff_threshold_neg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "group_568": {
                "variable": {
                    "value": "threshold_update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "threshold_pos_update_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.assign_sub(threshold_pos, diff_threshold_pos)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "threshold_neg_update_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.assign_sub(threshold_neg, diff_threshold_neg)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_574": {
                "variable": {
                    "value": "weights_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=(nrof_features, num_classes), regularizer=slim.l2_regularizer(weight_decay), initializer=slim.xavier_initializer(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_features, num_classes), regularizer=slim.l2_regularizer(0.0001), initializer=slim.xavier_initializer(), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_classes, nrof_features), regularizer=slim.l2_regularizer(weight_decay), initializer=slim.xavier_initializer(), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_classes, nrof_features), initializer=tf.truncated_normal_initializer(stddev=1.0), trainable=True, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(label, [1, k])",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_with_counts_576": {
                "variable": {
                    "value": "(unique_label, unique_idx, unique_count)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(label, [1, k])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_577": {
                "variable": {
                    "value": "appear_times",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unique_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "unique_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_578": {
                "variable": {
                    "value": "appear_times",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "appear_times",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(unique_count, unique_idx)",
                            "Call"
                        ],
                        [
                            "tf.reshape(appear_times, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.gather(unique_count, unique_idx)",
                            "Call"
                        ],
                        [
                            "tf.reshape(appear_times, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scatter_sub_581": {
                "variable": {
                    "value": "centers_update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=(nrof_features, num_classes), regularizer=slim.l2_regularizer(weight_decay), initializer=slim.xavier_initializer(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_features, num_classes), regularizer=slim.l2_regularizer(0.0001), initializer=slim.xavier_initializer(), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_classes, nrof_features), regularizer=slim.l2_regularizer(weight_decay), initializer=slim.xavier_initializer(), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_classes, nrof_features), initializer=tf.truncated_normal_initializer(stddev=1.0), trainable=True, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(label, [1, k])",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "diff_centers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights_batch - prelogits",
                            "BinOp"
                        ],
                        [
                            "diff_centers / tf.cast(1 + appear_times, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "0.5 * diff_centers",
                            "BinOp"
                        ]
                    ]
                }
            },
            "group_583": {
                "variable": {
                    "value": "centers_update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "centers_update_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.scatter_sub(weights, label, diff_centers)",
                            "Call"
                        ],
                        [
                            "tf.group(centers_update_op)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_603": {
                "name": {
                    "value": "threshold_pos",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "threshold_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('threshold_pos', shape=(), initializer=tf.constant_initializer(16.0), trainable=False, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_604": {
                "name": {
                    "value": "mean_dist_pos",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_dist_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(dist_pos, name='mean_dist_pos')",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_605": {
                "name": {
                    "value": "mean_dist_neg",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_dist_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(dist_neg, name='mean_dist_neg')",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_606": {
                "name": {
                    "value": "acc_pos",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "acc_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.cast(tf.greater_equal(logits_pos, t_pos), tf.float32), name='acc_pos')",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_607": {
                "name": {
                    "value": "acc_neg",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "acc_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.cast(tf.less(logits_neg, t_neg), tf.float32), name='acc_neg')",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_608": {
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softplus(alpha)",
                            "Call"
                        ],
                        [
                            "tf.constant(gamma)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.exp(1.0) + tf.exp(alpha))",
                            "Call"
                        ],
                        [
                            "1.0 / t",
                            "BinOp"
                        ],
                        [
                            "tf.constant(gamma)",
                            "Call"
                        ],
                        [
                            "gamma",
                            "Name"
                        ],
                        [
                            "20.0",
                            "Constant"
                        ],
                        [
                            "16.0",
                            "MethodArgument"
                        ],
                        [
                            "16.0",
                            "MethodArgument"
                        ],
                        [
                            "16.0",
                            "MethodArgument"
                        ],
                        [
                            "16.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "scalar_609": {
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('alpha', shape=(), regularizer=slim.l2_regularizer(0.01), initializer=tf.constant_initializer(1.0), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('alpha', shape=(), regularizer=slim.l2_regularizer(0.01), initializer=tf.constant_initializer(1.0), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('alpha', shape=(), initializer=tf.constant_initializer(1.0), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "scalar_610": {
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', shape=(), initializer=tf.constant_initializer(0.0), trainable=True, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_611": {
                "name": {
                    "value": "dist_pos",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "dist_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dist_pos_glob",
                            "Name"
                        ]
                    ]
                }
            },
            "histogram_612": {
                "name": {
                    "value": "dist_neg",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "dist_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dist_neg_glob",
                            "Name"
                        ]
                    ]
                }
            },
            "add_to_collection_617": {
                "name": {
                    "value": "watch_list",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "('gamma', gamma)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_to_collection_618": {
                "name": {
                    "value": "watch_list",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "('alpha', alpha)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_to_collection_619": {
                "name": {
                    "value": "watch_list",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "('beta', beta)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_640": {
                "x": {
                    "value": "appear_times",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(unique_count, unique_idx)",
                            "Call"
                        ],
                        [
                            "tf.reshape(appear_times, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.gather(unique_count, unique_idx)",
                            "Call"
                        ],
                        [
                            "tf.reshape(appear_times, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_647": {
                "input": {
                    "value": "prelogits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_648": {
                "name_or_scope": {
                    "value": "ClusterLoss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_694": {
                "name": {
                    "value": "prelogits",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "prelogits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_697": {
                "name": {
                    "value": "dist_centers_vec",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "dist_centers_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(dist_centers_mat, mask_triu)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_698": {
                "name": {
                    "value": "dist_instances_pos",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "dist_instance_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(dist_instance, label_pos)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dist_instance_pos, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_700": {
                "name": {
                    "value": "watch_list",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "('loss', loss_instance)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_708": {
                "input": {
                    "value": "prelogits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_709": {
                "name_or_scope": {
                    "value": "BinaryLoss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdadeltaOptimizer_104": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "scope_learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "multiplier * learning_rate",
                            "BinOp"
                        ]
                    ]
                },
                "rho": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GraphDef_181": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_208": {
                "x": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_209": {
                "x": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_241": {
                "a": {
                    "value": "prelogits_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ],
                        [
                            "prelogits",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "weights_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(weights, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_294": {
                "input_tensor": {
                    "value": "tf.square(prelogits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_300": {
                "x": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "cos_theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(prelogits_normed, weights_normed)",
                            "Call"
                        ],
                        [
                            "tf.minimum(1.0, tf.maximum(-1.0, cos_theta))",
                            "Call"
                        ],
                        [
                            "cos_theta * prelogits_norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "control_dependencies_313": {
                "control_inputs": {
                    "value": "[update_lamb]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_387": {
                "a": {
                    "value": "weights_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(weights, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_398": {
                "a": {
                    "value": "label_exp_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(label, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_401": {
                "x": {
                    "value": "tf.eye(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_405": {
                "a": {
                    "value": "prelogits_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ],
                        [
                            "prelogits",
                            "Name"
                        ]
                    ]
                }
            },
            "constant_443": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softplus(alpha)",
                            "Call"
                        ],
                        [
                            "tf.constant(gamma)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.exp(1.0) + tf.exp(alpha))",
                            "Call"
                        ],
                        [
                            "1.0 / t",
                            "BinOp"
                        ],
                        [
                            "tf.constant(gamma)",
                            "Call"
                        ],
                        [
                            "gamma",
                            "Name"
                        ],
                        [
                            "20.0",
                            "Constant"
                        ],
                        [
                            "16.0",
                            "MethodArgument"
                        ],
                        [
                            "16.0",
                            "MethodArgument"
                        ],
                        [
                            "16.0",
                            "MethodArgument"
                        ],
                        [
                            "16.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_445": {
                "features": {
                    "value": "1.0 + x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_467": {
                "input_tensor": {
                    "value": "tf.square(prelogits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_468": {
                "params": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=(nrof_features, num_classes), regularizer=slim.l2_regularizer(weight_decay), initializer=slim.xavier_initializer(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_features, num_classes), regularizer=slim.l2_regularizer(0.0001), initializer=slim.xavier_initializer(), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_classes, nrof_features), regularizer=slim.l2_regularizer(weight_decay), initializer=slim.xavier_initializer(), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=(num_classes, nrof_features), initializer=tf.truncated_normal_initializer(stddev=1.0), trainable=True, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(label, [1, k])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_logsumexp_479": {
                "input_tensor": {
                    "value": "_logits_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits_neg, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "_logits_neg * gamma",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_logsumexp(_logits_neg, axis=1)[:, None]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_497": {
                "x": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(prelogits)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(prelogits)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(prelogits)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(prelogits)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_498": {
                "x": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_499": {
                "features": {
                    "value": "m + _logits_neg - _logits_pos",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_500": {
                "features": {
                    "value": "m + _logits_neg - _logits_pos",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_508": {
                "tensor": {
                    "value": "logits_pos_glob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(logits_glob, label_mask_pos_glob)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_509": {
                "tensor": {
                    "value": "logits_neg_glob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(logits_glob, label_mask_neg_glob)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_511": {
                "features": {
                    "value": "1 + _logits_neg_glob - _logits_pos_glob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_536": {
                "x": {
                    "value": "prelogits_normed - centers_batch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_to_collection_569": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "threshold_update_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.group(threshold_pos_update_op, threshold_neg_update_op)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_584": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "centers_update_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.scatter_sub(weights, label, diff_centers)",
                            "Call"
                        ],
                        [
                            "tf.group(centers_update_op)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_601": {
                "x": {
                    "value": "tf.greater_equal(logits_pos, t_pos)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_602": {
                "x": {
                    "value": "tf.less(logits_neg, t_neg)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_661": {
                "a": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(centers, center_idx)",
                            "Call"
                        ],
                        [
                            "tf.unsorted_segment_sum(weighted_prelogits, unique_idx, num_centers)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(centers, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_662": {
                "x": {
                    "value": "tf.eye(num_centers)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_669": {
                "a": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(centers, center_idx)",
                            "Call"
                        ],
                        [
                            "tf.unsorted_segment_sum(weighted_prelogits, unique_idx, num_centers)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(centers, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_690": {
                "features": {
                    "value": "logits_neg - logits_pos",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_727": {
                "x": {
                    "value": "p_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(1 - weights_normed, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_106": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "scope_learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "multiplier * learning_rate",
                            "BinOp"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "import_graph_def_183": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_213": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "diffs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XX + YY - 2 * XY",
                            "BinOp"
                        ],
                        [
                            "tf.sqrt(tf.maximum(0.0, diffs))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_228": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_256": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_291": {
                "value": {
                    "value": "lamb_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lamb_max",
                            "Name"
                        ]
                    ]
                }
            },
            "square_294": {
                "x": {
                    "value": "prelogits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(prelogits, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_304": {
                "x": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.floor(m * theta / 3.14159265)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_320": {
                "labels": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(label, [1, k])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gamma * tf.matmul(prelogits_normed, weights_normed)",
                            "BinOp"
                        ],
                        [
                            "cos_theta",
                            "Name"
                        ],
                        [
                            "logits + label_dense * phi_theta * 1.0 / (1.0 + lamb)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_342": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_347": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_352": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_356": {
                "value": {
                    "value": "16.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_360": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "eye_401": {
                "num_rows": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(prelogits)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(prelogits)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(prelogits)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(prelogits)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_516": {
                "x": {
                    "value": "weights_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(weights, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_543": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_573": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_579": {
                "x": {
                    "value": "1 + appear_times",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_601": {
                "x": {
                    "value": "logits_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits_pos_glob",
                            "Name"
                        ],
                        [
                            "-0.5 * 2 * dist_instance_pos * gamma",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "t_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coef * threshold_pos",
                            "BinOp"
                        ],
                        [
                            "beta",
                            "Name"
                        ]
                    ]
                }
            },
            "less_602": {
                "x": {
                    "value": "logits_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits_neg_glob",
                            "Name"
                        ],
                        [
                            "-0.5 * dist_centers_vec * gamma",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_logsumexp(logits_neg)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coef * threshold_neg",
                            "BinOp"
                        ],
                        [
                            "beta",
                            "Name"
                        ]
                    ]
                }
            },
            "constant_initializer_651": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "eye_662": {
                "num_rows": {
                    "value": "num_centers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.size(unique_label)",
                            "Call"
                        ],
                        [
                            "tf.size(label_center)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_663": {
                "shape": {
                    "value": "(num_centers, num_centers)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_712": {
                "stddev": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_108": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "scope_learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "multiplier * learning_rate",
                            "BinOp"
                        ]
                    ]
                },
                "decay": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_435": {
                "x": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('alpha', shape=(), regularizer=slim.l2_regularizer(0.01), initializer=tf.constant_initializer(1.0), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('alpha', shape=(), regularizer=slim.l2_regularizer(0.01), initializer=tf.constant_initializer(1.0), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('alpha', shape=(), initializer=tf.constant_initializer(1.0), trainable=True, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_110": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "scope_learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "multiplier * learning_rate",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "use_nesterov": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_309": {
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_112": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "scope_learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "multiplier * learning_rate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_439": {
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "FileWriter_54": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.create_log_dir(config, config_file)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "network.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Summary_114": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}