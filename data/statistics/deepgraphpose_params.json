{
    "src/DeepLabCut/deeplabcut/utils/frameselectiontools.py": {
        "sklearn": {
            "MiniBatchKMeans_123": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "numframes2pick",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numframes2pick",
                            "Method Argument"
                        ],
                        [
                            "numframes2pick",
                            "Method Argument"
                        ],
                        [
                            "numframes2pick",
                            "Method Argument"
                        ],
                        [
                            "numframes2pick",
                            "Method Argument"
                        ]
                    ]
                },
                "tol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(nframes / 2)",
                            "Call"
                        ],
                        [
                            "int(nframes / 2)",
                            "Call"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "max_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MiniBatchKMeans_234": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "numframes2pick",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numframes2pick",
                            "Method Argument"
                        ],
                        [
                            "numframes2pick",
                            "Method Argument"
                        ],
                        [
                            "numframes2pick",
                            "Method Argument"
                        ],
                        [
                            "numframes2pick",
                            "Method Argument"
                        ]
                    ]
                },
                "tol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(nframes / 2)",
                            "Call"
                        ],
                        [
                            "int(nframes / 2)",
                            "Call"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "max_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/DeepLabCut/deeplabcut/pose_estimation_tensorflow/evaluate.py": {
        "tensorflow": {
            "reset_default_graph_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/DeepLabCut/deeplabcut/pose_estimation_tensorflow/nnet/conv_blocks.py": {
        "tensorflow": {
            "pad_45": {
                "variable": {
                    "value": "padded_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(input_tensor, input_splits, axis=3, name='split_' + scope)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg[0], pad_end[0]], [pad_beg[1], pad_end[1]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_355": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_fixed_padding(input_tensor, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "tf.identity(input_tensor, 'input')",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "input_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_split_divisible(b, num_ways, divisible_by=divisible_by)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'split_' + scope",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_254": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_fixed_padding(input_tensor, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "tf.identity(input_tensor, 'input')",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_285": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.separable_conv2d(input_tensor, None, kernel_size, depth_multiplier=1, stride=stride, rate=rate, normalizer_fn=normalizer_fn, padding=padding, scope=dw_scope)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_outputs, [1, 1], stride=1, normalizer_fn=normalizer_fn, scope=pw_scope)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "split_conv(net, inner_size, num_ways=split_expansion, scope='expand', divisible_by=split_divisible_by, stride=1, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "tf.identity(net, 'expansion_output')",
                            "Call"
                        ],
                        [
                            "tf.identity(net, name='depthwise_output')",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net)",
                            "Call"
                        ],
                        [
                            "expansion_transform(expansion_tensor=net, input_tensor=input_tensor)",
                            "Call"
                        ],
                        [
                            "split_conv(net, num_outputs, num_ways=split_projection, stride=1, scope='project', divisible_by=split_divisible_by, normalizer_fn=normalizer_fn, activation_fn=project_activation_fn)",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "residual(input_tensor=input_tensor, output_tensor=net)",
                            "Call"
                        ],
                        [
                            "net + input_tensor",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "depthwise_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_360": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input_tensor, out_size, [1, 1], scope=scope, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(n, scope + '_output')",
                            "Call"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "scope + '_output'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_362": {
                "values": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "scope + '_concat'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope + '_'",
                            "BinOp"
                        ],
                        [
                            "base + '_part_%d' % (i,)",
                            "BinOp"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "expanded_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_232": {
                "name": {
                    "value": "s.original_name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_276": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.separable_conv2d(input_tensor, None, kernel_size, depth_multiplier=1, stride=stride, rate=rate, normalizer_fn=normalizer_fn, padding=padding, scope=dw_scope)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_outputs, [1, 1], stride=1, normalizer_fn=normalizer_fn, scope=pw_scope)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "split_conv(net, inner_size, num_ways=split_expansion, scope='expand', divisible_by=split_divisible_by, stride=1, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "tf.identity(net, 'expansion_output')",
                            "Call"
                        ],
                        [
                            "tf.identity(net, name='depthwise_output')",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net)",
                            "Call"
                        ],
                        [
                            "expansion_transform(expansion_tensor=net, input_tensor=input_tensor)",
                            "Call"
                        ],
                        [
                            "split_conv(net, num_outputs, num_ways=split_projection, stride=1, scope='project', divisible_by=split_divisible_by, normalizer_fn=normalizer_fn, activation_fn=project_activation_fn)",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "residual(input_tensor=input_tensor, output_tensor=net)",
                            "Call"
                        ],
                        [
                            "net + input_tensor",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "expansion_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_318": {
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.separable_conv2d(input_tensor, None, kernel_size, depth_multiplier=1, stride=stride, rate=rate, normalizer_fn=normalizer_fn, padding=padding, scope=dw_scope)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_outputs, [1, 1], stride=1, normalizer_fn=normalizer_fn, scope=pw_scope)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "split_conv(net, inner_size, num_ways=split_expansion, scope='expand', divisible_by=split_divisible_by, stride=1, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "tf.identity(net, 'expansion_output')",
                            "Call"
                        ],
                        [
                            "tf.identity(net, name='depthwise_output')",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net)",
                            "Call"
                        ],
                        [
                            "expansion_transform(expansion_tensor=net, input_tensor=input_tensor)",
                            "Call"
                        ],
                        [
                            "split_conv(net, num_outputs, num_ways=split_projection, stride=1, scope='project', divisible_by=split_divisible_by, normalizer_fn=normalizer_fn, activation_fn=project_activation_fn)",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "residual(input_tensor=input_tensor, output_tensor=net)",
                            "Call"
                        ],
                        [
                            "net + input_tensor",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "separable",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_82": {
                "name": {
                    "value": "s.original_name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/DeepLabCut/deeplabcut/pose_estimation_tensorflow/nnet/losses.py": {
        "tensorflow": {
            "split_6": {
                "variable": {
                    "value": "vers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_38": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.to_float(predictions)",
                            "Call"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_39": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.to_float(labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "subtract_40": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.to_float(predictions)",
                            "Call"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.to_float(labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_41": {
                "variable": {
                    "value": "abs_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.subtract(predictions, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_42": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "abs_diff < k",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * tf.square(diff)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "k * abs_diff - 0.5 * k ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_33": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_43": {
                "x": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.subtract(predictions, labels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/DeepLabCut/deeplabcut/pose_estimation_tensorflow/nnet/mobilenet.py": {
        "tensorflow": {
            "pad_55": {
                "variable": {
                    "value": "padded_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(inputs, 'input')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg[0], pad_end[0]], [pad_beg[1], pad_end[1]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_363": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(inputs, 'input')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_368": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "_fixed_padding(net, params['kernel_size'], layer_rate)",
                            "Call"
                        ],
                        [
                            "opdef.op(net, **params)",
                            "Call"
                        ],
                        [
                            "mobilenet_base(inputs, scope=scope, **mobilenet_args)",
                            "Call"
                        ],
                        [
                            "tf.identity(net, name='embedding')",
                            "Call"
                        ],
                        [
                            "global_pool(net)",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, scope='Dropout', is_training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_409": {
                "variable": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, tf.shape(input_tensor)[1], tf.shape(input_tensor)[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_459": {
                "variable": {
                    "value": "weight_intitializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.09",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_305": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.dirname(t.name)",
                            "Call"
                        ],
                        [
                            "os.path.dirname(net.name)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'Mobilenet'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "default_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_306": {
                "name": {
                    "value": "s.original_name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_362": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.dirname(t.name)",
                            "Call"
                        ],
                        [
                            "os.path.dirname(net.name)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'Mobilenet'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Mobilenet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_386": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.identity(logits, name='output')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_388": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.identity(logits, name='output')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_370": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_410": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_411": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/DeepLabCut/deeplabcut/pose_estimation_tensorflow/nnet/mobilenet_v2.py": {
        "tensorflow": {}
    },
    "src/DeepLabCut/deeplabcut/pose_estimation_tensorflow/nnet/pose_net.py": {
        "tensorflow": {
            "constant_38": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.cfg.mean_pixel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "img_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_86": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "heads['part_pred']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_99": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "heads['part_pred']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_transpose_23": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "cfg.deconvolutionstride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "block4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_105": {
                "variable": {
                    "value": "l_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(l_shape[0] * l_shape[1], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_108": {
                "variable": {
                    "value": "maxloc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unravel_index_110": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "maxloc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(maxloc, (1, -1))",
                            "Call"
                        ],
                        [
                            "tf.argmax(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(maxloc, (1, -1))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(tf.cast(l_shape[0], tf.int64), tf.cast(l_shape[1], tf.int64))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "maxloc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "maxloc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(maxloc, (1, -1))",
                            "Call"
                        ],
                        [
                            "tf.argmax(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(maxloc, (1, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "joints",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(0, tf.cast(l_shape[2], dtype=tf.int64))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_114": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.concat([maxloc, joints], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather_nd(probs, indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_127": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pose, likelihood]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_132": {
                "variable": {
                    "value": "l_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_133": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_136": {
                "variable": {
                    "value": "l_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(l_shape[0] * l_shape[1], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_139": {
                "variable": {
                    "value": "maxloc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unravel_index_140": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "maxloc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(maxloc, (1, -1))",
                            "Call"
                        ],
                        [
                            "tf.argmax(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(maxloc, (1, -1))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(tf.cast(l_shape[0], tf.int64), tf.cast(l_shape[1], tf.int64))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_142": {
                "variable": {
                    "value": "maxloc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "maxloc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(maxloc, (1, -1))",
                            "Call"
                        ],
                        [
                            "tf.argmax(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(maxloc, (1, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_143": {
                "variable": {
                    "value": "joints",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(0, tf.cast(l_shape[2] * l_shape[3], dtype=tf.int64))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_144": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.concat([maxloc, joints], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_147": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather_nd(probs, indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_162": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pose, likelihood]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "pose",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_119": {
                "variable": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads['locref']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(locref, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0], l_shape[1], l_shape[2], l_shape[3], 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(locref, [1, 2, 0, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads['locref']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(locref, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0], l_shape[1], l_shape[2], l_shape[3], 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(locref, [1, 2, 0, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(l_shape[0] * l_shape[1], -1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_nd_121": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads['locref']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(locref, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0], l_shape[1], l_shape[2], l_shape[3], 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(locref, [1, 2, 0, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.concat([maxloc, joints], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.concat([maxloc, joints], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_122": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(locref, indices)",
                            "Call"
                        ],
                        [
                            "tf.gather(offset, [1, 0], axis=1)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.gather_nd(locref, indices)",
                            "Call"
                        ],
                        [
                            "tf.gather(offset, [1, 0], axis=1)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "indices": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads['locref']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(locref, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0], l_shape[1], l_shape[2], l_shape[3], 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(locref, [1, 2, 0, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(l_shape[0], l_shape[1], l_shape[2], l_shape[3], 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_153": {
                "variable": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads['locref']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(locref, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0], l_shape[1], l_shape[2], l_shape[3], 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(locref, [1, 2, 0, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads['locref']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(locref, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0], l_shape[1], l_shape[2], l_shape[3], 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(locref, [1, 2, 0, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(l_shape[0] * l_shape[1], -1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_nd_156": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads['locref']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(locref, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0], l_shape[1], l_shape[2], l_shape[3], 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(locref, [1, 2, 0, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.concat([maxloc, joints], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.concat([maxloc, joints], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_157": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(locref, indices)",
                            "Call"
                        ],
                        [
                            "tf.gather(offset, [1, 0], axis=1)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.gather_nd(locref, indices)",
                            "Call"
                        ],
                        [
                            "tf.gather(offset, [1, 0], axis=1)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "indices": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_174": {
                "multi_class_labels": {
                    "value": "batch[Batch.part_score_targets]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "heads[pred_layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weights": {
                    "value": "part_score_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[Batch.part_score_weights] if weigh_part_predictions else 1.0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_114": {
                "values": {
                    "value": "[maxloc, joints]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_116": {
                "params": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.concat([maxloc, joints], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.concat([maxloc, joints], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_144": {
                "values": {
                    "value": "[maxloc, joints]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_147": {
                "params": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.concat([maxloc, joints], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.concat([maxloc, joints], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_110": {
                "x": {
                    "value": "l_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_113": {
                "x": {
                    "value": "l_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_140": {
                "x": {
                    "value": "l_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_143": {
                "x": {
                    "value": "l_shape[2] * l_shape[3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_126": {
                "x": {
                    "value": "tf.transpose(loc)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_161": {
                "x": {
                    "value": "tf.transpose(loc)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_126": {
                "a": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unravel_index(maxloc, (tf.cast(l_shape[0], tf.int64), tf.cast(l_shape[1], tf.int64)))",
                            "Call"
                        ],
                        [
                            "tf.unravel_index(maxloc, (tf.cast(l_shape[0], tf.int64), tf.cast(l_shape[1], tf.int64)))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_161": {
                "a": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unravel_index(maxloc, (tf.cast(l_shape[0], tf.int64), tf.cast(l_shape[1], tf.int64)))",
                            "Call"
                        ],
                        [
                            "tf.unravel_index(maxloc, (tf.cast(l_shape[0], tf.int64), tf.cast(l_shape[1], tf.int64)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/DeepLabCut/deeplabcut/pose_estimation_tensorflow/nnet/pose_net_mobilenet.py": {
        "tensorflow": {
            "constant_73": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.cfg.mean_pixel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "img_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_105": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "heads['part_pred']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_113": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "heads['part_pred']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_transpose_62": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "block4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_116": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "variable": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads['locref']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(locref, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0], l_shape[1], l_shape[2], l_shape[3], 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(locref, [1, 2, 0, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_118": {
                "variable": {
                    "value": "l_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads['locref']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(locref, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0], l_shape[1], l_shape[2], l_shape[3], 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(locref, [1, 2, 0, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(l_shape[0] * l_shape[1], -1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(l_shape[0] * l_shape[1], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_122": {
                "variable": {
                    "value": "maxloc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unravel_index_124": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "maxloc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(maxloc, (1, -1))",
                            "Call"
                        ],
                        [
                            "tf.argmax(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(maxloc, (1, -1))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(tf.cast(l_shape[0], tf.int64), tf.cast(l_shape[1], tf.int64))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "maxloc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "maxloc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(maxloc, (1, -1))",
                            "Call"
                        ],
                        [
                            "tf.argmax(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(maxloc, (1, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "joints",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(0, tf.cast(l_shape[2], dtype=tf.int64))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_128": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.concat([maxloc, joints], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_130": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads['locref']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(locref, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0], l_shape[1], l_shape[2], l_shape[3], 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(locref, [1, 2, 0, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.concat([maxloc, joints], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.concat([maxloc, joints], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_131": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(locref, indices)",
                            "Call"
                        ],
                        [
                            "tf.gather(offset, [1, 0], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(locref, indices)",
                            "Call"
                        ],
                        [
                            "tf.gather(offset, [1, 0], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_132": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather_nd(probs, indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_135": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pose, likelihood]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_140": {
                "variable": {
                    "value": "l_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_142": {
                "variable": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads['locref']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(locref, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0], l_shape[1], l_shape[2], l_shape[3], 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(locref, [1, 2, 0, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(l_shape[0], l_shape[1], l_shape[2], l_shape[3], 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_144": {
                "variable": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads['locref']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(locref, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0], l_shape[1], l_shape[2], l_shape[3], 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(locref, [1, 2, 0, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_149": {
                "variable": {
                    "value": "l_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads['locref']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(locref, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0], l_shape[1], l_shape[2], l_shape[3], 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(locref, [1, 2, 0, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(l_shape[0] * l_shape[1], -1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(l_shape[0] * l_shape[1], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_153": {
                "variable": {
                    "value": "maxloc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unravel_index_154": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "maxloc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(maxloc, (1, -1))",
                            "Call"
                        ],
                        [
                            "tf.argmax(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(maxloc, (1, -1))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(tf.cast(l_shape[0], tf.int64), tf.cast(l_shape[1], tf.int64))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "maxloc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "maxloc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(maxloc, (1, -1))",
                            "Call"
                        ],
                        [
                            "tf.argmax(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(maxloc, (1, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "joints",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(0, tf.cast(l_shape[2] * l_shape[3], dtype=tf.int64))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_158": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.concat([maxloc, joints], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_161": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "locref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads['locref']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(locref, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0], l_shape[1], l_shape[2], l_shape[3], 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(locref, [1, 2, 0, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(locref, (l_shape[0] * l_shape[1], -1, 2))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.concat([maxloc, joints], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.concat([maxloc, joints], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_162": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(locref, indices)",
                            "Call"
                        ],
                        [
                            "tf.gather(offset, [1, 0], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(locref, indices)",
                            "Call"
                        ],
                        [
                            "tf.gather(offset, [1, 0], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather_nd(probs, indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_166": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pose, likelihood]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "pose",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_178": {
                "multi_class_labels": {
                    "value": "batch[Batch.part_score_targets]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "heads[pred_layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weights": {
                    "value": "part_score_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[Batch.part_score_weights] if weigh_part_predictions else 1.0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_128": {
                "values": {
                    "value": "[maxloc, joints]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_132": {
                "params": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.concat([maxloc, joints], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.concat([maxloc, joints], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_158": {
                "values": {
                    "value": "[maxloc, joints]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_163": {
                "params": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(heads['part_pred'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, (l_shape[0] * l_shape[1], -1))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.concat([maxloc, joints], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.concat([maxloc, joints], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_124": {
                "x": {
                    "value": "l_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_127": {
                "x": {
                    "value": "l_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_154": {
                "x": {
                    "value": "l_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_157": {
                "x": {
                    "value": "l_shape[2] * l_shape[3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_134": {
                "x": {
                    "value": "tf.transpose(loc)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_165": {
                "x": {
                    "value": "tf.transpose(loc)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_134": {
                "a": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unravel_index(maxloc, (tf.cast(l_shape[0], tf.int64), tf.cast(l_shape[1], tf.int64)))",
                            "Call"
                        ],
                        [
                            "tf.unravel_index(maxloc, (tf.cast(l_shape[0], tf.int64), tf.cast(l_shape[1], tf.int64)))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_165": {
                "a": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unravel_index(maxloc, (tf.cast(l_shape[0], tf.int64), tf.cast(l_shape[1], tf.int64)))",
                            "Call"
                        ],
                        [
                            "tf.unravel_index(maxloc, (tf.cast(l_shape[0], tf.int64), tf.cast(l_shape[1], tf.int64)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/DeepLabCut/deeplabcut/pose_estimation_tensorflow/nnet/predict.py": {
        "tensorflow": {
            "split_21": {
                "variable": {
                    "value": "vers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_200": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_204": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_205": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/DeepLabCut/deeplabcut/pose_estimation_tensorflow/predict_videos.py": {
        "tensorflow": {
            "split_666": {
                "variable": {
                    "value": "vers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reset_default_graph_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/DeepLabCut/deeplabcut/pose_estimation_tensorflow/train.py": {
        "tensorflow": {
            "split_20": {
                "variable": {
                    "value": "vers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_63": {
                "variable": {
                    "value": "vers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_105": {
                "variable": {
                    "value": "all_variables_to_train",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FIFOQueue_65": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "QUEUE_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "dtypes": {
                    "value": "[tf.float32] * len(batch_spec)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FIFOQueue_67": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "QUEUE_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "dtypes": {
                    "value": "[tf.float32] * len(batch_spec)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConfigProto_152": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/DeepLabCut/deeplabcut/pose_estimation_tensorflow/training.py": {
        "tensorflow": {
            "split_98": {
                "variable": {
                    "value": "vers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/deepgraphpose/dataset.py": {
        "tensorflow": {
            "split_22": {
                "variable": {
                    "value": "vers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/deepgraphpose/helpers/utils_tf.py": {
        "tensorflow": {
            "AdamOptimizer_268": {
                "variable": {
                    "value": "optimizer_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_269": {
                "variable": {
                    "value": "optimizer_wn",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_271": {
                "variable": {
                    "value": "global_step_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step_nn",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_272": {
                "variable": {
                    "value": "global_step_wn",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step_wn",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_30": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "optimizer.compute_gradients(loss)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_31": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(grads, 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_50": {
                "msg": {
                    "value": "'Availble GPUs: {}'.format(', '.join(gpus))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_121": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_123": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_194": {
                "variable": {
                    "value": "avg_loss_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses_nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_207": {
                "variable": {
                    "value": "avg_loss_wn",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses_wn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_24": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_112": {
                "name": {
                    "value": "apply_gradients",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_112": {
                "device_name": {
                    "value": "controller",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_182": {
                "name": {
                    "value": "apply_gradients_nn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_182": {
                "device_name": {
                    "value": "controller",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_196": {
                "name": {
                    "value": "apply_gradients_wn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_196": {
                "device_name": {
                    "value": "controller",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_262": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "device_97": {
                "device_name": {
                    "value": "assign_to_device(id, controller)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_97": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'tower_{}'.format(i)",
                            "Call"
                        ],
                        [
                            "'tower_{}'.format(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_152": {
                "device_name": {
                    "value": "assign_to_device(id, controller)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_152": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'tower_{}'.format(i)",
                            "Call"
                        ],
                        [
                            "'tower_{}'.format(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_101": {
                "name": {
                    "value": "compute_gradients",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_165": {
                "name": {
                    "value": "compute_gradients_nn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_170": {
                "name": {
                    "value": "compute_gradients_wn",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/deepgraphpose/models/eval.py": {
        "tensorflow": {
            "split_16": {
                "variable": {
                    "value": "vers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_21": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "pose",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "src/deepgraphpose/models/fitdgp.py": {
        "tensorflow": {
            "split_45": {
                "variable": {
                    "value": "vers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_996": {
                "variable": {
                    "value": "pred_h_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TF.gather(pred, hidden_marker_pl)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_997": {
                "input_tensor": {
                    "value": "pred_h_sigmoid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(pred_h)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(pred_h)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_998": {
                "input": {
                    "value": "pgm_h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.reduce_max(pred_h_sigmoid, [1]), [1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(tf.reduce_max(pred_h_sigmoid, [1]), [1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1087": {
                "variable": {
                    "value": "targets_box_row0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "targets_all_marker_temporal0[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1088": {
                "variable": {
                    "value": "targets_box_col0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "targets_all_marker_temporal0[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1089": {
                "variable": {
                    "value": "targets_box_row1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "targets_all_marker_temporal1[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1090": {
                "variable": {
                    "value": "targets_box_col1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "targets_all_marker_temporal1[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_min_1092": {
                "variable": {
                    "value": "targets_box_row_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack((targets_box_row0, targets_box_row1), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_1093": {
                "variable": {
                    "value": "targets_box_row_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack((targets_box_row0, targets_box_row1), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_1094": {
                "variable": {
                    "value": "targets_box_col_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack((targets_box_col0, targets_box_col1), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_1095": {
                "variable": {
                    "value": "targets_box_col_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack((targets_box_col0, targets_box_col1), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_1098": {
                "variable": {
                    "value": "targets_box_row_min",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "targets_box_row_min - window",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_1099": {
                "variable": {
                    "value": "targets_box_row_max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "nx_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(vector_field_tf)[1], tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "targets_box_row_max + window",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1100": {
                "variable": {
                    "value": "targets_box_col_min",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "targets_box_col_min - window",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_1101": {
                "variable": {
                    "value": "targets_box_col_max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ny_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(vector_field_tf)[2], tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "targets_box_col_max + window",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_1103": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack((targets_box_row_min / nx_in, targets_box_col_min / ny_in, targets_box_row_max / nx_in, targets_box_col_max / ny_in))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1106": {
                "tensor": {
                    "value": "tf.tile(tf.range(0, nt_batch_pl - 1), [nj])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nj, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1108": {
                "variable": {
                    "value": "vector_field_tf3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector_field_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TF.placeholder(TF.float32, shape=[None, None, None])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "crop_and_resize_1109": {
                "variable": {
                    "value": "vector_field_tf_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "vector_field_tf3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(vector_field_tf, 3)",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.stack((targets_box_row_min / nx_in, targets_box_col_min / ny_in, targets_box_row_max / nx_in, targets_box_col_max / ny_in)))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "box_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(tf.reshape(tf.tile(tf.range(0, nt_batch_pl - 1), [nj]), [nj, -1])), [-1])",
                            "Call"
                        ]
                    ]
                },
                "crop_size": {
                    "value": "[nx_in, ny_in]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1110": {
                "variable": {
                    "value": "vector_field_tf_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vector_field_tf_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(vector_field_tf3, boxes, box_indices, [nx_in, ny_in])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vector_field_tf_crop, [-1, nj, nx_in, ny_in])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nj, nx_in, ny_in]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_1111": {
                "variable": {
                    "value": "vector_field_tf_meanflow",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "vector_field_tf_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(vector_field_tf3, boxes, box_indices, [nx_in, ny_in])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vector_field_tf_crop, [-1, nj, nx_in, ny_in])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_1114": {
                "variable": {
                    "value": "vector_field_tf_meanflow_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vector_field_tf_meanflow_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (vector_field_tf_meanflow + tf.constant(1e-10))",
                            "BinOp"
                        ],
                        [
                            "tf.math.minimum(vector_field_tf_meanflow_inv, 1)",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.log(vector_field_tf_meanflow_inv) * 3)",
                            "Call"
                        ],
                        [
                            "tf.math.minimum(vector_field_tf_meanflow_inv, 1)",
                            "Call"
                        ],
                        [
                            "vector_field_tf_meanflow_inv * TF.reshape(wt_batch_tf, [-1, 1]) / tf.cast(nx_out, tf.float32) / tf.cast(ny_out, tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_1115": {
                "variable": {
                    "value": "vector_field_tf_meanflow_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.log(vector_field_tf_meanflow_inv) * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_1116": {
                "variable": {
                    "value": "vector_field_tf_meanflow_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vector_field_tf_meanflow_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (vector_field_tf_meanflow + tf.constant(1e-10))",
                            "BinOp"
                        ],
                        [
                            "tf.math.minimum(vector_field_tf_meanflow_inv, 1)",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.log(vector_field_tf_meanflow_inv) * 3)",
                            "Call"
                        ],
                        [
                            "tf.math.minimum(vector_field_tf_meanflow_inv, 1)",
                            "Call"
                        ],
                        [
                            "vector_field_tf_meanflow_inv * TF.reshape(wt_batch_tf, [-1, 1]) / tf.cast(nx_out, tf.float32) / tf.cast(ny_out, tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1007": {
                "variable": {
                    "value": "pred_h_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TF.gather(pred, hidden_marker_pl)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_1008": {
                "input_tensor": {
                    "value": "pred_h_sigmoid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(pred_h)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(pred_h)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1009": {
                "input": {
                    "value": "pgm_h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.reduce_max(pred_h_sigmoid, [1]), [1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(tf.reduce_max(pred_h_sigmoid, [1]), [1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_948": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads['part_pred']",
                            "Subscript"
                        ],
                        [
                            "TF.reshape(TF.transpose(pred, [0, 3, 1, 2]), [-1, nx_out, ny_out])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_1003": {
                "x": {
                    "value": "1 - pred_h_scaled + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1073": {
                "x": {
                    "value": "nx_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batcher.datasets[dataset_i].nx_out",
                            "Attribute"
                        ],
                        [
                            "data_batcher.datasets[dataset_i].nx_out",
                            "Attribute"
                        ],
                        [
                            "tf.shape(pred)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1085": {
                "x": {
                    "value": "tf.shape(vector_field_tf)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1092": {
                "values": {
                    "value": "(targets_box_row0, targets_box_row1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1093": {
                "values": {
                    "value": "(targets_box_row0, targets_box_row1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1094": {
                "values": {
                    "value": "(targets_box_col0, targets_box_col1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1095": {
                "values": {
                    "value": "(targets_box_col0, targets_box_col1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_1098": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1100": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1103": {
                "values": {
                    "value": "(targets_box_row_min / nx_in, targets_box_col_min / ny_in, targets_box_row_max / nx_in, targets_box_col_max / ny_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_1106": {
                "a": {
                    "value": "tf.reshape(tf.tile(tf.range(0, nt_batch_pl - 1), [nj]), [nj, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_1117": {
                "x": {
                    "value": "nx_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batcher.datasets[dataset_i].nx_out",
                            "Attribute"
                        ],
                        [
                            "data_batcher.datasets[dataset_i].nx_out",
                            "Attribute"
                        ],
                        [
                            "tf.shape(pred)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_1016": {
                "x": {
                    "value": "1 - pred_h_scaled + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_1113": {
                "value": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_1115": {
                "x": {
                    "value": "vector_field_tf_meanflow_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (vector_field_tf_meanflow + tf.constant(1e-10))",
                            "BinOp"
                        ],
                        [
                            "tf.math.minimum(vector_field_tf_meanflow_inv, 1)",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.log(vector_field_tf_meanflow_inv) * 3)",
                            "Call"
                        ],
                        [
                            "tf.math.minimum(vector_field_tf_meanflow_inv, 1)",
                            "Call"
                        ],
                        [
                            "vector_field_tf_meanflow_inv * TF.reshape(wt_batch_tf, [-1, 1]) / tf.cast(nx_out, tf.float32) / tf.cast(ny_out, tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_1085": {
                "input": {
                    "value": "vector_field_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TF.placeholder(TF.float32, shape=[None, None, None])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_1106": {
                "input": {
                    "value": "tf.range(0, nt_batch_pl - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[nj]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/deepgraphpose/models/fitdgp_util.py": {
        "tensorflow": {
            "split_11": {
                "variable": {
                    "value": "vers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_58": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'block4'",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "tf.constant_initializer(weight_dlc[:, :, :, :nc])",
                    "type": "Call",
                    "possible_values": []
                },
                "biases_initializer": {
                    "value": "tf.constant_initializer(bias_dlc)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "train_flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_flag",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_68": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'block4'",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "train_flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_flag",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_64": {
                "value": {
                    "value": "weight_dlc[:, :, :, :nc]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_65": {
                "value": {
                    "value": "bias_dlc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_dlc",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/deepgraphpose/preprocess/get_morig_labeled_data.py": {
        "tensorflow": {
            "split_18": {
                "variable": {
                    "value": "vers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/deepgraphpose/preprocess/get_morig_prediction_layer.py": {
        "tensorflow": {
            "split_13": {
                "variable": {
                    "value": "vers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_77": {
                "multi_class_labels": {
                    "value": "multi_class_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[Batch.part_score_targets]",
                            "Subscript"
                        ],
                        [
                            "multi_class_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads['part_pred']",
                            "Subscript"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "weights": {
                    "value": "part_score_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[Batch.part_score_weights] if weigh_part_predictions else 1.0",
                            "IfExp"
                        ],
                        [
                            "part_score_weights",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/deepgraphpose/preprocess/get_morig_resnet_outputs.py": {
        "tensorflow": {
            "split_20": {
                "variable": {
                    "value": "vers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/deepgraphpose/preprocess/get_morig_training_data.py": {
        "tensorflow": {
            "split_29": {
                "variable": {
                    "value": "vers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/deepgraphpose/preprocess/run_model_original.py": {
        "tensorflow": {
            "split_16": {
                "variable": {
                    "value": "vers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/deepgraphpose/preprocess_test/get_test_resnet_outputs.py": {
        "tensorflow": {
            "split_17": {
                "variable": {
                    "value": "vers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_22": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/deepgraphpose/preprocess_test/get_test_resnet_outputs_v0.py": {
        "tensorflow": {
            "split_18": {
                "variable": {
                    "value": "vers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_23": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/deepgraphpose/utils_model.py": {
        "tensorflow": {
            "split_7": {
                "variable": {
                    "value": "vers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}