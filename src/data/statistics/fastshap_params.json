{
    "fastshap/fastshap.py": {
        "torch": {
            "ones_100": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "imputer.num_players",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next(explainer.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(explainer.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.explainer.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_151": {
                "variable": {
                    "value": "val_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "val_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(val_values, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "grand",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grand",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(grand)",
                            "Call"
                        ],
                        [
                            "grand.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "grand.to(device)",
                            "Call"
                        ],
                        [
                            "grand.to(device)",
                            "Call"
                        ],
                        [
                            "calculate_grand_coalition(x, self.imputer, len(x), self.link, device, 0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_142": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DatasetRepeat([val_set, TensorDataset(val_S[:, i])])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MSELoss_172": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_334": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(x_train)",
                            "Call"
                        ],
                        [
                            "TensorDataset(train_data)",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Name"
                        ],
                        [
                            "DatasetRepeat([train_set, TensorDataset(grand_train)])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_349": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(x_val)",
                            "Call"
                        ],
                        [
                            "TensorDataset(val_data)",
                            "Call"
                        ],
                        [
                            "val_data",
                            "Name"
                        ],
                        [
                            "DatasetRepeat([val_set, TensorDataset(grand_val, val_S, val_values)])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size * num_samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MSELoss_353": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_354": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "explainer.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_355": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(explainer.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "lr_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "patience": {
                    "value": "lookback // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "min_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "verbose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_20": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "explainer(x)",
                            "Call"
                        ],
                        [
                            "pred.reshape(len(x), -1, num_players)",
                            "Call"
                        ],
                        [
                            "pred.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "pred.reshape(len(x), num_players, -1)",
                            "Call"
                        ],
                        [
                            "normalization(pred, grand, null)",
                            "Call"
                        ],
                        [
                            "pred.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "pred.reshape(image_shape)",
                            "Call"
                        ],
                        [
                            "evaluate_explainer(self.explainer, self.normalization, x, grand, self.null, self.imputer.num_players, inference=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "explainer(x)",
                            "Call"
                        ],
                        [
                            "pred.reshape(len(x), -1, num_players)",
                            "Call"
                        ],
                        [
                            "pred.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "pred.reshape(len(x), num_players, -1)",
                            "Call"
                        ],
                        [
                            "normalization(pred, grand, null)",
                            "Call"
                        ],
                        [
                            "pred.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "pred.reshape(image_shape)",
                            "Call"
                        ],
                        [
                            "evaluate_explainer(self.explainer, self.normalization, x, grand, self.null, self.imputer.num_players, inference=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_219": {
                "variable": {
                    "value": "self.link",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_293": {
                "variable": {
                    "value": "x_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_294": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_305": {
                "variable": {
                    "value": "x_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "val_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_306": {
                "variable": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_325": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_players",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.num_players",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next(explainer.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(explainer.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.explainer.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_450": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_149": {
                "tensors": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "values.to(device)",
                            "Call"
                        ],
                        [
                            "link(imputer(x_tiled, S))",
                            "Call"
                        ],
                        [
                            "values.reshape(batch_size, num_samples, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_296": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_308": {
                "variable": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "val_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_341": {
                "seed": {
                    "value": "validation_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_363": {
                "seed": {
                    "value": "training_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_460": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_players",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next(explainer.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(explainer.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.explainer.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_468": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_141": {
                "*tensors": {
                    "value": "val_S[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_186": {
                "input": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "S.to(device)",
                            "Call"
                        ],
                        [
                            "sampler.sample(batch_size * num_samples, paired_sampling=paired_sampling)",
                            "Call"
                        ],
                        [
                            "S.to(device)",
                            "Call"
                        ],
                        [
                            "S.reshape(batch_size, num_samples, num_players)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "explainer(x)",
                            "Call"
                        ],
                        [
                            "pred.reshape(len(x), -1, num_players)",
                            "Call"
                        ],
                        [
                            "pred.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "pred.reshape(len(x), num_players, -1)",
                            "Call"
                        ],
                        [
                            "normalization(pred, grand, null)",
                            "Call"
                        ],
                        [
                            "pred.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "pred.reshape(image_shape)",
                            "Call"
                        ],
                        [
                            "evaluate_explainer(self.explainer, self.normalization, x, grand, self.null, self.imputer.num_players, inference=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_333": {
                "*tensors": {
                    "value": "grand_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_348": {
                "*tensors": {
                    "value": "grand_val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_459": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_396": {
                "input": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "S.to(device)",
                            "Call"
                        ],
                        [
                            "sampler.sample(batch_size * num_samples, paired_sampling=paired_sampling)",
                            "Call"
                        ],
                        [
                            "S.to(device)",
                            "Call"
                        ],
                        [
                            "S.reshape(batch_size, num_samples, num_players)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "explainer(x)",
                            "Call"
                        ],
                        [
                            "pred.reshape(len(x), -1, num_players)",
                            "Call"
                        ],
                        [
                            "pred.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "pred.reshape(len(x), num_players, -1)",
                            "Call"
                        ],
                        [
                            "normalization(pred, grand, null)",
                            "Call"
                        ],
                        [
                            "pred.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "pred.reshape(image_shape)",
                            "Call"
                        ],
                        [
                            "evaluate_explainer(self.explainer, self.normalization, x, grand, self.null, self.imputer.num_players, inference=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fastshap/image_imputers.py": {
        "torch": {
            "Identity_24": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_26": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "superpixel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Identity_78": {
                "variable": {
                    "value": "self.link",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fastshap/image_surrogate.py": {
        "torch": {
            "DataLoader_52": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "RandomSampler_136": {
                "variable": {
                    "value": "random_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Name"
                        ],
                        [
                            "TensorDataset(train_data)",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Name"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "int(np.ceil(len(train_set) / batch_size)) * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchSampler_139": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "random_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_set, replacement=True, num_samples=int(np.ceil(len(train_set) / batch_size)) * batch_size)",
                            "Call"
                        ],
                        [
                            "RandomSampler(train_set, replacement=True, num_samples=int(np.ceil(len(train_set) / batch_size)) * batch_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_141": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Name"
                        ],
                        [
                            "TensorDataset(train_data)",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Name"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BatchSampler(random_sampler, batch_size=batch_size, drop_last=True)",
                            "Call"
                        ],
                        [
                            "BatchSampler(random_sampler, batch_size=batch_size, drop_last=True)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_166": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(x_val_repeat, y_val_repeat, S_val)",
                            "Call"
                        ],
                        [
                            "DatasetRepeat([val_data, TensorDataset(S_val)])",
                            "Call"
                        ],
                        [
                            "TensorDataset(val_data_repeat, y_val_repeat, S_val)",
                            "Call"
                        ],
                        [
                            "DatasetRepeat([val_data, TensorDataset(y_val_repeat, S_val)])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "validation_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Name"
                        ],
                        [
                            "batch_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_172": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "surrogate.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_173": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(surrogate.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optim.Adam(surrogate.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "lr_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "patience": {
                    "value": "lookback // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "min_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "verbose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RandomSampler_298": {
                "variable": {
                    "value": "random_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Name"
                        ],
                        [
                            "TensorDataset(train_data)",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Name"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "int(np.ceil(len(train_set) / batch_size)) * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchSampler_301": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "random_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_set, replacement=True, num_samples=int(np.ceil(len(train_set) / batch_size)) * batch_size)",
                            "Call"
                        ],
                        [
                            "RandomSampler(train_set, replacement=True, num_samples=int(np.ceil(len(train_set) / batch_size)) * batch_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_303": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Name"
                        ],
                        [
                            "TensorDataset(train_data)",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Name"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BatchSampler(random_sampler, batch_size=batch_size, drop_last=True)",
                            "Call"
                        ],
                        [
                            "BatchSampler(random_sampler, batch_size=batch_size, drop_last=True)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_341": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(x_val_repeat, y_val_repeat, S_val)",
                            "Call"
                        ],
                        [
                            "DatasetRepeat([val_data, TensorDataset(S_val)])",
                            "Call"
                        ],
                        [
                            "TensorDataset(val_data_repeat, y_val_repeat, S_val)",
                            "Call"
                        ],
                        [
                            "DatasetRepeat([val_data, TensorDataset(y_val_repeat, S_val)])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "validation_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Name"
                        ],
                        [
                            "batch_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_347": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "surrogate.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_348": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(surrogate.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optim.Adam(surrogate.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "lr_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "patience": {
                    "value": "lookback // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "min_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "verbose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_128": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_157": {
                "variable": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_val_repeat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_287": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_data, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_290": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_315": {
                "variable": {
                    "value": "val_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "val_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(val_data, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_326": {
                "variable": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "val_data_repeat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "x_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(x_train, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "variable": {
                    "value": "y_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(y_train, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_147": {
                "seed": {
                    "value": "validation_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "x_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(x_val, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "y_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(y_val, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "generate_labels(TensorDataset(val_data), original_model, validation_batch_size, num_workers)",
                            "Call"
                        ],
                        [
                            "generate_labels(val_data, original_model, validation_batch_size, num_workers)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_181": {
                "seed": {
                    "value": "training_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_309": {
                "seed": {
                    "value": "validation_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_356": {
                "seed": {
                    "value": "training_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorDataset_319": {
                "*tensors": {
                    "value": "val_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_370": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_159": {
                "*tensors": {
                    "value": "S_val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_336": {
                "*tensors": {
                    "value": "y_val_repeat",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fastshap/surrogate.py": {
        "torch": {
            "DataLoader_53": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "RandomSampler_148": {
                "variable": {
                    "value": "random_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Name"
                        ],
                        [
                            "TensorDataset(train_data)",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Name"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "int(np.ceil(len(train_set) / batch_size)) * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchSampler_151": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "random_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_set, replacement=True, num_samples=int(np.ceil(len(train_set) / batch_size)) * batch_size)",
                            "Call"
                        ],
                        [
                            "RandomSampler(train_set, replacement=True, num_samples=int(np.ceil(len(train_set) / batch_size)) * batch_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_153": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Name"
                        ],
                        [
                            "TensorDataset(train_data)",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Name"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BatchSampler(random_sampler, batch_size=batch_size, drop_last=True)",
                            "Call"
                        ],
                        [
                            "BatchSampler(random_sampler, batch_size=batch_size, drop_last=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_178": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(x_val_repeat, y_val_repeat, S_val)",
                            "Call"
                        ],
                        [
                            "DatasetRepeat([val_data, TensorDataset(S_val)])",
                            "Call"
                        ],
                        [
                            "TensorDataset(val_data_repeat, y_val_repeat, S_val)",
                            "Call"
                        ],
                        [
                            "DatasetRepeat([val_data, TensorDataset(y_val_repeat, S_val)])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "validation_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Name"
                        ],
                        [
                            "batch_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_183": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "surrogate.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_184": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(surrogate.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optim.Adam(surrogate.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "lr_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "patience": {
                    "value": "lookback // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "min_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "verbose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RandomSampler_303": {
                "variable": {
                    "value": "random_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Name"
                        ],
                        [
                            "TensorDataset(train_data)",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Name"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "int(np.ceil(len(train_set) / batch_size)) * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchSampler_306": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "random_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_set, replacement=True, num_samples=int(np.ceil(len(train_set) / batch_size)) * batch_size)",
                            "Call"
                        ],
                        [
                            "RandomSampler(train_set, replacement=True, num_samples=int(np.ceil(len(train_set) / batch_size)) * batch_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_308": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Name"
                        ],
                        [
                            "TensorDataset(train_data)",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Name"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BatchSampler(random_sampler, batch_size=batch_size, drop_last=True)",
                            "Call"
                        ],
                        [
                            "BatchSampler(random_sampler, batch_size=batch_size, drop_last=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_345": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(x_val_repeat, y_val_repeat, S_val)",
                            "Call"
                        ],
                        [
                            "DatasetRepeat([val_data, TensorDataset(S_val)])",
                            "Call"
                        ],
                        [
                            "TensorDataset(val_data_repeat, y_val_repeat, S_val)",
                            "Call"
                        ],
                        [
                            "DatasetRepeat([val_data, TensorDataset(y_val_repeat, S_val)])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "validation_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Name"
                        ],
                        [
                            "batch_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_350": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "surrogate.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_351": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(surrogate.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optim.Adam(surrogate.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "lr_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "patience": {
                    "value": "lookback // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "min_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "verbose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_52": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "self.groups_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next(surrogate.surrogate.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "next(surrogate.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(surrogate.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(surrogate.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "TensorDataset_140": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_168": {
                "variable": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_val_repeat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_data, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_295": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_319": {
                "variable": {
                    "value": "val_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "val_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(val_data, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_330": {
                "variable": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "val_data_repeat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_430": {
                "variable": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "S.to(device)",
                            "Call"
                        ],
                        [
                            "sampler.sample(batch_size).to(device=device)",
                            "Call"
                        ],
                        [
                            "sampler.sample(batch_size).to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.mm(S, self.groups_matrix)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.groups_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "variable": {
                    "value": "x_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(x_train, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "y_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(y_train, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_158": {
                "seed": {
                    "value": "validation_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_164": {
                "variable": {
                    "value": "x_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(x_val, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "y_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(y_val, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "generate_labels(TensorDataset(val_data), original_model, validation_batch_size)",
                            "Call"
                        ],
                        [
                            "generate_labels(val_data, original_model, validation_batch_size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_192": {
                "seed": {
                    "value": "training_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_313": {
                "seed": {
                    "value": "validation_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_359": {
                "seed": {
                    "value": "training_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorDataset_323": {
                "*tensors": {
                    "value": "val_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_171": {
                "*tensors": {
                    "value": "S_val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_340": {
                "*tensors": {
                    "value": "y_val_repeat",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fastshap/tabular_imputers.py": {
        "torch": {
            "mean_177": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.link(self.model(x_baseline))",
                            "Call"
                        ],
                        [
                            "pred.cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "self.link(self.model(x_tiled))",
                            "Call"
                        ],
                        [
                            "pred.reshape(len(x), self.n_background, *pred.shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.mean(pred, dim=1)",
                            "Call"
                        ],
                        [
                            "pred.cpu().data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "baseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "baseline",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(baseline, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "baseline.to(device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Identity_33": {
                "variable": {
                    "value": "self.link",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "self.groups_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "baseline.shape[1]",
                            "Subscript"
                        ],
                        [
                            "background.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(x, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(S, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.mm(S, self.groups_matrix)",
                            "Call"
                        ],
                        [
                            "torch.tensor(S, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.mm(S, self.groups_matrix)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_75": {
                "variable": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(S, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.mm(S, self.groups_matrix)",
                            "Call"
                        ],
                        [
                            "torch.tensor(S, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.mm(S, self.groups_matrix)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.groups_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "background",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "background",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(background, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "background.to(device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Identity_117": {
                "variable": {
                    "value": "self.link",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "self.groups_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "baseline.shape[1]",
                            "Subscript"
                        ],
                        [
                            "background.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(x, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(S, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.mm(S, self.groups_matrix)",
                            "Call"
                        ],
                        [
                            "torch.tensor(S, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.mm(S, self.groups_matrix)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_159": {
                "variable": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(S, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.mm(S, self.groups_matrix)",
                            "Call"
                        ],
                        [
                            "torch.tensor(S, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.mm(S, self.groups_matrix)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.groups_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fastshap/utils.py": {
        "torch": {
            "KLDivLoss_67": {
                "variable": {
                    "value": "self.kld",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'batchmean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "log_target": {
                    "value": "log_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_150": {
                "variable": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_players",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_170": {
                "variable": {
                    "value": "arange",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_players",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Categorical_173": {
                "variable": {
                    "value": "self.categorical",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 / (arange * (num_players - arange))",
                            "BinOp"
                        ],
                        [
                            "w / torch.sum(w)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tril_175": {
                "variable": {
                    "value": "self.tril",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(num_players - 1, num_players, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, S)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, S)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_172": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 / (arange * (num_players - arange))",
                            "BinOp"
                        ],
                        [
                            "w / torch.sum(w)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_176": {
                "*size": {
                    "value": "num_players - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_players",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_151": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_156": {
                "n": {
                    "value": "self.num_players",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_194": {
                "n": {
                    "value": "self.num_players",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/resnet.py": {
        "torch": {
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_90": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "relu_107": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "avg_pool2d_115": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/unet.py": {
        "torch": {
            "Sequential_55": {
                "variable": {
                    "value": "self.multi_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.maxpool_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_107": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, [diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * channels",
                            "BinOp"
                        ],
                        [
                            "out_channels * 2",
                            "BinOp"
                        ],
                        [
                            "channels // 2",
                            "BinOp"
                        ],
                        [
                            "channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_153": {
                "variable": {
                    "value": "self.down_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "down_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_169": {
                "variable": {
                    "value": "self.up_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "up_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Upsample_91": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_96": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_70": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * channels",
                            "BinOp"
                        ],
                        [
                            "out_channels * 2",
                            "BinOp"
                        ],
                        [
                            "channels // 2",
                            "BinOp"
                        ],
                        [
                            "channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * channels",
                            "BinOp"
                        ],
                        [
                            "out_channels * 2",
                            "BinOp"
                        ],
                        [
                            "channels // 2",
                            "BinOp"
                        ],
                        [
                            "channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * channels",
                            "BinOp"
                        ],
                        [
                            "out_channels * 2",
                            "BinOp"
                        ],
                        [
                            "channels // 2",
                            "BinOp"
                        ],
                        [
                            "channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}