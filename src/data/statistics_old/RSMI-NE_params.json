{
    "coarsegrainer/src/build_dataset.py": {
        "tensorflow": {
            "TFRecordWriter_100": {
                "variable": {
                    "value": "writer",
                    "type": "Name",
                    "possible_values": []
                },
                "path": {
                    "value": "RSMIdat_filename(**data_params, region=features[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parse_tensor_73": {
                "serialized": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.load(filename(**self.system_params, T=self.T, fileformat='npy', basedir=basedir))",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "type",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_402": {
                "variable": {
                    "value": "E",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_ext[t]",
                            "Subscript"
                        ],
                        [
                            "x_ext[t]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordDataset_78": {
                "filenames": {
                    "value": "RSMIdat_filename(**data_params, region=feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_493": {
                "variable": {
                    "value": "Vs",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[Vs, Vs_]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_494": {
                "variable": {
                    "value": "Es",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[Es, Es_]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_371": {
                "x": {
                    "value": "get_E(config, index, buffer_size, ll, cap=cap)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "coarsegrainer/src/cg_layers.py": {
        "tensorflow": {
            "Variable_48": {
                "variable": {
                    "value": "self.ws",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "init_rule",
                            "Name"
                        ],
                        [
                            "w_init(shape=input_shape + (hidden_dim,), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_77": {
                "variable": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_78": {
                "variable": {
                    "value": "self.ws",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "w_init(shape=input_shape + (hidden_dim,), dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_45": {
                "variable": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_57": {
                "equation": {
                    "value": "tijk,ijs->tsk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.ws",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_88": {
                "equation": {
                    "value": "tijkl,ijks->tsl",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.ws",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "self._\u039b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[self.coarse_grainer, tfkl.Activation(conv_activation), tfkl.Flatten()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self._\u039b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[self.coarse_grainer, tfkl.Activation(tf.nn.softmax), tfkl.Flatten(), self.embedder]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self._\u039b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[self.coarse_grainer, tfkl.Activation(tf.nn.softmax), tfkl.Flatten(), self.embedder]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self._\u039b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[self.coarse_grainer, tfkl.Flatten(), self.embedder]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "self._\u039b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[self.coarse_grainer, tfkl.Flatten(), self.embedder]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "coarsegrainer/src/cg_optimisers.py": {
        "tensorflow": {
            "Adam_102": {
                "variable": {
                    "value": "opt",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "opt_params['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GradientTape_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_125": {
                "device_name": {
                    "value": "'/GPU:' + str(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "coarsegrainer/src/cg_utils.py": {
        "tensorflow": {
            "cast_20": {
                "x": {
                    "value": "np.reshape(z, (np.shape(z)[0], 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_22": {
                "x": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mi_estimator/src/VBMI_bounds.py": {
        "tensorflow": {
            "eye_31": {
                "variable": {
                    "value": "positive_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "num_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tensor_diag_part_47": {
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f_ansatz(x, y)",
                            "Call"
                        ],
                        [
                            "f_ansatz(x, y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mi_estimator/src/VBMI_estimators.py": {
        "tensorflow": {
            "Adam_33": {
                "variable": {
                    "value": "opt",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "opt_params['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GradientTape_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mi_estimator/src/critics.py": {
        "tensorflow": {
            "einsum_46": {
                "equation": {
                    "value": "ij,kj->ik",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self._h(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self._g(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mi_estimator/src/utils.py": {
        "tensorflow": {
            "log_33": {
                "variable": {
                    "value": "log_num_elem",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "num_samples - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_35": {
                "variable": {
                    "value": "log_num_elem",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "num_samples * (num_samples - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "layers": {
                    "value": "[tfkl.Dense(hidden_dim, activation) for _ in range(layers)] + [tfkl.Dense(output_dim)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_13": {
                "x": {
                    "value": "np.reshape(z, (np.shape(z)[0], 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_15": {
                "x": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_logsumexp_36": {
                "input_tensor": {
                    "value": "x - tf.linalg.tensor_diag(np.inf * tf.ones(num_samples))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_diag_36": {
                "diagonal": {
                    "value": "np.inf * tf.ones(num_samples)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_36": {
                "shape": {
                    "value": "num_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0].value",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    }
}