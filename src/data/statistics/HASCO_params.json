{
    "src/benchmark/keras_extend.py": {
        "tensorflow": {}
    },
    "src/flextensor/measure.py": {
        "torch": {}
    },
    "src/flextensor/model.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_80": {
                "variable": {
                    "value": "(ret_p_values, batch_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.judger(self.inputs_to_judger).reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(batch_size, self.subspace.size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adadelta_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.pre_judger.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_215": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_217": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_220": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_222": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_225": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_227": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_230": {
                "variable": {
                    "value": "self.linear4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_232": {
                "variable": {
                    "value": "self.dropout4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_235": {
                "variable": {
                    "value": "self.linear5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_240": {
                "variable": {
                    "value": "self.linear6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adadelta_427": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.performance_judger.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_152": {
                "obj": {
                    "value": "self.pre_judger.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_479": {
                "obj": {
                    "value": "self.performance_judger.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "input_len",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_104": {
                "variable": {
                    "value": "(_, choice)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_155": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_476": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_205": {
                "input": {
                    "value": "t[i] - t[j]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_206": {
                "input": {
                    "value": "1 + torch.exp(-tmp)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_136": {
                "input": {
                    "value": "y - target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_206": {
                "input": {
                    "value": "-tmp",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_135": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(epsilon * np.exp(-trial * gamma), 0.1)",
                            "Call"
                        ],
                        [
                            "self.post_judger(torch.FloatTensor(post_state)).detach()",
                            "Call"
                        ],
                        [
                            "np.exp(-gamma * (value - self.top1_value()) / self.top1_value())",
                            "Call"
                        ],
                        [
                            "np.exp(-gamma * (e.value - self.top1_value()) / self.top1_value())",
                            "Call"
                        ],
                        [
                            "train_data[p_data][1]",
                            "Subscript"
                        ],
                        [
                            "train_data[p_data][1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/flextensor/scheduler.py": {
        "torch": {}
    },
    "src/flextensor/train.py": {
        "torch": {
            "device_146": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adadelta_154": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mse_loss_205": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs_torch).reshape(-1)",
                            "Call"
                        ],
                        [
                            "model(inputs_torch).reshape(-1)",
                            "Call"
                        ],
                        [
                            "model(inputs_torch)",
                            "Call"
                        ],
                        [
                            "model(inputs_torch)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets_torch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(targets).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(targets).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_214": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mse_loss_179": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs_torch).reshape(-1)",
                            "Call"
                        ],
                        [
                            "model(inputs_torch).reshape(-1)",
                            "Call"
                        ],
                        [
                            "model(inputs_torch)",
                            "Call"
                        ],
                        [
                            "model(inputs_torch)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets_torch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(targets).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(targets).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/flextensor/utils.py": {
        "torch": {
            "mean_139": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_like_177": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_179": {
                "variable": {
                    "value": "soft_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits + -Variable(torch.log(-torch.log(G + epsilon) + epsilon))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_181": {
                "variable": {
                    "value": "hard_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(y, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_140": {
                "input": {
                    "value": "input - m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_140": {
                "input": {
                    "value": "torch.pow(input - m, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_191": {
                "input": {
                    "value": "right - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_178": {
                "input": {
                    "value": "G + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}