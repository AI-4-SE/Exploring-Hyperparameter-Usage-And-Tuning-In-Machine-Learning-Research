{
    "tensor_rl/agents/func_approx/GradientBoostingAgentClass.py": {
        "sklearn": {
            "GradientBoostingRegressor_139": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "loss": {
                    "value": "ls",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "1",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "self.max_depth",
                    "possible_values": []
                }
            }
        }
    },
    "examples/simple_example.py": {
        "tensorflow": {}
    },
    "tensor_rl/agents/ActorCriticAgentClass.py": {
        "tensorflow": {
            "placeholder_44": {
                "variable": {
                    "value": "self.actor_critic_grad",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, len(self.actions)]",
                    "possible_values": []
                }
            },
            "gradients_47": {
                "variable": {
                    "value": "self.actor_grads",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.actor_model.output",
                    "possible_values": []
                },
                "xs": {
                    "value": "actor_model_weights",
                    "possible_values": [
                        [
                            "self.actor_model.trainable_weights",
                            "Attribute"
                        ],
                        [
                            "self.actor_model.get_weights()",
                            "Call"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "-self.actor_critic_grad",
                    "possible_values": []
                }
            },
            "AdamOptimizer_49": {
                "variable": {
                    "value": "self.optimize",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "possible_values": []
                }
            },
            "gradients_56": {
                "variable": {
                    "value": "self.critic_grads",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.critic_model.output",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.critic_action_input",
                    "possible_values": []
                }
            },
            "initialize_all_variables_60": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tensor_rl/agents/RMaxTensorAgentClass.py": {
        "tensorflow": {
            "set_random_seed_22": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "get_variable_618": {
                "variable": {
                    "value": "sparsity_mask",
                    "possible_values": []
                },
                "name": {
                    "value": "sparsity_mask",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.convert_to_tensor(mask, tf.float32)",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "get_variable_619": {
                "variable": {
                    "value": "noisy_observation",
                    "possible_values": []
                },
                "name": {
                    "value": "noisy_observation",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.convert_to_tensor(noisy_observation, tf.float32)",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "reduce_sum_622": {
                "variable": {
                    "value": "observed_total",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sparsity_mask",
                    "possible_values": [
                        [
                            "tf.get_variable('sparsity_mask', initializer=tf.convert_to_tensor(mask, tf.float32), trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_628": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "possible_values": []
                }
            },
            "Session_631": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reset_default_graph_617": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reduce_sum_626": {
                "input_tensor": {
                    "value": "(sparsity_mask * t3f.full(estimated) - sparse_observation) ** 2",
                    "possible_values": []
                }
            },
            "global_variables_initializer_632": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "convert_to_tensor_618": {
                "value": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "np.zeros(shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "convert_to_tensor_619": {
                "value": {
                    "value": "noisy_observation",
                    "possible_values": [
                        [
                            "tf.get_variable('noisy_observation', initializer=tf.convert_to_tensor(noisy_observation, tf.float32), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            }
        }
    },
    "tensor_rl/agents/func_approx/DQNAgentClass.py": {
        "tensorflow": {
            "Session_108": {
                "variable": {
                    "value": "self.sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Saver_119": {
                "variable": {
                    "value": "self.saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "self.image",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.x_dim, self.y_dim, self.num_channels]",
                    "possible_values": []
                },
                "name": {
                    "value": "image",
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "variable": {
                    "value": "self.targetQ",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "possible_values": []
                },
                "name": {
                    "value": "targetQ",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "self.actions",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "possible_values": []
                }
            },
            "argmax_143": {
                "variable": {
                    "value": "self.predict",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "AdamOptimizer_147": {
                "variable": {
                    "value": "self.train_op",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "possible_values": []
                }
            },
            "reshape_150": {
                "variable": {
                    "value": "flattened_input",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inpt",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_channels * self.x_dim * self.y_dim]",
                    "possible_values": []
                }
            },
            "one_hot_159": {
                "variable": {
                    "value": "actions_onehot",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.actions",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_actions",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reduce_sum_160": {
                "variable": {
                    "value": "Q",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "actions_onehot * self.out",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "trainable_variables_35": {
                "variable": {
                    "value": "vs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "dense_154": {
                "variable": {
                    "value": "curr_layer",
                    "possible_values": []
                },
                "inputs": {
                    "value": "curr_layer",
                    "possible_values": [
                        [
                            "flattened_input",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(curr_layer, units=layer_size, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "layer_size",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                }
            },
            "dense_156": {
                "inputs": {
                    "value": "curr_layer",
                    "possible_values": [
                        [
                            "flattened_input",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(curr_layer, units=layer_size, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_actions",
                    "possible_values": []
                }
            },
            "reduce_mean_161": {
                "input_tensor": {
                    "value": "tf.square(self.targetQ - Q)",
                    "possible_values": []
                }
            },
            "global_variables_initializer_121": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "square_161": {
                "x": {
                    "value": "self.targetQ - Q",
                    "possible_values": []
                }
            },
            "trainable_variables_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}