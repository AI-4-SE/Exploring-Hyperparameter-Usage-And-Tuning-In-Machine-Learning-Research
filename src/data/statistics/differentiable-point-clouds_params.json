{
    "dpc/models/model_base.py": {
        "tensorflow": {
            "expand_dims_9": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(cfg.batch_size) * cfg.step_size + view_idx",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [step_size * quantity, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_10": {
                "params": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(cfg.batch_size) * cfg.step_size + view_idx",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [step_size * quantity, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "py_func_64": {
                "variable": {
                    "value": "(indices, valid_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "batch_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[num_actual_views]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.int64, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(cfg.batch_size) * cfg.step_size + view_idx",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [step_size * quantity, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[step_size * quantity, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "inputs[valid_samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "valid_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(0, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((valid_samples, valid_samples_m), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[step_size * quantity]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_68": {
                "variable": {
                    "value": "inputs[masks]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "raw_inputs['mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(cfg.batch_size) * cfg.step_size + view_idx",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [step_size * quantity, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_69": {
                "variable": {
                    "value": "inputs[images]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "raw_inputs['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(cfg.batch_size) * cfg.step_size + view_idx",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [step_size * quantity, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_71": {
                "variable": {
                    "value": "inputs[depths]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "raw_inputs['depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(cfg.batch_size) * cfg.step_size + view_idx",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [step_size * quantity, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_89": {
                "variable": {
                    "value": "matrices",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "raw_inputs['extrinsic']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(cfg.batch_size) * cfg.step_size + view_idx",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [step_size * quantity, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "py_func_91": {
                "variable": {
                    "value": "extr_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "fix_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[matrices]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "inputs[matrices]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "extr_tf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.py_func(fix_matrix, [matrices], tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "orig_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matrices.shape",
                            "Attribute"
                        ],
                        [
                            "cam_pos.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "gather_nd_94": {
                "variable": {
                    "value": "cam_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "raw_inputs['cam_pos']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(cfg.batch_size) * cfg.step_size + view_idx",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [step_size * quantity, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "py_func_96": {
                "variable": {
                    "value": "quaternion",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "quaternion_from_campos_wrapper",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[cam_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "inputs[camera_quaternion]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "quaternion",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.py_func(quaternion_from_campos_wrapper, [cam_pos], tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[orig_shape[0], 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_62": {
                "value": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dpc/models/model_pc.py": {
        "tensorflow": {
            "expand_dims_25": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_28": {
                "variable": {
                    "value": "tiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tiler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1 for _ in range(len(orig_shape) + 1)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "final",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tiled",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(e, tiler)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[-1]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_39": {
                "variable": {
                    "value": "sigma_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sigma_rel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.pc_relative_sigma + global_step / num_steps * diff",
                            "BinOp"
                        ],
                        [
                            "tf.cast(sigma_rel, tf.float32)",
                            "Call"
                        ],
                        [
                            "get_smooth_sigma(cfg, self._global_step)",
                            "Call"
                        ],
                        [
                            "self._sigma_rel",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_53": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(global_step, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(global_step, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_62": {
                "variable": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keep_prob_start * tf.exp(alpha * x)",
                            "BinOp"
                        ],
                        [
                            "k * x + b",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(keep_prob, keep_prob_start, keep_prob_end)",
                            "Call"
                        ],
                        [
                            "tf.reshape(keep_prob, [])",
                            "Call"
                        ],
                        [
                            "k * x + b",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(keep_prob, keep_prob_start, keep_prob_end)",
                            "Call"
                        ],
                        [
                            "tf.reshape(keep_prob, [])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "keep_prob_start",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.pc_point_dropout",
                            "Attribute"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "keep_prob_end",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keep_prob_start * tf.exp(alpha * x)",
                            "BinOp"
                        ],
                        [
                            "k * x + b",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(keep_prob, keep_prob_start, keep_prob_end)",
                            "Call"
                        ],
                        [
                            "tf.reshape(keep_prob, [])",
                            "Call"
                        ],
                        [
                            "k * x + b",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(keep_prob, keep_prob_start, keep_prob_end)",
                            "Call"
                        ],
                        [
                            "tf.reshape(keep_prob, [])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_73": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(global_step, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(global_step, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_78": {
                "variable": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keep_prob_start * tf.exp(alpha * x)",
                            "BinOp"
                        ],
                        [
                            "k * x + b",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(keep_prob, keep_prob_start, keep_prob_end)",
                            "Call"
                        ],
                        [
                            "tf.reshape(keep_prob, [])",
                            "Call"
                        ],
                        [
                            "k * x + b",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(keep_prob, keep_prob_start, keep_prob_end)",
                            "Call"
                        ],
                        [
                            "tf.reshape(keep_prob, [])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "keep_prob_start",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.pc_point_dropout",
                            "Attribute"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "keep_prob_end",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keep_prob_start * tf.exp(alpha * x)",
                            "BinOp"
                        ],
                        [
                            "k * x + b",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(keep_prob, keep_prob_start, keep_prob_end)",
                            "Call"
                        ],
                        [
                            "tf.reshape(keep_prob, [])",
                            "Call"
                        ],
                        [
                            "k * x + b",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(keep_prob, keep_prob_start, keep_prob_end)",
                            "Call"
                        ],
                        [
                            "tf.reshape(keep_prob, [])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_95": {
                "variable": {
                    "value": "w_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "init_stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.025",
                            "Constant"
                        ],
                        [
                            "0.025",
                            "Constant"
                        ]
                    ]
                },
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_115": {
                "variable": {
                    "value": "w_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "init_stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.025",
                            "Constant"
                        ],
                        [
                            "0.025",
                            "Constant"
                        ]
                    ]
                },
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_58": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "keep_prob_end / keep_prob_start",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_64": {
                "x": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keep_prob_start * tf.exp(alpha * x)",
                            "BinOp"
                        ],
                        [
                            "k * x + b",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(keep_prob, keep_prob_start, keep_prob_end)",
                            "Call"
                        ],
                        [
                            "tf.reshape(keep_prob, [])",
                            "Call"
                        ],
                        [
                            "k * x + b",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(keep_prob, keep_prob_start, keep_prob_end)",
                            "Call"
                        ],
                        [
                            "tf.reshape(keep_prob, [])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_80": {
                "x": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keep_prob_start * tf.exp(alpha * x)",
                            "BinOp"
                        ],
                        [
                            "k * x + b",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(keep_prob, keep_prob_start, keep_prob_end)",
                            "Call"
                        ],
                        [
                            "tf.reshape(keep_prob, [])",
                            "Call"
                        ],
                        [
                            "k * x + b",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(keep_prob, keep_prob_start, keep_prob_end)",
                            "Call"
                        ],
                        [
                            "tf.reshape(keep_prob, [])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_173": {
                "variable": {
                    "value": "alignment",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "stuff['rotation']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_317": {
                "variable": {
                    "value": "sq_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_318": {
                "variable": {
                    "value": "all_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sq_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.square(gt - pred)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_319": {
                "variable": {
                    "value": "all_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(sq_diff, [1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(all_loss, [-1, num_candidates])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_candidates]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmin_320": {
                "variable": {
                    "value": "min_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(sq_diff, [1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(all_loss, [-1, num_candidates])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_323": {
                "variable": {
                    "value": "min_loss_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "min_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmin(all_loss, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_candidates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.pose_predict_num_candidates",
                            "Attribute"
                        ],
                        [
                            "cfg.pose_predict_num_candidates",
                            "Attribute"
                        ],
                        [
                            "cfg.pose_predict_num_candidates",
                            "Attribute"
                        ],
                        [
                            "cfg.pose_predict_num_candidates",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_326": {
                "variable": {
                    "value": "min_loss_mask_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "min_loss_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(min_loss, num_candidates)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_327": {
                "variable": {
                    "value": "min_loss_mask_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "min_loss_mask_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(min_loss_mask, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_loss_334": {
                "variable": {
                    "value": "proj_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "loss_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(gt - pred) * min_loss_mask_final",
                            "BinOp"
                        ],
                        [
                            "loss_tensor * weights",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_345": {
                "variable": {
                    "value": "teachers",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "teachers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs['poses']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(teachers, [-1, num_candidates, 4])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(teachers, indices)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(teachers)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_candidates, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_348": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min_loss",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_indices, indices], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_350": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_351": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(0, batch_size, 1, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_indices, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_352": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_indices, indices]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_353": {
                "variable": {
                    "value": "teachers",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "teachers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs['poses']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(teachers, [-1, num_candidates, 4])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(teachers, indices)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(teachers)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min_loss",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_indices, indices], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_355": {
                "variable": {
                    "value": "teachers",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "teachers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs['poses']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(teachers, [-1, num_candidates, 4])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(teachers, indices)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(teachers)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_428": {
                "variable": {
                    "value": "g_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_105": {
                "name": {
                    "value": "pc_occupancy_scaling_factor",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_125": {
                "name": {
                    "value": "meta/focal_length",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_150": {
                "name": {
                    "value": "meta/gauss_sigma_rel",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "sigma_rel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.pc_relative_sigma + global_step / num_steps * diff",
                            "BinOp"
                        ],
                        [
                            "tf.cast(sigma_rel, tf.float32)",
                            "Call"
                        ],
                        [
                            "get_smooth_sigma(cfg, self._global_step)",
                            "Call"
                        ],
                        [
                            "self._sigma_rel",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Variable_167": {
                "variable": {
                    "value": "self._pc_for_alignloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.normal(loc=0.0, scale=sigma, size=(num_points, 3))",
                            "Call"
                        ],
                        [
                            "np.clip(values, -3 * sigma, +3 * sigma)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "point_cloud_for_align_loss",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_321": {
                "name": {
                    "value": "winning_pose_candidates",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "min_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmin(all_loss, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_332": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs['valid_samples']",
                            "Subscript"
                        ],
                        [
                            "tf_repeat_0(weights, num_candidates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, [weights.shape[0], 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "inputs['valid_samples']",
                            "Subscript"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                },
                "shape": {
                    "value": "[weights.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_335": {
                "x": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min_loss_mask.shape[0]",
                            "Subscript"
                        ],
                        [
                            "min_loss.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pred.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_365": {
                "variable": {
                    "value": "ref_pc_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(ref_pc, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[teachers.shape[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_372": {
                "variable": {
                    "value": "student_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1.0 - tf.square(angle_diff)) * weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_375": {
                "x": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min_loss_mask.shape[0]",
                            "Subscript"
                        ],
                        [
                            "min_loss.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pred.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "l2_loss_414": {
                "variable": {
                    "value": "proj_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "gt - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_59": {
                "x": {
                    "value": "alpha * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_102": {
                "x": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(input, 1)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(pred) * cfg.pc_occupancy_scaling_maximum",
                            "BinOp"
                        ],
                        [
                            "slim.fully_connected(input, 1)",
                            "Call"
                        ],
                        [
                            "outputs['projs']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_105": {
                "input_tensor": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(input, 1)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(pred) * cfg.pc_occupancy_scaling_maximum",
                            "BinOp"
                        ],
                        [
                            "slim.fully_connected(input, 1)",
                            "Call"
                        ],
                        [
                            "outputs['projs']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_125": {
                "input_tensor": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.focal_length_mean + tf.sigmoid(pred) * cfg.focal_length_range",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "scalar_378": {
                "name": {
                    "value": "losses/pose_predictor_student_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "student_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_loss(pc_1 - pc_2) / num_ref_points",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum((1.0 - tf.square(angle_diff)) * weights)",
                            "Call"
                        ],
                        [
                            "student_loss * cfg.pose_predictor_student_loss_weight",
                            "BinOp"
                        ],
                        [
                            "self.add_student_loss(inputs, outputs, min_loss, add_summary)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_402": {
                "variable": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(sigma_rel, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_repeat_0(gt, num_candidates)",
                            "Call"
                        ],
                        [
                            "inputs['masks']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_images(gt, [pred_size, pred_size], interp_method)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less(sigma_rel, 1.0), gt, smoothed)",
                            "Call"
                        ],
                        [
                            "smoothed",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "smoothed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gauss_smoothen_image(cfg, gt, sigma_rel)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_415": {
                "x": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min_loss_mask.shape[0]",
                            "Subscript"
                        ],
                        [
                            "min_loss.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pred.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_420": {
                "name": {
                    "value": "losses/proj_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "proj_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_loss(loss_tensor)",
                            "Call"
                        ],
                        [
                            "proj_loss / tf.to_float(num_samples)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_loss(gt - pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_443": {
                "name": {
                    "value": "losses/total_task_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "g_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(dtype=tf.float32, shape=[])",
                            "Call"
                        ],
                        [
                            "g_loss + add_proj_depth_loss(cfg, inputs, outputs, cfg.proj_depth_weight, self._sigma_rel, add_summary)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_122": {
                "x": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(input, 1)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(pred) * cfg.pc_occupancy_scaling_maximum",
                            "BinOp"
                        ],
                        [
                            "slim.fully_connected(input, 1)",
                            "Call"
                        ],
                        [
                            "outputs['projs']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_236": {
                "name": {
                    "value": "meta/pc_point_dropout_prob",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "dropout_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_dropout_keep_prob()",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_365": {
                "input": {
                    "value": "ref_pc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._pc_for_alignloss",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_loss_368": {
                "t": {
                    "value": "pc_1 - pc_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_402": {
                "x": {
                    "value": "sigma_rel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.pc_relative_sigma + global_step / num_steps * diff",
                            "BinOp"
                        ],
                        [
                            "tf.cast(sigma_rel, tf.float32)",
                            "Call"
                        ],
                        [
                            "get_smooth_sigma(cfg, self._global_step)",
                            "Call"
                        ],
                        [
                            "self._sigma_rel",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_372": {
                "x": {
                    "value": "angle_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q_diff[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "dpc/nets/img_encoder.py": {
        "tensorflow": {
            "zeros_55": {
                "variable": {
                    "value": "fake_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 128 * 4 * 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "rshp0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(images, f_dim, [5, 5], stride=2, activation_fn=act_func)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(hf, f_dim, [3, 3], stride=2, activation_fn=act_func)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(hf, f_dim, [3, 3], stride=1, activation_fn=act_func)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dpc/nets/pc_decoder.py": {
        "tensorflow": {
            "truncated_normal_initializer_9": {
                "variable": {
                    "value": "w_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "init_stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.pc_decoder_init_stddev",
                            "Attribute"
                        ]
                    ]
                },
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_16": {
                "variable": {
                    "value": "pred_pts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pts_raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(inputs, num_points * 3, activation_fn=None, weights_initializer=w_init)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pts_raw.shape[0], num_points, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_17": {
                "variable": {
                    "value": "pred_pts",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_pts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(pts_raw, [pts_raw.shape[0], num_points, 3])",
                            "Call"
                        ],
                        [
                            "tf.tanh(pred_pts)",
                            "Call"
                        ],
                        [
                            "pred_pts / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_36": {
                "variable": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rgb_raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(inp, num_points * 3, activation_fn=None, weights_initializer=w_init)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[rgb_raw.shape[0], num_points, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_37": {
                "variable": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.reshape(rgb_raw, [rgb_raw.shape[0], num_points, 3])",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(rgb)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dpc/nets/pose_net.py": {
        "tensorflow": {
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "predict_pose",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_35": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[pose_branch(inputs, cfg) for _ in range(num_candidates)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(outs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [-1, 4])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(inputs, 4, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_44": {
                "variable": {
                    "value": "w_trans_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "trans_init_stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.predict_translation_init_stddev",
                            "Attribute"
                        ]
                    ]
                },
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_49": {
                "x": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "slim.fully_connected(t, out_dim, activation_fn=act_func)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(inputs, 3, activation_fn=None, weights_initializer=w_trans_init)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.tanh(t) * cfg.predict_translation_scaling_factor",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "dpc/render/render_point_cloud_runner.py": {
        "tensorflow": {
            "run_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dpc/run/compute_alignment.py": {
        "tensorflow": {
            "ConfigProto_131": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "enable_eager_execution_139": {
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                }
            },
            "run_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dpc/run/create_tf_records.py": {
        "tensorflow": {
            "TFRecordWriter_101": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "train_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'{}/{}_{}.tfrecords'.format(FLAGS.out_dir, synth_set, split_name)",
                            "Call"
                        ]
                    ]
                },
                "options": {
                    "value": "options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_record_options(FLAGS)",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_87": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[s])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_183": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Feature_77": {
                "float_list": {
                    "value": "tf.train.FloatList(value=ndarray)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_79": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=ndarray)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BytesList_87": {
                "value": {
                    "value": "[s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_77": {
                "value": {
                    "value": "ndarray",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ndarray.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_183": {
                "feature": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'image': _dtype_feature(rgbs), 'mask': _dtype_feature(masks), 'name': _string_feature(model)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Int64List_79": {
                "value": {
                    "value": "ndarray",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ndarray.flatten()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dpc/run/eval_camera_pose.py": {
        "tensorflow": {
            "ConfigProto_16": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Graph_24": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "quat_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "quat_inp_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_32": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 1})",
                            "Call"
                        ]
                    ]
                }
            },
            "run_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dpc/run/eval_chamfer.py": {
        "tensorflow": {
            "ConfigProto_38": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Graph_49": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "source_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "target_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "quat_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "source_pc_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_60": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 1})",
                            "Call"
                        ]
                    ]
                }
            },
            "run_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dpc/run/predict.py": {
        "tensorflow": {
            "placeholder_28": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, cfg.image_size, cfg.image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "camera_extr_src",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "cam_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cam_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_full_camera(cfg, camera_extr_src, inverted=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_matrix, shape=[batch_size, 4, 4])",
                            "Call"
                        ],
                        [
                            "out['camera_extr_src']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "cam_quaternion",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "input_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, cfg.pc_num_points, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "pred_quat",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "gt_quat",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_108": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_153": {
                "variable": {
                    "value": "restorer",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.get_variables_to_restore(exclude=['meta'])",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_154": {
                "variable": {
                    "value": "checkpoint_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "exp_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.checkpoint_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "placeholder_127": {
                "variable": {
                    "value": "input_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "q_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_142": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_147": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 1})",
                            "Call"
                        ]
                    ]
                }
            },
            "run_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_op_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_op_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_131": {
                "variable": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "smoothen_voxels3d(cfg, voxels, model.gauss_kernel())",
                            "Call"
                        ],
                        [
                            "pointcloud2voxels(cfg, input_pc, model.gauss_sigma())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dpc/run/predict_eval.py": {
        "tensorflow": {
            "run_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dpc/run/train.py": {
        "tensorflow": {
            "TFRecordDataset_56": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "dataset_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.inp_dir, f'{cfg.synth_set}_{split_name}.tfrecords')",
                            "Call"
                        ]
                    ]
                },
                "compression_type": {
                    "value": "tf_record_compression(cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_96": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "max_to_keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "ConfigProto_98": {
                "variable": {
                    "value": "session_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_103": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "parse_single_example_40": {
                "serialized": {
                    "value": "serialized",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'image': tf.FixedLenFeature([num_views, image_size, image_size, 3], tf.float32), 'mask': tf.FixedLenFeature([num_views, image_size, image_size, 1], tf.float32)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "set_verbosity_51": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_70": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_91": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "get_learning_rate(cfg, global_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_28": {
                "shape": {
                    "value": "[num_views, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_29": {
                "shape": {
                    "value": "[num_views, image_size, image_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_34": {
                "shape": {
                    "value": "[num_views, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_35": {
                "shape": {
                    "value": "[num_views, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_38": {
                "shape": {
                    "value": "[num_views, image_size, image_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dpc/run/train_eval.py": {
        "tensorflow": {
            "run_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dpc/run/vis_projections_pc.py": {
        "tensorflow": {
            "ConfigProto_49": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_52": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 1})",
                            "Call"
                        ]
                    ]
                }
            },
            "tf_record_iterator_63": {
                "variable": {
                    "value": "record_iterator",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "tfrecords_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/home/eldar/src/3dshape/ptn/train_data/03001627_val.tfrecords'",
                            "Constant"
                        ],
                        [
                            "'{}/{}_{}.tfrecords'.format(cfg.inp_dir, synth_set, data_split)",
                            "Call"
                        ]
                    ]
                },
                "options": {
                    "value": "tf_record_options(cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "input_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, num_points, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_95": {
                "variable": {
                    "value": "pc_voxels_fast",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pc_voxels_fast",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(pc_voxels_fast, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "transform_matrix_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "transform_quaternion",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_107": {
                "variable": {
                    "value": "translation",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_115": {
                "variable": {
                    "value": "img_2d_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, cfg.vis_size, cfg.vis_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Example_123": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, num_points, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "initialize_all_variables_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dpc/util/camera.py": {
        "tensorflow": {
            "py_func_42": {
                "variable": {
                    "value": "extr_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "fix_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[cam]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "extr_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "extr_tf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.py_func(fix_matrix, [cam], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(extr_tf, shape=[4, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dpc/util/data.py": {
        "tensorflow": {
            "TFRecordOptions_10": {
                "compression_type": {
                    "value": "compression",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compression_type.GZIP",
                            "Attribute"
                        ],
                        [
                            "compression_type.NONE",
                            "Attribute"
                        ],
                        [
                            "'GZIP'",
                            "Constant"
                        ],
                        [
                            "''",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "dpc/util/drc.py": {
        "tensorflow": {
            "transpose_49": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_93": {
                "variable": {
                    "value": "p1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[r1, r]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_96": {
                "variable": {
                    "value": "p2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y, r2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_116": {
                "variable": {
                    "value": "c0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(voxels, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(input, clip_val, 1.0 - clip_val)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DTYPE",
                            "Name"
                        ],
                        [
                            "DTYPE",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "c1",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "singleton_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, v_shape[1], v_shape[2], v_shape[3], v_shape[4]]",
                            "List"
                        ],
                        [
                            "[1, v_shape[1], v_shape[2], v_shape[3], v_shape[4]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DTYPE",
                            "Name"
                        ],
                        [
                            "DTYPE",
                            "Name"
                        ]
                    ]
                }
            },
            "concat_118": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[c0, c1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_121": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p * c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_128": {
                "variable": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(rgb, [1, 0, 2, 3, 4])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_131": {
                "variable": {
                    "value": "background",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "singleton_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, v_shape[1], v_shape[2], v_shape[3], v_shape[4]]",
                            "List"
                        ],
                        [
                            "[1, v_shape[1], v_shape[2], v_shape[3], v_shape[4]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_132": {
                "variable": {
                    "value": "rgb_full",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rgb, background]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_134": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p * rgb_full",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_140": {
                "variable": {
                    "value": "i_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_142": {
                "variable": {
                    "value": "last",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cfg.max_depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_150": {
                "variable": {
                    "value": "psi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "depth_grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "drc_depth_grid(cfg, z_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_152": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p * psi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_44": {
                "input": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "t[idx, :, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_56": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(voxels, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(input, clip_val, 1.0 - clip_val)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.drc_logsum_clip_val",
                            "Attribute"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "1.0 - clip_val",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_64": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.log(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_65": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 - y",
                            "BinOp"
                        ],
                        [
                            "tf.log(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_90": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "collection",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_100": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "op_fn(p1, p2)",
                            "Call"
                        ],
                        [
                            "tf.exp(p)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_143": {
                "values": {
                    "value": "[di_s, last]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_148": {
                "x": {
                    "value": "z_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(z_size, dtype=tf.float32) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_59": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dpc/util/euler.py": {
        "tensorflow": {
            "expand_dims_108": {
                "variable": {
                    "value": "q_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.norm(q, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_97": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "r11",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r12",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "acos_98": {
                "variable": {
                    "value": "a1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r21",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "atan2_99": {
                "variable": {
                    "value": "a2",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "r31",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r32",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "atan2_103": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "r31",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r32",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "asin_104": {
                "variable": {
                    "value": "a1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(r21, -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atan2_105": {
                "variable": {
                    "value": "a2",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "r11",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r12",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_100": {
                "values": {
                    "value": "[a0, a1, a2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_106": {
                "values": {
                    "value": "[a0, a1, a2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_108": {
                "tensor": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q / q_norm",
                            "BinOp"
                        ],
                        [
                            "np.zeros(4)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_104": {
                "t": {
                    "value": "r21",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "dpc/util/gauss_kernel.py": {
        "tensorflow": {
            "range_9": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_10": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-xx ** 2 / (2.0 * sig ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_18": {
                "variable": {
                    "value": "k1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(kernel, [1, fsz, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, in_channels, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_19": {
                "variable": {
                    "value": "k2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(kernel, [fsz, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, in_channels, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_22": {
                "variable": {
                    "value": "img_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img",
                            "Name"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(img_tmp, k1, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(img_tmp, k2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "k1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(kernel, [1, fsz, 1, 1]), [1, 1, in_channels, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(kernel, [1, 1, size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(kernel_1d, [1, 1, fsz, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_23": {
                "variable": {
                    "value": "img_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img",
                            "Name"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(img_tmp, k1, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(img_tmp, k2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "k2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(kernel, [fsz, 1, 1, 1]), [1, 1, in_channels, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(kernel, [1, size, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(kernel_1d, [1, fsz, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_29": {
                "variable": {
                    "value": "k1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.exp(-xx ** 2 / (2.0 * sig ** 2))",
                            "Call"
                        ],
                        [
                            "gauss_kernel_1d(fsz, sigma_rel)",
                            "Call"
                        ],
                        [
                            "[k1, k2, k3]",
                            "List"
                        ],
                        [
                            "separable_kernels(kernel_1d)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_30": {
                "variable": {
                    "value": "k2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.exp(-xx ** 2 / (2.0 * sig ** 2))",
                            "Call"
                        ],
                        [
                            "gauss_kernel_1d(fsz, sigma_rel)",
                            "Call"
                        ],
                        [
                            "[k1, k2, k3]",
                            "List"
                        ],
                        [
                            "separable_kernels(kernel_1d)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "k3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.exp(-xx ** 2 / (2.0 * sig ** 2))",
                            "Call"
                        ],
                        [
                            "gauss_kernel_1d(fsz, sigma_rel)",
                            "Call"
                        ],
                        [
                            "[k1, k2, k3]",
                            "List"
                        ],
                        [
                            "separable_kernels(kernel_1d)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "k1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel_1d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gauss_kernel_1d(fsz, sigma)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, fsz, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "k2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel_1d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gauss_kernel_1d(fsz, sigma)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, fsz, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "k3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel_1d_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gauss_kernel_1d(fsz_z, sigma_z)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[fsz_z, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_11": {
                "input_tensor": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.exp(-xx ** 2 / (2.0 * sig ** 2))",
                            "Call"
                        ],
                        [
                            "gauss_kernel_1d(fsz, sigma_rel)",
                            "Call"
                        ],
                        [
                            "[k1, k2, k3]",
                            "List"
                        ],
                        [
                            "separable_kernels(kernel_1d)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_18": {
                "tensor": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.exp(-xx ** 2 / (2.0 * sig ** 2))",
                            "Call"
                        ],
                        [
                            "gauss_kernel_1d(fsz, sigma_rel)",
                            "Call"
                        ],
                        [
                            "[k1, k2, k3]",
                            "List"
                        ],
                        [
                            "separable_kernels(kernel_1d)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, fsz, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_19": {
                "tensor": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.exp(-xx ** 2 / (2.0 * sig ** 2))",
                            "Call"
                        ],
                        [
                            "gauss_kernel_1d(fsz, sigma_rel)",
                            "Call"
                        ],
                        [
                            "[k1, k2, k3]",
                            "List"
                        ],
                        [
                            "separable_kernels(kernel_1d)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[fsz, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dpc/util/losses.py": {
        "tensorflow": {
            "zeros_7": {
                "variable": {
                    "value": "reg_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_24": {
                "variable": {
                    "value": "gt_proj2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_27": {
                "variable": {
                    "value": "psi",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[gt_proj_fg, gt_proj_bg]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_34": {
                "variable": {
                    "value": "gt_proj2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs['masks']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_images(gt, [pred_size, pred_size])",
                            "Call"
                        ],
                        [
                            "inputs['images']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_images(gt, [pred_size, pred_size])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less(sigma, 1.0), gt, smoothed)",
                            "Call"
                        ],
                        [
                            "smoothed",
                            "Name"
                        ],
                        [
                            "inputs['images']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_images(gt, [pred_size, pred_size])",
                            "Call"
                        ],
                        [
                            "inputs['depths']",
                            "Subscript"
                        ],
                        [
                            "gt_pos * gt + gt_neg * cfg.max_depth",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_images(gt, [pred_size, pred_size], method=tf.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ],
                        [
                            "gauss_smoothen_image(cfg, gt, sigma_rel)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_35": {
                "variable": {
                    "value": "gt_vol",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_proj2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(gt_proj, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(gt, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, vox_size + 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_38": {
                "variable": {
                    "value": "white_bg",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_samples, 1, vox_size, vox_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "rgb_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rgb, white_bg]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_41": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(probs, [1, 0, 2, 3, 4])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_43": {
                "variable": {
                    "value": "psi",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_vol - rgb_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_44": {
                "variable": {
                    "value": "psi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "psi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([gt_proj_fg, gt_proj_bg], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.square(gt_vol - rgb_pred)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(psi, axis=4, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "l2_loss_85": {
                "variable": {
                    "value": "proj_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "gt - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_131": {
                "variable": {
                    "value": "proj_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "gt - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_18": {
                "name": {
                    "value": "'losses/reg_loss' + postfix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "reg_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(dtype=tf.float32, shape=[])",
                            "Call"
                        ],
                        [
                            "reg_loss + tf.add_n([tf.nn.l2_loss(var) for var in scope_vars_w])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_29": {
                "input_tensor": {
                    "value": "probs * psi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_46": {
                "input_tensor": {
                    "value": "probs * psi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_62": {
                "x": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rgb.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pred.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pred.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pred.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_86": {
                "x": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rgb.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pred.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pred.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pred.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_106": {
                "x": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rgb.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pred.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pred.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pred.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_122": {
                "variable": {
                    "value": "gt_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(gt, cfg.max_dataset_depth)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_123": {
                "variable": {
                    "value": "gt_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(gt, cfg.max_dataset_depth)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_132": {
                "x": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rgb.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pred.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pred.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pred.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_25": {
                "input": {
                    "value": "gt_proj2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(gt_proj, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(gt, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[cfg.vox_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_64": {
                "name": {
                    "value": "losses/drc_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "drc_loss(cfg, pred, gt)",
                            "Call"
                        ],
                        [
                            "loss * weight_scale",
                            "BinOp"
                        ],
                        [
                            "drc_rgb_loss(cfg, drc_probs, pred, gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_81": {
                "variable": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(sigma, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs['masks']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_images(gt, [pred_size, pred_size])",
                            "Call"
                        ],
                        [
                            "inputs['images']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_images(gt, [pred_size, pred_size])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less(sigma, 1.0), gt, smoothed)",
                            "Call"
                        ],
                        [
                            "smoothed",
                            "Name"
                        ],
                        [
                            "inputs['images']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_images(gt, [pred_size, pred_size])",
                            "Call"
                        ],
                        [
                            "inputs['depths']",
                            "Subscript"
                        ],
                        [
                            "gt_pos * gt + gt_neg * cfg.max_depth",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_images(gt, [pred_size, pred_size], method=tf.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ],
                        [
                            "gauss_smoothen_image(cfg, gt, sigma_rel)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "smoothed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gauss_smoothen_image(cfg, gt, sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_88": {
                "name": {
                    "value": "losses/proj_rgb_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "proj_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_loss(gt - pred)",
                            "Call"
                        ],
                        [
                            "proj_loss * weight_scale",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_loss(gt - pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_108": {
                "name": {
                    "value": "losses/drc_rgb_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "drc_loss(cfg, pred, gt)",
                            "Call"
                        ],
                        [
                            "loss * weight_scale",
                            "BinOp"
                        ],
                        [
                            "drc_rgb_loss(cfg, drc_probs, pred, gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_134": {
                "name": {
                    "value": "losses/proj_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "proj_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_loss(gt - pred)",
                            "Call"
                        ],
                        [
                            "proj_loss * weight_scale",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_loss(gt - pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "not_equal_122": {
                "x": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs['masks']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_images(gt, [pred_size, pred_size])",
                            "Call"
                        ],
                        [
                            "inputs['images']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_images(gt, [pred_size, pred_size])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less(sigma, 1.0), gt, smoothed)",
                            "Call"
                        ],
                        [
                            "smoothed",
                            "Name"
                        ],
                        [
                            "inputs['images']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_images(gt, [pred_size, pred_size])",
                            "Call"
                        ],
                        [
                            "inputs['depths']",
                            "Subscript"
                        ],
                        [
                            "gt_pos * gt + gt_neg * cfg.max_depth",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_images(gt, [pred_size, pred_size], method=tf.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ],
                        [
                            "gauss_smoothen_image(cfg, gt, sigma_rel)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cfg.max_dataset_depth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_123": {
                "x": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs['masks']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_images(gt, [pred_size, pred_size])",
                            "Call"
                        ],
                        [
                            "inputs['images']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_images(gt, [pred_size, pred_size])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less(sigma, 1.0), gt, smoothed)",
                            "Call"
                        ],
                        [
                            "smoothed",
                            "Name"
                        ],
                        [
                            "inputs['images']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_images(gt, [pred_size, pred_size])",
                            "Call"
                        ],
                        [
                            "inputs['depths']",
                            "Subscript"
                        ],
                        [
                            "gt_pos * gt + gt_neg * cfg.max_depth",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_images(gt, [pred_size, pred_size], method=tf.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ],
                        [
                            "gauss_smoothen_image(cfg, gt, sigma_rel)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cfg.max_dataset_depth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_16": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(var) for var in scope_vars_w]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "less_81": {
                "x": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "trainable_variables_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_16": {
                "t": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dpc/util/point_cloud.py": {
        "tensorflow": {
            "linspace_25": {
                "variable": {
                    "value": "rng",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "vox_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.vox_size",
                            "Attribute"
                        ],
                        [
                            "cfg.vox_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "meshgrid_26": {
                "variable": {
                    "value": "(xg, yg, zg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "rng",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linspace(-1.0, 1.0, vox_size)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "rng",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linspace(-1.0, 1.0, vox_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_40": {
                "variable": {
                    "value": "func",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-sq_distance / (2.0 * sigma * sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_53": {
                "variable": {
                    "value": "summed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "func",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.exp(-sq_distance / (2.0 * sigma * sigma))",
                            "Call"
                        ],
                        [
                            "func * normaliser",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_54": {
                "variable": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "summed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(func, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_55": {
                "variable": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(summed, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(voxels)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices_loc, updates, [batch_size, vox_size_z, vox_size, vox_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(voxels, kernel, [1, 1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(voxels, krnl, [1, 1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "pointcloud2voxels(cfg, tr_pc, sigma)",
                            "Call"
                        ],
                        [
                            "tf.transpose(voxels, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(voxels, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "smoothen_voxels3d(cfg, voxels, kernel)",
                            "Call"
                        ],
                        [
                            "voxels * scaling_factor",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(voxels, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logical_and_76": {
                "variable": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pc >= -half_size",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "pc <= half_size",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_all_77": {
                "variable": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_and(pc >= -half_size, pc <= half_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(valid, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_79": {
                "variable": {
                    "value": "vox_size_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[vox_size_z, vox_size, vox_size]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "floor_81": {
                "variable": {
                    "value": "indices_floor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pc_grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(pc + half_size) * (vox_size_tf - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_82": {
                "variable": {
                    "value": "indices_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "indices_floor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.floor(pc_grid)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_83": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_84": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(0, batch_size, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_indices, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_indices, [1, num_points])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_indices, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_85": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(0, batch_size, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_indices, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_indices, [1, num_points])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_indices, -1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, num_points]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_86": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(0, batch_size, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_indices, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_indices, [1, num_points])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_indices, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_88": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_indices, indices_int]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_indices, indices_int], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 4])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(indices, valid)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_133": {
                "variable": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(summed, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(voxels)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices_loc, updates, [batch_size, vox_size_z, vox_size, vox_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(voxels, kernel, [1, 1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(voxels, krnl, [1, 1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "pointcloud2voxels(cfg, tr_pc, sigma)",
                            "Call"
                        ],
                        [
                            "tf.transpose(voxels, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(voxels, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "smoothen_voxels3d(cfg, voxels, kernel)",
                            "Call"
                        ],
                        [
                            "voxels * scaling_factor",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(voxels, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_153": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[voxels_rgb[:, :, :, :, k:k + 1] for k in range(3)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_215": {
                "variable": {
                    "value": "xyz2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zs, ys, xs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_222": {
                "variable": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(summed, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(voxels)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices_loc, updates, [batch_size, vox_size_z, vox_size, vox_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(voxels, kernel, [1, 1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(voxels, krnl, [1, 1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "pointcloud2voxels(cfg, tr_pc, sigma)",
                            "Call"
                        ],
                        [
                            "tf.transpose(voxels, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(voxels, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "smoothen_voxels3d(cfg, voxels, kernel)",
                            "Call"
                        ],
                        [
                            "voxels * scaling_factor",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(voxels, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_225": {
                "variable": {
                    "value": "proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reverse(proj, [1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(voxels, [1])",
                            "Call"
                        ],
                        [
                            "tf.reverse(proj, [1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_237": {
                "variable": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(summed, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(voxels)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices_loc, updates, [batch_size, vox_size_z, vox_size, vox_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(voxels, kernel, [1, 1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(voxels, krnl, [1, 1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "pointcloud2voxels(cfg, tr_pc, sigma)",
                            "Call"
                        ],
                        [
                            "tf.transpose(voxels, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(voxels, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "smoothen_voxels3d(cfg, voxels, kernel)",
                            "Call"
                        ],
                        [
                            "voxels * scaling_factor",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(voxels, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_240": {
                "variable": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(summed, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(voxels)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices_loc, updates, [batch_size, vox_size_z, vox_size, vox_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(voxels, kernel, [1, 1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(voxels, krnl, [1, 1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "pointcloud2voxels(cfg, tr_pc, sigma)",
                            "Call"
                        ],
                        [
                            "tf.transpose(voxels, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(voxels, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "smoothen_voxels3d(cfg, voxels, kernel)",
                            "Call"
                        ],
                        [
                            "voxels * scaling_factor",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(voxels, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reverse_273": {
                "variable": {
                    "value": "proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reverse(proj, [1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(voxels, [1])",
                            "Call"
                        ],
                        [
                            "tf.reverse(proj, [1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_298": {
                "variable": {
                    "value": "num_output_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_input_points * keep_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_310": {
                "variable": {
                    "value": "selected_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[num_output_points]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_311": {
                "variable": {
                    "value": "out_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "selected_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.py_func(sampler, [num_output_points], tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_312": {
                "variable": {
                    "value": "out_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(points, selected_indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_points, [batch_size, num_output_points, num_channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_output_points, num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_13": {
                "variable": {
                    "value": "inp_big",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp_big",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(inp_big, axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_44": {
                "variable": {
                    "value": "normaliser",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "func",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.exp(-sq_distance / (2.0 * sigma * sigma))",
                            "Call"
                        ],
                        [
                            "func * normaliser",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_and(pc >= -half_size, pc <= half_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(valid, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_96": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_indices, indices_int], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 4])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(indices, valid)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_and(pc >= -half_size, pc <= half_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(valid, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "updates",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "updates_raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rr[pos[0]][:, :, 0] * rr[pos[1]][:, :, 1] * rr[pos[2]][:, :, 2]",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(updates_raw)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_105": {
                "variable": {
                    "value": "indices_shift",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0] + pos]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_107": {
                "variable": {
                    "value": "indices_shift",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices_shift",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([[0] + pos])",
                            "Call"
                        ],
                        [
                            "tf.tile(indices_shift, [num_updates, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_updates, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scatter_nd_110": {
                "variable": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices_loc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "indices",
                            "Name"
                        ],
                        [
                            "indices_loc + indices_shift",
                            "BinOp"
                        ]
                    ]
                },
                "updates": {
                    "value": "updates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(updates_raw, [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(updates, valid)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, vox_size_z, vox_size, vox_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv3d_144": {
                "variable": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(summed, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(voxels)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices_loc, updates, [batch_size, vox_size_z, vox_size, vox_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(voxels, kernel, [1, 1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(voxels, krnl, [1, 1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "pointcloud2voxels(cfg, tr_pc, sigma)",
                            "Call"
                        ],
                        [
                            "tf.transpose(voxels, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(voxels, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "smoothen_voxels3d(cfg, voxels, kernel)",
                            "Call"
                        ],
                        [
                            "voxels * scaling_factor",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(voxels, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_172": {
                "variable": {
                    "value": "focal_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "focal_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.focal_length",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(focal_length, axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slice_181": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pc2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "quaternion_rotate(point_cloud, transform)",
                            "Call"
                        ],
                        [
                            "tf.matmul(xyz1, tf.transpose(full_cam_matrix, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "pc2 + predicted_translation",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_182": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pc2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "quaternion_rotate(point_cloud, transform)",
                            "Call"
                        ],
                        [
                            "tf.matmul(xyz1, tf.transpose(full_cam_matrix, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "pc2 + predicted_translation",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_183": {
                "variable": {
                    "value": "zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pc2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "quaternion_rotate(point_cloud, transform)",
                            "Call"
                        ],
                        [
                            "tf.matmul(xyz1, tf.transpose(full_cam_matrix, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "pc2 + predicted_translation",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_191": {
                "variable": {
                    "value": "xyz1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "point_cloud",
                    "type": "Variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "tf.constant([[0, 0], [0, 0], [0, 1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_195": {
                "variable": {
                    "value": "intrinsic",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "intr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "intrinsic_matrix(cfg, dims=4)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_196": {
                "variable": {
                    "value": "intrinsic",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intrinsic",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(intr)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(intrinsic, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(intrinsic, [tf.shape(extrinsic)[0], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_197": {
                "variable": {
                    "value": "intrinsic",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intrinsic",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(intr)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(intrinsic, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(intrinsic, [tf.shape(extrinsic)[0], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[tf.shape(extrinsic)[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_198": {
                "variable": {
                    "value": "full_cam_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "intrinsic",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(intr)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(intrinsic, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(intrinsic, [tf.shape(extrinsic)[0], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "extrinsic",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transform",
                            "Name"
                        ]
                    ]
                }
            },
            "matmul_200": {
                "variable": {
                    "value": "pc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "xyz1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(point_cloud, tf.constant([[0, 0], [0, 0], [0, 1]]), 'CONSTANT', constant_values=1.0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(full_cam_matrix, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_203": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pc2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "quaternion_rotate(point_cloud, transform)",
                            "Call"
                        ],
                        [
                            "tf.matmul(xyz1, tf.transpose(full_cam_matrix, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "pc2 + predicted_translation",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_204": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pc2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "quaternion_rotate(point_cloud, transform)",
                            "Call"
                        ],
                        [
                            "tf.matmul(xyz1, tf.transpose(full_cam_matrix, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "pc2 + predicted_translation",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_205": {
                "variable": {
                    "value": "zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pc2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "quaternion_rotate(point_cloud, transform)",
                            "Call"
                        ],
                        [
                            "tf.matmul(xyz1, tf.transpose(full_cam_matrix, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "pc2 + predicted_translation",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_212": {
                "variable": {
                    "value": "zt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "predicted_translation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(predicted_translation, axis=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_251": {
                "variable": {
                    "value": "scaling_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scaling_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(scaling_factor, [sz, 1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[sz, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_253": {
                "variable": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(summed, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(voxels)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices_loc, updates, [batch_size, vox_size_z, vox_size, vox_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(voxels, kernel, [1, 1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(voxels, krnl, [1, 1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "pointcloud2voxels(cfg, tr_pc, sigma)",
                            "Call"
                        ],
                        [
                            "tf.transpose(voxels, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(voxels, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "smoothen_voxels3d(cfg, voxels, kernel)",
                            "Call"
                        ],
                        [
                            "voxels * scaling_factor",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(voxels, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_max_265": {
                "variable": {
                    "value": "proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(summed, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(voxels)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices_loc, updates, [batch_size, vox_size_z, vox_size, vox_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(voxels, kernel, [1, 1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(voxels, krnl, [1, 1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "pointcloud2voxels(cfg, tr_pc, sigma)",
                            "Call"
                        ],
                        [
                            "tf.transpose(voxels, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(voxels, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "smoothen_voxels3d(cfg, voxels, kernel)",
                            "Call"
                        ],
                        [
                            "voxels * scaling_factor",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(voxels, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_270": {
                "variable": {
                    "value": "drc_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "drc_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.reverse(drc_probs, [2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_276": {
                "variable": {
                    "value": "voxels_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "voxels_rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(voxels_rgb) if has_rgb else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.scatter_nd(indices_loc, updates_rgb, [batch_size, vox_size_z, vox_size, vox_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(voxels_rgb, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "convolve_rgb(cfg, voxels_rgb, kernel)",
                            "Call"
                        ],
                        [
                            "voxels_rgb / (voxels_div + cfg.pc_rgb_divide_by_occupancies_epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(voxels_rgb, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.reverse(voxels_rgb, [2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_315": {
                "variable": {
                    "value": "out_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "selected_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.py_func(sampler, [num_output_points], tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_316": {
                "variable": {
                    "value": "out_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(rgb, selected_indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_rgb, [batch_size, num_output_points, num_rgb_channels])",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_output_points, num_rgb_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_37": {
                "x": {
                    "value": "y_big - yg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_68": {
                "input": {
                    "value": "pc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "boolean_mask_102": {
                "variable": {
                    "value": "updates",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "updates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(updates_raw, [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(updates, valid)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_and(pc >= -half_size, pc <= half_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(valid, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "updates_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "updates_rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(updates_raw, axis=-1) * rgb",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(updates_rgb, [-1, 3])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(updates_rgb, valid)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scatter_nd_118": {
                "variable": {
                    "value": "voxels_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices_loc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "indices",
                            "Name"
                        ],
                        [
                            "indices_loc + indices_shift",
                            "BinOp"
                        ]
                    ]
                },
                "updates": {
                    "value": "updates_rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(updates_raw, axis=-1) * rgb",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(updates_rgb, [-1, 3])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(updates_rgb, valid)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, vox_size_z, vox_size, vox_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_134": {
                "inputs": {
                    "value": "voxels_rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(voxels_rgb) if has_rgb else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.scatter_nd(indices_loc, updates_rgb, [batch_size, vox_size_z, vox_size, vox_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(voxels_rgb, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "convolve_rgb(cfg, voxels_rgb, kernel)",
                            "Call"
                        ],
                        [
                            "voxels_rgb / (voxels_div + cfg.pc_rgb_divide_by_occupancies_epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(voxels_rgb, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.reverse(voxels_rgb, [2])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_142": {
                "variable": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(summed, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(voxels)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices_loc, updates, [batch_size, vox_size_z, vox_size, vox_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(voxels, kernel, [1, 1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(voxels, krnl, [1, 1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "pointcloud2voxels(cfg, tr_pc, sigma)",
                            "Call"
                        ],
                        [
                            "tf.transpose(voxels, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(voxels, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(voxels, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "smoothen_voxels3d(cfg, voxels, kernel)",
                            "Call"
                        ],
                        [
                            "voxels * scaling_factor",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(voxels, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "krnl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kernel",
                            "Name"
                        ],
                        [
                            "kernel",
                            "Name"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_152": {
                "variable": {
                    "value": "channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "krnl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kernel",
                            "Name"
                        ],
                        [
                            "kernel",
                            "Name"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_178": {
                "variable": {
                    "value": "predicted_translation",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted_translation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(predicted_translation, axis=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_257": {
                "variable": {
                    "value": "voxels_div",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxels_raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "voxels",
                            "Name"
                        ]
                    ]
                }
            },
            "clip_by_value_262": {
                "variable": {
                    "value": "voxels_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "voxels_rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(voxels_rgb) if has_rgb else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.scatter_nd(indices_loc, updates_rgb, [batch_size, vox_size_z, vox_size, vox_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(voxels_rgb, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "convolve_rgb(cfg, voxels_rgb, kernel)",
                            "Call"
                        ],
                        [
                            "voxels_rgb / (voxels_div + cfg.pc_rgb_divide_by_occupancies_epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(voxels_rgb, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.reverse(voxels_rgb, [2])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_106": {
                "input": {
                    "value": "indices_loc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "indices",
                            "Name"
                        ],
                        [
                            "indices_loc + indices_shift",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stop_gradient_113": {
                "variable": {
                    "value": "updates_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "updates_raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rr[pos[0]][:, :, 0] * rr[pos[1]][:, :, 1] * rr[pos[2]][:, :, 2]",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(updates_raw)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_117": {
                "variable": {
                    "value": "updates_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "updates_rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(updates_raw, axis=-1) * rgb",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(updates_rgb, [-1, 3])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(updates_rgb, valid)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_and(pc >= -half_size, pc <= half_size)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(valid, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_191": {
                "value": {
                    "value": "[[0, 0], [0, 0], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_200": {
                "a": {
                    "value": "full_cam_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(intrinsic, extrinsic)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_246": {
                "variable": {
                    "value": "voxels_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "voxels_rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(voxels_rgb) if has_rgb else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.scatter_nd(indices_loc, updates_rgb, [batch_size, vox_size_z, vox_size, vox_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(voxels_rgb, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "convolve_rgb(cfg, voxels_rgb, kernel)",
                            "Call"
                        ],
                        [
                            "voxels_rgb / (voxels_div + cfg.pc_rgb_divide_by_occupancies_epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(voxels_rgb, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.reverse(voxels_rgb, [2])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_114": {
                "input": {
                    "value": "updates_raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rr[pos[0]][:, :, 0] * rr[pos[1]][:, :, 1] * rr[pos[2]][:, :, 2]",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(updates_raw)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_50": {
                "x": {
                    "value": "sigma_normalised",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sigma * vox_size",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_197": {
                "input": {
                    "value": "extrinsic",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transform",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "dpc/util/point_cloud_distance.py": {
        "tensorflow": {
            "tile_32": {
                "variable": {
                    "value": "Vt_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Vt[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[VsN, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_33": {
                "variable": {
                    "value": "Vs_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Vs[:, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, VtN, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_35": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(diff ** 2, axis=[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_36": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmin(dist, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_37": {
                "variable": {
                    "value": "proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Vt_rep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(Vt[None, :, :], [VsN, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.stack([tf.range(VsN), idx], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_38": {
                "variable": {
                    "value": "minDist",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_sum(diff ** 2, axis=[2]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.stack([tf.range(VsN), idx], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_30": {
                "input": {
                    "value": "Vs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_31": {
                "input": {
                    "value": "Vt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_35": {
                "input_tensor": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmin_36": {
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_sum(diff ** 2, axis=[2]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_37": {
                "values": {
                    "value": "[tf.range(VsN), idx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_38": {
                "values": {
                    "value": "[tf.range(VsN), idx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dpc/util/quaternion.py": {
        "tensorflow": {
            "convert_to_tensor_42": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "vector3d_to_quaternion(x)",
                            "Call"
                        ],
                        [
                            "w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2",
                            "BinOp"
                        ],
                        [
                            "(m(2, 1) - m(1, 2)) / (4 * w)",
                            "BinOp"
                        ],
                        [
                            "w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "convert_to_tensor_55": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "vector3d_to_quaternion(x)",
                            "Call"
                        ],
                        [
                            "w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2",
                            "BinOp"
                        ],
                        [
                            "(m(2, 1) - m(1, 2)) / (4 * w)",
                            "BinOp"
                        ],
                        [
                            "w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unstack_72": {
                "variable": {
                    "value": "(w1, x1, y1, z1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_prepare_tensor_for_div_mul(a)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unstack_73": {
                "variable": {
                    "value": "(w2, x2, y2, z2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_prepare_tensor_for_div_mul(b)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_105": {
                "variable": {
                    "value": "q_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.norm(q, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_107": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q / q_norm",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([w, x, y, z], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_121": {
                "variable": {
                    "value": "q_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.norm(q, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unstack_146": {
                "variable": {
                    "value": "(w, x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "normalized(q)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_158": {
                "variable": {
                    "value": "mtr",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mtr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(mtr)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_175": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[w, x, y, z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_45": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "vector3d_to_quaternion(x)",
                            "Call"
                        ],
                        [
                            "w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2",
                            "BinOp"
                        ],
                        [
                            "(m(2, 1) - m(1, 2)) / (4 * w)",
                            "BinOp"
                        ],
                        [
                            "w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2",
                            "BinOp"
                        ]
                    ]
                },
                "paddings": {
                    "value": "(len(x.shape) - 1) * [[0, 0]] + [[1, 0]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_78": {
                "values": {
                    "value": "(w, x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_83": {
                "x": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q / q_norm",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([w, x, y, z], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "[1.0, -1.0, -1.0, -1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_115": {
                "variable": {
                    "value": "wxyz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wxyz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "qmul(qmul(q, pc), q_)",
                            "Call"
                        ],
                        [
                            "qmul(qmul(q_, pc), q)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(wxyz, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_150": {
                "values": {
                    "value": "m[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slice_167": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "mtr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(mtr)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "begin",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[0 for _ in range(len(shape))]",
                            "ListComp"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[s for s in shape]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "squeeze_168": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(mtr, begin=begin, size=size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v, axis=[-1, -2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_93": {
                "tensor": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q / q_norm",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([w, x, y, z], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_105": {
                "tensor": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q / q_norm",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([w, x, y, z], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_121": {
                "tensor": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q / q_norm",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([w, x, y, z], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_171": {
                "x": {
                    "value": "1.0 + m(0, 0) + m(1, 1) + m(2, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_138": {
                "x": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_prepare_tensor_for_div_mul(a)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dpc/util/simple_dataset.py": {
        "tensorflow": {
            "tf_record_iterator_32": {
                "variable": {
                    "value": "record_iterator",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "tfrecords_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_records_dataset_filename(cfg)",
                            "Call"
                        ]
                    ]
                },
                "options": {
                    "value": "options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_record_options(cfg)",
                            "Call"
                        ]
                    ]
                }
            },
            "Example_42": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dpc/util/train.py": {
        "tensorflow": {
            "cast_19": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(global_step, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_20": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(global_step, step_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "cfg.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "cfg.learning_rate_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_10": {
                "variable": {
                    "value": "var_list_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scopes",
                            "Name"
                        ]
                    ]
                }
            },
            "less_20": {
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(global_step, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "step_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.learning_rate_step * cfg.max_number_of_steps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_22": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.less(global_step, step_val), cfg.learning_rate, cfg.learning_rate_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}