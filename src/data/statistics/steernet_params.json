{
    "python/beam.py": {
        "torch": {
            "from_numpy_16": {
                "variable": {
                    "value": "YY",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "YYs[iPair, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_16": {
                "variable": {
                    "value": "YY",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/dataset/array.py": {
        "torch": {}
    },
    "python/dataset/audio.py": {
        "torch": {}
    },
    "python/dataset/pair.py": {
        "torch": {}
    },
    "python/eval_epochs.py": {
        "torch": {
            "is_available_26": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_27": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_41": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Pair(file_meta=args.audio, file_json=args.json, dir_scratch=args.scratch_directory)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_50": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_46": {
                "f": {
                    "value": "args.model_src",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/eval_sample.py": {
        "torch": {
            "from_numpy_33": {
                "variable": {
                    "value": "Xt",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_33": {
                "variable": {
                    "value": "Xt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "variable": {
                    "value": "Mt",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_34": {
                "variable": {
                    "value": "Mt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_25": {
                "f": {
                    "value": "args.model_src",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/model/blstm.py": {
        "torch": {
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_20": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "int(self.frame_size / 2 + 1) * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(self.frame_size / 2 + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, (x.shape[0], x.shape[1], x.shape[2] * x.shape[3]))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 3)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x.shape[0], x.shape[1], x.shape[2] * x.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_52": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, (x.shape[0], x.shape[1], x.shape[2] * x.shape[3]))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 3)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_61": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, (x.shape[0], x.shape[1], x.shape[2] * x.shape[3]))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 3)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, (x.shape[0], x.shape[1], x.shape[2] * x.shape[3]))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 3)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python/test_sample.py": {
        "torch": {
            "load_28": {
                "f": {
                    "value": "args.model_src",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/train_epochs.py": {
        "torch": {
            "is_available_27": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Pair(file_meta=args.audio, file_json=args.json, dir_scratch=args.scratch_directory)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_51": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_52": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_81": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_dst",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_47": {
                "f": {
                    "value": "args.model_src",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/train_init.py": {
        "torch": {
            "save_14": {
                "obj": {
                    "value": "Blstm(file_json=args.json).state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_dst",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}