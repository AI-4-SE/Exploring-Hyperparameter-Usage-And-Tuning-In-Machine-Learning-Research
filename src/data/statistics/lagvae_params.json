{
    "examples/infovae.py": {
        "tensorflow": {
            "AdamOptimizer_90": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "make_template_20": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "encoder/network",
                    "type": "Constant",
                    "possible_values": []
                },
                "func_": {
                    "value": "lambda x: encoder_func(x)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "make_template_43": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "decoder/network",
                    "type": "Constant",
                    "possible_values": []
                },
                "func_": {
                    "value": "lambda x: decoder_func(x)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "dense_14": {
                "variable": {
                    "value": "fc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softplus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_15": {
                "variable": {
                    "value": "fc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softplus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_16": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc1, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "z_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_17": {
                "variable": {
                    "value": "logstd",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc1, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "z_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_38": {
                "variable": {
                    "value": "fc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softplus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_39": {
                "variable": {
                    "value": "fc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softplus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_40": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc1, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "x_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_49": {
                "input_tensor": {
                    "value": "pxz.log_prob(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_65": {
                "input_tensor": {
                    "value": "pxz.log_prob(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_18": {
                "x": {
                    "value": "logstd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc2, z_dim, activation=tf.identity)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_46": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_46": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "shape": {
                    "value": "[self.z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_57": {
                "shape": {
                    "value": "[self.z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/lagvae.py": {
        "tensorflow": {
            "AdamOptimizer_89": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "make_template_19": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "encoder/network",
                    "type": "Constant",
                    "possible_values": []
                },
                "func_": {
                    "value": "lambda x: encoder_func(x)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "make_template_42": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "decoder/network",
                    "type": "Constant",
                    "possible_values": []
                },
                "func_": {
                    "value": "lambda x: decoder_func(x)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "dense_13": {
                "variable": {
                    "value": "fc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softplus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_14": {
                "variable": {
                    "value": "fc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softplus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_15": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc1, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "z_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_16": {
                "variable": {
                    "value": "logstd",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc1, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "z_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_37": {
                "variable": {
                    "value": "fc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softplus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_38": {
                "variable": {
                    "value": "fc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softplus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_39": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc1, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 1024, activation=tf.nn.softplus)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "x_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_48": {
                "input_tensor": {
                    "value": "pxz.log_prob(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_64": {
                "input_tensor": {
                    "value": "pxz.log_prob(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_17": {
                "x": {
                    "value": "logstd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc2, z_dim, activation=tf.identity)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_45": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_45": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "shape": {
                    "value": "[self.z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_56": {
                "shape": {
                    "value": "[self.z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/lagvae.py": {
        "tensorflow": {
            "reduce_mean_20": {
                "variable": {
                    "value": "self.nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-logpxz",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_21": {
                "variable": {
                    "value": "self.elbo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logqzx - logpz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_36": {
                "variable": {
                    "value": "self.trainer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "optimizer.apply_gradients(encoder_grads_and_vars)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "optimizer.apply_gradients(decoder_grads_and_vars)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_39": {
                "variable": {
                    "value": "self.lambda_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "group_40": {
                "variable": {
                    "value": "self.lambda_clip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.assign(self.l1, tf.minimum(tf.maximum(self.l1, 0.001), 100.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.assign(self.l2, tf.minimum(tf.maximum(self.l2, 0.001), 100.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_47": {
                "variable": {
                    "value": "self.train_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.summary.scalar('elbo', self.elbo), tf.summary.scalar('nll', self.nll), tf.summary.scalar('mmd', self.mmd), tf.summary.scalar('loss', self.loss), tf.summary.scalar('lambda1', self.l1), tf.summary.scalar('lambda2', self.l2), tf.summary.scalar('vae_loss', self.vae_loss)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_41": {
                "ref": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.minimum(tf.maximum(self.l1, 0.001), 100.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_42": {
                "ref": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.minimum(tf.maximum(self.l2, 0.001), 100.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_46": {
                "name": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_18": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_18": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_initializer_23": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_24": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_41": {
                "x": {
                    "value": "tf.maximum(self.l1, 0.001)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "100.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_42": {
                "x": {
                    "value": "tf.maximum(self.l2, 0.001)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "100.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_41": {
                "x": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_42": {
                "x": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_48": {
                "name": {
                    "value": "elbo",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.elbo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_49": {
                "name": {
                    "value": "nll",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.nll",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_50": {
                "name": {
                    "value": "mmd",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mmd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_51": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_52": {
                "name": {
                    "value": "lambda1",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_53": {
                "name": {
                    "value": "lambda2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_54": {
                "name": {
                    "value": "vae_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vae_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/vae.py": {
        "tensorflow": {
            "reduce_mean_41": {
                "variable": {
                    "value": "self.nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.decoder_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_42": {
                "variable": {
                    "value": "self.elbo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.encoder_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_50": {
                "variable": {
                    "value": "self.trainer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "optimizer.apply_gradients(encoder_grads_and_vars)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "optimizer.apply_gradients(decoder_grads_and_vars)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_66": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logdir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Saver_68": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_55": {
                "variable": {
                    "value": "self.train_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.summary.scalar(s, k) for (s, k) in zip(strs, keys)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_54": {
                "name": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_56": {
                "name": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "k",
                    "type": "Call",
                    "possible_values": [
                        [
                            "d.keys()",
                            "Call"
                        ],
                        [
                            "d_.keys()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/__init__.py": {
        "tensorflow": {
            "GPUOptions_55": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_70": {
                "variable": {
                    "value": "tiled_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(x, tf.stack([x_size, 1, dim]))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.stack([1, y_size, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_71": {
                "variable": {
                    "value": "tiled_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(y, tf.stack([1, y_size, dim]))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.stack([x_size, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_14": {
                "x": {
                    "value": "x > r",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_56": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options, allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_72": {
                "x": {
                    "value": "-tf.reduce_mean(tf.square(tiled_x - tiled_y), axis=2) / tf.cast(dim, tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_13": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_18": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_19": {
                "x": {
                    "value": "x > r",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_67": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_68": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_69": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([x_size, 1, dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_70": {
                "values": {
                    "value": "[x_size, 1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([1, y_size, dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_71": {
                "values": {
                    "value": "[1, y_size, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_56": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_72": {
                "x": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(x)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_85": {
                "input_tensor": {
                    "value": "xy_kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_kernel(x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_72": {
                "input_tensor": {
                    "value": "tf.square(tiled_x - tiled_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_72": {
                "x": {
                    "value": "tiled_x - tiled_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/logger.py": {
        "tensorflow": {
            "as_bytes_111": {
                "bytes_or_text": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(osp.abspath(dir), prefix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}