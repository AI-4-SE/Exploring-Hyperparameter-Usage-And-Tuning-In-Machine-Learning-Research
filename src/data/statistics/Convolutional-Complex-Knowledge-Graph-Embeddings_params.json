{
    "grid_search.py": {
        "sklearn": {
            "ParameterGrid_40": {
                "param_grid": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'num_of_epochs': [2000], 'batch_size': [1024], 'optim': ['Adam', 'RMSprop'], 'learning_rate': [0.001], 'label_smoothing': [0.1], 'decay_rate': [None], 'scoring_technique': ['KvsAll'], 'train_plus_valid': [False, True], 'num_workers': [32]}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "models/complex_models.py": {
        "torch": {
            "Embedding_20": {
                "variable": {
                    "value": "self.Er",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_entities",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_21": {
                "variable": {
                    "value": "self.Rr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_relations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_22": {
                "variable": {
                    "value": "self.Ei",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_entities",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_23": {
                "variable": {
                    "value": "self.Ri",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_relations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.param['input_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_26": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_27": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_28": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(e1r * rr, self.Er.weight.transpose(1, 0)) + torch.mm(e1r * ri, self.Ei.weight.transpose(1, 0)) + torch.mm(e1i * rr, self.Ei.weight.transpose(1, 0)) - torch.mm(e1i * ri, self.Er.weight.transpose(1, 0))",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "real_real_real + real_imag_imag + imag_real_imag - imag_imag_real",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_56": {
                "variable": {
                    "value": "entity_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.Er.weight.data, self.Ei.weight.data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "rel_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.Rr.weight.data, self.Ri.weight.data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_79": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(e1r * rr, self.Er.weight.transpose(1, 0)) + torch.mm(e1r * ri, self.Ei.weight.transpose(1, 0)) + torch.mm(e1i * rr, self.Ei.weight.transpose(1, 0)) - torch.mm(e1i * ri, self.Er.weight.transpose(1, 0))",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "real_real_real + real_imag_imag + imag_real_imag - imag_imag_real",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCELoss_92": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_101": {
                "variable": {
                    "value": "self.emb_ent_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.param['num_entities']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_102": {
                "variable": {
                    "value": "self.emb_ent_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.param['num_entities']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_104": {
                "variable": {
                    "value": "self.emb_rel_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.param['num_relations']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_105": {
                "variable": {
                    "value": "self.emb_rel_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.param['num_relations']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_108": {
                "variable": {
                    "value": "self.input_dp_ent_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.param['input_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_109": {
                "variable": {
                    "value": "self.input_dp_ent_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.param['input_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_110": {
                "variable": {
                    "value": "self.input_dp_rel_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.param['input_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_111": {
                "variable": {
                    "value": "self.input_dp_rel_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.param['input_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_114": {
                "variable": {
                    "value": "self.bn_ent_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_115": {
                "variable": {
                    "value": "self.bn_ent_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_116": {
                "variable": {
                    "value": "self.bn_rel_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_117": {
                "variable": {
                    "value": "self.bn_rel_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_120": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_of_output_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.kernel_size, self.kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_num_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "variable": {
                    "value": "self.bn_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_of_output_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_127": {
                "variable": {
                    "value": "self.bn_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.embedding_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout2d_128": {
                "variable": {
                    "value": "self.feature_map_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.param['feature_map_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb_ent_real.view(-1, 1, 1, self.embedding_dim), emb_ent_imag_i.view(-1, 1, 1, self.embedding_dim), emb_rel_real.view(-1, 1, 1, self.embedding_dim), emb_rel_imag_i.view(-1, 1, 1, self.embedding_dim)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_140": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_143": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_conv2(self.fc(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_181": {
                "variable": {
                    "value": "real_real_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a * emb_head_real * emb_rel_real",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.emb_ent_real.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_182": {
                "variable": {
                    "value": "real_imag_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a * emb_head_real * emb_rel_i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.emb_ent_i.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_183": {
                "variable": {
                    "value": "imag_real_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b * emb_head_i * emb_rel_real",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.emb_ent_i.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_184": {
                "variable": {
                    "value": "imag_imag_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b * emb_head_i * emb_rel_i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.emb_ent_real.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "entity_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.emb_ent_real.weight.data, self.emb_ent_i.weight.data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "rel_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.emb_rel_real.weight.data, self.emb_rel_i.weight.data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_144": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([emb_ent_real.view(-1, 1, 1, self.embedding_dim), emb_ent_imag_i.view(-1, 1, 1, self.embedding_dim), emb_rel_real.view(-1, 1, 1, self.embedding_dim), emb_rel_imag_i.view(-1, 1, 1, self.embedding_dim)], 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_conv1(x))",
                            "Call"
                        ],
                        [
                            "self.feature_map_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_conv2(self.fc(x)))",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_186": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_real_real + real_imag_imag + imag_real_imag - imag_imag_real",
                            "BinOp"
                        ],
                        [
                            "real_real_real + real_imag_imag + imag_real_imag - imag_imag_real",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_234": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_real_real + real_imag_imag + imag_real_imag - imag_imag_real",
                            "BinOp"
                        ],
                        [
                            "real_real_real + real_imag_imag + imag_real_imag - imag_imag_real",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_48": {
                "input": {
                    "value": "e1i * ri",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.Er.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_47": {
                "input": {
                    "value": "e1i * rr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.Ei.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_45": {
                "input": {
                    "value": "e1r * rr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.Er.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_46": {
                "input": {
                    "value": "e1r * ri",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.Ei.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/ensemble.py": {
        "torch": {}
    },
    "models/real_models.py": {
        "torch": {
            "manual_seed_10": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "BCELoss_21": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_23": {
                "variable": {
                    "value": "self.emb_ent_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_entities",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_25": {
                "variable": {
                    "value": "self.emb_rel_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_relations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "variable": {
                    "value": "self.input_dp_ent_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.param['input_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_29": {
                "variable": {
                    "value": "self.input_dp_rel_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.param['input_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_31": {
                "variable": {
                    "value": "self.bn_ent_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_33": {
                "variable": {
                    "value": "self.bn_rel_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_41": {
                "variable": {
                    "value": "real_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_head_real * self.input_dp_rel_real(self.bn_rel_real(emb_rel_real))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.input_dp_ent_real(self.bn_ent_real(self.emb_ent_real.weight)).transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_85": {
                "variable": {
                    "value": "self.emb_ent_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_entities",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_87": {
                "variable": {
                    "value": "self.emb_rel_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_relations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([self.param['gamma']])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_94": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_111": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_head + emb_rel - emb_tail",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_133": {
                "variable": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_entities",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_134": {
                "variable": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_relations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_135": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(np.random.uniform(-1, 1, (self.embedding_dim, self.embedding_dim, self.embedding_dim)), dtype=torch.float, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_139": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.param['input_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_140": {
                "variable": {
                    "value": "self.hidden_dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.param['hidden_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_141": {
                "variable": {
                    "value": "self.hidden_dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.param['hidden_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_142": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_143": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_145": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_158": {
                "variable": {
                    "value": "W_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.R(rel_idx)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W.view(r.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_162": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn0(e1)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.E.weight.transpose(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(r, self.W.view(r.size(1), -1))",
                            "Call"
                        ],
                        [
                            "W_mat.view(-1, e1.size(1), e1.size(1))",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout1(W_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_166": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn0(e1)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.E.weight.transpose(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.E.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_167": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn0(e1)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.E.weight.transpose(1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_44": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_score",
                            "variable"
                        ],
                        [
                            "self.gamma.item() - distance",
                            "BinOp"
                        ],
                        [
                            "self.forward_triples(e1_idx=e1_idx, rel_idx=rel_idx, e2_idx=e2_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_65": {
                "input": {
                    "value": "(emb_head * emb_rel * emb_tail).sum(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_115": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_score",
                            "variable"
                        ],
                        [
                            "self.gamma.item() - distance",
                            "BinOp"
                        ],
                        [
                            "self.forward_triples(e1_idx=e1_idx, rel_idx=rel_idx, e2_idx=e2_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_136": {
                "data": {
                    "value": "np.random.uniform(-1, 1, (self.embedding_dim, self.embedding_dim, self.embedding_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "util/experiment.py": {
        "torch": {
            "is_available_39": {
                "variable": {
                    "value": "self.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_328": {
                "variable": {
                    "value": "head_to_relation_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "HeadAndRelationBatchLoader(er_vocab=self.get_er_vocab(train_data_idxs), num_e=len(self.dataset.entities))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_of_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_369": {
                "variable": {
                    "value": "batch_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "DatasetTriple(data=train_data_idxs)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_of_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "e1_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "r_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "e2_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sort_128": {
                "variable": {
                    "value": "(sort_values, sort_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward_head_batch(e1_idx=e1_idx, rel_idx=r_idx)",
                            "Call"
                        ],
                        [
                            "model.forward_triples(e1_idx=e1_idx.repeat(len(self.entity_idxs)), rel_idx=rel_idx.repeat(len(self.entity_idxs)), e2_idx=all_entities)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "variable": {
                    "value": "e1_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_point[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "rel_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_point[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "variable": {
                    "value": "e2_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_point[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_176": {
                "variable": {
                    "value": "all_entities",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(self.entity_idxs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_188": {
                "variable": {
                    "value": "(sort_values, sort_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward_head_batch(e1_idx=e1_idx, rel_idx=r_idx)",
                            "Call"
                        ],
                        [
                            "model.forward_triples(e1_idx=e1_idx.repeat(len(self.entity_idxs)), rel_idx=rel_idx.repeat(len(self.entity_idxs)), e2_idx=all_entities)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_259": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_266": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_284": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.storage_path + '/model.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSprop_261": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_384": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "len(self.entity_idxs)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.batch_size * self.neg_sample_ratio, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_399": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, h_head_corr, h_tail_corr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_400": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(r, r_head_corr, r_tail_corr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_401": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t, t_head_corr, t_tail_corr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_402": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label, label_head_corr, label_tail_corr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_382": {
                "*size": {
                    "value": "(len(h),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_390": {
                "*size": {
                    "value": "len(t_head_corr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_396": {
                "*size": {
                    "value": "len(t_tail_corr)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "util/helper_classes.py": {
        "torch": {
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_47": {
                "variable": {
                    "value": "head_rel_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "y_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_e",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_71": {
                "variable": {
                    "value": "self.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_226": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path + '/model.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "e1_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "variable": {
                    "value": "r_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "e2_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sort_131": {
                "variable": {
                    "value": "(sort_values, sort_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward_head_batch(e1_idx=e1_idx, rel_idx=r_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_226": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}