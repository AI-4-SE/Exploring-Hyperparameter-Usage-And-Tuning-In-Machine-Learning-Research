{
    "mmselfsup/models/memories/odc_memory.py": {
        "sklearn": {
            "KMeans_37": {
                "variable": {
                    "value": "self.kmeans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_34": {
                "variable": {
                    "value": "self.label_bank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(length,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes, feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num, self.feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "ind_gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ind_gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(ind).cuda() for _ in range(self.num_replicas)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(ind_gathered, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "feature_gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(feature).cuda() for _ in range(self.num_replicas)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(feature_gathered, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_116": {
                "variable": {
                    "value": "similarity_to_centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature_norm.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "self.feature_bank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(length, feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_56": {
                "tensor": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_114": {
                "tensor": {
                    "value": "feature_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature / (feature.norm(dim=1).view(-1, 1) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "feature_new / (feature_new.norm(dim=1).view(-1, 1) + 1e-10)",
                            "BinOp"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_171": {
                "tensor": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_87": {
                "input": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(self.label_bank.numpy() == c)[0]",
                            "Subscript"
                        ],
                        [
                            "ind.cpu()",
                            "Call"
                        ],
                        [
                            "np.where(self.label_bank.numpy() == s)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_90": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature / (np.linalg.norm(feature, axis=1).reshape(-1, 1) + 1e-10)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_140": {
                "variable": {
                    "value": "inclusion",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.setdiff1d(np.arange(self.num_classes), np.array(small_clusters), assume_unique=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_155": {
                "variable": {
                    "value": "self.label_bank[ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_207": {
                "variable": {
                    "value": "sub_cluster1_ind_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sub_cluster1_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_cluster_inds[kmeans_ret.labels_ == 0]",
                            "Subscript"
                        ],
                        [
                            "np.random.choice(max_cluster_inds, len(max_cluster_inds) // 2, replace=False)",
                            "Call"
                        ],
                        [
                            "sub_cluster1_ind_tensor.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_209": {
                "variable": {
                    "value": "sub_cluster2_ind_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sub_cluster2_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_cluster_inds[kmeans_ret.labels_ == 1]",
                            "Subscript"
                        ],
                        [
                            "np.setdiff1d(max_cluster_inds, sub_cluster1_ind, assume_unique=True)",
                            "Call"
                        ],
                        [
                            "sub_cluster2_ind_tensor.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "sub_cluster1_ind_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(size1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "sub_cluster2_ind_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(size2,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_221": {
                "tensor": {
                    "value": "sub_cluster1_ind_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(sub_cluster1_ind).long().cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros((size1,), dtype=torch.int64).cuda()",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_222": {
                "tensor": {
                    "value": "sub_cluster2_ind_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(sub_cluster2_ind).long().cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros((size2,), dtype=torch.int64).cuda()",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "ndarray": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature / (np.linalg.norm(feature, axis=1).reshape(-1, 1) + 1e-10)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_146": {
                "variable": {
                    "value": "target_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.centroids[inclusion, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.feature_bank[ind, :].cuda().permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_146": {
                "variable": {
                    "value": "target_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(ind.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/analysis_tools/visualize_tsne.py": {
        "sklearn": {
            "TSNE_296": {
                "variable": {
                    "value": "tsne_model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "args.n_components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "args.perplexity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "args.early_exaggeration",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "args.n_iter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_iter_without_progress": {
                    "value": "args.n_iter_without_progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init": {
                    "value": "args.init",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "current_device_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/benchmarks/classification/svm_voc07/tools/train_svm_kfold.py": {
        "sklearn": {
            "LinearSVC_67": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "costs_list[cost_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "class_weight": {
                    "value": "{1: 2, -1: 1}",
                    "type": "Dict",
                    "possible_values": []
                },
                "intercept_scaling": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "loss": {
                    "value": "squared_hinge",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "dual": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_val_score_87": {
                "variable": {
                    "value": "ap_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LinearSVC(C=cost, class_weight={1: 2, -1: 1}, intercept_scaling=1.0, verbose=0, penalty='l2', loss='squared_hinge', tol=0.0001, dual=True, max_iter=2000)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svm_helper.normalize_features(features)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cls_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets[:, cls].astype(dtype=np.int32, copy=True)",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "scoring": {
                    "value": "average_precision",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tools/benchmarks/classification/svm_voc07/tools/train_svm_kfold_parallel.py": {
        "sklearn": {
            "LinearSVC_34": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "costs_list",
                            "variable"
                        ]
                    ]
                },
                "class_weight": {
                    "value": "{1: 2, -1: 1}",
                    "type": "Dict",
                    "possible_values": []
                },
                "intercept_scaling": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "loss": {
                    "value": "squared_hinge",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "dual": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_val_score_50": {
                "variable": {
                    "value": "ap_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LinearSVC(C=cost, class_weight={1: 2, -1: 1}, intercept_scaling=1.0, verbose=0, penalty='l2', loss='squared_hinge', tol=0.0001, dual=True, max_iter=2000)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svm_helper.normalize_features(features)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cls_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets[:, cls].astype(dtype=np.int32, copy=True)",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "scoring": {
                    "value": "average_precision",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tools/benchmarks/classification/svm_voc07/tools/train_svm_low_shot.py": {
        "sklearn": {
            "LinearSVC_62": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "costs_list[cost_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "class_weight": {
                    "value": "{1: 2, -1: 1}",
                    "type": "Dict",
                    "possible_values": []
                },
                "intercept_scaling": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "loss": {
                    "value": "squared_hinge",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "dual": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/benchmarks/classification/svm_voc07/tools/train_svm_low_shot_parallel.py": {
        "sklearn": {
            "LinearSVC_34": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "costs_list",
                            "variable"
                        ]
                    ]
                },
                "class_weight": {
                    "value": "{1: 2, -1: 1}",
                    "type": "Dict",
                    "possible_values": []
                },
                "intercept_scaling": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "loss": {
                    "value": "squared_hinge",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "dual": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/apis/inference.py": {
        "torch": {
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/apis/train.py": {
        "torch": {
            "tensor_43": {
                "variable": {
                    "value": "random_num",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(2 ** 31)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "random_num",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "broadcast_46": {
                "tensor": {
                    "value": "random_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(seed, dtype=torch.int32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0, dtype=torch.int32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_62": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(2 ** 31)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_63": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(2 ** 31)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "current_device_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/core/hooks/deepcluster_hook.py": {
        "torch": {
            "from_numpy_105": {
                "variable": {
                    "value": "new_labels_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(self.data_loaders[0].dataset),), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "clustering_algo.labels.astype(np.int64)",
                            "Call"
                        ],
                        [
                            "new_labels_tensor.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "broadcast_106": {
                "tensor": {
                    "value": "new_labels_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(new_labels).cuda()",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_127": {
                "tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "runner.model.module.head.state_dict().values()",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/core/hooks/swav_hook.py": {
        "torch": {
            "is_initialized_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.crops_for_assign)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.queue_length // runner.world_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_initialized_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_81": {
                "obj": {
                    "value": "{'queue': self.queue}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "self.queue_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_56": {
                "f": {
                    "value": "self.queue_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/core/optimizer/constructor.py": {
        "torch": {
            "is_initialized_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/core/optimizer/optimizers.py": {
        "torch": {
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_106": {
                "variable": {
                    "value": "weight_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "norm_107": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad",
                            "Attribute"
                        ],
                        [
                            "d_p.add(p, alpha=weight_decay).mul(actual_lr)",
                            "Call"
                        ],
                        [
                            "d_p.add(buf, alpha=momentum)",
                            "Call"
                        ],
                        [
                            "buf",
                            "variable"
                        ]
                    ]
                }
            },
            "clone_121": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad",
                            "Attribute"
                        ],
                        [
                            "d_p.add(p, alpha=weight_decay).mul(actual_lr)",
                            "Call"
                        ],
                        [
                            "d_p.add(buf, alpha=momentum)",
                            "Call"
                        ],
                        [
                            "buf",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "mmselfsup/core/optimizer/transformer_finetune_constructor.py": {
        "torch": {
            "is_initialized_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/datasets/base.py": {
        "torch": {}
    },
    "mmselfsup/datasets/builder.py": {
        "torch": {
            "DataLoader_139": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset([build_dataset(c, default_args) for c in cfg])",
                            "Call"
                        ],
                        [
                            "RepeatDataset(build_dataset(cfg['dataset'], default_args), cfg['times'])",
                            "Call"
                        ],
                        [
                            "build_from_cfg(cfg, DATASETS, default_args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples_per_gpu",
                            "variable"
                        ],
                        [
                            "num_gpus * samples_per_gpu",
                            "BinOp"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(dataset, world_size, rank, shuffle=shuffle, replace=replace, seed=seed)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "workers_per_gpu",
                            "variable"
                        ],
                        [
                            "num_gpus * workers_per_gpu",
                            "BinOp"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "partial(collate, samples_per_gpu=samples_per_gpu)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "worker_init_fn": {
                    "value": "init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(worker_init_fn, num_workers=num_workers, rank=rank, seed=seed) if seed is not None else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "manual_seed_173": {
                "seed": {
                    "value": "worker_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers * rank + worker_id + seed",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "mmselfsup/datasets/data_sources/cifar.py": {
        "torch": {}
    },
    "mmselfsup/datasets/dataset_wrappers.py": {
        "torch": {}
    },
    "mmselfsup/datasets/deepcluster.py": {
        "torch": {
            "from_numpy_34": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "to_numpy(img)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/datasets/multi_view.py": {
        "torch": {
            "from_numpy_59": {
                "ndarray": {
                    "value": "to_numpy(img)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/datasets/pipelines/transforms.py": {
        "torch": {
            "from_numpy_86": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(self.token_count, dtype=int)",
                            "Call"
                        ],
                        [
                            "mask.reshape((self.rand_size, self.rand_size))",
                            "Call"
                        ],
                        [
                            "mask.repeat(self.scale, axis=0).repeat(self.scale, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "np.zeros(shape=self.get_shape(), dtype=np.int)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmselfsup/datasets/relative_loc.py": {
        "torch": {
            "from_numpy_70": {
                "ndarray": {
                    "value": "to_numpy(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "(patches[i], patches[4])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_82": {
                "tensors": {
                    "value": "perms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "mmselfsup/datasets/rotation_pred.py": {
        "torch": {
            "stack_50": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rotate(img)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_20": {
                "input": {
                    "value": "img.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_21": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data_source.get_img(idx)",
                            "Call"
                        ],
                        [
                            "self.pipeline(img)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(to_numpy(img))",
                            "Call"
                        ],
                        [
                            "torch.stack(rotate(img), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_22": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data_source.get_img(idx)",
                            "Call"
                        ],
                        [
                            "self.pipeline(img)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(to_numpy(img))",
                            "Call"
                        ],
                        [
                            "torch.stack(rotate(img), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_22": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "to_numpy(img)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/datasets/samplers/distributed_sampler.py": {
        "torch": {
            "Generator_44": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_60": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_51": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(self.dataset),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_57": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmselfsup/datasets/samplers/group_sampler.py": {
        "torch": {
            "Generator_98": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_123": {
                "n": {
                    "value": "len(indices) // self.samples_per_gpu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_106": {
                "n": {
                    "value": "int(size)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmselfsup/datasets/single_view.py": {
        "torch": {
            "from_numpy_33": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "to_numpy(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(val)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmselfsup/datasets/utils.py": {
        "torch": {
            "Stream_172": {
                "variable": {
                    "value": "stream",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_174": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[x * 255 for x in self._mean]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[x * 255 for x in self._std]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "empty_cache_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/algorithms/barlowtwins.py": {
        "torch": {}
    },
    "mmselfsup/models/algorithms/base.py": {
        "torch": {
            "is_available_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/algorithms/byol.py": {
        "torch": {
            "Sequential_36": {
                "variable": {
                    "value": "self.online_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_backbone(backbone)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.target_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_backbone(backbone)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/algorithms/cae.py": {
        "torch": {
            "cat_81": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.img_norm(x).unsqueeze(0) for x in img]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "(0.485, 0.456, 0.406)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "(0.229, 0.224, 0.225)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/algorithms/deepcluster.py": {
        "torch": {
            "ones_47": {
                "variable": {
                    "value": "self.loss_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_118": {
                "variable": {
                    "value": "self.head.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.loss_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_117": {
                "ndarray": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_histogram / inv_histogram.sum()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "mmselfsup/models/algorithms/densecl.py": {
        "torch": {
            "Sequential_47": {
                "variable": {
                    "value": "self.encoder_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_backbone(backbone)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.encoder_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_backbone(backbone)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_67": {
                "variable": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_71": {
                "variable": {
                    "value": "self.queue2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.queue2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_149": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(q, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_150": {
                "variable": {
                    "value": "q2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(q2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_151": {
                "variable": {
                    "value": "q_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(q_grid, dim=1)",
                            "Call"
                        ],
                        [
                            "q_grid.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "q_grid.reshape(-1, q_grid.size(2))",
                            "Call"
                        ],
                        [
                            "self.extract_feat(im_q)[0]",
                            "Subscript"
                        ],
                        [
                            "q_grid.view(q_grid.size(0), q_grid.size(1), -1)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(q_grid, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_152": {
                "variable": {
                    "value": "q_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_q[0](im_q)",
                            "Call"
                        ],
                        [
                            "q_b[0]",
                            "Subscript"
                        ],
                        [
                            "q_b.view(q_b.size(0), q_b.size(1), -1)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(q_b, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_181": {
                "variable": {
                    "value": "l_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,nc->n",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[q, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_181": {
                "variable": {
                    "value": "l_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_183": {
                "variable": {
                    "value": "l_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,ck->nk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[q, self.queue.clone().detach()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_186": {
                "variable": {
                    "value": "backbone_sim_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_b.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "k_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_k[0](im_k)",
                            "Call"
                        ],
                        [
                            "k_b[0]",
                            "Subscript"
                        ],
                        [
                            "k_b.view(k_b.size(0), k_b.size(1), -1)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(k_b, dim=1)",
                            "Call"
                        ],
                        [
                            "batch_unshuffle_ddp(k_b, idx_unshuffle)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_189": {
                "variable": {
                    "value": "indexed_k_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(k_grid, dim=1)",
                            "Call"
                        ],
                        [
                            "batch_unshuffle_ddp(k_grid, idx_unshuffle)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "densecl_sim_ind.unsqueeze(1).expand(-1, k_grid.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_200": {
                "variable": {
                    "value": "l_neg_dense",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,ck->nk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[q_grid, self.queue2.clone().detach()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normalize_231": {
                "variable": {
                    "value": "q_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(q_grid, dim=1)",
                            "Call"
                        ],
                        [
                            "q_grid.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "q_grid.reshape(-1, q_grid.size(2))",
                            "Call"
                        ],
                        [
                            "self.extract_feat(im_q)[0]",
                            "Subscript"
                        ],
                        [
                            "q_grid.view(q_grid.size(0), q_grid.size(1), -1)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(q_grid, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_167": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(k, dim=1)",
                            "Call"
                        ],
                        [
                            "batch_unshuffle_ddp(k, idx_unshuffle)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_168": {
                "variable": {
                    "value": "k2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(k2, dim=1)",
                            "Call"
                        ],
                        [
                            "batch_unshuffle_ddp(k2, idx_unshuffle)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_169": {
                "variable": {
                    "value": "k_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(k_grid, dim=1)",
                            "Call"
                        ],
                        [
                            "batch_unshuffle_ddp(k_grid, idx_unshuffle)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_170": {
                "variable": {
                    "value": "k_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_k[0](im_k)",
                            "Call"
                        ],
                        [
                            "k_b[0]",
                            "Subscript"
                        ],
                        [
                            "k_b.view(k_b.size(0), k_b.size(1), -1)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(k_b, dim=1)",
                            "Call"
                        ],
                        [
                            "batch_unshuffle_ddp(k_b, idx_unshuffle)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_66": {
                "*size": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "queue_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "65536",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_68": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_70": {
                "*size": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "queue_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "65536",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_72": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/algorithms/mae.py": {
        "torch": {
            "einsum_84": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nchw->nhwc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.neck(latent, ids_restore)",
                            "Call"
                        ],
                        [
                            "self.neck(latent, ids_restore)",
                            "Call"
                        ],
                        [
                            "self.head.unpatchify(pred)",
                            "Call"
                        ],
                        [
                            "torch.einsum('nchw->nhwc', pred).detach().cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_90": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nchw->nhwc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.detach()",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(-1).repeat(1, 1, self.head.patch_size ** 2 * 3)",
                            "Call"
                        ],
                        [
                            "self.head.unpatchify(mask)",
                            "Call"
                        ],
                        [
                            "torch.einsum('nchw->nhwc', mask).detach().cpu()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmselfsup/models/algorithms/mmcls_classifier_wrapper.py": {
        "torch": {}
    },
    "mmselfsup/models/algorithms/moco.py": {
        "torch": {
            "Sequential_44": {
                "variable": {
                    "value": "self.encoder_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_backbone(backbone)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.encoder_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_backbone(backbone)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_64": {
                "variable": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_121": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_q(im_q)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.functional.normalize(q, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_140": {
                "variable": {
                    "value": "l_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,nc->n",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[q, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_140": {
                "variable": {
                    "value": "l_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_142": {
                "variable": {
                    "value": "l_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,ck->nk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[q, self.queue.clone().detach()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normalize_132": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_k(im_k)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.functional.normalize(k, dim=1)",
                            "Call"
                        ],
                        [
                            "batch_unshuffle_ddp(k, idx_unshuffle)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_63": {
                "*size": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "queue_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "65536",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/algorithms/mocov3.py": {
        "torch": {
            "Sequential_37": {
                "variable": {
                    "value": "self.base_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_backbone(backbone)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.momentum_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_backbone(backbone)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/algorithms/npid.py": {
        "torch": {
            "normalize_80": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.extract_feat(img)",
                            "Call"
                        ],
                        [
                            "self.neck(feature)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.functional.normalize(feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_94": {
                "variable": {
                    "value": "pos_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_bank.feature_bank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_96": {
                "variable": {
                    "value": "neg_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_bank.feature_bank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "neg_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.memory_bank.multinomial.draw(bs * self.neg_num)",
                            "Call"
                        ],
                        [
                            "neg_idx.view(bs, -1)",
                            "Call"
                        ],
                        [
                            "neg_idx.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_100": {
                "variable": {
                    "value": "pos_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,nc->n",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[pos_feat, feature]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_100": {
                "variable": {
                    "value": "pos_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_102": {
                "variable": {
                    "value": "neg_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.memory_bank.feature_bank, 0, neg_idx).view(bs, self.neg_num, feat_dim)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feature.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_102": {
                "variable": {
                    "value": "neg_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/algorithms/odc.py": {
        "torch": {
            "ones_53": {
                "variable": {
                    "value": "self.loss_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_139": {
                "variable": {
                    "value": "self.head.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.loss_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "ndarray": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_histogram / inv_histogram.sum()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "mmselfsup/models/algorithms/relative_loc.py": {
        "torch": {
            "chunk_56": {
                "variable": {
                    "value": "(img1, img2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.view(img.size(0) * img.size(1), img.size(2), img.size(3), img.size(4))",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_76": {
                "variable": {
                    "value": "(img1, img2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.view(img.size(0) * img.size(1), img.size(2), img.size(3), img.size(4))",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_98": {
                "variable": {
                    "value": "patch_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flatten(patch_label)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "(x1[0], x2[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "(x1[0], x2[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/algorithms/rotation_pred.py": {
        "torch": {
            "flatten_88": {
                "variable": {
                    "value": "rot_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flatten(rot_label)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mmselfsup/models/algorithms/simclr.py": {
        "torch": {
            "ones_43": {
                "variable": {
                    "value": "neg_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N * 2, N * 2 - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_72": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(img, 1)",
                            "Call"
                        ],
                        [
                            "img.reshape((img.size(0) * 2, img.size(2), img.size(3), img.size(4)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "GatherLayer.apply(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.neck(x)[0]",
                            "Subscript"
                        ],
                        [
                            "z / (torch.norm(z, p=2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "torch.cat(GatherLayer.apply(z), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_84": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z, z.permute(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(s, mask == 1).reshape(s.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "masked_select_87": {
                "variable": {
                    "value": "negative",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z, z.permute(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(s, mask == 1).reshape(s.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "neg_mask == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "negative",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_39": {
                "n": {
                    "value": "N * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_40": {
                "start": {
                    "value": "N * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_41": {
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.size(0) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_41": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_77": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.neck(x)[0]",
                            "Subscript"
                        ],
                        [
                            "z / (torch.norm(z, p=2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "torch.cat(GatherLayer.apply(z), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/algorithms/simmim.py": {
        "torch": {}
    },
    "mmselfsup/models/algorithms/simsiam.py": {
        "torch": {
            "Sequential_33": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_backbone(backbone)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/algorithms/swav.py": {
        "torch": {
            "cumsum_63": {
                "variable": {
                    "value": "idx_crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unique_consecutive(torch.tensor([i.shape[-1] for i in img]), return_counts=True)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_consecutive_64": {
                "*args": {
                    "value": "torch.tensor([i.shape[-1] for i in img])",
                    "type": "Call",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_70": {
                "tensors": {
                    "value": "img[start_idx:end_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "[i.shape[-1] for i in img]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/backbones/cae_vit.py": {
        "torch": {
            "cat_134": {
                "variable": {
                    "value": "x_unmasked",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x_unmasked)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "pos_embed_unmasked",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_embed[:, :1], pos_embed_unmasked)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/backbones/mae_vit.py": {
        "torch": {
            "rand_125": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argsort_128": {
                "variable": {
                    "value": "ids_shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(N, L, device=x.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_130": {
                "variable": {
                    "value": "ids_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ids_shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argsort(noise, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_134": {
                "variable": {
                    "value": "x_masked",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.patch_embed(x)[0]",
                            "Subscript"
                        ],
                        [
                            "x + self.pos_embed[:, 1:, :]",
                            "BinOp"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "self.drop_after_pos(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ids_keep.unsqueeze(-1).repeat(1, 1, D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_138": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, L]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_141": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([N, L], device=x.device)",
                            "Call"
                        ],
                        [
                            "torch.gather(mask, dim=1, index=ids_restore)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ids_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argsort(ids_shuffle, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_157": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/backbones/mim_cls_vit.py": {
        "torch": {
            "cat_123": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/backbones/simmim_swin.py": {
        "torch": {
            "Parameter_80": {
                "variable": {
                    "value": "self.mask_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, self.embed_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.embed_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/backbones/vision_transformer.py": {
        "torch": {}
    },
    "mmselfsup/models/heads/cae_head.py": {
        "torch": {
            "CrossEntropyLoss_35": {
                "variable": {
                    "value": "self.loss_cross_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_36": {
                "variable": {
                    "value": "self.loss_mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_52": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(img_target)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_41": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.tokenizer_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/heads/cls_head.py": {
        "torch": {
            "CrossEntropyLoss_39": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_42": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/heads/contrastive_head.py": {
        "torch": {
            "CrossEntropyLoss_24": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos, neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/heads/latent_pred_head.py": {
        "torch": {
            "normalize_38": {
                "variable": {
                    "value": "pred_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predictor([input])[0]",
                            "Subscript"
                        ],
                        [
                            "self.predictor(input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_39": {
                "variable": {
                    "value": "target_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_66": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_100": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "diagonal_120": {
                "variable": {
                    "value": "on_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cross_correlation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn(input).T @ self.bn(target)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_120": {
                "variable": {
                    "value": "on_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_80": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.predictor(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_initialized_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/heads/mae_head.py": {
        "torch": {
            "einsum_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nchpwq->nhwpqc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgs.reshape(shape=(imgs.shape[0], 3, h, p, w, p))",
                            "Call"
                        ],
                        [
                            "torch.einsum('nchpwq->nhwpqc', x)",
                            "Call"
                        ],
                        [
                            "x.reshape(shape=(imgs.shape[0], h * w, p ** 2 * 3))",
                            "Call"
                        ],
                        [
                            "x.reshape(shape=(x.shape[0], h, w, p, p, 3))",
                            "Call"
                        ],
                        [
                            "torch.einsum('nhwpqc->nchpwq', x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nhwpqc->nchpwq",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgs.reshape(shape=(imgs.shape[0], 3, h, p, w, p))",
                            "Call"
                        ],
                        [
                            "torch.einsum('nchpwq->nhwpqc', x)",
                            "Call"
                        ],
                        [
                            "x.reshape(shape=(imgs.shape[0], h * w, p ** 2 * 3))",
                            "Call"
                        ],
                        [
                            "x.reshape(shape=(x.shape[0], h, w, p, p, 3))",
                            "Call"
                        ],
                        [
                            "torch.einsum('nhwpqc->nchpwq', x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_119": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_120": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/heads/mocov3_head.py": {
        "torch": {
            "normalize_45": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predictor([base_out])[0]",
                            "Subscript"
                        ],
                        [
                            "nn.functional.normalize(pred, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_46": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "momentum_out",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_52": {
                "equation": {
                    "value": "nc,mc->nm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[pred, target]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_56": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/heads/multi_cls_head.py": {
        "torch": {
            "CrossEntropyLoss_52": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.multi_pooling.POOL_DIMS[backbone][i], num_classes) for i in in_indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_57": {
                "variable": {
                    "value": "self.norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[build_norm_layer(norm_cfg, self.FEAT_CHANNELS[backbone][i])[1] for i in in_indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "self.multi_pooling.POOL_DIMS[backbone][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "self.FEAT_LAST_UNPOOL[backbone]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mmselfsup/models/heads/simmim_head.py": {
        "torch": {
            "l1_loss_29": {
                "variable": {
                    "value": "loss_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "x_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/heads/swav_head.py": {
        "torch": {
            "normalize_76": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prototypes.weight.data.clone()",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(w, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_initialized_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.prototypes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3000",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_108": {
                "input": {
                    "value": "torch.sum(q * nn.functional.log_softmax(x, dim=1), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.mm(self.queue[i], self.prototypes.weight.t()), out)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_109": {
                "input": {
                    "value": "q * nn.functional.log_softmax(x, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_89": {
                "input": {
                    "value": "self.queue[i, -1, :] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "log_softmax_109": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[bs * v:bs * (v + 1)] / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_93": {
                "input": {
                    "value": "self.queue[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.prototypes.weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/memories/simple_memory.py": {
        "torch": {
            "randn_27": {
                "variable": {
                    "value": "self.feature_bank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalize_28": {
                "variable": {
                    "value": "self.feature_bank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.feature_bank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_40": {
                "variable": {
                    "value": "feature_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalize_45": {
                "variable": {
                    "value": "feature_new_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - self.momentum) * feature_old + self.momentum * feature_norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_67": {
                "variable": {
                    "value": "ind_gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ind_gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(ind).cuda() for _ in range(self.num_replicas)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(ind_gathered, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "feature_gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(feature).cuda() for _ in range(self.num_replicas)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(feature_gathered, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_30": {
                "*size": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_60": {
                "input": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_63": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/necks/avgpool2d_neck.py": {
        "torch": {
            "AdaptiveAvgPool2d_14": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mmselfsup/models/necks/cae_neck.py": {
        "torch": {
            "ModuleList_76": {
                "variable": {
                    "value": "self.regressors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[CAETransformerRegressorLayer(embed_dims=embed_dims, num_heads=num_heads, feedforward_channels=mlp_ratio * embed_dims, qkv_bias=qkv_bias, qk_scale=qk_scale, drop_rate=drop_rate, attn_drop_rate=attn_drop_rate, drop_path_rate=regressor_drop_path_rates[i], norm_cfg=norm_cfg, init_values=init_values) for i in range(regressor_depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_95": {
                "variable": {
                    "value": "self.decoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerEncoderLayer(embed_dims=embed_dims, num_heads=num_heads, feedforward_channels=mlp_ratio * embed_dims, qkv_bias=qkv_bias, drop_rate=drop_rate, attn_drop_rate=attn_drop_rate, drop_path_rate=decoder_drop_path_rates[i], norm_cfg=norm_cfg, init_values=init_values) for i in range(decoder_depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_115": {
                "variable": {
                    "value": "self.mask_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Identity_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_115": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_74": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "regressor_depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_92": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "decoder_depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_154": {
                "tensors": {
                    "value": "[x_unmasked, x_masked]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "tensors": {
                    "value": "[pos_embed_unmasked, pos_embed_masked]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/necks/densecl_neck.py": {
        "torch": {
            "AdaptiveAvgPool2d_31": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, hid_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.mlp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, hid_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_42": {
                "variable": {
                    "value": "self.avgpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_38": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(num_grid, num_grid)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/necks/linear_neck.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_29": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/necks/mae_neck.py": {
        "torch": {
            "Linear_57": {
                "variable": {
                    "value": "self.decoder_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "decoder_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "self.mask_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, decoder_embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.decoder_pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.num_patches + 1, decoder_embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_65": {
                "variable": {
                    "value": "self.decoder_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerEncoderLayer(decoder_embed_dim, decoder_num_heads, int(mlp_ratio * decoder_embed_dim), qkv_bias=True, norm_cfg=norm_cfg) for _ in range(decoder_depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.decoder_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "decoder_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "patch_size ** 2 * in_chans",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[:, 1:, :], mask_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_116": {
                "variable": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x[:, 1:, :], mask_tokens], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.gather(x_, dim=1, index=ids_restore.unsqueeze(-1).repeat(1, 1, x.shape[2]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ids_restore.unsqueeze(-1).repeat(1, 1, x.shape[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[:, :1, :], x_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "decoder_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_patches + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "decoder_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mmselfsup/models/necks/mocov2_neck.py": {
        "torch": {
            "Sequential_32": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, hid_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_31": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/necks/nonlinear_neck.py": {
        "torch": {
            "ReLU_60": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "with_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_59": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "this_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels if i == num_layers - 1 else hid_channels",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "with_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_79": {
                "in_features": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "this_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels if i == num_layers - 1 else hid_channels",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "with_last_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mmselfsup/models/necks/odc_neck.py": {
        "torch": {
            "Linear_40": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_39": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/necks/relative_loc_neck.py": {
        "torch": {
            "Linear_39": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_43": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_38": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/necks/simmim_neck.py": {
        "torch": {
            "Sequential_22": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=in_channels, out_channels=encoder_stride ** 2 * 3, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "encoder_stride ** 2 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_27": {
                "upscale_factor": {
                    "value": "encoder_stride",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/necks/swav_neck.py": {
        "torch": {
            "cat_71": {
                "variable": {
                    "value": "feat_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "avg_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_44": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normalize_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.projection_neck(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(x, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.projection_neck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.projection_neck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, hid_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/utils/dall_e.py": {
        "torch": {
            "empty_27": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.n_out, self.n_in, self.kw, self.kw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.requires_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.n_out,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.requires_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.res_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('relu_1', nn.ReLU()), ('conv_1', make_conv(self.n_in, self.n_hid, 3)), ('relu_2', nn.ReLU()), ('conv_2', make_conv(self.n_hid, self.n_hid, 3)), ('relu_3', nn.ReLU()), ('conv_3', make_conv(self.n_hid, self.n_hid, 3)), ('relu_4', nn.ReLU()), ('conv_4', make_conv(self.n_hid, self.n_out, 1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('input', make_conv(self.input_channels, 1 * self.n_hid, 7)), ('group_1', nn.Sequential(OrderedDict([*[(f'block_{i + 1}', make_blk(1 * self.n_hid, 1 * self.n_hid)) for i in blk_range], ('pool', nn.MaxPool2d(kernel_size=2))]))), ('group_2', nn.Sequential(OrderedDict([*[(f'block_{i + 1}', make_blk(1 * self.n_hid if i == 0 else 2 * self.n_hid, 2 * self.n_hid)) for i in blk_range], ('pool', nn.MaxPool2d(kernel_size=2))]))), ('group_3', nn.Sequential(OrderedDict([*[(f'block_{i + 1}', make_blk(2 * self.n_hid if i == 0 else 4 * self.n_hid, 4 * self.n_hid)) for i in blk_range], ('pool', nn.MaxPool2d(kernel_size=2))]))), ('group_4', nn.Sequential(OrderedDict([*[(f'block_{i + 1}', make_blk(4 * self.n_hid if i == 0 else 8 * self.n_hid, 8 * self.n_hid)) for i in blk_range]]))), ('output', nn.Sequential(OrderedDict([('relu', nn.ReLU()), ('conv', make_conv(8 * self.n_hid, self.vocab_size, 1, use_float16=False))])))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_51": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.half()",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((self.n_out, self.n_in, self.kw, self.kw), dtype=torch.float32, device=self.device, requires_grad=self.requires_grad)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((self.n_out,), dtype=torch.float32, device=self.device, requires_grad=self.requires_grad)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "(self.kw - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_21": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "data": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((self.n_out,), dtype=torch.float32, device=self.device, requires_grad=self.requires_grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "Identity_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_97": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "*args": {
                    "value": "OrderedDict([*[(f'block_{i + 1}', make_blk(1 * self.n_hid, 1 * self.n_hid)) for i in blk_range], ('pool', nn.MaxPool2d(kernel_size=2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "*args": {
                    "value": "OrderedDict([*[(f'block_{i + 1}', make_blk(1 * self.n_hid if i == 0 else 2 * self.n_hid, 2 * self.n_hid)) for i in blk_range], ('pool', nn.MaxPool2d(kernel_size=2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "*args": {
                    "value": "OrderedDict([*[(f'block_{i + 1}', make_blk(2 * self.n_hid if i == 0 else 4 * self.n_hid, 4 * self.n_hid)) for i in blk_range], ('pool', nn.MaxPool2d(kernel_size=2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "*args": {
                    "value": "OrderedDict([*[(f'block_{i + 1}', make_blk(4 * self.n_hid if i == 0 else 8 * self.n_hid, 8 * self.n_hid)) for i in blk_range]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "*args": {
                    "value": "OrderedDict([('relu', nn.ReLU()), ('conv', make_conv(8 * self.n_hid, self.vocab_size, 1, use_float16=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_123": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_132": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_141": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/utils/extract_process.py": {
        "torch": {
            "AdaptiveAvgPool2d_18": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/utils/gather_layer.py": {
        "torch": {
            "zeros_like_21": {
                "variable": {
                    "value": "grad_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_13": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/utils/knn_classifier.py": {
        "torch": {
            "normalize_30": {
                "variable": {
                    "value": "train_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(train_features, dim=1)",
                            "Call"
                        ],
                        [
                            "train_features.t()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_31": {
                "variable": {
                    "value": "test_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(test_features, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "retrieval_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_45": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_features[idx:min(idx + imgs_per_chunk, num_test_images), :]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "train_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(train_features, dim=1)",
                            "Call"
                        ],
                        [
                            "train_features.t()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_48": {
                "variable": {
                    "value": "retrieved_neighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "candidates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_labels.view(1, -1).expand(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_53": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(retrieval_one_hot.view(batch_size, -1, num_classes), distances_transform.view(batch_size, -1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_54": {
                "input": {
                    "value": "retrieval_one_hot.view(batch_size, -1, num_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "distances_transform.view(batch_size, -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/utils/multi_pooling.py": {
        "torch": {
            "ModuleList_37": {
                "variable": {
                    "value": "self.pools",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.AdaptiveAvgPool2d(self.POOL_SIZES[backbone][i]) for i in in_indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_42": {
                "variable": {
                    "value": "self.pools",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.AvgPool2d(**self.POOL_PARAMS[backbone][i]) for i in in_indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_38": {
                "output_size": {
                    "value": "self.POOL_SIZES[backbone][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/utils/multi_prototypes.py": {
        "torch": {
            "Linear_20": {
                "in_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/utils/position_embedding.py": {
        "torch": {
            "arange_16": {
                "variable": {
                    "value": "grid_w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_17": {
                "variable": {
                    "value": "grid_h",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_18": {
                "variable": {
                    "value": "(grid_w, grid_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "grid_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(w, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "grid_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(h, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_25": {
                "variable": {
                    "value": "out_w",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "m,d->md",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[grid_w.flatten(), omega]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_26": {
                "variable": {
                    "value": "out_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "m,d->md",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[grid_h.flatten(), omega]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "cls_token_pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, embed_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cls_token_pe, pos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_23": {
                "start": {
                    "value": "pos_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dims // 4",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_28": {
                "tensors": {
                    "value": "[torch.sin(out_w), torch.cos(out_w), torch.sin(out_h), torch.cos(out_h)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_30": {
                "input": {
                    "value": "out_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('m,d->md', [grid_w.flatten(), omega])",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_31": {
                "input": {
                    "value": "out_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('m,d->md', [grid_w.flatten(), omega])",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_32": {
                "input": {
                    "value": "out_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('m,d->md', [grid_h.flatten(), omega])",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_33": {
                "input": {
                    "value": "out_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('m,d->md', [grid_h.flatten(), omega])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmselfsup/models/utils/sobel.py": {
        "torch": {
            "Conv2d_12": {
                "variable": {
                    "value": "grayscale",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "sobel_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.sobel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "grayscale",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/models/utils/transformer_blocks.py": {
        "torch": {
            "Linear_69": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dims * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.qkv_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.q_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.embed_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_74": {
                "variable": {
                    "value": "self.v_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.embed_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dims * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_165": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_relative_distance, num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_170": {
                "variable": {
                    "value": "coords_h",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "window_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_171": {
                "variable": {
                    "value": "coords_w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "window_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_173": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_175": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "variable": {
                    "value": "relative_position_index",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(window_size[0] * window_size[1] + 1,) * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "relative_coords.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_205": {
                "variable": {
                    "value": "qkv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(attn @ v).transpose(1, 2).reshape(B, N, self.embed_dims)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B, N, self.embed_dims)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.gamma_1 * self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.gamma_2 * self.ffn(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.ffn(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x_q + self.drop_path(self.gamma_1_cross * self.cross_attn(self.norm1_q_cross(x_q + pos_q), k=self.norm1_k_cross(x_kv + pos_k), v=self.norm1_v_cross(x_kv)))",
                            "BinOp"
                        ],
                        [
                            "self.norm2_cross(x)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.gamma_2_cross * self.ffn(x))",
                            "BinOp"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B, N, -1)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.qkv.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((self.q_bias, k_bias, self.v_bias))",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.cat((self.q_bias, torch.zeros_like(self.v_bias, requires_grad=False), self.v_bias))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_205": {
                "variable": {
                    "value": "qkv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_205": {
                "variable": {
                    "value": "qkv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_472": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_473": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_474": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_484": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_485": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_486": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linear_503": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(attn @ v).transpose(1, 2).reshape(B, N, self.embed_dims)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B, N, self.embed_dims)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.gamma_1 * self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.gamma_2 * self.ffn(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.ffn(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x_q + self.drop_path(self.gamma_1_cross * self.cross_attn(self.norm1_q_cross(x_q + pos_q), k=self.norm1_k_cross(x_kv + pos_k), v=self.norm1_v_cross(x_kv)))",
                            "BinOp"
                        ],
                        [
                            "self.norm2_cross(x)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.gamma_2_cross * self.ffn(x))",
                            "BinOp"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B, N, -1)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.q.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "q_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_bias",
                            "Attribute"
                        ]
                    ]
                }
            },
            "linear_505": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(input=k, weight=self.k.weight, bias=k_bias)",
                            "Call"
                        ],
                        [
                            "k.reshape(B, N_k, 1, self.num_heads, -1).permute(2, 0, 3, 1, 4).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.k.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "k_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(self.v_bias, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(self.v_bias, requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_507": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(input=v, weight=self.v.weight, bias=v_bias)",
                            "Call"
                        ],
                        [
                            "v.reshape(B, N_v, 1, self.num_heads, -1).permute(2, 0, 3, 1, 4).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.v.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "v_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_bias",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_81": {
                "variable": {
                    "value": "k_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.v_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.q_bias, k_bias, self.v_bias)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linear_83": {
                "variable": {
                    "value": "qkv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(attn @ v).transpose(1, 2).reshape(B, N, self.embed_dims)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B, N, self.embed_dims)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.gamma_1 * self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.gamma_2 * self.ffn(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.ffn(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x_q + self.drop_path(self.gamma_1_cross * self.cross_attn(self.norm1_q_cross(x_q + pos_q), k=self.norm1_k_cross(x_kv + pos_k), v=self.norm1_v_cross(x_kv)))",
                            "BinOp"
                        ],
                        [
                            "self.norm2_cross(x)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.gamma_2_cross * self.ffn(x))",
                            "BinOp"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B, N, -1)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.qkv.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((self.q_bias, k_bias, self.v_bias))",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.cat((self.q_bias, torch.zeros_like(self.v_bias, requires_grad=False), self.v_bias))",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_153": {
                "variable": {
                    "value": "self.q_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(embed_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_154": {
                "variable": {
                    "value": "self.v_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(embed_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.q_bias, torch.zeros_like(self.v_bias, requires_grad=False), self.v_bias)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_327": {
                "variable": {
                    "value": "self.gamma_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_values * torch.ones(embed_dims)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_329": {
                "variable": {
                    "value": "self.gamma_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_values * torch.ones(embed_dims)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_419": {
                "variable": {
                    "value": "self.gamma_1_cross",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_values * torch.ones(embed_dims)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_421": {
                "variable": {
                    "value": "self.gamma_2_cross",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_values * torch.ones(embed_dims)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_424": {
                "variable": {
                    "value": "self.gamma_1_cross",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(embed_dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_426": {
                "variable": {
                    "value": "self.gamma_2_cross",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(embed_dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_477": {
                "variable": {
                    "value": "self.q_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(embed_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_478": {
                "variable": {
                    "value": "self.v_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(embed_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_500": {
                "variable": {
                    "value": "k_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.v_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "*size": {
                    "value": "self.embed_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "*size": {
                    "value": "self.embed_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_166": {
                "*size": {
                    "value": "self.num_relative_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "meshgrid_173": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "*size": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_154": {
                "*size": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_425": {
                "*size": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_427": {
                "*size": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_477": {
                "*size": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_478": {
                "*size": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_202": {
                "input": {
                    "value": "self.v_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_328": {
                "*size": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_330": {
                "*size": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_420": {
                "*size": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_422": {
                "*size": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/utils/alias_multinomial.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(probs)",
                            "Call"
                        ],
                        [
                            "self.alias.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "kk",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.prob.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_71": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prob.index_select(0, kk)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmselfsup/utils/batch_shuffle.py": {
        "torch": {
            "randperm_21": {
                "variable": {
                    "value": "idx_shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_gather.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x_gather.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argsort_27": {
                "variable": {
                    "value": "idx_unshuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randperm(batch_size_all).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "broadcast_24": {
                "tensor": {
                    "value": "idx_shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randperm(batch_size_all).cuda()",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/utils/clustering.py": {
        "torch": {
            "device_count_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/utils/collect.py": {
        "torch": {
            "no_grad_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/utils/dist_utils.py": {
        "torch": {
            "tensor_40": {
                "variable": {
                    "value": "random_num",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(2 ** 31)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "random_num",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "broadcast_43": {
                "tensor": {
                    "value": "random_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(seed, dtype=torch.int32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0, dtype=torch.int32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/utils/distributed_sinkhorn.py": {
        "torch": {
            "exp_16": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out / epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_16": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_22": {
                "variable": {
                    "value": "sum_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(out / epsilon).t()",
                            "Call"
                        ],
                        [
                            "Q / B",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_29": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(out / epsilon).t()",
                            "Call"
                        ],
                        [
                            "Q / B",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_32": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(out / epsilon).t()",
                            "Call"
                        ],
                        [
                            "Q / B",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Q.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_39": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(out / epsilon).t()",
                            "Call"
                        ],
                        [
                            "Q / B",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_initialized_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_30": {
                "input": {
                    "value": "u == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/utils/extractor.py": {
        "torch": {
            "AdaptiveAvgPool2d_51": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/utils/gather.py": {
        "torch": {
            "cat_83": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors_gather",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(tensor) for _ in range(dist.get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_15": {},
            "Tensor_25": {},
            "ones_like_79": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmselfsup/utils/setup_env.py": {
        "torch": {}
    },
    "tests/test_apis/test_inference.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_21": {
                "variable": {
                    "value": "self.neck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_apis/test_train.py": {
        "torch": {
            "Linear_33": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_34": {
                "variable": {
                    "value": "self.neck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_data/test_pipeline.py": {
        "torch": {
            "from_numpy_49": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.fromarray(np.ones((224, 224, 3), dtype=np.uint8))",
                            "Call"
                        ],
                        [
                            "np.ones((224, 224, 3), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).float().permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(np.ones((224, 224, 3), dtype=np.uint8))",
                            "Call"
                        ],
                        [
                            "Image.fromarray(np.ones((224, 224, 3), dtype=np.uint8))",
                            "Call"
                        ],
                        [
                            "Image.fromarray(np.uint8(np.ones((224, 224, 3))))",
                            "Call"
                        ],
                        [
                            "torch.rand((3, 192, 192))",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_49": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_139": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 192, 192)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_155": {
                "variable": {
                    "value": "fake_image_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_156": {
                "variable": {
                    "value": "fake_image_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 112, 112)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_169": {
                "variable": {
                    "value": "fake_img",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(112, 112, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_185": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(224, 224, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_metrics/test_accuracy.py": {
        "torch": {
            "Tensor_8": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_10": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_algorithms/test_barlowtwins.py": {
        "torch": {
            "randn_36": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_42": {
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_algorithms/test_byol.py": {
        "torch": {
            "randn_45": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_51": {
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_algorithms/test_cae.py": {
        "torch": {
            "rand_38": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_39": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 112, 112)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "fake_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 196)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_algorithms/test_classification.py": {
        "torch": {
            "randn_28": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "fake_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_54": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_55": {
                "variable": {
                    "value": "fake_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_algorithms/test_deepcluster.py": {
        "torch": {
            "randn_37": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_38": {
                "variable": {
                    "value": "fake_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_algorithms/test_densecl.py": {
        "torch": {
            "randn_60": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_algorithms/test_mae.py": {
        "torch": {
            "randn_33": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_algorithms/test_mmcls_classifier_wrapper.py": {
        "torch": {
            "rand_41": {
                "variable": {
                    "value": "fake_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 192, 192)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_42": {
                "variable": {
                    "value": "fake_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_algorithms/test_moco.py": {
        "torch": {
            "randn_57": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_algorithms/test_mocov3.py": {
        "torch": {
            "randn_54": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_algorithms/test_npid.py": {
        "torch": {
            "randn_33": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_algorithms/test_odc.py": {
        "torch": {
            "randn_51": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_algorithms/test_relative_loc.py": {
        "torch": {
            "randn_38": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 8, 6, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_45": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 8, 6, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_52": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_33": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 8, 6, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_algorithms/test_rotation_pred.py": {
        "torch": {
            "randn_31": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 4, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_37": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 4, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_43": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_26": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 4, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_algorithms/test_simclr.py": {
        "torch": {
            "randn_37": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_34": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(16, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_algorithms/test_simmim.py": {
        "torch": {
            "rand_25": {
                "variable": {
                    "value": "fake_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 192, 192)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_26": {
                "variable": {
                    "value": "fake_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 48, 48)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_algorithms/test_simsiam.py": {
        "torch": {
            "randn_45": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_48": {
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_algorithms/test_swav.py": {
        "torch": {
            "randn_40": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_45": {
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_46": {
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_47": {
                "*size": {
                    "value": "(2, 3, 96, 96)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_48": {
                "*size": {
                    "value": "(2, 3, 96, 96)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_49": {
                "*size": {
                    "value": "(2, 3, 96, 96)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_50": {
                "*size": {
                    "value": "(2, 3, 96, 96)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_51": {
                "*size": {
                    "value": "(2, 3, 96, 96)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_52": {
                "*size": {
                    "value": "(2, 3, 96, 96)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_mae_pretrain_vit.py": {
        "torch": {
            "randn_16": {
                "variable": {
                    "value": "fake_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_mim_cls_vit.py": {
        "torch": {
            "randn_31": {
                "variable": {
                    "value": "fake_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_resnet.py": {
        "torch": {
            "equal_18": {
                "variable": {
                    "value": "weight_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "modules.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros_like(modules.weight.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_74": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_88": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_102": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_114": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_21": {
                "variable": {
                    "value": "bias_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "modules.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros_like(modules.bias.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_19": {
                "input": {
                    "value": "modules.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_22": {
                "input": {
                    "value": "modules.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_resnext.py": {
        "torch": {
            "randn_23": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_40": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads.py": {
        "torch": {
            "randint_15": {
                "variable": {
                    "value": "fake_gt_label",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_23": {
                "variable": {
                    "value": "fake_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_24": {
                "variable": {
                    "value": "fake_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_41": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_42": {
                "variable": {
                    "value": "fake_traget",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_50": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_51": {
                "variable": {
                    "value": "fake_traget",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_59": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_60": {
                "variable": {
                    "value": "fake_traget",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_73": {
                "variable": {
                    "value": "fake_gt_label",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_84": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_92": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_93": {
                "variable": {
                    "value": "fake_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 196)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_94": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 196, 768)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_106": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 4, 16 ** 2 * 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_114": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 768)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normalize_115": {
                "variable": {
                    "value": "fake_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand((2, 1000))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_14": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_68": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_72": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_115": {
                "*size": {
                    "value": "(2, 1000)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_necks/test_avgpool_neck.py": {
        "torch": {
            "randn_8": {
                "*size": {
                    "value": "(2, 3, 8, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_necks/test_densecl_neck.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "fake_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 16, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_28": {
                "variable": {
                    "value": "fake_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 16, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_necks/test_linear_neck.py": {
        "torch": {
            "rand_15": {
                "variable": {
                    "value": "fake_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 16, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_21": {
                "variable": {
                    "value": "fake_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_necks/test_mae_neck.py": {
        "torch": {
            "rand_11": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_12": {
                "variable": {
                    "value": "ids_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_12": {
                "variable": {
                    "value": "ids_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_necks/test_mocov2_neck.py": {
        "torch": {
            "rand_16": {
                "variable": {
                    "value": "fake_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 16, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_22": {
                "variable": {
                    "value": "fake_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_necks/test_nonlinear_neck.py": {
        "torch": {
            "rand_17": {
                "variable": {
                    "value": "fake_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 16, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_24": {
                "variable": {
                    "value": "fake_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_36": {
                "variable": {
                    "value": "fake_cls_token",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_37": {
                "variable": {
                    "value": "fake_patch_token",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 16, 14, 14)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_necks/test_odc_neck.py": {
        "torch": {
            "rand_16": {
                "variable": {
                    "value": "fake_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 16, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_22": {
                "variable": {
                    "value": "fake_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_necks/test_relative_loc_neck.py": {
        "torch": {
            "rand_14": {
                "variable": {
                    "value": "fake_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 32, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_20": {
                "variable": {
                    "value": "fake_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_necks/test_swav_neck.py": {
        "torch": {
            "rand_13": {
                "*size": {
                    "value": "(32, 16, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_14": {
                "*size": {
                    "value": "(32, 16, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_utils/test_dalle.py": {
        "torch": {
            "rand_13": {
                "variable": {
                    "value": "fake_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 112, 112)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_utils/test_knn_classifier.py": {
        "torch": {
            "ones_8": {
                "variable": {
                    "value": "train_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_9": {
                "variable": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_10": {
                "variable": {
                    "value": "test_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_11": {
                "variable": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_utils/test_multi_pooling.py": {
        "torch": {
            "rand_12": {
                "*size": {
                    "value": "(1, 32, 112, 112)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_13": {
                "*size": {
                    "value": "(1, 64, 56, 56)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_14": {
                "*size": {
                    "value": "(1, 128, 28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_24": {
                "*size": {
                    "value": "(1, 32, 112, 112)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_25": {
                "*size": {
                    "value": "(1, 64, 56, 56)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_26": {
                "*size": {
                    "value": "(1, 128, 28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_utils/test_multi_prototypes.py": {
        "torch": {
            "rand_18": {
                "variable": {
                    "value": "fake_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_utils/test_sobel.py": {
        "torch": {
            "rand_9": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_runtime/test_extract_process.py": {
        "torch": {
            "DataLoader_44": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_31": {
                "*size": {
                    "value": "(1, 32, 112, 112)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_32": {
                "*size": {
                    "value": "(1, 64, 56, 56)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_33": {
                "*size": {
                    "value": "(1, 128, 28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_runtime/test_extractor.py": {
        "torch": {
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_32": {
                "variable": {
                    "value": "self.neck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_runtime/test_hooks/test_byol_hook.py": {
        "torch": {
            "DataLoader_58": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.online_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.target_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_runtime/test_hooks/test_deepcluster_hook.py": {
        "torch": {
            "randn_34": {
                "*size": {
                    "value": "(3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_runtime/test_hooks/test_densecl_hook.py": {
        "torch": {
            "DataLoader_44": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_runtime/test_hooks/test_optimizer_hook.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.prototypes_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_runtime/test_hooks/test_simsiam_hook.py": {
        "torch": {
            "DataLoader_46": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_runtime/test_hooks/test_swav_hook.py": {
        "torch": {
            "DataLoader_48": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.prototypes_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_runtime/test_optimizer.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_38": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_utils/test_alias_multinomial.py": {
        "torch": {
            "Tensor_9": {
                "variable": {
                    "value": "example_in",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_utils/test_misc.py": {
        "torch": {
            "rand_14": {
                "variable": {
                    "value": "fake_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 3, 16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_13": {
                "*size": {
                    "value": "(3, 16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_utils/test_test_helper.py": {
        "torch": {
            "DataLoader_40": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tools/benchmarks/classification/knn_imagenet/test_knn.py": {
        "torch": {
            "from_numpy_164": {
                "variable": {
                    "value": "train_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extractor.extract(model, data_loader_train, distributed=distributed)['feat']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(train_feats)",
                            "Call"
                        ],
                        [
                            "train_feats.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_165": {
                "variable": {
                    "value": "val_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "val_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extractor.extract(model, data_loader_val, distributed=distributed)['feat']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(val_feats)",
                            "Call"
                        ],
                        [
                            "val_feats.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "current_device_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/benchmarks/classification/svm_voc07/extract.py": {
        "torch": {
            "current_device_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/benchmarks/detectron2/convert-pretrain-to-detectron2.py": {
        "torch": {
            "load_12": {
                "variable": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sys.argv[1]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tools/misc/mae_visualization.py": {
        "torch": {
            "clip_22": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image * imagenet_std + imagenet_mean) * 255",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nchw->nhwc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_75": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/model_converters/extract_backbone_weights.py": {
        "torch": {
            "load_19": {
                "variable": {
                    "value": "ck",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_28": {
                "obj": {
                    "value": "output_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(state_dict=dict(), author='MMSelfSup')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_19": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tools/model_converters/publish_model.py": {
        "torch": {
            "load_21": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "in_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_28": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_file, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": []
                },
                "_use_new_zipfile_serialization": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_30": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_file, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test.py": {
        "torch": {
            "current_device_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {}
    }
}