{
    "differentiable_sorting/tensorflow/__init__.py": {
        "tensorflow": {
            "exp_17": {
                "variable": {
                    "value": "rbf",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-diff / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_18": {
                "a": {
                    "value": "rbf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.exp(-diff / (2 * sigma ** 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_24": {
                "variable": {
                    "value": "order",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "order",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "order_matrix(original, sortd, sigma=sigma)",
                            "Call"
                        ],
                        [
                            "tf.transpose(order)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_26": {
                "tensor": {
                    "value": "tf.cast(tf.range(original.shape[0]), original.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_16": {
                "tensor": {
                    "value": "sortd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "diff_sort(matrices, x, softmax)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_18": {
                "input_tensor": {
                    "value": "rbf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.exp(-diff / (2 * sigma ** 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_27": {
                "x": {
                    "value": "tf.range(original.shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "original.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_tensorflow.py": {
        "tensorflow": {
            "reshape_22": {
                "tensor": {
                    "value": "tf.convert_to_tensor(x, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "tf_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diff_sort(tf_matrices, test)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_34": {
                "variable": {
                    "value": "tf_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "jacobian(tf_output, test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_36": {
                "variable": {
                    "value": "test_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.randint(-200, 200, (8, 5))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "convert_to_tensor_22": {
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Session_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "differentiable_sorting/torch/differentiable_sorting_torch.py": {
        "torch": {
            "exp_37": {
                "variable": {
                    "value": "rbf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-diff / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_12": {
                "input": {
                    "value": "torch.exp(a * alpha) + torch.exp(b * alpha) - normalize",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_27": {
                "input": {
                    "value": "torch.exp((1.0 - t) * a + b * t) + torch.exp((1.0 - t) * b + t * a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_48": {
                "start": {
                    "value": "len(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_18": {
                "input": {
                    "value": "b * alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_54": {
                "ndarray": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_85": {
                "input": {
                    "value": "b * alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_17": {
                "input": {
                    "value": "b * alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_28": {
                "input": {
                    "value": "(1.0 - t) * b + t * a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "rbf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-diff / (2 * sigma ** 2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_12": {
                "input": {
                    "value": "b * alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_torch.py": {
        "torch": {
            "grad_23": {
                "outputs": {
                    "value": "result[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "ndarray": {
                    "value": "test_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randint(-200, 200, 8)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_45": {
                "ndarray": {
                    "value": "np.random.randint(-200, 200, (8, 5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}