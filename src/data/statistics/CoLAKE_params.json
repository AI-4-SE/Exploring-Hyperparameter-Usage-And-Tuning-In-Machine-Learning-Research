{
    "finetune/metrics.py": {
        "sklearn": {
            "precision_recall_fscore_support_40": {
                "variable": {
                    "value": "(precision, recall, f_score, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self._target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self._pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "finetune/dataloader.py": {
        "torch": {
            "ones_71": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sample['input_ids'])",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(sample['input_ids'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj[:n_words, :], torch.ones(word_pad, adj.shape[1], dtype=torch.int), adj[n_words:, :], torch.ones(ent_pad, adj.shape[1], dtype=torch.int))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj[:, :n_words], torch.zeros(max_words + max_ents, word_pad, dtype=torch.int), adj[:, n_words:], torch.zeros(max_words + max_ents, ent_pad, dtype=torch.int))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "batch_y[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_161": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sample['input_ids'])",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(sample['input_ids'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj[:n_words, :], torch.ones(word_pad, adj.shape[1], dtype=torch.int), adj[n_words:, :], torch.ones(ent_pad, adj.shape[1], dtype=torch.int))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj[:, :n_words], torch.zeros(max_words + max_ents, word_pad, dtype=torch.int), adj[:, n_words:], torch.zeros(max_words + max_ents, ent_pad, dtype=torch.int))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "batch_y[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "batch_x[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "batch_x[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_178": {
                "variable": {
                    "value": "batch_x[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_182": {
                "variable": {
                    "value": "batch_x[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_73": {
                "*size": {
                    "value": "word_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_words - sample['n_word_nodes']",
                            "BinOp"
                        ],
                        [
                            "max_words - sample['n_word_nodes']",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "adj.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_75": {
                "*size": {
                    "value": "ent_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_ents - sample['n_entity_nodes']",
                            "BinOp"
                        ],
                        [
                            "max_ents - sample['n_entity_nodes']",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "adj.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "*size": {
                    "value": "max_words + max_ents",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "word_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_words - sample['n_word_nodes']",
                            "BinOp"
                        ],
                        [
                            "max_words - sample['n_word_nodes']",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "*size": {
                    "value": "max_words + max_ents",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "ent_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_ents - sample['n_entity_nodes']",
                            "BinOp"
                        ],
                        [
                            "max_ents - sample['n_entity_nodes']",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_163": {
                "*size": {
                    "value": "word_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_words - sample['n_word_nodes']",
                            "BinOp"
                        ],
                        [
                            "max_words - sample['n_word_nodes']",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "adj.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_165": {
                "*size": {
                    "value": "ent_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_ents - sample['n_entity_nodes']",
                            "BinOp"
                        ],
                        [
                            "max_ents - sample['n_entity_nodes']",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "adj.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_168": {
                "*size": {
                    "value": "max_words + max_ents",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "word_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_words - sample['n_word_nodes']",
                            "BinOp"
                        ],
                        [
                            "max_words - sample['n_word_nodes']",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "*size": {
                    "value": "max_words + max_ents",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "ent_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_ents - sample['n_entity_nodes']",
                            "BinOp"
                        ],
                        [
                            "max_ents - sample['n_entity_nodes']",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "finetune/model.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_16": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_70": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_embeddings, ent_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_83": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_embeddings, ent_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_131": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_44": {
                "variable": {
                    "value": "self.rel_head.decoder.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rel_head.decoder.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, self.rel_head.decoder.weight.shape[0] - self.rel_head.decoder.bias.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_85": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.rel_head(pooler_output)",
                            "Call"
                        ],
                        [
                            "self.cls_head(pooler_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "finetune/run_re.py": {
        "torch": {
            "tensor_84": {
                "variable": {
                    "value": "ent_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ent_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ent_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_94": {
                "variable": {
                    "value": "states_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.model_path, 'model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamW_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in param_optimizer if not any((nd in n for nd in no_decay))], 'weight_decay': args.weight_decay}, {'params': [p for (n, p) in param_optimizer if any((nd in n for nd in no_decay))], 'weight_decay': 0.0}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, args.beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "ndarray": {
                    "value": "ent_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.load(os.path.join(args.model_path, 'entities.npy'))",
                            "Call"
                        ],
                        [
                            "ent_embedding(ent_index.view(1, -1)).squeeze().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "finetune/run_typing.py": {
        "torch": {
            "tensor_86": {
                "variable": {
                    "value": "ent_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ent_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ent_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_96": {
                "variable": {
                    "value": "states_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.model_path, 'model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamW_119": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in param_optimizer if not any((nd in n for nd in no_decay))], 'weight_decay': args.weight_decay}, {'params': [p for (n, p) in param_optimizer if any((nd in n for nd in no_decay))], 'weight_decay': 0.0}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, args.beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "ndarray": {
                    "value": "ent_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.load(os.path.join(args.model_path, 'entities.npy'))",
                            "Call"
                        ],
                        [
                            "ent_embedding(ent_index.view(1, -1)).squeeze().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lama/evaluation_metrics.py": {
        "torch": {
            "topk_20": {
                "variable": {
                    "value": "(value_max_probs, index_max_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log_probs[masked_index]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "topk",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_76": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "value_max_probs.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "label_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "index_list.index(label_index)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(label_index)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lama/model.py": {
        "torch": {
            "as_tensor_75": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "index_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_128": {
                "variable": {
                    "value": "batch_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tokens_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[self.tokenizer.bos_token_id]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_20": {
                "variable": {
                    "value": "states_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.model_path, 'model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_124": {
                "variable": {
                    "value": "pad_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[pad_lenght]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.tokenizer.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tokens, pad_tensor.long())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_110": {
                "data": {
                    "value": "tokens_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[self.tokenizer.bos_token_id]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "pretrain/dataset.py": {
        "torch": {
            "multinomial_206": {
                "variable": {
                    "value": "nega_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.nega_samp_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "k_negas",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.k_negative_samples * len(ent_index)",
                            "BinOp"
                        ],
                        [
                            "self.k_negative_samples * len(ent_index)",
                            "BinOp"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_x['attention_mask'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj[:n_words, :], torch.ones(word_pad, adj.shape[1], dtype=torch.int), adj[n_words:n_words + n_entities, :], torch.ones(entity_pad, adj.shape[1], dtype=torch.int), adj[n_words + n_entities:, :], torch.ones(relation_pad, adj.shape[1], dtype=torch.int))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj[:, :n_words], torch.zeros(seq_len, word_pad, dtype=torch.int), adj[:, n_words:n_words + n_entities], torch.zeros(seq_len, entity_pad, dtype=torch.int), adj[:, n_words + n_entities:], torch.zeros(seq_len, relation_pad, dtype=torch.int))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_272": {
                "variable": {
                    "value": "batch_y[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "multinomial_424": {
                "variable": {
                    "value": "nega_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.nega_samp_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "k_negas",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.k_negative_samples * len(ent_index)",
                            "BinOp"
                        ],
                        [
                            "self.k_negative_samples * len(ent_index)",
                            "BinOp"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_454": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_x['attention_mask'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_455": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj[:n_words, :], torch.ones(word_pad, adj.shape[1], dtype=torch.int), adj[n_words:n_words + n_entities, :], torch.ones(entity_pad, adj.shape[1], dtype=torch.int), adj[n_words + n_entities:, :], torch.ones(relation_pad, adj.shape[1], dtype=torch.int))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_462": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj[:, :n_words], torch.zeros(seq_len, word_pad, dtype=torch.int), adj[:, n_words:n_words + n_entities], torch.zeros(seq_len, entity_pad, dtype=torch.int), adj[:, n_words + n_entities:], torch.zeros(seq_len, relation_pad, dtype=torch.int))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_490": {
                "variable": {
                    "value": "batch_y[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_549": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample['attention_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_550": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj[:-3, :], torch.ones(word_pad, adj.shape[1], dtype=torch.int), adj[-3:, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_554": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj[:, :-3], torch.zeros(max_nodes, word_pad, dtype=torch.int), adj[:, -3:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_575": {
                "variable": {
                    "value": "batch_y[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_268": {
                "variable": {
                    "value": "batch_x[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_270": {
                "variable": {
                    "value": "batch_x[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_486": {
                "variable": {
                    "value": "batch_x[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_488": {
                "variable": {
                    "value": "batch_x[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_571": {
                "variable": {
                    "value": "batch_x[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_573": {
                "variable": {
                    "value": "batch_x[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_238": {
                "*size": {
                    "value": "word_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_word_nodes - len(batch_word[i])",
                            "BinOp"
                        ],
                        [
                            "max_word_nodes - len(batch_word[i])",
                            "BinOp"
                        ],
                        [
                            "max_nodes - len(sample['input_ids'])",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "adj.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_240": {
                "*size": {
                    "value": "entity_pad",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "max_entity_nodes - len(batch_entity[i]) if max_entity_nodes > 0 else 1",
                            "IfExp"
                        ],
                        [
                            "max_entity_nodes - len(batch_entity[i]) if max_entity_nodes > 0 else 1",
                            "IfExp"
                        ]
                    ]
                },
                "out": {
                    "value": "adj.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_242": {
                "*size": {
                    "value": "relation_pad",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "max_relation_nodes - len(batch_relation[i]) if max_relation_nodes > 0 else 1",
                            "IfExp"
                        ],
                        [
                            "max_relation_nodes - len(batch_relation[i]) if max_relation_nodes > 0 else 1",
                            "IfExp"
                        ]
                    ]
                },
                "out": {
                    "value": "adj.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_245": {
                "*size": {
                    "value": "seq_len",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_word_nodes + max(max_entity_nodes, 1) + max(max_relation_nodes, 1)",
                            "BinOp"
                        ],
                        [
                            "max_word_nodes + max(max_entity_nodes, 1) + max(max_relation_nodes, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "word_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_word_nodes - len(batch_word[i])",
                            "BinOp"
                        ],
                        [
                            "max_word_nodes - len(batch_word[i])",
                            "BinOp"
                        ],
                        [
                            "max_nodes - len(sample['input_ids'])",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "*size": {
                    "value": "seq_len",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_word_nodes + max(max_entity_nodes, 1) + max(max_relation_nodes, 1)",
                            "BinOp"
                        ],
                        [
                            "max_word_nodes + max(max_entity_nodes, 1) + max(max_relation_nodes, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "entity_pad",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "max_entity_nodes - len(batch_entity[i]) if max_entity_nodes > 0 else 1",
                            "IfExp"
                        ],
                        [
                            "max_entity_nodes - len(batch_entity[i]) if max_entity_nodes > 0 else 1",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_249": {
                "*size": {
                    "value": "seq_len",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_word_nodes + max(max_entity_nodes, 1) + max(max_relation_nodes, 1)",
                            "BinOp"
                        ],
                        [
                            "max_word_nodes + max(max_entity_nodes, 1) + max(max_relation_nodes, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "relation_pad",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "max_relation_nodes - len(batch_relation[i]) if max_relation_nodes > 0 else 1",
                            "IfExp"
                        ],
                        [
                            "max_relation_nodes - len(batch_relation[i]) if max_relation_nodes > 0 else 1",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_456": {
                "*size": {
                    "value": "word_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_word_nodes - len(batch_word[i])",
                            "BinOp"
                        ],
                        [
                            "max_word_nodes - len(batch_word[i])",
                            "BinOp"
                        ],
                        [
                            "max_nodes - len(sample['input_ids'])",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "adj.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_458": {
                "*size": {
                    "value": "entity_pad",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "max_entity_nodes - len(batch_entity[i]) if max_entity_nodes > 0 else 1",
                            "IfExp"
                        ],
                        [
                            "max_entity_nodes - len(batch_entity[i]) if max_entity_nodes > 0 else 1",
                            "IfExp"
                        ]
                    ]
                },
                "out": {
                    "value": "adj.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_460": {
                "*size": {
                    "value": "relation_pad",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "max_relation_nodes - len(batch_relation[i]) if max_relation_nodes > 0 else 1",
                            "IfExp"
                        ],
                        [
                            "max_relation_nodes - len(batch_relation[i]) if max_relation_nodes > 0 else 1",
                            "IfExp"
                        ]
                    ]
                },
                "out": {
                    "value": "adj.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_463": {
                "*size": {
                    "value": "seq_len",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_word_nodes + max(max_entity_nodes, 1) + max(max_relation_nodes, 1)",
                            "BinOp"
                        ],
                        [
                            "max_word_nodes + max(max_entity_nodes, 1) + max(max_relation_nodes, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "word_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_word_nodes - len(batch_word[i])",
                            "BinOp"
                        ],
                        [
                            "max_word_nodes - len(batch_word[i])",
                            "BinOp"
                        ],
                        [
                            "max_nodes - len(sample['input_ids'])",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_465": {
                "*size": {
                    "value": "seq_len",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_word_nodes + max(max_entity_nodes, 1) + max(max_relation_nodes, 1)",
                            "BinOp"
                        ],
                        [
                            "max_word_nodes + max(max_entity_nodes, 1) + max(max_relation_nodes, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "entity_pad",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "max_entity_nodes - len(batch_entity[i]) if max_entity_nodes > 0 else 1",
                            "IfExp"
                        ],
                        [
                            "max_entity_nodes - len(batch_entity[i]) if max_entity_nodes > 0 else 1",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_467": {
                "*size": {
                    "value": "seq_len",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_word_nodes + max(max_entity_nodes, 1) + max(max_relation_nodes, 1)",
                            "BinOp"
                        ],
                        [
                            "max_word_nodes + max(max_entity_nodes, 1) + max(max_relation_nodes, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "relation_pad",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "max_relation_nodes - len(batch_relation[i]) if max_relation_nodes > 0 else 1",
                            "IfExp"
                        ],
                        [
                            "max_relation_nodes - len(batch_relation[i]) if max_relation_nodes > 0 else 1",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_551": {
                "*size": {
                    "value": "word_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_word_nodes - len(batch_word[i])",
                            "BinOp"
                        ],
                        [
                            "max_word_nodes - len(batch_word[i])",
                            "BinOp"
                        ],
                        [
                            "max_nodes - len(sample['input_ids'])",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "adj.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_555": {
                "*size": {
                    "value": "max_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "len(sample['input_ids']) if len(sample['input_ids']) > max_nodes else max_nodes",
                            "IfExp"
                        ]
                    ]
                },
                "out": {
                    "value": "word_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_word_nodes - len(batch_word[i])",
                            "BinOp"
                        ],
                        [
                            "max_word_nodes - len(batch_word[i])",
                            "BinOp"
                        ],
                        [
                            "max_nodes - len(sample['input_ids'])",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pretrain/init_ent_rel.py": {
        "torch": {
            "stack_43": {
                "variable": {
                    "value": "entity_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "entity_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(entity_embeddings, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_71": {
                "variable": {
                    "value": "relation_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "relation_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(relation_embeddings, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_39": {
                "*size": {
                    "value": "768",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_67": {
                "*size": {
                    "value": "768",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "tokens",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tokenizer.encode(' ' + alias, add_special_tokens=False)",
                            "Call"
                        ],
                        [
                            "tokenizer.encode(' ' + alias, add_special_tokens=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_64": {
                "data": {
                    "value": "tokens",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tokenizer.encode(' ' + alias, add_special_tokens=False)",
                            "Call"
                        ],
                        [
                            "tokenizer.encode(' ' + alias, add_special_tokens=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pretrain/large_emb.py": {
        "torch": {
            "norm_24": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "entity_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ent_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.load(args.ent_emb)",
                            "Call"
                        ],
                        [
                            "np.r_[add_embs, ent_emb]",
                            "Subscript"
                        ],
                        [
                            "self.client.pull(self.name, torch.arange(0, self.num_emb))",
                            "Call"
                        ],
                        [
                            "ent_emb.cpu().detach_().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_154": {
                "variable": {
                    "value": "entity_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(args.num_ent, args.ent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_203": {
                "variable": {
                    "value": "mapped_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(bsz, slen)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_209": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gpu_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "unique_emb.to(idx.device).detach_().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "mapped_idx.cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_199": {
                "variable": {
                    "value": "unique_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cpu_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "idx.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_158": {
                "input": {
                    "value": "entity_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn((args.num_ent, args.ent_dim))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ent_emb).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_159": {
                "input": {
                    "value": "entity_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn((args.num_ent, args.ent_dim))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ent_emb).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_160": {
                "*size": {
                    "value": "entity_emb.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_184": {
                "*size": {
                    "value": "num_emb",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_231": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self.num_emb",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pretrain/metrics.py": {
        "torch": {
            "sum_37": {
                "input": {
                    "value": "torch.eq(pred, target).masked_fill(masks.eq(0), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target != -1",
                            "Compare"
                        ]
                    ]
                }
            },
            "eq_37": {
                "input": {
                    "value": "pred",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "pred.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "target.to(pred)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pretrain/model.py": {
        "torch": {
            "Embedding_20": {
                "variable": {
                    "value": "self.rel_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "self.roberta.embeddings.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "token_type",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "self.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "_weight": {
                    "value": "torch.zeros((token_type, self.config.hidden_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_embeddings, ent_embeddings, rel_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_83": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_85": {
                "variable": {
                    "value": "word_predict",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lm_head(sequence_output[:, :n_word_nodes, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_90": {
                "variable": {
                    "value": "ent_predict",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ent_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.ent_lm_head(sequence_output[:, n_word_nodes:n_word_nodes + n_entity_nodes, :], ent_cls_weight)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_94": {
                "variable": {
                    "value": "rel_predict",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.rel_lm_head(sequence_output[:, n_word_nodes + n_entity_nodes:, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_rel)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_37": {
                "variable": {
                    "value": "self.rel_lm_head.decoder.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rel_lm_head.decoder.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, self.rel_lm_head.decoder.weight.shape[0] - self.rel_lm_head.decoder.bias.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "*size": {
                    "value": "num_rel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "(token_type, self.config.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pretrain/run_pretrain.py": {
        "torch": {
            "AdamW_210": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in param_optimizer if not any((nd in n for nd in no_decay))], 'weight_decay': 0.01}, {'params': [p for (n, p) in param_optimizer if any((nd in n for nd in no_decay))], 'weight_decay': 0.0}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, args.beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_154": {
                "variable": {
                    "value": "rel_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rel_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.load(args.rel_emb)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rel_emb).float()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_172": {
                "variable": {
                    "value": "states_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_223": {
                "variable": {
                    "value": "states_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, args.model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pretrain/utils.py": {
        "torch": {
            "Generator_45": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_85": {
                "obj": {
                    "value": "model_to_save",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.trainer.ddp_model.module",
                            "Attribute"
                        ],
                        [
                            "model_to_save.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(path, 'model.bin')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}