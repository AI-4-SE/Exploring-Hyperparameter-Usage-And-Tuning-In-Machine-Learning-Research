{
    "Models/Attentions.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._hps['embed_size'] + self._hps['hidden_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._hps['attention_len']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.decoder_input_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._hps['embed_size'] + self._hps['encoder_out_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._hps['embed_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "attention_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded, hidden_state[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_37": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(attention_input)",
                            "Call"
                        ],
                        [
                            "F.softmax(e_t, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_45": {
                "variable": {
                    "value": "transposed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_49": {
                "variable": {
                    "value": "weighted_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transposed_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(attention_weights, dim0=0, dim1=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "transposed_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs",
                            "variable"
                        ]
                    ]
                }
            },
            "transpose_53": {
                "variable": {
                    "value": "states_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weighted_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(transposed_weights, transposed_outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.v_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._hps['att_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.wh_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._hps['encoder_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._hps['att_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.ws_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._hps['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._hps['att_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_82": {
                "variable": {
                    "value": "self.b_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([self._hps['att_hidden_size']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_99": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_att(torch.tanh(self.wh_att(encoder_hidden_states) + self.ws_att(s_t) + self.b_att))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_103": {
                "variable": {
                    "value": "ht_star",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention * encoder_hidden_states",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "state_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ht_star, s_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.wh_gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._hps['encoder_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.ws_gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._hps['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.wx_gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._hps['embed_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "variable": {
                    "value": "self.b_gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_143": {
                "variable": {
                    "value": "p_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.wh_gen(ht_star) + self.ws_gen(s_t) + self.wx_gen(embedded) + self.b_gen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_56": {
                "tensors": {
                    "value": "[embedded, states_sum]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_82": {
                "*size": {
                    "value": "[self._hps['att_hidden_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_94": {
                "input": {
                    "value": "self.wh_att(encoder_hidden_states) + self.ws_att(s_t) + self.b_att",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_132": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Models/BeamSearch.py": {
        "torch": {
            "tensor_228": {
                "data": {
                    "value": "[vocab.end()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "data": {
                    "value": "[vocab.end()]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Models/Classifier.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self._input_size, hps['rewriter_hidden_size'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "hps['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict(complexity_split=10, encoder=dict(output_size=36), rewriter_hidden_size=32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_29": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_9": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "np.random.uniform(-50, 50, [1, 1, 36])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "self._input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hps['rewriter_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sigmoid_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "hps['rewriter_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Models/EncoderDecoder.py": {
        "torch": {
            "Adam_56": {
                "variable": {
                    "value": "self.encoder_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "hps['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_58": {
                "variable": {
                    "value": "self.decoder_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "hps['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_133": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs + trivial_v",
                            "BinOp"
                        ]
                    ]
                }
            },
            "NLLLoss_224": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "self.encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "logdir + '/encoder.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_80": {
                "obj": {
                    "value": "self.decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "logdir + '/decoder.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_250": {
                "variable": {
                    "value": "target_t",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "output_seq[t]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_185": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[None] * batch_size for _ in range(input_len)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(encoder_outputs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_186": {
                "variable": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[None] * batch_size for _ in range(input_len)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(rnn_outputs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "h_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[0] for x in hidden_states]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "c_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[1] for x in hidden_states]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_194": {
                "variable": {
                    "value": "input_refs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_refs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seq",
                            "variable"
                        ],
                        [
                            "[[eos[0][0]] * batch_size for _ in range(input_len)]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(input_refs, dtype=torch.long).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_280": {
                "variable": {
                    "value": "target_t",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "next_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eos.reshape([1])",
                            "Call"
                        ],
                        [
                            "np.array([node.get_value()])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_318": {
                "variable": {
                    "value": "prob_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((torch.exp(item[1]) for item in bs_results))",
                            "Call"
                        ],
                        [
                            "bs_results[int(len(bs_results) / 2)][1]",
                            "Subscript"
                        ],
                        [
                            "torch.log(prob_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_89": {
                "f": {
                    "value": "logdir + '/encoder.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_90": {
                "f": {
                    "value": "logdir + '/decoder.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_131": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs + trivial_v",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_182": {
                "variable": {
                    "value": "encoder_outputs[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoder_outputs[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "rnn_outputs[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rnn_outputs[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_92": {
                "f": {
                    "value": "logdir + '/encoder.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_94": {
                "f": {
                    "value": "logdir + '/decoder.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "any_101": {
                "input": {
                    "value": "torch.isnan(d.grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_314": {
                "input": {
                    "value": "item[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_101": {
                "input": {
                    "value": "d.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Models/Encoders.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.embed_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([self._hps['input_size'], self._hps['embed_size']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_22": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self._hps['embed_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self._hps['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self._hps['num_layers']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._hps['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._hps['output_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_39": {
                "variable": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(input_seq)",
                            "Call"
                        ],
                        [
                            "input_seq.to(self._device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_40": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(input_seq, 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_41": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.embedding(batch_first, self.embed_matrix)",
                            "Call"
                        ],
                        [
                            "torch.transpose(embedded, 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "self.embed_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([self._hps['input_size'], self._hps['embed_size']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._hps['embed_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._hps['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._hps['embed_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._hps['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._hps['embed_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._hps['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.wu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._hps['embed_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._hps['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([self._hps['hidden_size']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([self._hps['hidden_size']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([self._hps['hidden_size']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.bu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([self._hps['hidden_size']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_70": {
                "variable": {
                    "value": "self.ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self._hps['hidden_size'], self._hps['hidden_size']) for _ in range(self._hps['N'])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "self.uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ModuleList([nn.Linear(self._hps['hidden_size'], self._hps['hidden_size']) for _ in range(self._hps['N'])]) for _ in range(self._hps['N'])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_80": {
                "variable": {
                    "value": "self.uo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self._hps['hidden_size'], self._hps['hidden_size']) for _ in range(self._hps['N'])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_84": {
                "variable": {
                    "value": "self.uu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self._hps['hidden_size'], self._hps['hidden_size']) for _ in range(self._hps['N'])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "self.empty_hc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self._hps['hidden_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "self.empty_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self._hps['output_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._hps['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._hps['output_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_114": {
                "variable": {
                    "value": "sum_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sum_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(sum_i, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_115": {
                "variable": {
                    "value": "sum_o",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sum_o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(sum_o, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_116": {
                "variable": {
                    "value": "sum_u",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sum_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(sum_u, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_126": {
                "variable": {
                    "value": "ij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wi(xj) + torch.sum(sum_i, dim=0) + self.bi",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(ij)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_127": {
                "variable": {
                    "value": "oj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wo(xj) + torch.sum(sum_o, dim=0) + self.bo",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(oj)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_128": {
                "variable": {
                    "value": "uj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wu(xj) + torch.sum(sum_u, dim=0) + self.bu",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(uj)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_171": {
                "variable": {
                    "value": "input_j",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[root.get_value()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_172": {
                "variable": {
                    "value": "xj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([root.get_value()]).to(self._device)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_7": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "input_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(input_seq)",
                            "Call"
                        ],
                        [
                            "input_seq.to(self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_20": {
                "*size": {
                    "value": "[self._hps['input_size'], self._hps['embed_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_58": {
                "*size": {
                    "value": "[self._hps['input_size'], self._hps['embed_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_65": {
                "*size": {
                    "value": "[self._hps['hidden_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_66": {
                "*size": {
                    "value": "[self._hps['hidden_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_67": {
                "*size": {
                    "value": "[self._hps['hidden_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_68": {
                "*size": {
                    "value": "[self._hps['hidden_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_133": {
                "input": {
                    "value": "torch.stack(fc, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_134": {
                "input": {
                    "value": "cj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ij * uj + torch.sum(torch.stack(fc, dim=0), dim=0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "self._hps['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._hps['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_75": {
                "modules": {
                    "value": "[nn.Linear(self._hps['hidden_size'], self._hps['hidden_size']) for _ in range(self._hps['N'])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "self._hps['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._hps['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "self._hps['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._hps['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_111": {
                "input": {
                    "value": "torch.stack(sum_fl, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_117": {
                "input": {
                    "value": "sum_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(sum_i, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_118": {
                "input": {
                    "value": "sum_o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(sum_o, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_119": {
                "input": {
                    "value": "sum_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(sum_u, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "input": {
                    "value": "self.wf(xj) + sum_f[k] + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_133": {
                "tensors": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_111": {
                "tensors": {
                    "value": "sum_fl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "self._hps['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._hps['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Models/train_utils.py": {
        "torch": {
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_11": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_14": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "run_optimizer.py": {
        "torch": {
            "Categorical_156": {
                "variable": {
                    "value": "disp",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "select_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "picker(encoder_out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}