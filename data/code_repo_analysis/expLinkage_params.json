{
    "src/eval/evalPairFeat.py": {
        "sklearn": {
            "adjusted_rand_score_346": {
                "variable": {
                    "value": "results[method + _randIndex]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[pidToCluster[pid] for pid in pidList]",
                            "ListComp"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[connectedComponents[idx] for (idx, pid) in enumerate(pidList)]",
                            "ListComp"
                        ],
                        [
                            "y_true",
                            "variable"
                        ],
                        [
                            "run_random_split(pidToCluster=pidToCluster, k=len(clusterToPids))",
                            "Call"
                        ],
                        [
                            "flatClusters",
                            "variable"
                        ],
                        [
                            "flatClusters",
                            "variable"
                        ]
                    ]
                }
            },
            "adjusted_mutual_info_score_348": {
                "variable": {
                    "value": "results[method + _nmi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[pidToCluster[pid] for pid in pidList]",
                            "ListComp"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[connectedComponents[idx] for (idx, pid) in enumerate(pidList)]",
                            "ListComp"
                        ],
                        [
                            "y_true",
                            "variable"
                        ],
                        [
                            "run_random_split(pidToCluster=pidToCluster, k=len(clusterToPids))",
                            "Call"
                        ],
                        [
                            "flatClusters",
                            "variable"
                        ],
                        [
                            "flatClusters",
                            "variable"
                        ]
                    ]
                },
                "average_method": {
                    "value": "arithmetic",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/eval/evalVectData.py": {
        "sklearn": {
            "adjusted_rand_score_300": {
                "variable": {
                    "value": "results[method + _randIndex]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_true",
                            "variable"
                        ],
                        [
                            "run_random_split(pidToCluster=pidToGtClust, k=len(gtList))",
                            "Call"
                        ],
                        [
                            "flatClusters",
                            "variable"
                        ],
                        [
                            "flatClusters",
                            "variable"
                        ],
                        [
                            "flatClusters",
                            "variable"
                        ],
                        [
                            "flatClusters",
                            "variable"
                        ]
                    ]
                }
            },
            "adjusted_mutual_info_score_302": {
                "variable": {
                    "value": "results[method + _nmi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_true",
                            "variable"
                        ],
                        [
                            "run_random_split(pidToCluster=pidToGtClust, k=len(gtList))",
                            "Call"
                        ],
                        [
                            "flatClusters",
                            "variable"
                        ],
                        [
                            "flatClusters",
                            "variable"
                        ],
                        [
                            "flatClusters",
                            "variable"
                        ],
                        [
                            "flatClusters",
                            "variable"
                        ]
                    ]
                },
                "average_method": {
                    "value": "arithmetic",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Threshold_90": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "-1 * threshold",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "memory_allocated_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/hier_clust/recursive_sparsest_cut.py": {
        "sklearn": {
            "SpectralClustering_42": {
                "variable": {
                    "value": "spectral",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/trainer/scipy_perceptron.py": {
        "sklearn": {
            "SGDClassifier_39": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "hinge",
                    "type": "str",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SVC_41": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGDClassifier_43": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "perceptron",
                    "type": "str",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGDClassifier_45": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "perceptron",
                    "type": "str",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Perceptron_47": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "tol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/mds.py": {
        "sklearn": {
            "load_digits_23": {
                "variable": {
                    "value": "(X, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MDS_24": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MDS_40": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dissimilarity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/plotting.py": {
        "sklearn": {}
    },
    "src/utils/projectFaces.py": {
        "sklearn": {
            "PCA_38": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(sys.argv[1])",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/hier_clust/expLink.py": {
        "torch": {
            "Softmax_412": {
                "variable": {
                    "value": "SoftMax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_554": {
                "variable": {
                    "value": "SoftMax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_351": {
                "variable": {
                    "value": "negLinkageVals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(negLinkageVals, tempNegLinkages)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_477": {
                "variable": {
                    "value": "bestNegLinkage",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tempNegLinkages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(np.zeros(len(impureLinkages), 1))",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(np.zeros((len(impureLinkages), 1)))",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(np.zeros((len(impureLinkages), 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_478": {
                "variable": {
                    "value": "negLinkageVals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(negLinkageVals, bestNegLinkage)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_480": {
                "variable": {
                    "value": "negLinkageVals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(negLinkageVals, tempNegLinkages)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_620": {
                "variable": {
                    "value": "bestNegLinkage",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tempNegLinkages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(np.zeros(len(impureLinkages), 1))",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(np.zeros((len(impureLinkages), 1)))",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(np.zeros((len(impureLinkages), 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_621": {
                "variable": {
                    "value": "negLinkageVals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(negLinkageVals, bestNegLinkage)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_623": {
                "variable": {
                    "value": "negLinkageVals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(negLinkageVals, tempNegLinkages)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_469": {
                "variable": {
                    "value": "tempNegLinkages[ctr]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torchDistMat[impC1, impC2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_484": {
                "variable": {
                    "value": "posLinkageVals[newCid - numPoints]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torchDistMat[pureC1, pureC2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_612": {
                "variable": {
                    "value": "tempNegLinkages[ctr]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torchDistMat[impC1, impC2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_627": {
                "variable": {
                    "value": "posLinkageVals[newCid - numPoints]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torchDistMat[pureC1, pureC2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_944": {
                "variable": {
                    "value": "distMat[newCid, cid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(distMat[cid, oldC1], distMat[cid, oldC2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_945": {
                "variable": {
                    "value": "distMat[cid, newCid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(distMat[oldC1, cid], distMat[oldC2, cid])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_958": {
                "variable": {
                    "value": "distMat[newCid, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "distMat[oldC1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_959": {
                "variable": {
                    "value": "distMat[:, newCid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "distMat[:, oldC1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_1015": {
                "variable": {
                    "value": "largestEdge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "origDistMat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "origDistMat / largestEdge",
                            "BinOp"
                        ],
                        [
                            "origDistMat / largestEdge",
                            "BinOp"
                        ],
                        [
                            "origDistMat",
                            "Method Argument"
                        ],
                        [
                            "origDistMat",
                            "Method Argument"
                        ],
                        [
                            "origDistMat",
                            "Method Argument"
                        ],
                        [
                            "origDistMat",
                            "Method Argument"
                        ],
                        [
                            "origDistMat",
                            "Method Argument"
                        ],
                        [
                            "origDistMat",
                            "Method Argument"
                        ],
                        [
                            "origDistMat",
                            "Method Argument"
                        ],
                        [
                            "origDistMat",
                            "Method Argument"
                        ],
                        [
                            "origDistMat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_1136": {
                "variable": {
                    "value": "distMatDen[ixgrid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "origDistMat * linkAlpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_1137": {
                "variable": {
                    "value": "distMatNum[ixgrid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "distMatDen[ixgrid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "origDistMat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "origDistMat / largestEdge",
                            "BinOp"
                        ],
                        [
                            "origDistMat / largestEdge",
                            "BinOp"
                        ],
                        [
                            "origDistMat",
                            "Method Argument"
                        ],
                        [
                            "origDistMat",
                            "Method Argument"
                        ],
                        [
                            "origDistMat",
                            "Method Argument"
                        ],
                        [
                            "origDistMat",
                            "Method Argument"
                        ],
                        [
                            "origDistMat",
                            "Method Argument"
                        ],
                        [
                            "origDistMat",
                            "Method Argument"
                        ],
                        [
                            "origDistMat",
                            "Method Argument"
                        ],
                        [
                            "origDistMat",
                            "Method Argument"
                        ],
                        [
                            "origDistMat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_471": {
                "variable": {
                    "value": "tempNegLinkages[ctr]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torchDistMat[impC1, impC2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_474": {
                "variable": {
                    "value": "tempNegLinkages[ctr]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "weights * torchDistMat[impC1, impC2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_486": {
                "variable": {
                    "value": "posLinkageVals[newCid - numPoints]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torchDistMat[pureC1, pureC2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_489": {
                "variable": {
                    "value": "posLinkageVals[newCid - numPoints]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "weights * torchDistMat[pureC1, pureC2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_614": {
                "variable": {
                    "value": "tempNegLinkages[ctr]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torchDistMat[impC1, impC2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_617": {
                "variable": {
                    "value": "tempNegLinkages[ctr]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "weights * torchDistMat[impC1, impC2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_629": {
                "variable": {
                    "value": "posLinkageVals[newCid - numPoints]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torchDistMat[pureC1, pureC2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_632": {
                "variable": {
                    "value": "posLinkageVals[newCid - numPoints]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "weights * torchDistMat[pureC1, pureC2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_967": {
                "variable": {
                    "value": "distMat[newCid, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "distMat[oldC1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_968": {
                "variable": {
                    "value": "distMat[:, newCid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "distMat[:, oldC1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_1130": {
                "variable": {
                    "value": "distMatNum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * numPoints - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2 * numPoints - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_1131": {
                "variable": {
                    "value": "distMatDen",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * numPoints - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2 * numPoints - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_1055": {
                "input": {
                    "value": "linkAlpha * tempDist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_1056": {
                "input": {
                    "value": "linkAlpha * tempDist",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/linearClassifier.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.seqModel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(self.inputDim, self.outputDim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.avgWeights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.inputDim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.outputDim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "biasPresent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.seqModel[0].bias is not None",
                            "Compare"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "self.inputDim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.outputDim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/mahalabonis.py": {
        "torch": {
            "Sequential_30": {
                "variable": {
                    "value": "self.seqModel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(self.inputDim, self.outputDim, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_74": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.seqModel(pairFeature)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_85": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.seqModel(pairFeatureList)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_100": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed1 - embed2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_128": {
                "variable": {
                    "value": "distMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedList1 - embedList2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_147": {
                "variable": {
                    "value": "distMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedList1 - embedList2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_164": {
                "variable": {
                    "value": "distMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedList1 - embedList2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_36": {
                "variable": {
                    "value": "self.seqModel[0].weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "self.config.inputDim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_96": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_121": {
                "variable": {
                    "value": "pointList1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_122": {
                "variable": {
                    "value": "pointList2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_140": {
                "variable": {
                    "value": "pointList1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_141": {
                "variable": {
                    "value": "pointList2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_158": {
                "variable": {
                    "value": "pointList1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_159": {
                "variable": {
                    "value": "pointList2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "self.inputDim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.outputDim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_72": {},
            "Tensor_83": {}
        }
    },
    "src/models/templateClassifier.py": {
        "torch": {
            "Sequential_27": {
                "variable": {
                    "value": "self.seqModel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(self.config.inputDim, self.config.inputDim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_73": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "self.config.inputDim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.inputDim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/trainer/BaseTrainer.py": {
        "torch": {
            "load_43": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.config.bestModel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_69": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.model.seqModel.parameters(), 'lr': self.config.lr, 'weight_decay': self.config.l2Alpha}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_48": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "bestModel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.resultDir, self.config.bestModel)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.resultDir, 'model_alpha.torch')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.resultDir, 'model.torch')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.model.linkAlpha, 'lr': self.config.alphaLr}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_53": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "bestModel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.resultDir, self.config.bestModel)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.resultDir, 'model_alpha.torch')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.resultDir, 'model.torch')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_77": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.model.seqModel.parameters(), 'lr': self.config.lr, 'weight_decay': self.config.l2Alpha}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_80": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_57": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "bestModel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.resultDir, self.config.bestModel)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.resultDir, 'model_alpha.torch')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.resultDir, 'model.torch')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/trainer/PairFeatureTrainer.py": {
        "torch": {
            "Threshold_630": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.config.threshold - self.config.margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Threshold_635": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "-1 * (self.config.threshold + self.config.margin)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Threshold_685": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.config.threshold - self.config.margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Threshold_694": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "-1 * (self.config.threshold + self.config.margin)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_632": {
                "input": {
                    "value": "filteredEdges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "applyThreshold(posPairWeights)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * negPairWeights)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_637": {
                "input": {
                    "value": "filteredEdges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "applyThreshold(posPairWeights)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * negPairWeights)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_682": {
                "input": {
                    "value": "posLinkages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "runHAC_torch_allEdges(origDistMat=distMat_NP, origTorchDistMat=distMat_torch, numPoints=numPoints, linkAlpha=linkAlpha, linkAlphaTorch=linkAlphaTorch, pidToGtCluster=canopy['pidToCluster'], scaleDist=self.config.scaleDist, getBestImpure=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_687": {
                "input": {
                    "value": "filteredLinks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "applyThreshold(posLinkages)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * negLinkages)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_691": {
                "input": {
                    "value": "negLinkages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "runHAC_torch_allEdges(origDistMat=distMat_NP, origTorchDistMat=distMat_torch, numPoints=numPoints, linkAlpha=linkAlpha, linkAlphaTorch=linkAlphaTorch, pidToGtCluster=canopy['pidToCluster'], scaleDist=self.config.scaleDist, getBestImpure=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_696": {
                "input": {
                    "value": "filteredLinks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "applyThreshold(posLinkages)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * negLinkages)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_363": {
                "variable": {
                    "value": "bestDistAcross",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adjVector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.pairAvgBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "self.model.pairAvgBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_382": {
                "variable": {
                    "value": "bestDistAcross",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adjVector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.pairAvgBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "self.model.pairAvgBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_445": {
                "variable": {
                    "value": "bestEdge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adjVector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.pairAvgBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "self.model.pairAvgBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_460": {
                "variable": {
                    "value": "bestEdge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adjVector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.pairAvgBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "self.model.pairAvgBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Threshold_375": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "-1 * (self.config.threshold + self.config.margin)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Threshold_395": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.config.threshold - self.config.margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Threshold_454": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.config.threshold - self.config.margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Threshold_472": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "-1 * (self.config.threshold + self.config.margin)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_372": {
                "input": {
                    "value": "adjVector ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_378": {
                "input": {
                    "value": "adjVector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.pairAvgBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "self.model.pairAvgBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_392": {
                "input": {
                    "value": "adjVector ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_398": {
                "input": {
                    "value": "adjVector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.pairAvgBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "self.model.pairAvgBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_451": {
                "input": {
                    "value": "adjVector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.pairAvgBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "self.model.pairAvgBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_456": {
                "input": {
                    "value": "adjVector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.pairAvgBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "self.model.pairAvgBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_469": {
                "input": {
                    "value": "adjVector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.pairAvgBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "self.model.pairAvgBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_475": {
                "input": {
                    "value": "adjVector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.pairAvgBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(acrossClusterFeatures)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "self.model.pairAvgBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "self.model.pairBatchForward(relevantPairFeatures)",
                            "Call"
                        ],
                        [
                            "applyThreshold(adjVector)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjVector)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/trainer/VectDataTrainer.py": {
        "torch": {
            "max_679": {
                "variable": {
                    "value": "maxVal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adjMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.batchForwardAcross(currPoints, acrossPoints)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjMatrix)",
                            "BinOp"
                        ],
                        [
                            "self.model.batchForwardAcross(currPoints, acrossPoints)",
                            "Call"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "adjMatrix + diag * maxVal",
                            "BinOp"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "applyThreshold(adjMatrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_680": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(cluster)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_689": {
                "variable": {
                    "value": "minDistWithinLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "minVector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(adjMatrix, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "applyThreshold(minVector)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_700": {
                "variable": {
                    "value": "maxDistWithinLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maxVector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(adjMatrix, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "applyThreshold(maxVector)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_711": {
                "variable": {
                    "value": "allPairWithinLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adjMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.batchForwardAcross(currPoints, acrossPoints)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjMatrix)",
                            "BinOp"
                        ],
                        [
                            "self.model.batchForwardAcross(currPoints, acrossPoints)",
                            "Call"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "adjMatrix + diag * maxVal",
                            "BinOp"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "applyThreshold(adjMatrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "Threshold_495": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "-1 * self.config.margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_497": {
                "variable": {
                    "value": "totalLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "applyThreshold(posMinusNeg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Threshold_500": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.config.threshold - self.config.margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Threshold_503": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "-1 * (self.config.threshold + self.config.margin)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_507": {
                "variable": {
                    "value": "posSampleLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "posDistances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.batchForwardOneToOne(points, posPoints)",
                            "Call"
                        ],
                        [
                            "applyThreshold(posDistances)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_625": {
                "variable": {
                    "value": "(minDistVector, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "adjMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.batchForwardAcross(currPoints, acrossPoints)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjMatrix)",
                            "BinOp"
                        ],
                        [
                            "self.model.batchForwardAcross(currPoints, acrossPoints)",
                            "Call"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "adjMatrix + diag * maxVal",
                            "BinOp"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "applyThreshold(adjMatrix)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_648": {
                "variable": {
                    "value": "minDistAcross",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adjVector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.batchForwardAcross([point], acrossPoints)",
                            "Call"
                        ],
                        [
                            "self.model.batchForwardAcross([point], canopy['clusters'][otherCid])",
                            "Call"
                        ]
                    ]
                }
            },
            "min_666": {
                "variable": {
                    "value": "minDistAcross",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adjVector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.batchForwardAcross([point], acrossPoints)",
                            "Call"
                        ],
                        [
                            "self.model.batchForwardAcross([point], canopy['clusters'][otherCid])",
                            "Call"
                        ]
                    ]
                }
            },
            "Threshold_686": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.config.threshold - self.config.margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Threshold_698": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.config.threshold - self.config.margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Threshold_709": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.config.threshold - self.config.margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_800": {
                "variable": {
                    "value": "posLinkLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "posLinkages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "runHAC_torch_allEdges_faces(origDistMat=distMat_NP, origTorchDistMat=torchDistMat, numPoints=numPoints, linkAlpha=linkAlpha, linkAlphaTorch=linkAlphaTorch, pidToGtCluster=pidToGtCluster, scaleDist=self.config.scaleDist, getBestImpure=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Threshold_803": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.config.threshold - self.config.margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Threshold_812": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "-1 * (self.config.threshold + self.config.margin)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Threshold_567": {
                "variable": {
                    "value": "applyMargin",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "-1 * self.config.margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_569": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "applyMargin(withinMinusAcross)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Threshold_599": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "-1 * (self.config.threshold + self.config.margin)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Threshold_630": {
                "variable": {
                    "value": "applyThreshold",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "-1 * (self.config.threshold + self.config.margin)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_684": {
                "input": {
                    "value": "adjMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.batchForwardAcross(currPoints, acrossPoints)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjMatrix)",
                            "BinOp"
                        ],
                        [
                            "self.model.batchForwardAcross(currPoints, acrossPoints)",
                            "Call"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "adjMatrix + diag * maxVal",
                            "BinOp"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "applyThreshold(adjMatrix)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_696": {
                "input": {
                    "value": "adjMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.batchForwardAcross(currPoints, acrossPoints)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjMatrix)",
                            "BinOp"
                        ],
                        [
                            "self.model.batchForwardAcross(currPoints, acrossPoints)",
                            "Call"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "adjMatrix + diag * maxVal",
                            "BinOp"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "applyThreshold(adjMatrix)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_508": {
                "input": {
                    "value": "negDistances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.batchForwardOneToOne(points, negPoints)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * negDistances)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_552": {
                "variable": {
                    "value": "maxVal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "withinAdjMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.batchForwardWithin(currPoints)",
                            "Call"
                        ],
                        [
                            "withinAdjMatrix + diag * maxVal",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_553": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "numPoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(currPoints)",
                            "Call"
                        ],
                        [
                            "len(canopy['clusters'][currCid])",
                            "Call"
                        ],
                        [
                            "len(canopy['clusters'][currCid])",
                            "Call"
                        ],
                        [
                            "len(allPoints)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_805": {
                "input": {
                    "value": "filteredLinks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "applyThreshold(posLinkages)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * negLinkages)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_809": {
                "input": {
                    "value": "negLinkages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "runHAC_torch_allEdges_faces(origDistMat=distMat_NP, origTorchDistMat=torchDistMat, numPoints=numPoints, linkAlpha=linkAlpha, linkAlphaTorch=linkAlphaTorch, pidToGtCluster=pidToGtCluster, scaleDist=self.config.scaleDist, getBestImpure=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_814": {
                "input": {
                    "value": "filteredLinks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "applyThreshold(posLinkages)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * negLinkages)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_597": {
                "input": {
                    "value": "adjMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.batchForwardAcross(currPoints, acrossPoints)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjMatrix)",
                            "BinOp"
                        ],
                        [
                            "self.model.batchForwardAcross(currPoints, acrossPoints)",
                            "Call"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "adjMatrix + diag * maxVal",
                            "BinOp"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "applyThreshold(adjMatrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_601": {
                "input": {
                    "value": "adjMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.batchForwardAcross(currPoints, acrossPoints)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * adjMatrix)",
                            "BinOp"
                        ],
                        [
                            "self.model.batchForwardAcross(currPoints, acrossPoints)",
                            "Call"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "adjMatrix + diag * maxVal",
                            "BinOp"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "self.model.batchForwardWithin(cluster)",
                            "Call"
                        ],
                        [
                            "applyThreshold(adjMatrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_628": {
                "input": {
                    "value": "minDistVector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(adjMatrix, dim=1)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * minDistVector)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_632": {
                "input": {
                    "value": "minDistVector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(adjMatrix, dim=1)",
                            "Call"
                        ],
                        [
                            "-1 * applyThreshold(-1 * minDistVector)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_538": {
                "input": {
                    "value": "acrossAdjMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.batchForwardAcross(currPoints, acrossPoints)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_556": {
                "input": {
                    "value": "withinAdjMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.batchForwardWithin(currPoints)",
                            "Call"
                        ],
                        [
                            "withinAdjMatrix + diag * maxVal",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_558": {
                "input": {
                    "value": "withinAdjMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.batchForwardWithin(currPoints)",
                            "Call"
                        ],
                        [
                            "withinAdjMatrix + diag * maxVal",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/trainer/train_pair_feat.py": {
        "torch": {
            "save_121": {
                "obj": {
                    "value": "trainer.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "trainer.config.bestModel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_90": {
                "obj": {
                    "value": "trainer.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "trainer.config.bestModel",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/trainer/train_vect_data.py": {
        "torch": {
            "save_103": {
                "obj": {
                    "value": "trainer.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "trainer.config.bestModel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_80": {
                "obj": {
                    "value": "trainer.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "trainer.config.bestModel",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/Config.py": {
        "torch": {
            "manual_seed_133": {
                "seed": {
                    "value": "self.torch_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_136": {
                "seed": {
                    "value": "self.cuda_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/basic_utils.py": {
        "torch": {
            "memory_allocated_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}