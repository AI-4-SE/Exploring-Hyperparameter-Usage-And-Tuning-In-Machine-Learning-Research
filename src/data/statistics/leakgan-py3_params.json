{
    "Image COCO/Discriminator.py": {
        "tensorflow": {
            "l2_normalize_6": {
                "variable": {
                    "value": "normalize_a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_7": {
                "variable": {
                    "value": "normalize_b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='b-%s' % filter_size, initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_8": {
                "variable": {
                    "value": "cos_similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "normalize_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(a, -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "normalize_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(b, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_35": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size, input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_36": {
                "variable": {
                    "value": "bias_term",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_69": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self.D_input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "self.D_input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "scope or 'SimpleLinear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'Highway'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_52": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(input_, size, scope='highway_gate_%d' % idx) + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_82": {
                "variable": {
                    "value": "self.D_l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_92": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "D_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.D_input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_97": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_163": {
                "variable": {
                    "value": "W_d",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_164": {
                "variable": {
                    "value": "b_d",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[self.num_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_167": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "D_input",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "W_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_168": {
                "variable": {
                    "value": "self.ypred_for_auc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_169": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_38": {
                "a": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [output_size, input_size], dtype=input_.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_81": {
                "name": {
                    "value": "D_update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_146": {
                "variable": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_147": {
                "variable": {
                    "value": "h_pool_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(pooled_outputs, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "Discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_165": {
                "t": {
                    "value": "W_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_166": {
                "t": {
                    "value": "b_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_93": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=D_scores, labels=self.D_input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "FeatureExtractor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_110": {
                "variable": {
                    "value": "W_fe",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_fe",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform([self.vocab_size + 1, self.dis_emb_dim], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_114": {
                "variable": {
                    "value": "embedded_chars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "W_fe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='W_fe', initializer=tf.random_uniform([self.vocab_size + 1, self.dis_emb_dim], -1.0, 1.0))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "Feature_input + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_115": {
                "variable": {
                    "value": "embedded_chars_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(W_fe, Feature_input + 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_155": {
                "variable": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_highway",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highway(h_pool_flat, h_pool_flat.get_shape()[1], 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "truncated_normal_163": {
                "shape": {
                    "value": "[self.num_filters_total, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_164": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_108": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_108": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_125": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'b-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(0.1, shape=[num_filter])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_128": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(embedded_chars, -1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='W-%s' % filter_size, initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_135": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'relu-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool_137": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu-%s' % filter_size)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.sequence_length - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'pool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_150": {
                "name": {
                    "value": "highway",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_154": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_120": {
                "name": {
                    "value": "'conv-maxpool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bias_add_135": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(embedded_chars_expanded, W, strides=[1, 1, 1, 1], padding='VALID', name='conv-%s' % filter_size)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='b-%s' % filter_size, initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_124": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size, self.dis_emb_dim, 1, num_filter]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_126": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filter]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Image COCO/LeakGANModel.py": {
        "tensorflow": {
            "constant_18": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_65": {
                "variable": {
                    "value": "self.padding_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_74": {
                "variable": {
                    "value": "gen_o",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_76": {
                "variable": {
                    "value": "gen_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_78": {
                "variable": {
                    "value": "goal",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_81": {
                "variable": {
                    "value": "feature_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_83": {
                "variable": {
                    "value": "real_goal_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length // self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_86": {
                "variable": {
                    "value": "gen_real_goal_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_89": {
                "variable": {
                    "value": "gen_o_worker_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length // self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_131": {
                "variable": {
                    "value": "(_, _, _, _, self.gen_o, self.gen_x, _, _, _, _, self.gen_real_goal_array, self.gen_o_worker_array)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0_worker, self.h0_manager, gen_o, gen_x, goal, tf.zeros([self.batch_size, self.goal_out_size]), self.goal_init, step_size, gen_real_goal_array, gen_o_worker_array)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_140": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_144": {
                "variable": {
                    "value": "self.gen_real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_148": {
                "variable": {
                    "value": "self.gen_o_worker_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_o_worker_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_150": {
                "variable": {
                    "value": "sub_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length // self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_153": {
                "variable": {
                    "value": "all_sub_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_155": {
                "variable": {
                    "value": "all_sub_goals",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_159": {
                "variable": {
                    "value": "g_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_162": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_221": {
                "variable": {
                    "value": "(_, _, self.g_predictions, _, _, _, _, _, self.feature_array, self.real_goal_array, self.sub_feature, self.all_sub_features, self.all_sub_goals)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12: i < self.sequence_length + 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "preTrain",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), g_predictions, self.h0_worker, self.x, self.h0_manager, tf.zeros([self.batch_size, self.goal_out_size]), self.goal_init, feature_array, real_goal_array, sub_feature, all_sub_features, all_sub_goals)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_229": {
                "variable": {
                    "value": "self.sub_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.sub_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_232": {
                "variable": {
                    "value": "self.real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_245": {
                "variable": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_275": {
                "variable": {
                    "value": "self.all_sub_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.all_sub_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_278": {
                "variable": {
                    "value": "self.all_sub_goals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.all_sub_goals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_298": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_302": {
                "variable": {
                    "value": "gen_for_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_303": {
                "variable": {
                    "value": "ta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_366": {
                "variable": {
                    "value": "(i, x_t, _, gen_for_reward, h_worker, h_manager, self.last_goal_for_reward, self.real_goal_for_reward, given_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5, _6, _7, given_num: i < given_num + 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence_1",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.x, gen_for_reward, self.h0_worker, self.h0_manager, tf.zeros([self.batch_size, self.goal_out_size]), self.goal_init, given_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_372": {
                "variable": {
                    "value": "(_, _, gen_for_reward, _, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5, _6: i < self.sequence_length + 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence_2",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(i, x_t, gen_for_reward, h_worker, h_manager, self.last_goal_for_reward, self.real_goal_for_reward)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_379": {
                "variable": {
                    "value": "gen_for_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "gen_for_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_array_ops.TensorArray(dtype=tf.int32, size=1, dynamic_size=True, infer_shape=True, clear_after_read=False)",
                            "Call"
                        ],
                        [
                            "gen_for_reward.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(gen_for_reward, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length / self.step_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.given_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.drop_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.vocab_size, self.emb_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "self.W_workerOut_change",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.vocab_size, self.goal_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "variable": {
                    "value": "self.g_change",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.goal_out_size, self.goal_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "self.h0_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_54": {
                "variable": {
                    "value": "self.h0_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0_worker, self.h0_worker]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "self.h0_manager",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_60": {
                "variable": {
                    "value": "self.h0_manager",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0_manager, self.h0_manager]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "self.goal_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "goal_init",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([self.batch_size, self.goal_out_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_72": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_94": {
                "variable": {
                    "value": "cur_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.split(tf.concat([tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array], 1), [self.sequence_length, i], 1)[0]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.padding_array",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.vocab_size, self.goal_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_103": {
                "variable": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_106": {
                "variable": {
                    "value": "real_sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "last_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_108": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "real_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.g_change",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_109": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_112": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_116": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_117": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_119": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(tf.cond(i > 1, lambda : tf.cond(self.train > 0, lambda : self.tem, lambda : 1.5), lambda : 1.5) * x_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_121": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_122": {
                "variable": {
                    "value": "x_tp1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_174": {
                "variable": {
                    "value": "real_goal_array",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal_array",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal_array.write(0, self.goal_init)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "l2_normalize_178": {
                "variable": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_180": {
                "variable": {
                    "value": "h_t_Worker",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.g_worker_recurrent_unit(x_t, h_tm1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : h_tm1",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "variable": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.vocab_size, self.goal_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_185": {
                "variable": {
                    "value": "real_sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.add(last_goal, sub_goal)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_187": {
                "variable": {
                    "value": "all_sub_goals",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : all_sub_goals.write(i - 1, real_goal)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : all_sub_goals",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "matmul_190": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "real_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.g_change",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_191": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_192": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_194": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_195": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_197": {
                "variable": {
                    "value": "g_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : g_predictions.write(i - 1, tf.nn.softmax(x_logits))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : g_predictions",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_199": {
                "variable": {
                    "value": "sub_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : sub_feature",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.cond(i > 0, lambda : sub_feature.write(i // step_size - 1, tf.subtract(feature, feature_array.read(i - step_size))), lambda : sub_feature)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_204": {
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : all_sub_features.write(i - 1, tf.subtract(feature, feature_array.read(i - i % step_size)))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : all_sub_features.write(i - 1, tf.subtract(feature, feature_array.read(i - step_size)))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_208": {
                "variable": {
                    "value": "real_goal_array",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal_array",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.cond(i / step_size < self.sequence_length // step_size, lambda : tf.cond(i > 0, lambda : real_goal_array.write(i // step_size, real_sub_goal), lambda : real_goal_array), lambda : real_goal_array)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_213": {
                "variable": {
                    "value": "x_tp1",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : ta_emb_x.read(i - 1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x_t",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "AdamOptimizer_239": {
                "variable": {
                    "value": "pretrain_manager_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_241": {
                "variable": {
                    "value": "(self.pretrain_manager_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.pretrain_goal_loss, self.manager_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_257": {
                "variable": {
                    "value": "pretrain_worker_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_259": {
                "variable": {
                    "value": "(self.pretrain_worker_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.pretrain_worker_loss, self.worker_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_266": {
                "variable": {
                    "value": "manager_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_268": {
                "variable": {
                    "value": "(self.manager_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.goal_loss, self.manager_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_289": {
                "variable": {
                    "value": "worker_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_290": {
                "variable": {
                    "value": "(self.worker_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.worker_loss, self.worker_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_297": {
                "variable": {
                    "value": "processed_x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, input_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_315": {
                "variable": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_317": {
                "variable": {
                    "value": "h_t_Worker",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.g_worker_recurrent_unit(x_t, h_tm1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : h_tm1",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_320": {
                "variable": {
                    "value": "real_sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.add(last_goal, sub_goal)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_323": {
                "variable": {
                    "value": "x_tp1",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : ta_emb_x.read(i - 1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x_t",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_336": {
                "variable": {
                    "value": "cur_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.split(tf.concat([tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array], 1), [self.sequence_length, i - 1], 1)[0]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.padding_array",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_342": {
                "variable": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.vocab_size, self.goal_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_346": {
                "variable": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_348": {
                "variable": {
                    "value": "real_sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "last_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_349": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "real_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.g_change",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_350": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_351": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_353": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_354": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_356": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(x_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_357": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_358": {
                "variable": {
                    "value": "x_tp1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_399": {
                "variable": {
                    "value": "self.Wi_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_400": {
                "variable": {
                    "value": "self.Ui_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_401": {
                "variable": {
                    "value": "self.bi_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_403": {
                "variable": {
                    "value": "self.Wf_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_404": {
                "variable": {
                    "value": "self.Uf_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_405": {
                "variable": {
                    "value": "self.bf_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_407": {
                "variable": {
                    "value": "self.Wog_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_408": {
                "variable": {
                    "value": "self.Uog_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_409": {
                "variable": {
                    "value": "self.bog_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_411": {
                "variable": {
                    "value": "self.Wc_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_412": {
                "variable": {
                    "value": "self.Uc_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_413": {
                "variable": {
                    "value": "self.bc_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_459": {
                "variable": {
                    "value": "self.W_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.vocab_size * self.goal_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_460": {
                "variable": {
                    "value": "self.b_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.vocab_size * self.goal_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_475": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_filters_total, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_476": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_477": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_479": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_filters_total, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_480": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_481": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_483": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_filters_total, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_484": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_485": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_487": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_filters_total, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_488": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_489": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_535": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.goal_out_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_536": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.goal_out_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "place_holder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "Worker",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "Manager",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_67": {
                "name": {
                    "value": "roll_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_71": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_238": {
                "name": {
                    "value": "Manager_PreTrain_update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_246": {
                "input_tensor": {
                    "value": "self.g_predictions * tf.log(tf.clip_by_value(self.g_predictions, 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_255": {
                "name": {
                    "value": "Worker_PreTrain_update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_265": {
                "name": {
                    "value": "Manager_update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cosine_distance_280": {
                "labels": {
                    "value": "tf.nn.l2_normalize(self.all_sub_features, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.nn.l2_normalize(self.all_sub_goals, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_287": {
                "name": {
                    "value": "Worker_update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_296": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_304": {
                "a": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_327": {
                "variable": {
                    "value": "gen_x",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : gen_x.write(i - 1, ta_x.read(i - 1))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : gen_x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_397": {
                "name_or_scope": {
                    "value": "Worker",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_421": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_424": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi_worker) + tf.matmul(previous_hidden_state, self.Ui_worker) + self.bi_worker",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_430": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf_worker) + tf.matmul(previous_hidden_state, self.Uf_worker) + self.bf_worker",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_436": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog_worker) + tf.matmul(previous_hidden_state, self.Uog_worker) + self.bog_worker",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_442": {
                "variable": {
                    "value": "c_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc_worker) + tf.matmul(previous_hidden_state, self.Uc_worker) + self.bc_worker",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_458": {
                "name_or_scope": {
                    "value": "Worker",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_464": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_473": {
                "name_or_scope": {
                    "value": "Manager",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_497": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_500": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_506": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_512": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_518": {
                "variable": {
                    "value": "c_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_534": {
                "name_or_scope": {
                    "value": "Manager",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_540": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_72": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_119": {
                "logits": {
                    "value": "tf.cond(i > 1, lambda : tf.cond(self.train > 0, lambda : self.tem, lambda : 1.5), lambda : 1.5) * x_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_123": {
                "control_inputs": {
                    "value": "[cur_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_125": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, self.vocab_size, 1.0, 0.0), tf.nn.softmax(x_logits))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_128": {
                "pred": {
                    "value": "(i + 1) % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, shape=[self.batch_size, self.goal_out_size])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_129": {
                "pred": {
                    "value": "(i + 1) % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "split_169": {
                "value": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[i, self.sequence_length - i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_217": {
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, shape=[self.batch_size, self.goal_out_size])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_218": {
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_sum_235": {
                "input_tensor": {
                    "value": "1 - tf.losses.cosine_distance(tf.nn.l2_normalize(self.sub_feature, 2), tf.nn.l2_normalize(self.real_goal_array, 2), 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_241": {
                "ys": {
                    "value": "self.pretrain_goal_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.manager_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_249": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.vocab_size, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.vocab_size]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_259": {
                "ys": {
                    "value": "self.pretrain_worker_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.worker_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_262": {
                "input_tensor": {
                    "value": "tf.multiply(self.reward, 1 - tf.losses.cosine_distance(tf.nn.l2_normalize(self.sub_feature, 2), tf.nn.l2_normalize(self.real_goal_array, 2), 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_269": {
                "ys": {
                    "value": "self.goal_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.manager_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_280": {
                "x": {
                    "value": "self.all_sub_goals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_282": {
                "input_tensor": {
                    "value": "tf.multiply(self.Worker_Reward, tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.vocab_size, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.vocab_size]), 1e-20, 1.0)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_291": {
                "ys": {
                    "value": "self.worker_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.worker_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_297": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_309": {
                "value": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[i, self.sequence_length - i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_310": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_326": {
                "control_inputs": {
                    "value": "[cur_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_329": {
                "pred": {
                    "value": "i % self.step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, shape=[self.batch_size, self.goal_out_size])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_331": {
                "pred": {
                    "value": "i % self.step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_337": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_356": {
                "logits": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_357": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_359": {
                "control_inputs": {
                    "value": "[cur_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_362": {
                "pred": {
                    "value": "i % self.step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, shape=[self.batch_size, self.goal_out_size])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_364": {
                "pred": {
                    "value": "i % self.step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_453": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_529": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_62": {
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multinomial_121": {
                "logits": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(tf.cond(i > 1, lambda : tf.cond(self.train > 0, lambda : self.tem, lambda : 1.5), lambda : 1.5) * x_logits))",
                            "Call"
                        ],
                        [
                            "tf.log(tf.nn.softmax(x_logits))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_125": {
                "x": {
                    "value": "tf.one_hot(next_token, self.vocab_size, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(x_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_134": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_135": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_169": {
                "values": {
                    "value": "[tf.split(input_x, [i, self.sequence_length - i], 1)[0], self.padding_array]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_185": {
                "x": {
                    "value": "last_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_201": {
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : sub_feature.write(i // step_size - 1, tf.subtract(feature, feature_array.read(i - step_size)))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : sub_feature",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_209": {
                "pred": {
                    "value": "i / step_size < self.sequence_length // step_size",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.cond(i > 0, lambda : real_goal_array.write(i // step_size, real_sub_goal), lambda : real_goal_array)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal_array",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "constant_224": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_224": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_225": {
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_246": {
                "x": {
                    "value": "tf.clip_by_value(self.g_predictions, 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_262": {
                "x": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "1 - tf.losses.cosine_distance(tf.nn.l2_normalize(self.sub_feature, 2), tf.nn.l2_normalize(self.real_goal_array, 2), 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_283": {
                "x": {
                    "value": "self.Worker_Reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.vocab_size, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.vocab_size]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_309": {
                "values": {
                    "value": "[tf.split(input_x, [i, self.sequence_length - i], 1)[0], self.padding_array]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_320": {
                "x": {
                    "value": "last_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_357": {
                "logits": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(tf.cond(i > 1, lambda : tf.cond(self.train > 0, lambda : self.tem, lambda : 1.5), lambda : 1.5) * x_logits))",
                            "Call"
                        ],
                        [
                            "tf.log(tf.nn.softmax(x_logits))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_369": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_369": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_370": {
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_451": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ],
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_466": {
                "a": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_527": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ],
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_542": {
                "a": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_94": {
                "value": {
                    "value": "tf.concat([tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.sequence_length, i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_120": {
                "pred": {
                    "value": "self.train > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.tem",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : 1.5",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "one_hot_125": {
                "indices": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_126": {
                "logits": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_128": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_197": {
                "logits": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_217": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cosine_distance_235": {
                "labels": {
                    "value": "tf.nn.l2_normalize(self.sub_feature, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.nn.l2_normalize(self.real_goal_array, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_246": {
                "t": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "one_hot_250": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_250": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.vocab_size]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_330": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_336": {
                "value": {
                    "value": "tf.concat([tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.sequence_length, i - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_363": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_94": {
                "values": {
                    "value": "[tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_210": {
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal_array.write(i // step_size, real_sub_goal)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal_array",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "l2_normalize_235": {
                "x": {
                    "value": "self.real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_250": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_251": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.vocab_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cosine_distance_262": {
                "labels": {
                    "value": "tf.nn.l2_normalize(self.sub_feature, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.nn.l2_normalize(self.real_goal_array, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_283": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_283": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.vocab_size]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_336": {
                "values": {
                    "value": "[tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_425": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_426": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_431": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_432": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_437": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_438": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_443": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_444": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_501": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_502": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_507": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_508": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_513": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_514": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_519": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_520": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_201": {
                "x": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "feature_array.read(i - step_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_204": {
                "x": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "feature_array.read(i - i % step_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_205": {
                "x": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "feature_array.read(i - step_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_250": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_251": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_262": {
                "x": {
                    "value": "self.real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_283": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_284": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.vocab_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "transpose_94": {
                "a": {
                    "value": "gen_x.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_283": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_284": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_336": {
                "a": {
                    "value": "gen_x.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Image COCO/Main.py": {
        "tensorflow": {
            "set_verbosity_13": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_177": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_180": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_190": {
                "variable": {
                    "value": "saver_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_191": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.global_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_192": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./ckpts/test2'",
                            "str"
                        ]
                    ]
                }
            },
            "global_variables_initializer_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "No Temperature/Image COCO/Discriminator.py": {
        "tensorflow": {
            "l2_normalize_6": {
                "variable": {
                    "value": "normalize_a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_7": {
                "variable": {
                    "value": "normalize_b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='b-%s' % filter_size, initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_8": {
                "variable": {
                    "value": "cos_similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "normalize_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(a, -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "normalize_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(b, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_35": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size, input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_36": {
                "variable": {
                    "value": "bias_term",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_69": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self.D_input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "self.D_input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "scope or 'SimpleLinear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'Highway'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_52": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(input_, size, scope='highway_gate_%d' % idx) + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_82": {
                "variable": {
                    "value": "self.D_l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_92": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "D_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.D_input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_97": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_163": {
                "variable": {
                    "value": "W_d",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_164": {
                "variable": {
                    "value": "b_d",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[self.num_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_167": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "D_input",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "W_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_168": {
                "variable": {
                    "value": "self.ypred_for_auc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_169": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_38": {
                "a": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [output_size, input_size], dtype=input_.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_81": {
                "name": {
                    "value": "D_update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_146": {
                "variable": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_147": {
                "variable": {
                    "value": "h_pool_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(pooled_outputs, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "Discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_165": {
                "t": {
                    "value": "W_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_166": {
                "t": {
                    "value": "b_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_93": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=D_scores, labels=self.D_input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "FeatureExtractor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_110": {
                "variable": {
                    "value": "W_fe",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_fe",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform([self.vocab_size + 1, self.dis_emb_dim], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_114": {
                "variable": {
                    "value": "embedded_chars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "W_fe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='W_fe', initializer=tf.random_uniform([self.vocab_size + 1, self.dis_emb_dim], -1.0, 1.0))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "Feature_input + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_115": {
                "variable": {
                    "value": "embedded_chars_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(W_fe, Feature_input + 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_155": {
                "variable": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_highway",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highway(h_pool_flat, h_pool_flat.get_shape()[1], 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "truncated_normal_163": {
                "shape": {
                    "value": "[self.num_filters_total, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_164": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_108": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_108": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_125": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'b-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(0.1, shape=[num_filter])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_128": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(embedded_chars, -1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='W-%s' % filter_size, initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_135": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'relu-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool_137": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu-%s' % filter_size)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.sequence_length - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'pool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_150": {
                "name": {
                    "value": "highway",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_154": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_120": {
                "name": {
                    "value": "'conv-maxpool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bias_add_135": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(embedded_chars_expanded, W, strides=[1, 1, 1, 1], padding='VALID', name='conv-%s' % filter_size)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='b-%s' % filter_size, initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_124": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size, self.dis_emb_dim, 1, num_filter]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_126": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filter]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "No Temperature/Image COCO/LeakGANModel.py": {
        "tensorflow": {}
    },
    "No Temperature/Image COCO/Main.py": {
        "tensorflow": {}
    },
    "No Temperature/Image COCO/convert.py": {
        "tensorflow": {}
    },
    "No Temperature/Synthetic Data/Discriminator.py": {
        "tensorflow": {
            "l2_normalize_6": {
                "variable": {
                    "value": "normalize_a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_7": {
                "variable": {
                    "value": "normalize_b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='b-%s' % filter_size, initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_8": {
                "variable": {
                    "value": "cos_similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "normalize_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(a, -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "normalize_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(b, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_35": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size, input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_36": {
                "variable": {
                    "value": "bias_term",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_69": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self.D_input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "self.D_input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "scope or 'SimpleLinear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'Highway'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_52": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(input_, size, scope='highway_gate_%d' % idx) + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_82": {
                "variable": {
                    "value": "self.D_l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_92": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "D_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.D_input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_97": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_163": {
                "variable": {
                    "value": "W_d",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_164": {
                "variable": {
                    "value": "b_d",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[self.num_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_167": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "D_input",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "W_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_168": {
                "variable": {
                    "value": "self.ypred_for_auc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_169": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_38": {
                "a": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [output_size, input_size], dtype=input_.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_81": {
                "name": {
                    "value": "D_update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_146": {
                "variable": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_147": {
                "variable": {
                    "value": "h_pool_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(pooled_outputs, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "Discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_165": {
                "t": {
                    "value": "W_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_166": {
                "t": {
                    "value": "b_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_93": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=D_scores, labels=self.D_input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "FeatureExtractor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_110": {
                "variable": {
                    "value": "W_fe",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_fe",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform([self.vocab_size + 1, self.dis_emb_dim], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_114": {
                "variable": {
                    "value": "embedded_chars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "W_fe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='W_fe', initializer=tf.random_uniform([self.vocab_size + 1, self.dis_emb_dim], -1.0, 1.0))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "Feature_input + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_115": {
                "variable": {
                    "value": "embedded_chars_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(W_fe, Feature_input + 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_155": {
                "variable": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_highway",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highway(h_pool_flat, h_pool_flat.get_shape()[1], 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "truncated_normal_163": {
                "shape": {
                    "value": "[self.num_filters_total, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_164": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_108": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_108": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_125": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'b-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(0.1, shape=[num_filter])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_128": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(embedded_chars, -1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='W-%s' % filter_size, initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_135": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'relu-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool_137": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu-%s' % filter_size)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.sequence_length - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'pool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_150": {
                "name": {
                    "value": "highway",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_154": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_120": {
                "name": {
                    "value": "'conv-maxpool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bias_add_135": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(embedded_chars_expanded, W, strides=[1, 1, 1, 1], padding='VALID', name='conv-%s' % filter_size)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='b-%s' % filter_size, initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_124": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size, self.dis_emb_dim, 1, num_filter]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_126": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filter]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "No Temperature/Synthetic Data/LeakGANModel.py": {
        "tensorflow": {
            "constant_18": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_30": {
                "variable": {
                    "value": "global_step_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_31": {
                "variable": {
                    "value": "learning_rate_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.starter_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.96",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_34": {
                "variable": {
                    "value": "global_step_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_35": {
                "variable": {
                    "value": "learning_rate_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.starter_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.96",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_73": {
                "variable": {
                    "value": "self.padding_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_82": {
                "variable": {
                    "value": "gen_o",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_84": {
                "variable": {
                    "value": "gen_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_86": {
                "variable": {
                    "value": "goal",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_89": {
                "variable": {
                    "value": "feature_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_91": {
                "variable": {
                    "value": "real_goal_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length / self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_94": {
                "variable": {
                    "value": "gen_real_goal_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_97": {
                "variable": {
                    "value": "gen_o_worker_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length / self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_139": {
                "variable": {
                    "value": "(_, _, _, _, self.gen_o, self.gen_x, _, _, _, _, self.gen_real_goal_array, self.gen_o_worker_array)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0_worker, self.h0_manager, gen_o, gen_x, goal, tf.zeros([self.batch_size, self.goal_out_size]), self.goal_init, step_size, gen_real_goal_array, gen_o_worker_array)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_148": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_152": {
                "variable": {
                    "value": "self.gen_real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_156": {
                "variable": {
                    "value": "self.gen_o_worker_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_o_worker_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_158": {
                "variable": {
                    "value": "sub_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length / self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_161": {
                "variable": {
                    "value": "all_sub_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_163": {
                "variable": {
                    "value": "all_sub_goals",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_167": {
                "variable": {
                    "value": "g_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_170": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_229": {
                "variable": {
                    "value": "(_, _, self.g_predictions, _, _, _, _, _, self.feature_array, self.real_goal_array, self.sub_feature, self.all_sub_features, self.all_sub_goals)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12: i < self.sequence_length + 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "preTrain",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), g_predictions, self.h0_worker, self.x, self.h0_manager, tf.zeros([self.batch_size, self.goal_out_size]), self.goal_init, feature_array, real_goal_array, sub_feature, all_sub_features, all_sub_goals)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_237": {
                "variable": {
                    "value": "self.sub_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.sub_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_240": {
                "variable": {
                    "value": "self.real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_253": {
                "variable": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_283": {
                "variable": {
                    "value": "self.all_sub_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.all_sub_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_286": {
                "variable": {
                    "value": "self.all_sub_goals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.all_sub_goals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_306": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_310": {
                "variable": {
                    "value": "gen_for_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_311": {
                "variable": {
                    "value": "ta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_377": {
                "variable": {
                    "value": "(i, x_t, _, gen_for_reward, h_worker, h_manager, self.last_goal_for_reward, self.real_goal_for_reward, given_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5, _6, _7, given_num: i < given_num + 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence_1",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.x, gen_for_reward, self.h0_worker, self.h0_manager, tf.zeros([self.batch_size, self.goal_out_size]), self.goal_init, given_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_383": {
                "variable": {
                    "value": "(_, _, gen_for_reward, _, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5, _6: i < self.sequence_length + 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence_2",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(i, x_t, gen_for_reward, h_worker, h_manager, self.last_goal_for_reward, self.real_goal_for_reward)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_390": {
                "variable": {
                    "value": "gen_for_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "gen_for_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_array_ops.TensorArray(dtype=tf.int32, size=1, dynamic_size=True, infer_shape=True, clear_after_read=False)",
                            "Call"
                        ],
                        [
                            "gen_for_reward.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(gen_for_reward, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length / self.step_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.given_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.drop_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_52": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.vocab_size, self.emb_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_56": {
                "variable": {
                    "value": "self.W_workerOut_change",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.vocab_size, self.goal_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_58": {
                "variable": {
                    "value": "self.g_change",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.goal_out_size, self.goal_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "self.h0_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_62": {
                "variable": {
                    "value": "self.h0_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0_worker, self.h0_worker]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "self.h0_manager",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_68": {
                "variable": {
                    "value": "self.h0_manager",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0_manager, self.h0_manager]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "self.goal_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "goal_init",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([self.batch_size, self.goal_out_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_80": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_102": {
                "variable": {
                    "value": "cur_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.split(tf.concat([tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array], 1), [self.sequence_length, i], 1)[0]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.padding_array",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.vocab_size, self.goal_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_111": {
                "variable": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_114": {
                "variable": {
                    "value": "real_sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "last_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_116": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "real_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.g_change",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_117": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_120": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_125": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_127": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(tf.cond(i > 1, lambda : tf.cond(self.train > 0, lambda : self.tem, lambda : 1.0), lambda : 1.0) * x_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_129": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_130": {
                "variable": {
                    "value": "x_tp1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_182": {
                "variable": {
                    "value": "real_goal_array",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal_array",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal_array.write(0, self.goal_init)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "l2_normalize_186": {
                "variable": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_188": {
                "variable": {
                    "value": "h_t_Worker",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.g_worker_recurrent_unit(x_t, h_tm1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : h_tm1",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_191": {
                "variable": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.vocab_size, self.goal_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_193": {
                "variable": {
                    "value": "real_sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.add(last_goal, sub_goal)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_195": {
                "variable": {
                    "value": "all_sub_goals",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : all_sub_goals.write(i - 1, real_goal)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : all_sub_goals",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "matmul_198": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "real_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.g_change",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_199": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_200": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_202": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_203": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_205": {
                "variable": {
                    "value": "g_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : g_predictions.write(i - 1, tf.nn.softmax(x_logits))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : g_predictions",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_207": {
                "variable": {
                    "value": "sub_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : sub_feature",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.cond(i > 0, lambda : sub_feature.write(i / step_size - 1, tf.subtract(feature, feature_array.read(i - step_size))), lambda : sub_feature)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_212": {
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : all_sub_features.write(i - 1, tf.subtract(feature, feature_array.read(i - i % step_size)))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : all_sub_features.write(i - 1, tf.subtract(feature, feature_array.read(i - step_size)))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_216": {
                "variable": {
                    "value": "real_goal_array",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal_array",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.cond(i / step_size < self.sequence_length / step_size, lambda : tf.cond(i > 0, lambda : real_goal_array.write(i / step_size, real_sub_goal), lambda : real_goal_array), lambda : real_goal_array)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_221": {
                "variable": {
                    "value": "x_tp1",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : ta_emb_x.read(i - 1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x_t",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "AdamOptimizer_247": {
                "variable": {
                    "value": "pretrain_manager_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.starter_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_249": {
                "variable": {
                    "value": "(self.pretrain_manager_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.pretrain_goal_loss, self.manager_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_265": {
                "variable": {
                    "value": "pretrain_worker_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.starter_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_267": {
                "variable": {
                    "value": "(self.pretrain_worker_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.pretrain_worker_loss, self.worker_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_274": {
                "variable": {
                    "value": "manager_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.starter_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_276": {
                "variable": {
                    "value": "(self.manager_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.goal_loss, self.manager_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_297": {
                "variable": {
                    "value": "worker_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.starter_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_298": {
                "variable": {
                    "value": "(self.worker_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.worker_loss, self.worker_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_305": {
                "variable": {
                    "value": "processed_x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, input_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_323": {
                "variable": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_325": {
                "variable": {
                    "value": "h_t_Worker",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.g_worker_recurrent_unit(x_t, h_tm1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : h_tm1",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_328": {
                "variable": {
                    "value": "real_sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.add(last_goal, sub_goal)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_331": {
                "variable": {
                    "value": "x_tp1",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : ta_emb_x.read(i - 1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x_t",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_344": {
                "variable": {
                    "value": "cur_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.split(tf.concat([tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array], 1), [self.sequence_length, i - 1], 1)[0]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.padding_array",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_350": {
                "variable": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.vocab_size, self.goal_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_357": {
                "variable": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_359": {
                "variable": {
                    "value": "real_sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "last_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_360": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "real_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.g_change",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_361": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_362": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_364": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_365": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_367": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(x_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_368": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_369": {
                "variable": {
                    "value": "x_tp1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_410": {
                "variable": {
                    "value": "self.Wi_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_411": {
                "variable": {
                    "value": "self.Ui_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_412": {
                "variable": {
                    "value": "self.bi_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_414": {
                "variable": {
                    "value": "self.Wf_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_415": {
                "variable": {
                    "value": "self.Uf_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_416": {
                "variable": {
                    "value": "self.bf_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_418": {
                "variable": {
                    "value": "self.Wog_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_419": {
                "variable": {
                    "value": "self.Uog_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_420": {
                "variable": {
                    "value": "self.bog_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_422": {
                "variable": {
                    "value": "self.Wc_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_423": {
                "variable": {
                    "value": "self.Uc_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_424": {
                "variable": {
                    "value": "self.bc_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_470": {
                "variable": {
                    "value": "self.W_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.vocab_size * self.goal_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_471": {
                "variable": {
                    "value": "self.b_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.vocab_size * self.goal_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_486": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_filters_total, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_487": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_488": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_490": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_filters_total, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_491": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_492": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_494": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_filters_total, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_495": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_496": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_498": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_filters_total, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_499": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_500": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_546": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.goal_out_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_547": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.goal_out_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "place_holder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "Worker",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "Manager",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_75": {
                "name": {
                    "value": "roll_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_79": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_246": {
                "name": {
                    "value": "Manager_PreTrain_update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_254": {
                "input_tensor": {
                    "value": "self.g_predictions * tf.log(tf.clip_by_value(self.g_predictions, 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_263": {
                "name": {
                    "value": "Worker_PreTrain_update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_273": {
                "name": {
                    "value": "Manager_update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cosine_distance_288": {
                "labels": {
                    "value": "tf.nn.l2_normalize(self.all_sub_features, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.nn.l2_normalize(self.all_sub_goals, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_295": {
                "name": {
                    "value": "Worker_update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_304": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_312": {
                "a": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_335": {
                "variable": {
                    "value": "gen_x",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : gen_x.write(i - 1, ta_x.read(i - 1))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : gen_x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_408": {
                "name_or_scope": {
                    "value": "Worker",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_432": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_435": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi_worker) + tf.matmul(previous_hidden_state, self.Ui_worker) + self.bi_worker",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_441": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf_worker) + tf.matmul(previous_hidden_state, self.Uf_worker) + self.bf_worker",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_447": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog_worker) + tf.matmul(previous_hidden_state, self.Uog_worker) + self.bog_worker",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_453": {
                "variable": {
                    "value": "c_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc_worker) + tf.matmul(previous_hidden_state, self.Uc_worker) + self.bc_worker",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_469": {
                "name_or_scope": {
                    "value": "Worker",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_475": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_484": {
                "name_or_scope": {
                    "value": "Manager",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_508": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_511": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_517": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_523": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_529": {
                "variable": {
                    "value": "c_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_545": {
                "name_or_scope": {
                    "value": "Manager",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_551": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_80": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_127": {
                "logits": {
                    "value": "tf.cond(i > 1, lambda : tf.cond(self.train > 0, lambda : self.tem, lambda : 1.0), lambda : 1.0) * x_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_131": {
                "control_inputs": {
                    "value": "[cur_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_133": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, self.vocab_size, 1.0, 0.0), tf.nn.softmax(x_logits))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_136": {
                "pred": {
                    "value": "(i + 1) % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, shape=[self.batch_size, self.goal_out_size])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_137": {
                "pred": {
                    "value": "(i + 1) % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "split_177": {
                "value": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[i, self.sequence_length - i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_225": {
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, shape=[self.batch_size, self.goal_out_size])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_226": {
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_sum_243": {
                "input_tensor": {
                    "value": "1 - tf.losses.cosine_distance(tf.nn.l2_normalize(self.sub_feature, 2), tf.nn.l2_normalize(self.real_goal_array, 2), 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_249": {
                "ys": {
                    "value": "self.pretrain_goal_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.manager_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_257": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.vocab_size, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.vocab_size]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_267": {
                "ys": {
                    "value": "self.pretrain_worker_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.worker_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_270": {
                "input_tensor": {
                    "value": "tf.multiply(self.reward, 1 - tf.losses.cosine_distance(tf.nn.l2_normalize(self.sub_feature, 2), tf.nn.l2_normalize(self.real_goal_array, 2), 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_277": {
                "ys": {
                    "value": "self.goal_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.manager_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_288": {
                "x": {
                    "value": "self.all_sub_goals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_290": {
                "input_tensor": {
                    "value": "tf.multiply(self.Worker_Reward, tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.vocab_size, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.vocab_size]), 1e-20, 1.0)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_299": {
                "ys": {
                    "value": "self.worker_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.worker_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_305": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_317": {
                "value": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[i, self.sequence_length - i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_334": {
                "control_inputs": {
                    "value": "[cur_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_337": {
                "pred": {
                    "value": "i % self.step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, shape=[self.batch_size, self.goal_out_size])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_339": {
                "pred": {
                    "value": "i % self.step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_345": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_367": {
                "logits": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_368": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_370": {
                "control_inputs": {
                    "value": "[cur_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_373": {
                "pred": {
                    "value": "i % self.step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, shape=[self.batch_size, self.goal_out_size])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_375": {
                "pred": {
                    "value": "i % self.step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_464": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_540": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_70": {
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multinomial_129": {
                "logits": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(tf.cond(i > 1, lambda : tf.cond(self.train > 0, lambda : self.tem, lambda : 1.0), lambda : 1.0) * x_logits))",
                            "Call"
                        ],
                        [
                            "tf.log(tf.nn.softmax(x_logits))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_133": {
                "x": {
                    "value": "tf.one_hot(next_token, self.vocab_size, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(x_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_142": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_143": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_177": {
                "values": {
                    "value": "[tf.split(input_x, [i, self.sequence_length - i], 1)[0], self.padding_array]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_193": {
                "x": {
                    "value": "last_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_209": {
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : sub_feature.write(i / step_size - 1, tf.subtract(feature, feature_array.read(i - step_size)))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : sub_feature",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_217": {
                "pred": {
                    "value": "i / step_size < self.sequence_length / step_size",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.cond(i > 0, lambda : real_goal_array.write(i / step_size, real_sub_goal), lambda : real_goal_array)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal_array",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "constant_232": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_232": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_254": {
                "x": {
                    "value": "tf.clip_by_value(self.g_predictions, 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_270": {
                "x": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "1 - tf.losses.cosine_distance(tf.nn.l2_normalize(self.sub_feature, 2), tf.nn.l2_normalize(self.real_goal_array, 2), 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_291": {
                "x": {
                    "value": "self.Worker_Reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.vocab_size, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.vocab_size]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_317": {
                "values": {
                    "value": "[tf.split(input_x, [i, self.sequence_length - i], 1)[0], self.padding_array]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_328": {
                "x": {
                    "value": "last_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_368": {
                "logits": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(tf.cond(i > 1, lambda : tf.cond(self.train > 0, lambda : self.tem, lambda : 1.0), lambda : 1.0) * x_logits))",
                            "Call"
                        ],
                        [
                            "tf.log(tf.nn.softmax(x_logits))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_380": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_380": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_381": {
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_462": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ],
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_477": {
                "a": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_538": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ],
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_553": {
                "a": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_102": {
                "value": {
                    "value": "tf.concat([tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.sequence_length, i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_128": {
                "pred": {
                    "value": "self.train > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.tem",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : 1.0",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "one_hot_133": {
                "indices": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_134": {
                "logits": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_136": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_205": {
                "logits": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_225": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cosine_distance_243": {
                "labels": {
                    "value": "tf.nn.l2_normalize(self.sub_feature, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.nn.l2_normalize(self.real_goal_array, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_254": {
                "t": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "one_hot_258": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_258": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.vocab_size]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_338": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_344": {
                "value": {
                    "value": "tf.concat([tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.sequence_length, i - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_374": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_102": {
                "values": {
                    "value": "[tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_218": {
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal_array.write(i / step_size, real_sub_goal)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal_array",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "l2_normalize_243": {
                "x": {
                    "value": "self.real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_258": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_259": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.vocab_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cosine_distance_270": {
                "labels": {
                    "value": "tf.nn.l2_normalize(self.sub_feature, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.nn.l2_normalize(self.real_goal_array, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_291": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_291": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.vocab_size]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_344": {
                "values": {
                    "value": "[tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_436": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_437": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_442": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_443": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_448": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_449": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_454": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_455": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_512": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_513": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_518": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_519": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_524": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_525": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_530": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_531": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_209": {
                "x": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "feature_array.read(i - step_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_212": {
                "x": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "feature_array.read(i - i % step_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_213": {
                "x": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "feature_array.read(i - step_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_258": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_259": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_270": {
                "x": {
                    "value": "self.real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_291": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_292": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.vocab_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "transpose_102": {
                "a": {
                    "value": "gen_x.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_291": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_292": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_344": {
                "a": {
                    "value": "gen_x.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "No Temperature/Synthetic Data/Main.py": {
        "tensorflow": {
            "ConfigProto_182": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_185": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_196": {
                "variable": {
                    "value": "saver_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_197": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.global_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_198": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./ckpts'",
                            "str"
                        ]
                    ]
                }
            },
            "global_variables_initializer_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "No Temperature/Synthetic Data/target_lstm.py": {
        "tensorflow": {
            "constant_12": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_33": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0, self.h0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_36": {
                "variable": {
                    "value": "gen_o",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_38": {
                "variable": {
                    "value": "gen_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_52": {
                "variable": {
                    "value": "(_, _, _, self.gen_o, self.gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, gen_o, gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_60": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_63": {
                "variable": {
                    "value": "g_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_67": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_78": {
                "variable": {
                    "value": "(_, _, _, self.g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_pretrain_recurrence",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_85": {
                "variable": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_95": {
                "variable": {
                    "value": "self.out_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(-tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_emb, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_emb])), 1), [-1, self.sequence_length])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_114": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_115": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_116": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_118": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_119": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_120": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_122": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_123": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_124": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_126": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_127": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_128": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_173": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.num_emb])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_174": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.num_emb])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_16": {
                "seed": {
                    "value": "233",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_19": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.num_emb, self.emb_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_29": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_44": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_45": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_46": {
                "variable": {
                    "value": "x_tp1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_136": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_139": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_145": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_151": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_157": {
                "variable": {
                    "value": "c_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_178": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_28": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_87": {
                "input_tensor": {
                    "value": "self.g_predictions * tf.log(tf.clip_by_value(self.g_predictions, 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "tensor": {
                    "value": "-tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_emb, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_emb])), 1)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_168": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_29": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "logits": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_45": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_47": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, self.num_emb, 1.0, 0.0), tf.nn.softmax(o_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_74": {
                "logits": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_91": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_emb, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_emb]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_166": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_180": {
                "a": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_45": {
                "logits": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(o_t))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_47": {
                "x": {
                    "value": "tf.one_hot(next_token, self.num_emb, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_55": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_56": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_81": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_82": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_88": {
                "x": {
                    "value": "tf.clip_by_value(self.g_predictions, 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_97": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_emb, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_emb]))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_47": {
                "indices": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_48": {
                "logits": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_88": {
                "t": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "one_hot_92": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_92": {
                "x": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_emb])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_140": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_147": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_152": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_153": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_159": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_92": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_emb]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_98": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_98": {
                "x": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_emb])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_98": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_emb]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "No Temperature/Synthetic Data/target_lstm20.py": {
        "tensorflow": {
            "constant_12": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_34": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0, self.h0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_37": {
                "variable": {
                    "value": "gen_o",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_39": {
                "variable": {
                    "value": "gen_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_53": {
                "variable": {
                    "value": "(_, _, _, self.gen_o, self.gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, gen_o, gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_61": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_64": {
                "variable": {
                    "value": "g_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_68": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_79": {
                "variable": {
                    "value": "(_, _, _, self.g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_pretrain_recurrence",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_86": {
                "variable": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "variable": {
                    "value": "self.out_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(-tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_emb, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_emb])), 1), [-1, self.sequence_length])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_113": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_114": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_115": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_117": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_118": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_119": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_121": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_122": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_123": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[9]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_125": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[10]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_126": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[11]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_127": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[12]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_172": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[13]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_173": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[14]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_random_seed_17": {
                "seed": {
                    "value": "66",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_20": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_30": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_45": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_46": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_47": {
                "variable": {
                    "value": "x_tp1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_135": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_138": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_144": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_150": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_156": {
                "variable": {
                    "value": "c_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_177": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_29": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "tensor": {
                    "value": "-tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_emb, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_emb])), 1)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_167": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_30": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_45": {
                "logits": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_46": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_48": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, self.num_emb, 1.0, 0.0), tf.nn.softmax(o_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "logits": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_90": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_emb, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_emb]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_165": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_179": {
                "a": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_46": {
                "logits": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(o_t))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_48": {
                "x": {
                    "value": "tf.one_hot(next_token, self.num_emb, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_56": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_57": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_82": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_83": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_96": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_emb, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_emb]))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_48": {
                "indices": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_49": {
                "logits": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_91": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_91": {
                "x": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_emb])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_139": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_140": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_145": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_151": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_152": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_157": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_91": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_emb]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_97": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_97": {
                "x": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_emb])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_97": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_emb]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Synthetic Data/Discriminator.py": {
        "tensorflow": {
            "l2_normalize_6": {
                "variable": {
                    "value": "normalize_a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_7": {
                "variable": {
                    "value": "normalize_b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='b-%s' % filter_size, initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_8": {
                "variable": {
                    "value": "cos_similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "normalize_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(a, -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "normalize_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(b, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_35": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size, input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_36": {
                "variable": {
                    "value": "bias_term",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_69": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self.D_input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "self.D_input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "scope or 'SimpleLinear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'Highway'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_52": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(input_, size, scope='highway_gate_%d' % idx) + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_82": {
                "variable": {
                    "value": "self.D_l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_92": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "D_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.D_input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_97": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_163": {
                "variable": {
                    "value": "W_d",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_164": {
                "variable": {
                    "value": "b_d",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[self.num_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_167": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "D_input",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "W_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_168": {
                "variable": {
                    "value": "self.ypred_for_auc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_169": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_38": {
                "a": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [output_size, input_size], dtype=input_.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_81": {
                "name": {
                    "value": "D_update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_146": {
                "variable": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_147": {
                "variable": {
                    "value": "h_pool_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(pooled_outputs, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "Discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_165": {
                "t": {
                    "value": "W_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_166": {
                "t": {
                    "value": "b_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_93": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=D_scores, labels=self.D_input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "FeatureExtractor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_110": {
                "variable": {
                    "value": "W_fe",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_fe",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform([self.vocab_size + 1, self.dis_emb_dim], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_114": {
                "variable": {
                    "value": "embedded_chars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "W_fe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='W_fe', initializer=tf.random_uniform([self.vocab_size + 1, self.dis_emb_dim], -1.0, 1.0))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "Feature_input + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_115": {
                "variable": {
                    "value": "embedded_chars_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(W_fe, Feature_input + 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_155": {
                "variable": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_highway",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highway(h_pool_flat, h_pool_flat.get_shape()[1], 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "truncated_normal_163": {
                "shape": {
                    "value": "[self.num_filters_total, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_164": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_108": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_108": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_125": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'b-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(0.1, shape=[num_filter])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_128": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(embedded_chars, -1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='W-%s' % filter_size, initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_135": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'relu-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool_137": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu-%s' % filter_size)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.sequence_length - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'pool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_150": {
                "name": {
                    "value": "highway",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_154": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_120": {
                "name": {
                    "value": "'conv-maxpool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bias_add_135": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(embedded_chars_expanded, W, strides=[1, 1, 1, 1], padding='VALID', name='conv-%s' % filter_size)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='b-%s' % filter_size, initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_124": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size, self.dis_emb_dim, 1, num_filter]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_126": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filter]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Synthetic Data/LeakGANModel.py": {
        "tensorflow": {
            "constant_18": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_30": {
                "variable": {
                    "value": "global_step_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_31": {
                "variable": {
                    "value": "learning_rate_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.starter_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.96",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_34": {
                "variable": {
                    "value": "global_step_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_35": {
                "variable": {
                    "value": "learning_rate_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.starter_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.96",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_73": {
                "variable": {
                    "value": "self.padding_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_82": {
                "variable": {
                    "value": "gen_o",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_84": {
                "variable": {
                    "value": "gen_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_86": {
                "variable": {
                    "value": "goal",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_89": {
                "variable": {
                    "value": "feature_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_91": {
                "variable": {
                    "value": "real_goal_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length // self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_94": {
                "variable": {
                    "value": "gen_real_goal_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_97": {
                "variable": {
                    "value": "gen_o_worker_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length // self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_139": {
                "variable": {
                    "value": "(_, _, _, _, self.gen_o, self.gen_x, _, _, _, _, self.gen_real_goal_array, self.gen_o_worker_array)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0_worker, self.h0_manager, gen_o, gen_x, goal, tf.zeros([self.batch_size, self.goal_out_size]), self.goal_init, step_size, gen_real_goal_array, gen_o_worker_array)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_148": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_152": {
                "variable": {
                    "value": "self.gen_real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_156": {
                "variable": {
                    "value": "self.gen_o_worker_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_o_worker_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_158": {
                "variable": {
                    "value": "sub_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length // self.step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_161": {
                "variable": {
                    "value": "all_sub_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_163": {
                "variable": {
                    "value": "all_sub_goals",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_167": {
                "variable": {
                    "value": "g_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_170": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_229": {
                "variable": {
                    "value": "(_, _, self.g_predictions, _, _, _, _, _, self.feature_array, self.real_goal_array, self.sub_feature, self.all_sub_features, self.all_sub_goals)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12: i < self.sequence_length + 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "preTrain",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), g_predictions, self.h0_worker, self.x, self.h0_manager, tf.zeros([self.batch_size, self.goal_out_size]), self.goal_init, feature_array, real_goal_array, sub_feature, all_sub_features, all_sub_goals)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_237": {
                "variable": {
                    "value": "self.sub_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.sub_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_240": {
                "variable": {
                    "value": "self.real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_253": {
                "variable": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_283": {
                "variable": {
                    "value": "self.all_sub_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.all_sub_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_286": {
                "variable": {
                    "value": "self.all_sub_goals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.all_sub_goals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_306": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_310": {
                "variable": {
                    "value": "gen_for_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_311": {
                "variable": {
                    "value": "ta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_377": {
                "variable": {
                    "value": "(i, x_t, _, gen_for_reward, h_worker, h_manager, self.last_goal_for_reward, self.real_goal_for_reward, given_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5, _6, _7, given_num: i < given_num + 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence_1",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.x, gen_for_reward, self.h0_worker, self.h0_manager, tf.zeros([self.batch_size, self.goal_out_size]), self.goal_init, given_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_383": {
                "variable": {
                    "value": "(_, _, gen_for_reward, _, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5, _6: i < self.sequence_length + 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence_2",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(i, x_t, gen_for_reward, h_worker, h_manager, self.last_goal_for_reward, self.real_goal_for_reward)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_390": {
                "variable": {
                    "value": "gen_for_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "gen_for_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_array_ops.TensorArray(dtype=tf.int32, size=1, dynamic_size=True, infer_shape=True, clear_after_read=False)",
                            "Call"
                        ],
                        [
                            "gen_for_reward.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(gen_for_reward, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length / self.step_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.given_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.drop_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_52": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.vocab_size, self.emb_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_56": {
                "variable": {
                    "value": "self.W_workerOut_change",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.vocab_size, self.goal_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_58": {
                "variable": {
                    "value": "self.g_change",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.goal_out_size, self.goal_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "self.h0_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_62": {
                "variable": {
                    "value": "self.h0_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0_worker, self.h0_worker]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "self.h0_manager",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_68": {
                "variable": {
                    "value": "self.h0_manager",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0_manager, self.h0_manager]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "self.goal_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "goal_init",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([self.batch_size, self.goal_out_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_80": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_102": {
                "variable": {
                    "value": "cur_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.split(tf.concat([tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array], 1), [self.sequence_length, i], 1)[0]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.padding_array",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.vocab_size, self.goal_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_111": {
                "variable": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_114": {
                "variable": {
                    "value": "real_sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "last_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_116": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "real_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.g_change",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_117": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_120": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_125": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_127": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(tf.cond(i > 1, lambda : tf.cond(self.train > 0, lambda : self.tem, lambda : 1.5), lambda : 1.5) * x_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_129": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_130": {
                "variable": {
                    "value": "x_tp1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_182": {
                "variable": {
                    "value": "real_goal_array",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal_array",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal_array.write(0, self.goal_init)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "l2_normalize_186": {
                "variable": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_188": {
                "variable": {
                    "value": "h_t_Worker",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.g_worker_recurrent_unit(x_t, h_tm1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : h_tm1",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_191": {
                "variable": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.vocab_size, self.goal_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_193": {
                "variable": {
                    "value": "real_sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.add(last_goal, sub_goal)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_195": {
                "variable": {
                    "value": "all_sub_goals",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : all_sub_goals.write(i - 1, real_goal)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : all_sub_goals",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "matmul_198": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "real_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.g_change",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_199": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_200": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_202": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_203": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_205": {
                "variable": {
                    "value": "g_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : g_predictions.write(i - 1, tf.nn.softmax(x_logits))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : g_predictions",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_207": {
                "variable": {
                    "value": "sub_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : sub_feature",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.cond(i > 0, lambda : sub_feature.write(i // step_size - 1, tf.subtract(feature, feature_array.read(i - step_size))), lambda : sub_feature)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_212": {
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : all_sub_features.write(i - 1, tf.subtract(feature, feature_array.read(i - i % step_size)))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : all_sub_features.write(i - 1, tf.subtract(feature, feature_array.read(i - step_size)))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_216": {
                "variable": {
                    "value": "real_goal_array",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal_array",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.cond(i / step_size < self.sequence_length // step_size, lambda : tf.cond(i > 0, lambda : real_goal_array.write(i // step_size, real_sub_goal), lambda : real_goal_array), lambda : real_goal_array)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_221": {
                "variable": {
                    "value": "x_tp1",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : ta_emb_x.read(i - 1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x_t",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "AdamOptimizer_247": {
                "variable": {
                    "value": "pretrain_manager_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.starter_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_249": {
                "variable": {
                    "value": "(self.pretrain_manager_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.pretrain_goal_loss, self.manager_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_265": {
                "variable": {
                    "value": "pretrain_worker_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.starter_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_267": {
                "variable": {
                    "value": "(self.pretrain_worker_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.pretrain_worker_loss, self.worker_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_274": {
                "variable": {
                    "value": "manager_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.starter_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_276": {
                "variable": {
                    "value": "(self.manager_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.goal_loss, self.manager_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_297": {
                "variable": {
                    "value": "worker_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.starter_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_298": {
                "variable": {
                    "value": "(self.worker_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.worker_loss, self.worker_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_305": {
                "variable": {
                    "value": "processed_x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, input_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_323": {
                "variable": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_325": {
                "variable": {
                    "value": "h_t_Worker",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.g_worker_recurrent_unit(x_t, h_tm1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : h_tm1",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_328": {
                "variable": {
                    "value": "real_sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.add(last_goal, sub_goal)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_331": {
                "variable": {
                    "value": "x_tp1",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : ta_emb_x.read(i - 1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x_t",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_344": {
                "variable": {
                    "value": "cur_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.split(tf.concat([tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array], 1), [self.sequence_length, i - 1], 1)[0]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.padding_array",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_350": {
                "variable": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.vocab_size, self.goal_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_357": {
                "variable": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_359": {
                "variable": {
                    "value": "real_sub_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "last_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_360": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "real_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.g_change",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_361": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_362": {
                "variable": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_364": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "o_t_Worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.vocab_size, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_365": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_367": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(x_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_368": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_369": {
                "variable": {
                    "value": "x_tp1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_410": {
                "variable": {
                    "value": "self.Wi_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_411": {
                "variable": {
                    "value": "self.Ui_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_412": {
                "variable": {
                    "value": "self.bi_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_414": {
                "variable": {
                    "value": "self.Wf_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_415": {
                "variable": {
                    "value": "self.Uf_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_416": {
                "variable": {
                    "value": "self.bf_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_418": {
                "variable": {
                    "value": "self.Wog_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_419": {
                "variable": {
                    "value": "self.Uog_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_420": {
                "variable": {
                    "value": "self.bog_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_422": {
                "variable": {
                    "value": "self.Wc_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_423": {
                "variable": {
                    "value": "self.Uc_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_424": {
                "variable": {
                    "value": "self.bc_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_470": {
                "variable": {
                    "value": "self.W_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.vocab_size * self.goal_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_471": {
                "variable": {
                    "value": "self.b_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.vocab_size * self.goal_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_486": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_filters_total, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_487": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_488": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_490": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_filters_total, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_491": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_492": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_494": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_filters_total, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_495": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_496": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_498": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_filters_total, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_499": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_500": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_546": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.goal_out_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_547": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.goal_out_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "place_holder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "Worker",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "Manager",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_75": {
                "name": {
                    "value": "roll_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_79": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_246": {
                "name": {
                    "value": "Manager_PreTrain_update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_254": {
                "input_tensor": {
                    "value": "self.g_predictions * tf.log(tf.clip_by_value(self.g_predictions, 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_263": {
                "name": {
                    "value": "Worker_PreTrain_update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_273": {
                "name": {
                    "value": "Manager_update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cosine_distance_288": {
                "labels": {
                    "value": "tf.nn.l2_normalize(self.all_sub_features, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.nn.l2_normalize(self.all_sub_goals, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_295": {
                "name": {
                    "value": "Worker_update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_304": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_312": {
                "a": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_335": {
                "variable": {
                    "value": "gen_x",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : gen_x.write(i - 1, ta_x.read(i - 1))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : gen_x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_408": {
                "name_or_scope": {
                    "value": "Worker",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_432": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_435": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi_worker) + tf.matmul(previous_hidden_state, self.Ui_worker) + self.bi_worker",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_441": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf_worker) + tf.matmul(previous_hidden_state, self.Uf_worker) + self.bf_worker",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_447": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog_worker) + tf.matmul(previous_hidden_state, self.Uog_worker) + self.bog_worker",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_453": {
                "variable": {
                    "value": "c_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc_worker) + tf.matmul(previous_hidden_state, self.Uc_worker) + self.bc_worker",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_469": {
                "name_or_scope": {
                    "value": "Worker",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_475": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_484": {
                "name_or_scope": {
                    "value": "Manager",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_508": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_511": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_517": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_523": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_529": {
                "variable": {
                    "value": "c_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_545": {
                "name_or_scope": {
                    "value": "Manager",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_551": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_80": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_127": {
                "logits": {
                    "value": "tf.cond(i > 1, lambda : tf.cond(self.train > 0, lambda : self.tem, lambda : 1.5), lambda : 1.5) * x_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_131": {
                "control_inputs": {
                    "value": "[cur_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_133": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, self.vocab_size, 1.0, 0.0), tf.nn.softmax(x_logits))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_136": {
                "pred": {
                    "value": "(i + 1) % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, shape=[self.batch_size, self.goal_out_size])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_137": {
                "pred": {
                    "value": "(i + 1) % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "split_177": {
                "value": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[i, self.sequence_length - i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_225": {
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, shape=[self.batch_size, self.goal_out_size])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_226": {
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_sum_243": {
                "input_tensor": {
                    "value": "1 - tf.losses.cosine_distance(tf.nn.l2_normalize(self.sub_feature, 2), tf.nn.l2_normalize(self.real_goal_array, 2), 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_249": {
                "ys": {
                    "value": "self.pretrain_goal_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.manager_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_257": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.vocab_size, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.vocab_size]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_267": {
                "ys": {
                    "value": "self.pretrain_worker_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.worker_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_270": {
                "input_tensor": {
                    "value": "tf.multiply(self.reward, 1 - tf.losses.cosine_distance(tf.nn.l2_normalize(self.sub_feature, 2), tf.nn.l2_normalize(self.real_goal_array, 2), 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_277": {
                "ys": {
                    "value": "self.goal_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.manager_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_288": {
                "x": {
                    "value": "self.all_sub_goals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_290": {
                "input_tensor": {
                    "value": "tf.multiply(self.Worker_Reward, tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.vocab_size, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.vocab_size]), 1e-20, 1.0)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_299": {
                "ys": {
                    "value": "self.worker_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.worker_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_305": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_317": {
                "value": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[i, self.sequence_length - i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_334": {
                "control_inputs": {
                    "value": "[cur_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_337": {
                "pred": {
                    "value": "i % self.step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, shape=[self.batch_size, self.goal_out_size])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_339": {
                "pred": {
                    "value": "i % self.step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_345": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_367": {
                "logits": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_368": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_370": {
                "control_inputs": {
                    "value": "[cur_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_373": {
                "pred": {
                    "value": "i % self.step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, shape=[self.batch_size, self.goal_out_size])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_375": {
                "pred": {
                    "value": "i % self.step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_464": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_540": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_70": {
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multinomial_129": {
                "logits": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(tf.cond(i > 1, lambda : tf.cond(self.train > 0, lambda : self.tem, lambda : 1.5), lambda : 1.5) * x_logits))",
                            "Call"
                        ],
                        [
                            "tf.log(tf.nn.softmax(x_logits))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_133": {
                "x": {
                    "value": "tf.one_hot(next_token, self.vocab_size, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(x_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_142": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_143": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_177": {
                "values": {
                    "value": "[tf.split(input_x, [i, self.sequence_length - i], 1)[0], self.padding_array]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_193": {
                "x": {
                    "value": "last_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_209": {
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : sub_feature.write(i // step_size - 1, tf.subtract(feature, feature_array.read(i - step_size)))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : sub_feature",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_217": {
                "pred": {
                    "value": "i / step_size < self.sequence_length // step_size",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.cond(i > 0, lambda : real_goal_array.write(i // step_size, real_sub_goal), lambda : real_goal_array)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal_array",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "constant_232": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_232": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_254": {
                "x": {
                    "value": "tf.clip_by_value(self.g_predictions, 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_270": {
                "x": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "1 - tf.losses.cosine_distance(tf.nn.l2_normalize(self.sub_feature, 2), tf.nn.l2_normalize(self.real_goal_array, 2), 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_291": {
                "x": {
                    "value": "self.Worker_Reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.vocab_size, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.vocab_size]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_317": {
                "values": {
                    "value": "[tf.split(input_x, [i, self.sequence_length - i], 1)[0], self.padding_array]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_328": {
                "x": {
                    "value": "last_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sub_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_368": {
                "logits": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(tf.cond(i > 1, lambda : tf.cond(self.train > 0, lambda : self.tem, lambda : 1.5), lambda : 1.5) * x_logits))",
                            "Call"
                        ],
                        [
                            "tf.log(tf.nn.softmax(x_logits))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_380": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_380": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_381": {
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_462": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ],
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_477": {
                "a": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_538": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ],
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_553": {
                "a": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_102": {
                "value": {
                    "value": "tf.concat([tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.sequence_length, i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_128": {
                "pred": {
                    "value": "self.train > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.tem",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : 1.5",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "one_hot_133": {
                "indices": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_134": {
                "logits": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_136": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_205": {
                "logits": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_225": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cosine_distance_243": {
                "labels": {
                    "value": "tf.nn.l2_normalize(self.sub_feature, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.nn.l2_normalize(self.real_goal_array, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_254": {
                "t": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "one_hot_258": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_258": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.vocab_size]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_338": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_344": {
                "value": {
                    "value": "tf.concat([tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.sequence_length, i - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_374": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_102": {
                "values": {
                    "value": "[tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_218": {
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal_array.write(i // step_size, real_sub_goal)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal_array",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "l2_normalize_243": {
                "x": {
                    "value": "self.real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_258": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_259": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.vocab_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cosine_distance_270": {
                "labels": {
                    "value": "tf.nn.l2_normalize(self.sub_feature, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.nn.l2_normalize(self.real_goal_array, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_291": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_291": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.vocab_size]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_344": {
                "values": {
                    "value": "[tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_436": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_437": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_442": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_443": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_448": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_449": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_454": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_455": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_512": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_513": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_518": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_519": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_524": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_525": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_530": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_531": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_209": {
                "x": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "feature_array.read(i - step_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_212": {
                "x": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "feature_array.read(i - i % step_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_213": {
                "x": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "feature_array.read(i - step_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_258": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_259": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_270": {
                "x": {
                    "value": "self.real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_291": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_292": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.vocab_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "transpose_102": {
                "a": {
                    "value": "gen_x.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_291": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_292": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_344": {
                "a": {
                    "value": "gen_x.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Synthetic Data/Main.py": {
        "tensorflow": {
            "set_verbosity_13": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_247": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_250": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_262": {
                "variable": {
                    "value": "saver_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_263": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.global_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_264": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./ckpts/test2'",
                            "str"
                        ]
                    ]
                }
            },
            "global_variables_initializer_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Synthetic Data/target_lstm.py": {
        "tensorflow": {
            "constant_12": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_33": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0, self.h0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_36": {
                "variable": {
                    "value": "gen_o",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_38": {
                "variable": {
                    "value": "gen_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_52": {
                "variable": {
                    "value": "(_, _, _, self.gen_o, self.gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, gen_o, gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_60": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_63": {
                "variable": {
                    "value": "g_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_67": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_78": {
                "variable": {
                    "value": "(_, _, _, self.g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_pretrain_recurrence",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_85": {
                "variable": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_95": {
                "variable": {
                    "value": "self.out_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(-tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_emb, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_emb])), 1), [-1, self.sequence_length])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_114": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_115": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_116": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_118": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_119": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_120": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_122": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_123": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_124": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_126": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_127": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_128": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_173": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.num_emb])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_174": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.num_emb])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_16": {
                "seed": {
                    "value": "233",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_19": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.num_emb, self.emb_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_29": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_44": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_45": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_46": {
                "variable": {
                    "value": "x_tp1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_136": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_139": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_145": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_151": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_157": {
                "variable": {
                    "value": "c_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_178": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_28": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_87": {
                "input_tensor": {
                    "value": "self.g_predictions * tf.log(tf.clip_by_value(self.g_predictions, 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "tensor": {
                    "value": "-tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_emb, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_emb])), 1)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_168": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_29": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "logits": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_45": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_47": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, self.num_emb, 1.0, 0.0), tf.nn.softmax(o_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_74": {
                "logits": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_91": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_emb, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_emb]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_166": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_180": {
                "a": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_45": {
                "logits": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(o_t))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_47": {
                "x": {
                    "value": "tf.one_hot(next_token, self.num_emb, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_55": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_56": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_81": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_82": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_88": {
                "x": {
                    "value": "tf.clip_by_value(self.g_predictions, 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_97": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_emb, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_emb]))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_47": {
                "indices": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_48": {
                "logits": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_88": {
                "t": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "one_hot_92": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_92": {
                "x": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_emb])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_140": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_147": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_152": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_153": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_159": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_92": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_emb]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_98": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_98": {
                "x": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_emb])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_98": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_emb]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Synthetic Data/target_lstm20.py": {
        "tensorflow": {
            "constant_12": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_34": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0, self.h0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_37": {
                "variable": {
                    "value": "gen_o",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_39": {
                "variable": {
                    "value": "gen_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_53": {
                "variable": {
                    "value": "(_, _, _, self.gen_o, self.gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, gen_o, gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_61": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_64": {
                "variable": {
                    "value": "g_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_68": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_79": {
                "variable": {
                    "value": "(_, _, _, self.g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_pretrain_recurrence",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_86": {
                "variable": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "variable": {
                    "value": "self.out_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(-tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_emb, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_emb])), 1), [-1, self.sequence_length])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_113": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_114": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_115": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_117": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_118": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_119": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_121": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_122": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_123": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[9]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_125": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[10]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_126": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[11]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_127": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[12]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_172": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[13]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_173": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[14]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_random_seed_17": {
                "seed": {
                    "value": "66",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_20": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_30": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_45": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_46": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_47": {
                "variable": {
                    "value": "x_tp1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_135": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_138": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_144": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_150": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_156": {
                "variable": {
                    "value": "c_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_177": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_29": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "tensor": {
                    "value": "-tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_emb, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_emb])), 1)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_167": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_30": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_45": {
                "logits": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_46": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_48": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, self.num_emb, 1.0, 0.0), tf.nn.softmax(o_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "logits": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_90": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_emb, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_emb]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_165": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_179": {
                "a": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_46": {
                "logits": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(o_t))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_48": {
                "x": {
                    "value": "tf.one_hot(next_token, self.num_emb, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_56": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_57": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_82": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_83": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_96": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_emb, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_emb]))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_48": {
                "indices": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_49": {
                "logits": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_91": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_91": {
                "x": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_emb])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_139": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_140": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_145": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_151": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_152": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_157": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_91": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_emb]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_97": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_97": {
                "x": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_emb])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_97": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_emb]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}