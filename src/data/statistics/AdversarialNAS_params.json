{
    "utils/cal_fid_stat.py": {
        "tensorflow": {
            "ConfigProto_58": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_60": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/fid_score.py": {
        "tensorflow": {
            "ConfigProto_313": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_37": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_39": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "FID_Inception_Net",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FastGFile_36": {
                "name": {
                    "value": "pth",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_315": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_63": {
                "variable": {
                    "value": "o.__dict__[_shape_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "new_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "global_variables_initializer_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/inception_score.py": {
        "tensorflow": {
            "ConfigProto_21": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_79": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_81": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(pool3, [1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sess.graph.get_operation_by_name('softmax/logits/MatMul').inputs[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.squeeze(pool3, [1, 2]), w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_38": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "FastGFile_77": {
                "name": {
                    "value": "os.path.join(MODEL_DIR, 'classify_image_graph_def.pb')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_83": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_99": {
                "input": {
                    "value": "pool3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name('pool_3:0')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_97": {
                "variable": {
                    "value": "o.__dict__[_shape_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "new_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "MGPU_search_arch.py": {
        "torch": {
            "DataParallel_56": {
                "variable": {
                    "value": "gen_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "basemodel_gen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eval('archs.' + args.arch + '.Generator')(args=args)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_59": {
                "variable": {
                    "value": "dis_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "basemodel_dis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eval('archs.' + args.arch + '.Discriminator')(args=args)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_87": {
                "variable": {
                    "value": "gen_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, weight_params_gen)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.g_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_93": {
                "variable": {
                    "value": "dis_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, weight_params_dis)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.d_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_131": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join('exps', args.checkpoint, 'Model', 'checkpoint_best.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MGPU_test_arch.py": {
        "torch": {
            "DataParallel_52": {
                "variable": {
                    "value": "gen_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "basemodel_gen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eval('archs.' + args.arch + '.Generator')(args, genotype_G)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_54": {
                "variable": {
                    "value": "dis_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "basemodel_dis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eval('archs.' + args.arch + '.Discriminator')(args)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_70": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join('exps', args.checkpoint, 'Model', 'checkpoint_best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MGPU_train_arch.py": {
        "torch": {
            "DataParallel_57": {
                "variable": {
                    "value": "gen_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "basemodel_gen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eval('archs.' + args.arch + '.Generator')(args, genotype_G)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_59": {
                "variable": {
                    "value": "dis_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "basemodel_dis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eval('archs.' + args.arch + '.Discriminator')(args)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_95": {
                "variable": {
                    "value": "gen_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, gen_net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.g_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_97": {
                "variable": {
                    "value": "dis_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, dis_net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.d_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_29": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_123": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join('exps', args.checkpoint, 'Model', 'checkpoint_best.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "architect.py": {
        "torch": {
            "cat_4": {
                "tensors": {
                    "value": "[x.view(-1) for x in xs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Adam_13": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0003",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_53": {
                "variable": {
                    "value": "grads_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "g_loss",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_61": {
                "variable": {
                    "value": "grads_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "g_loss",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_78": {
                "variable": {
                    "value": "grads_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "g_loss",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_86": {
                "variable": {
                    "value": "grads_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "g_loss",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(fake_validity)",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_102": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0003",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_150": {
                "variable": {
                    "value": "grads_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "d_loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_161": {
                "variable": {
                    "value": "grads_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "d_loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_180": {
                "variable": {
                    "value": "grads_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "d_loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_191": {
                "variable": {
                    "value": "grads_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "d_loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.nn.ReLU(inplace=True)(1.0 - real_validity)) + torch.mean(torch.nn.ReLU(inplace=True)(1 + fake_validity))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_27": {
                "input": {
                    "value": "fake_validity",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_34": {
                "input": {
                    "value": "fake_validity",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_52": {
                "input": {
                    "value": "fake_validity",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_60": {
                "input": {
                    "value": "fake_validity",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_76": {
                "input": {
                    "value": "fake_validity",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_85": {
                "input": {
                    "value": "fake_validity",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_117": {
                "input": {
                    "value": "torch.nn.ReLU(inplace=True)(1.0 - real_validity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_118": {
                "input": {
                    "value": "torch.nn.ReLU(inplace=True)(1 + fake_validity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_126": {
                "input": {
                    "value": "torch.nn.ReLU(inplace=True)(1.0 - real_validity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_127": {
                "input": {
                    "value": "torch.nn.ReLU(inplace=True)(1 + fake_validity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_147": {
                "input": {
                    "value": "torch.nn.ReLU(inplace=True)(1.0 - real_validity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_148": {
                "input": {
                    "value": "torch.nn.ReLU(inplace=True)(1 + fake_validity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_158": {
                "input": {
                    "value": "torch.nn.ReLU(inplace=True)(1.0 - real_validity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_159": {
                "input": {
                    "value": "torch.nn.ReLU(inplace=True)(1 + fake_validity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_177": {
                "input": {
                    "value": "torch.nn.ReLU(inplace=True)(1.0 - real_validity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_178": {
                "input": {
                    "value": "torch.nn.ReLU(inplace=True)(1 + fake_validity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_188": {
                "input": {
                    "value": "torch.nn.ReLU(inplace=True)(1.0 - real_validity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_189": {
                "input": {
                    "value": "torch.nn.ReLU(inplace=True)(1 + fake_validity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_127": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_158": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_159": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_178": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_188": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_189": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archs/arch_cifar10.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.base_latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * args.gf_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.base_latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "(self.bottom_width * 2) ** 2 * args.gf_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.to_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(args.gf_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.l5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.base_latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "(self.bottom_width * 4) ** 2 * args.gf_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_65": {
                "variable": {
                    "value": "self.l5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.l5",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "args.gf_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "args.gf_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archs/arch_cifar10_building_blocks.py": {
        "torch": {
            "ModuleList_156": {
                "variable": {
                    "value": "self.ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_168": {
                "variable": {
                    "value": "self.ups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_180": {
                "variable": {
                    "value": "self.ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_288": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_289": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_290": {
                "variable": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_321": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels if hidden_channels is None else hidden_channels",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.ksize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_322": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels if hidden_channels is None else hidden_channels",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.ksize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_71": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_ch, out_ch, kernel_size, stride=stride, padding=padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_87": {
                "variable": {
                    "value": "self.dilconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_ch, out_ch, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.dilconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.dilconv",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.convT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_145": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_226": {
                "variable": {
                    "value": "self.skip_in_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(in_channels, out_channels, kernel_size=1) for _ in range(num_skip_in)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "AvgPool2d_281": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_292": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_293": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_294": {
                "variable": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_324": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_325": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_328": {
                "variable": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_147": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_215": {
                "variable": {
                    "value": "self.n1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_216": {
                "variable": {
                    "value": "self.n2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "spectral_norm_330": {
                "variable": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_124": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_138": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.c_sc(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.up_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_218": {
                "variable": {
                    "value": "self.n1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_219": {
                "variable": {
                    "value": "self.n2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_227": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_251": {
                "input": {
                    "value": "ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(ht, wt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.up_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "archs/search_both_cifar10.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * args.gf_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "(self.bottom_width * 2) ** 2 * args.gf_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "(self.bottom_width * 4) ** 2 * args.gf_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.to_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(args.gf_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.alphas_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.001 * torch.randn(num_cell, num_edge_normal, num_ops)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.alphas_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.001 * torch.randn(num_cell, num_edge_up, num_up)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.l5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.alphas_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.001 * torch.randn(num_cell, num_edge_normal, num_ops)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_93": {
                "variable": {
                    "value": "self.alphas_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.001 * torch.randn(num_cell, num_edge_down, num_down)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_54": {
                "variable": {
                    "value": "alphas_normal_pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alphas_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gumbel_softmax_55": {
                "variable": {
                    "value": "weights_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "alphas_normal_pi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(self.alphas_normal, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.alphas_normal, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "tau": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hard": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "variable": {
                    "value": "alphas_up_pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alphas_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gumbel_softmax_57": {
                "variable": {
                    "value": "weights_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "alphas_up_pi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(self.alphas_up, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "tau": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hard": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_59": {
                "variable": {
                    "value": "weights_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alphas_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_60": {
                "variable": {
                    "value": "weights_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alphas_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_82": {
                "variable": {
                    "value": "self.l5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.l5",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_106": {
                "variable": {
                    "value": "alphas_normal_pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alphas_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gumbel_softmax_107": {
                "variable": {
                    "value": "weights_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "alphas_normal_pi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(self.alphas_normal, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.alphas_normal, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "tau": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hard": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_108": {
                "variable": {
                    "value": "alphas_down_pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alphas_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gumbel_softmax_109": {
                "variable": {
                    "value": "weights_down",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "alphas_down_pi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(self.alphas_down, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "tau": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hard": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_111": {
                "variable": {
                    "value": "weights_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alphas_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_112": {
                "variable": {
                    "value": "weights_down",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alphas_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "args.gf_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "args.gf_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_38": {
                "*size": {
                    "value": "num_cell",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_edge_normal",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_ops",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_39": {
                "*size": {
                    "value": "num_cell",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_edge_up",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_up",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_92": {
                "*size": {
                    "value": "num_cell",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_edge_normal",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_ops",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_93": {
                "*size": {
                    "value": "num_cell",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_edge_down",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_down",
                    "type": "Name",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "archs/search_both_cifar10_building_blocks.py": {
        "torch": {
            "ModuleList_166": {
                "variable": {
                    "value": "self.ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_178": {
                "variable": {
                    "value": "self.ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_190": {
                "variable": {
                    "value": "self.ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_202": {
                "variable": {
                    "value": "self.ups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_79": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_ch, out_ch, kernel_size, stride=stride, padding=padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_95": {
                "variable": {
                    "value": "self.dilconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_ch, out_ch, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.dilconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.dilconv",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.convT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_155": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_242": {
                "variable": {
                    "value": "self.skip_in_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(in_channels, out_channels, kernel_size=1) for _ in range(num_skip_in)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "AvgPool2d_268": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_157": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_231": {
                "variable": {
                    "value": "self.n1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_232": {
                "variable": {
                    "value": "self.n2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_132": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_146": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.up_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_234": {
                "variable": {
                    "value": "self.n1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_235": {
                "variable": {
                    "value": "self.n2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_243": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_259": {
                "input": {
                    "value": "ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(ht, wt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.up_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "datasets.py": {
        "torch": {
            "DataLoader_31": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dt(root=args.data_path, split='train+unlabeled', transform=transform, download=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.dis_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_36": {
                "variable": {
                    "value": "self.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dt(root=args.data_path, split='test', transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.dis_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dt(root=args.data_path, train=True, transform=transform, download=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.dis_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "self.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dt(root=args.data_path, train=False, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.dis_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "network.py": {
        "torch": {
            "mean_58": {
                "input": {
                    "value": "nn.ReLU(inplace=True)(1.0 - real_validity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_59": {
                "input": {
                    "value": "nn.ReLU(inplace=True)(1 + fake_validity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_83": {
                "input": {
                    "value": "fake_validity",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/flop_benchmark.py": {
        "torch": {
            "zeros_16": {
                "variable": {
                    "value": "cache_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "empty_cache_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/genotype.py": {
        "torch": {
            "softmax_47": {
                "variable": {
                    "value": "alpha_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_up",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(alpha_up, dim=-1).cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_48": {
                "variable": {
                    "value": "alpha_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_normal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(alpha_normal, dim=-1).cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "beta_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta_normal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(beta_normal, dim=1).cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_81": {
                "variable": {
                    "value": "beta_down",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta_down",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(beta_down, dim=-1).cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "save_66": {
                "obj": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_68": {
                "obj": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'checkpoint_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}