{
    "scripts/extract_features.py": {
        "torch": {
            "Sequential_47": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/run_model.py": {
        "torch": {
            "cat_567": {
                "variable": {
                    "value": "all_programs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_programs",
                    "possible_values": [
                        [
                            "torch.cat(all_programs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_568": {
                "variable": {
                    "value": "all_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_scores",
                    "possible_values": [
                        [
                            "torch.cat(all_scores, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_scores, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_569": {
                "variable": {
                    "value": "all_probs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_probs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_probs, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_probs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_570": {
                "variable": {
                    "value": "all_preds",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_preds",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_preds, 0).squeeze().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "squeeze_570": {
                "variable": {
                    "value": "all_preds",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_667": {
                "variable": {
                    "value": "cnn",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "cat_742": {
                "variable": {
                    "value": "all_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_scores",
                    "possible_values": [
                        [
                            "torch.cat(all_scores, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_scores, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_743": {
                "variable": {
                    "value": "all_probs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_probs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_probs, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_probs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "is_available_239": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_455": {
                "variable": {
                    "value": "loaded_gammas",
                    "possible_values": []
                },
                "f": {
                    "value": "args.gammas_from",
                    "possible_values": []
                }
            },
            "load_458": {
                "variable": {
                    "value": "loaded_betas",
                    "possible_values": []
                },
                "f": {
                    "value": "args.betas_from",
                    "possible_values": []
                }
            },
            "softmax_517": {
                "variable": {
                    "value": "probs",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "model(question_var, feats_var)",
                            "Call"
                        ],
                        [
                            "ee(feats_var, predicted_program, save_activations=True)",
                            "Call"
                        ],
                        [
                            "ee(feats_var, programs_pred, save_activations=True)",
                            "Call"
                        ],
                        [
                            "model(questions_var, feats_var)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "upsample_bilinear_640": {
                "variable": {
                    "value": "alpha_upsampled",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha4d",
                    "possible_values": [
                        [
                            "alpha.unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size(orig_img_size)",
                    "possible_values": []
                }
            },
            "squeeze_640": {
                "variable": {
                    "value": "alpha_upsampled",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "transpose_640": {
                "variable": {
                    "value": "alpha_upsampled",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "softmax_697": {
                "variable": {
                    "value": "probs",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "model(question_var, feats_var)",
                            "Call"
                        ],
                        [
                            "ee(feats_var, predicted_program, save_activations=True)",
                            "Call"
                        ],
                        [
                            "ee(feats_var, programs_pred, save_activations=True)",
                            "Call"
                        ],
                        [
                            "model(questions_var, feats_var)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_371": {
                "input": {
                    "value": "Variable(predicted_probs[0])",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "save_591": {
                "obj": {
                    "value": "gamma_means",
                    "possible_values": [
                        [
                            "gammas.mean(0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_program_stats_dir, 'gamma_means')",
                    "possible_values": []
                }
            },
            "save_593": {
                "obj": {
                    "value": "beta_means",
                    "possible_values": [
                        [
                            "betas.mean(0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_program_stats_dir, 'beta_means')",
                    "possible_values": []
                }
            },
            "save_595": {
                "obj": {
                    "value": "gamma_medians",
                    "possible_values": [
                        [
                            "gammas.median(0)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_program_stats_dir, 'gamma_medians')",
                    "possible_values": []
                }
            },
            "save_597": {
                "obj": {
                    "value": "beta_medians",
                    "possible_values": [
                        [
                            "betas.median(0)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_program_stats_dir, 'beta_medians')",
                    "possible_values": []
                }
            },
            "save_600": {
                "obj": {
                    "value": "gammas",
                    "possible_values": [
                        [
                            "all_programs[:, :, :pg.module_dim]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_program_stats_dir, 'gammas')",
                    "possible_values": []
                }
            },
            "save_601": {
                "obj": {
                    "value": "betas",
                    "possible_values": [
                        [
                            "all_programs[:, :, pg.module_dim:2 * pg.module_dim]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_program_stats_dir, 'betas')",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/train_model.py": {
        "torch": {
            "is_available_452": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_453": {
                "variable": {
                    "value": "loss_fn",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_455": {
                "variable": {
                    "value": "loss_fn",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_722": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_772": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_885": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_919": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_505": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_656": {
                "obj": {
                    "value": "checkpoint",
                    "possible_values": [
                        [
                            "{'args': args.__dict__, 'program_generator_kwargs': pg_kwargs, 'program_generator_state': best_pg_state, 'execution_engine_kwargs': ee_kwargs, 'execution_engine_state': best_ee_state, 'baseline_kwargs': baseline_kwargs, 'baseline_state': best_baseline_state, 'baseline_type': baseline_type, 'vocab': vocab}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.checkpoint_path",
                    "possible_values": []
                }
            },
            "is_available_936": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_557": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "vr/data.py": {
        "torch": {}
    },
    "vr/models/baselines.py": {
        "torch": {
            "Conv2d_22": {
                "variable": {
                    "value": "self.Wv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.Wp",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "possible_values": []
                }
            },
            "softmax_55": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wp(h).view(N, H * W)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Embedding_73": {
                "variable": {
                    "value": "self.embed",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(token_to_idx)",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "wordvec_dim",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_74": {
                "variable": {
                    "value": "self.rnn",
                    "possible_values": []
                },
                "*args": {
                    "value": "wordvec_dim",
                    "possible_values": []
                },
                "dropout": {
                    "value": "rnn_dropout",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "stem_module_dim",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "stem_module_dim",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "MaxPool2d_121": {
                "variable": {
                    "value": "self.pool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(module_H, module_W)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(module_H, module_W)",
                    "possible_values": []
                }
            },
            "Conv2d_375": {
                "variable": {
                    "value": "self.image_proj",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "stem_module_dim",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "stacked_attn_dim - 2 * use_coords",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Linear_376": {
                "variable": {
                    "value": "self.ques_proj",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_dim",
                    "possible_values": [
                        [
                            "2 * stem_module_dim + 8 * use_coords",
                            "BinOp"
                        ],
                        [
                            "2 * stem_module_dim + 4 * use_coords",
                            "BinOp"
                        ],
                        [
                            "2 * stem_module_dim",
                            "BinOp"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "stacked_attn_dim",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.Wu",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * hidden_dim",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.Wu",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "possible_values": []
                }
            },
            "tanh_52": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "v_proj + u_proj_expand",
                    "possible_values": []
                }
            },
            "tanh_54": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "self.film(x=v_proj, gammas=u_proj[:, :self.hidden_dim], betas=u_proj[:, self.hidden_dim:])",
                    "possible_values": []
                }
            },
            "Conv2d_221": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "stem_module_dim",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "rel_image_dim",
                    "possible_values": [
                        [
                            "24",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "feats",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats1, feats2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "cat_397": {
                "variable": {
                    "value": "feats",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats, self.coords.unsqueeze(0).repeat(N, 1, 1, 1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "MaxPool2d_263": {
                "variable": {
                    "value": "self.pool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(module_H, module_W)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(module_H, module_W)",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "feats",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats, self.coords.unsqueeze(0).repeat(N, 1, 1, 1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "feats2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats, q_feats.unsqueeze(1).repeat(1, H * W, 1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_251": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "stem_module_dim + 2 * use_coords + rnn_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "stem_module_dim",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "cl_kernel_size",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "cl_kernel_size // 2",
                    "possible_values": []
                }
            },
            "Conv2d_256": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "stem_module_dim + 2 * use_coords",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "stem_module_dim",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "cl_kernel_size",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "cl_kernel_size // 2",
                    "possible_values": []
                }
            },
            "cat_305": {
                "variable": {
                    "value": "feats",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats, self.coords.unsqueeze(0).repeat(N, 1, 1, 1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "feats",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats, q_feats]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_316": {
                "variable": {
                    "value": "feats",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats, self.coords.unsqueeze(0).repeat(N, 1, 1, 1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "feats",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats, q_feats]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "feats",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q_feats, feats]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "vr/models/film_gen.py": {
        "torch": {
            "Embedding_72": {
                "variable": {
                    "value": "self.encoder_embed",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "encoder_vocab_size",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "wordvec_dim",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.decoder_linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * self.num_dir",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_modules * self.cond_feat_size",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.encoder_bow_linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "wordvec_dim",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim * self.num_dir",
                    "possible_values": []
                }
            },
            "BatchNorm1d_84": {
                "variable": {
                    "value": "self.output_bn",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.cond_feat_size",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mean_129": {
                "variable": {
                    "value": "embed",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "possible_values": [
                        [
                            "self.encoder_embed(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(embed, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GRU_212": {
                "*args": {
                    "value": "hidden_dim1",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_132": {
                "*size": {
                    "value": "L",
                    "possible_values": [
                        [
                            "self.rnn_num_layers",
                            "Attribute"
                        ],
                        [
                            "self.encoder_rnn.num_layers * self.num_dir",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "possible_values": [
                        [
                            "self.hidden_dim",
                            "Attribute"
                        ],
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "LSTM_215": {
                "*args": {
                    "value": "hidden_dim1",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_134": {
                "*size": {
                    "value": "L",
                    "possible_values": [
                        [
                            "self.rnn_num_layers",
                            "Attribute"
                        ],
                        [
                            "self.encoder_rnn.num_layers * self.num_dir",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "possible_values": [
                        [
                            "self.hidden_dim",
                            "Attribute"
                        ],
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_151": {
                "*size": {
                    "value": "L",
                    "possible_values": [
                        [
                            "self.rnn_num_layers",
                            "Attribute"
                        ],
                        [
                            "self.encoder_rnn.num_layers * self.num_dir",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "possible_values": [
                        [
                            "self.hidden_dim",
                            "Attribute"
                        ],
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_155": {
                "*size": {
                    "value": "L",
                    "possible_values": [
                        [
                            "self.rnn_num_layers",
                            "Attribute"
                        ],
                        [
                            "self.encoder_rnn.num_layers * self.num_dir",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "possible_values": [
                        [
                            "self.hidden_dim",
                            "Attribute"
                        ],
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "vr/models/filmed_net.py": {
        "torch": {
            "Conv2d_267": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim + self.num_cond_maps + (num_extra_channels if self.extra_channel_freq >= 2 else 0)",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.kernel_size // 2",
                    "possible_values": []
                }
            },
            "relu_313": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.classifier(final_module_output)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "torch.cat([out, cond_maps], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([out, extra_channels], 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.film(out, gammas, betas)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.film(out, gammas, betas)",
                            "Call"
                        ],
                        [
                            "self.drop(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.film(out, gammas, betas)",
                            "Call"
                        ],
                        [
                            "x + out",
                            "BinOp"
                        ],
                        [
                            "self.film(out, gammas, betas)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_331": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "linspace_332": {
                "variable": {
                    "value": "x_coord_row",
                    "possible_values": []
                },
                "start": {
                    "value": "start",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "n",
                    "possible_values": []
                }
            },
            "linspace_333": {
                "variable": {
                    "value": "y_coord_row",
                    "possible_values": []
                },
                "start": {
                    "value": "start",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "m",
                    "possible_values": []
                }
            },
            "linspace_335": {
                "variable": {
                    "value": "x_coord_row",
                    "possible_values": []
                },
                "start": {
                    "value": "start",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "n",
                    "possible_values": []
                }
            },
            "linspace_336": {
                "variable": {
                    "value": "y_coord_row",
                    "possible_values": []
                },
                "start": {
                    "value": "start",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "m",
                    "possible_values": []
                }
            },
            "is_available_110": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "split_173": {
                "variable": {
                    "value": "(gammas, betas)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "film[:, :, :2 * self.module_dim]",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.module_dim",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, batch_coords]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_193": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "final_module_output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[final_module_output, batch_coords]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_264": {
                "variable": {
                    "value": "self.input_proj",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim + (num_extra_channels if self.extra_channel_freq >= 1 else 0)",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.with_input_proj",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.with_input_proj // 2",
                    "possible_values": []
                }
            },
            "BatchNorm2d_274": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "not self.with_cond[0] or self.batchnorm_affine",
                    "possible_values": []
                }
            },
            "Dropout2d_278": {
                "variable": {
                    "value": "self.drop",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "possible_values": []
                }
            },
            "relu_296": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_proj(x)",
                    "possible_values": []
                }
            },
            "cat_301": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, cond_maps]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_303": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, extra_channels]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_339": {
                "tensors": {
                    "value": "[x_coords, y_coords]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_295": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, extra_channels]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_111": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.module_dim",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.module_dim",
                    "possible_values": []
                }
            },
            "ones_114": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.module_dim",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.module_dim",
                    "possible_values": []
                }
            },
            "zeros_194": {
                "*size": {
                    "value": "feats.size()",
                    "possible_values": []
                }
            },
            "unsqueeze_194": {
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "*size": {
                    "value": "feats.size()",
                    "possible_values": []
                }
            },
            "unsqueeze_197": {
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "vr/models/layers.py": {
        "torch": {
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_dim",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.proj",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_inputs * dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj(out)",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn2",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.proj",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "res + out",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(res + out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.proj(out))",
                            "Call"
                        ],
                        [
                            "self.res_block(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_196": {
                "in_features": {
                    "value": "prev_dim",
                    "possible_values": [
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "module_C * module_H * module_W",
                            "BinOp"
                        ],
                        [
                            "next_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_answers",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "in_features": {
                    "value": "prev_dim",
                    "possible_values": [
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "module_C * module_H * module_W",
                            "BinOp"
                        ],
                        [
                            "next_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "module_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_136": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BatchNorm2d_144": {
                "num_features": {
                    "value": "feature_dim",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "prev_dim",
                    "possible_values": [
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "module_C * module_H * module_W",
                            "BinOp"
                        ],
                        [
                            "next_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "module_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "module_C",
                    "possible_values": [
                        [
                            "proj_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "proj_dim",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_163": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_179": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "AvgPool2d_180": {
                "kernel_size": {
                    "value": "module_H // 2",
                    "possible_values": []
                },
                "stride": {
                    "value": "module_W // 2",
                    "possible_values": []
                }
            },
            "Linear_189": {
                "in_features": {
                    "value": "prev_dim",
                    "possible_values": [
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "module_C * module_H * module_W",
                            "BinOp"
                        ],
                        [
                            "next_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "next_dim",
                    "possible_values": []
                }
            },
            "ReLU_192": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "relu_38": {
                "input": {
                    "value": "self.conv1(x)",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "prev_dim",
                    "possible_values": [
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "module_C * module_H * module_W",
                            "BinOp"
                        ],
                        [
                            "next_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "module_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "0 if module_H % pool_size[0] == 0 and module_W % pool_size[1] == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_108": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "in_channels": {
                    "value": "prev_dim",
                    "possible_values": [
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "feature_dim",
                            "Name"
                        ],
                        [
                            "module_dim",
                            "Name"
                        ],
                        [
                            "module_C * module_H * module_W",
                            "BinOp"
                        ],
                        [
                            "next_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "module_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "0 if module_H % pool_size[0] == 0 and module_W % pool_size[1] == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_126": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BatchNorm2d_162": {
                "num_features": {
                    "value": "proj_dim",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_191": {
                "num_features": {
                    "value": "next_dim",
                    "possible_values": []
                }
            },
            "Dropout_194": {
                "p": {
                    "value": "p",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "num_features": {
                    "value": "module_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_125": {
                "num_features": {
                    "value": "module_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "vr/models/module_net.py": {
        "torch": {
            "cat_146": {
                "variable": {
                    "value": "final_module_outputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_module_outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_module_outputs, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_module_outputs, 0)",
                            "Call"
                        ],
                        [
                            "self._forward_modules_json(feats, program)",
                            "Call"
                        ],
                        [
                            "self._forward_modules_ints(feats, program)",
                            "Call"
                        ],
                        [
                            "self._forward_modules_probs(feats, program)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Tensor_186": {
                "variable": {
                    "value": "self.used_fns",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "final_module_outputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_module_outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_module_outputs, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_module_outputs, 0)",
                            "Call"
                        ],
                        [
                            "self._forward_modules_json(feats, program)",
                            "Call"
                        ],
                        [
                            "self._forward_modules_ints(feats, program)",
                            "Call"
                        ],
                        [
                            "self._forward_modules_probs(feats, program)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "is_tensor_204": {
                "obj": {
                    "value": "program",
                    "possible_values": []
                }
            }
        }
    },
    "vr/models/seq2seq.py": {
        "torch": {
            "Embedding_31": {
                "variable": {
                    "value": "self.encoder_embed",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "encoder_vocab_size",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "wordvec_dim",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_32": {
                "variable": {
                    "value": "self.encoder_rnn",
                    "possible_values": []
                },
                "*args": {
                    "value": "wordvec_dim",
                    "possible_values": []
                },
                "dropout": {
                    "value": "rnn_dropout",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Embedding_34": {
                "variable": {
                    "value": "self.decoder_embed",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "decoder_vocab_size",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "wordvec_dim",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_35": {
                "variable": {
                    "value": "self.decoder_rnn",
                    "possible_values": []
                },
                "*args": {
                    "value": "wordvec_dim + hidden_dim",
                    "possible_values": []
                },
                "dropout": {
                    "value": "rnn_dropout",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LSTM_37": {
                "variable": {
                    "value": "self.decoder_rnn_new",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_dim",
                    "possible_values": []
                },
                "dropout": {
                    "value": "rnn_dropout",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.decoder_linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "decoder_vocab_size",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_100": {
                "variable": {
                    "value": "rnn_input",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_repeat, y_embed]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cross_entropy_135": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "out_masked",
                    "possible_values": [
                        [
                            "output_logprobs[out_mask].view(-1, V_out)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_masked",
                    "possible_values": [
                        [
                            "y[y_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_183": {
                "variable": {
                    "value": "probs",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.view(N, -1)",
                    "possible_values": []
                }
            },
            "backward_226": {
                "tensors": {
                    "value": "self.multinomial_outputs",
                    "possible_values": []
                },
                "grad_tensors": {
                    "value": "grad_output",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "retain_variables": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "*size": {
                    "value": "L",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ],
                        [
                            "y.size(0) if N is None and y is not None else N",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_85": {
                "*size": {
                    "value": "L",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ],
                        [
                            "y.size(0) if N is None and y is not None else N",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_144": {
                "*size": {
                    "value": "L",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ],
                        [
                            "y.size(0) if N is None and y is not None else N",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_145": {
                "*size": {
                    "value": "L",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ],
                        [
                            "y.size(0) if N is None and y is not None else N",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Categorical_188": {
                "variable": {
                    "value": "distr",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "possible_values": [
                        [
                            "F.softmax(logprobs.view(N, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_102": {
                "*size": {
                    "value": "L",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ],
                        [
                            "y.size(0) if N is None and y is not None else N",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_104": {
                "*size": {
                    "value": "L",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ],
                        [
                            "y.size(0) if N is None and y is not None else N",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "vr/utils.py": {
        "torch": {
            "load_46": {
                "f": {
                    "value": "path",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            }
        }
    }
}