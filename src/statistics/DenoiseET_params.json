{
    "bert/modeling.py": {
        "torch": {
            "BERTLayerNorm_113": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_118": {
                    "variable": {
                        "value": "self.gamma",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.ones(config.hidden_size)",
                        "possible_values": []
                    }
                },
                "Parameter_119": {
                    "variable": {
                        "value": "self.beta",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(config.hidden_size)",
                        "possible_values": []
                    }
                },
                "self.variance_epsilon": {
                    "value": "variance_epsilon",
                    "possible_values": [
                        [
                            "1e-12",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BERTEmbeddings_128": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Embedding_133": {
                    "variable": {
                        "value": "self.word_embeddings",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "config.vocab_size",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "Embedding_134": {
                    "variable": {
                        "value": "self.position_embeddings",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "config.max_position_embeddings",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "Embedding_135": {
                    "variable": {
                        "value": "self.token_type_embeddings",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "config.type_vocab_size",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "Dropout_140": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.hidden_dropout_prob",
                        "possible_values": []
                    }
                }
            },
            "BERTSelfAttention_159": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_170": {
                    "variable": {
                        "value": "self.query",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.all_head_size",
                        "possible_values": []
                    }
                },
                "Linear_171": {
                    "variable": {
                        "value": "self.key",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.all_head_size",
                        "possible_values": []
                    }
                },
                "Linear_172": {
                    "variable": {
                        "value": "self.value",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.all_head_size",
                        "possible_values": []
                    }
                },
                "Dropout_174": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.attention_probs_dropout_prob",
                        "possible_values": []
                    }
                }
            },
            "BERTSelfOutput_210": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_213": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "Dropout_215": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.hidden_dropout_prob",
                        "possible_values": []
                    }
                }
            },
            "BERTAttention_224": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "BERTIntermediate_236": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_239": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.intermediate_size",
                        "possible_values": []
                    }
                },
                "self.intermediate_act_fn": {
                    "value": "gelu",
                    "possible_values": []
                }
            },
            "BERTOutput_248": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_251": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.intermediate_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "Dropout_253": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.hidden_dropout_prob",
                        "possible_values": []
                    }
                }
            },
            "BERTLayer_262": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "BERTEncoder_276": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_280": {
                    "variable": {
                        "value": "self.layer",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[copy.deepcopy(layer) for _ in range(config.num_hidden_layers)]",
                        "possible_values": []
                    }
                }
            },
            "BERTPooler_290": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_293": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "Tanh_294": {
                    "variable": {
                        "value": "self.activation",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "BertModel_305": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "BertForSequenceClassification_360": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Dropout_384": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.hidden_dropout_prob",
                        "possible_values": []
                    }
                },
                "Linear_385": {
                    "variable": {
                        "value": "self.classifier",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_labels",
                        "possible_values": []
                    }
                }
            },
            "BertForQuestionAnswering_411": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_435": {
                    "variable": {
                        "value": "self.qa_outputs",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "2",
                        "possible_values": []
                    }
                }
            },
            "arange_144": {
                "variable": {
                    "value": "position_ids",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "possible_values": []
                }
            },
            "matmul_191": {
                "variable": {
                    "value": "attention_scores",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "possible_values": []
                }
            },
            "matmul_203": {
                "variable": {
                    "value": "context_layer",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_147": {
                "variable": {
                    "value": "token_type_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "possible_values": []
                }
            },
            "ones_like_335": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "possible_values": []
                }
            },
            "zeros_like_337": {
                "variable": {
                    "value": "token_type_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_405": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_466": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_34": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "possible_values": []
                }
            },
            "ones_118": {
                "*size": {
                    "value": "config.hidden_size",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "*size": {
                    "value": "config.hidden_size",
                    "possible_values": []
                }
            },
            "sqrt_125": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "possible_values": []
                }
            },
            "Softmax_197": {
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "bert/optimization.py": {
        "torch": {
            "BERTAdam_44": {
                "base_class_0": {
                    "value": "torch.optim.Optimizer",
                    "possible_values": []
                }
            },
            "cos_25": {
                "input": {
                    "value": "math.pi * x",
                    "possible_values": []
                }
            },
            "zeros_like_110": {
                "variable": {
                    "value": "state[exp_avg]",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            },
            "zeros_like_112": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            },
            "zeros_like_139": {
                "variable": {
                    "value": "state[next_m]",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            },
            "zeros_like_141": {
                "variable": {
                    "value": "state[next_v]",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            },
            "clip_grad_norm__148": {
                "parameters": {
                    "value": "p",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "possible_values": []
                }
            }
        }
    },
    "bert/run_classifier.py": {
        "torch": {
            "device_420": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_421": {
                "variable": {
                    "value": "n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_423": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_437": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_480": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "BertForSequenceClassification(bert_config, len(label_list))",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "tensor_505": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in train_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_506": {
                "variable": {
                    "value": "all_input_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in train_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_507": {
                "variable": {
                    "value": "all_segment_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in train_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_508": {
                "variable": {
                    "value": "all_label_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_510": {
                "variable": {
                    "value": "train_data",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "DataLoader_515": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "tensor_549": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_550": {
                "variable": {
                    "value": "all_input_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_551": {
                "variable": {
                    "value": "all_segment_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_552": {
                "variable": {
                    "value": "all_label_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_554": {
                "variable": {
                    "value": "eval_data",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "DataLoader_559": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "manual_seed_all_439": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DataParallel_483": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "BertForSequenceClassification(bert_config, len(label_list))",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_512": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_514": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_556": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_558": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_476": {
                "f": {
                    "value": "args.init_checkpoint",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "is_available_420": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "data_utils.py": {
        "torch": {
            "from_numpy_48": {
                "variable": {
                    "value": "torch_feed_dict[k]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "ndarray": {
                    "value": "v",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "ndarray": {
                    "value": "v",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "ndarray": {
                    "value": "v",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "ndarray": {
                    "value": "v",
                    "possible_values": []
                }
            }
        }
    },
    "denoising_models.py": {
        "torch": {
            "Dropout_29": {
                "variable": {
                    "value": "self.mention_dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "args.mention_dropout",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.input_dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "args.input_dropout",
                    "possible_values": []
                }
            },
            "LSTM_47": {
                "variable": {
                    "value": "self.lstm",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embed_dim + 50",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.token_mask",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "possible_values": []
                }
            },
            "Sigmoid_54": {
                "variable": {
                    "value": "self.sigmoid_fn",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LSTM_60": {
                "variable": {
                    "value": "self.lstm_label",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embed_dim",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_62": {
                "variable": {
                    "value": "self.cls_loss_func",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "torch.Tensor([1.0]).cuda()",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "token_embed",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(token_embed, token_mask_embed)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Embedding_126": {
                "variable": {
                    "value": "self.type_embedding",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.type_vocab_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.type_embed_dim",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.pad_idx",
                    "possible_values": []
                }
            },
            "Embedding_127": {
                "variable": {
                    "value": "self.def_embedding",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.def_vocab_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.def_embed_dim",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.def_pad_idx",
                    "possible_values": []
                }
            },
            "LSTM_128": {
                "variable": {
                    "value": "self.lstm_def",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.def_embed_dim",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_135": {
                "variable": {
                    "value": "type_vec",
                    "possible_values": []
                },
                "input": {
                    "value": "type_embed",
                    "possible_values": [
                        [
                            "self.type_embedding(type_idx)",
                            "Call"
                        ],
                        [
                            "self.type_embedding(type_idx)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "def_vec",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "max_n_types",
                    "possible_values": []
                },
                "dtype": {
                    "value": "def_dim",
                    "possible_values": []
                }
            },
            "sum_144": {
                "variable": {
                    "value": "def_vec",
                    "possible_values": []
                },
                "input": {
                    "value": "def_vec",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, max_n_types, def_dim).cuda()",
                            "Call"
                        ],
                        [
                            "torch.sum(def_vec, 1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(batch_size, max_n_types, def_dim).cuda()",
                            "Call"
                        ],
                        [
                            "torch.sum(def_vec, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sent_vec, type_vec, def_vec)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Embedding_162": {
                "variable": {
                    "value": "self.type_embedding",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.pad_idx",
                    "possible_values": []
                }
            },
            "Linear_165": {
                "variable": {
                    "value": "self.cls_decoder",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.output_dim + self.embed_dim + self.def_embed_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Embedding_166": {
                "variable": {
                    "value": "self.def_embedding",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.def_vocab_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.def_embed_dim",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.def_pad_idx",
                    "possible_values": []
                }
            },
            "LSTM_167": {
                "variable": {
                    "value": "self.lstm_def",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.def_embed_dim",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_170": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sum_177": {
                "variable": {
                    "value": "type_vec",
                    "possible_values": []
                },
                "input": {
                    "value": "type_embed",
                    "possible_values": [
                        [
                            "self.type_embedding(type_idx)",
                            "Call"
                        ],
                        [
                            "self.type_embedding(type_idx)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "def_vec",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "max_n_types",
                    "possible_values": []
                },
                "dtype": {
                    "value": "def_dim",
                    "possible_values": []
                }
            },
            "sum_186": {
                "variable": {
                    "value": "def_vec",
                    "possible_values": []
                },
                "input": {
                    "value": "def_vec",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, max_n_types, def_dim).cuda()",
                            "Call"
                        ],
                        [
                            "torch.sum(def_vec, 1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(batch_size, max_n_types, def_dim).cuda()",
                            "Call"
                        ],
                        [
                            "torch.sum(def_vec, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sent_vec, type_vec, def_vec)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LSTM_51": {
                "variable": {
                    "value": "self.lstm_mention",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embed_dim",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "mention_embed",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(span_cnn_embed, mention_embed)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_91": {
                "variable": {
                    "value": "mention_embed",
                    "possible_values": []
                },
                "input": {
                    "value": "mention_embed",
                    "possible_values": [
                        [
                            "self.weighted_sum(feed_dict['mention_embed'])",
                            "Call"
                        ],
                        [
                            "torch.sum(mention_embed, dim=1)",
                            "Call"
                        ],
                        [
                            "self.mention_dropout(mention_embed)",
                            "Call"
                        ],
                        [
                            "torch.cat((span_cnn_embed, mention_embed), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_rep, mention_embed, mention_headword_embed)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_rep, mention_embed)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_191": {
                "*size": {
                    "value": "(cls_logits.size()[0], self.answer_num)",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "load_530": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file_name",
                    "possible_values": [
                        [
                            "'{0:s}/{1:s}.pt'.format(save_dir, reload_model_name)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}.pt'.format(save_dir, model_id)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}.pt'.format(save_dir, reload_model_name)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}.pt'.format(save_dir, model_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_556": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file_name",
                    "possible_values": [
                        [
                            "'{0:s}/{1:s}.pt'.format(save_dir, reload_model_name)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}.pt'.format(save_dir, model_id)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}.pt'.format(save_dir, reload_model_name)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}.pt'.format(save_dir, model_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_182": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "possible_values": []
                }
            },
            "save_266": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "'{0:s}/{1:s}.pt'.format(constant.EXP_ROOT, args.model_id)",
                    "possible_values": []
                }
            },
            "Adam_316": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "possible_values": []
                }
            },
            "save_404": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "'{0:s}/{1:s}.pt'.format(constant.EXP_ROOT, args.model_id)",
                    "possible_values": []
                }
            },
            "manual_seed_725": {
                "seed": {
                    "value": "config.seed",
                    "possible_values": []
                }
            },
            "save_262": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "save_fname",
                    "possible_values": [
                        [
                            "'{0:s}/{1:s}_best.pt'.format(constant.EXP_ROOT, args.model_id)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}_{2:d}.pt'.format(constant.EXP_ROOT, args.model_id, batch_num)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}_best.pt'.format(constant.EXP_ROOT, args.model_id)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}_{2:d}.pt'.format(constant.EXP_ROOT, args.model_id, batch_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_400": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "save_fname",
                    "possible_values": [
                        [
                            "'{0:s}/{1:s}_best.pt'.format(constant.EXP_ROOT, args.model_id)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}_{2:d}.pt'.format(constant.EXP_ROOT, args.model_id, batch_num)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}_best.pt'.format(constant.EXP_ROOT, args.model_id)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}_{2:d}.pt'.format(constant.EXP_ROOT, args.model_id, batch_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_171": {
                "f": {
                    "value": "args.bert_param_path",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "save_250": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "save_fname",
                    "possible_values": [
                        [
                            "'{0:s}/{1:s}_best.pt'.format(constant.EXP_ROOT, args.model_id)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}_{2:d}.pt'.format(constant.EXP_ROOT, args.model_id, batch_num)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}_best.pt'.format(constant.EXP_ROOT, args.model_id)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}_{2:d}.pt'.format(constant.EXP_ROOT, args.model_id, batch_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_305": {
                "f": {
                    "value": "args.bert_param_path",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "save_388": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "save_fname",
                    "possible_values": [
                        [
                            "'{0:s}/{1:s}_best.pt'.format(constant.EXP_ROOT, args.model_id)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}_{2:d}.pt'.format(constant.EXP_ROOT, args.model_id, batch_num)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}_best.pt'.format(constant.EXP_ROOT, args.model_id)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}_{2:d}.pt'.format(constant.EXP_ROOT, args.model_id, batch_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_200": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "'{0:s}/{1:s}.pt'.format(constant.EXP_ROOT, args.model_id)",
                    "possible_values": []
                }
            },
            "save_334": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "'{0:s}/{1:s}.pt'.format(constant.EXP_ROOT, args.model_id)",
                    "possible_values": []
                }
            }
        }
    },
    "model_utils.py": {
        "torch": {
            "Sigmoid_21": {
                "variable": {
                    "value": "sigmoid_fn",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MultiSimpleDecoder_218": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_225": {
                    "variable": {
                        "value": "self.linear",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "output_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "constant.ANSWER_NUM_DICT['open']",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "MultiSimpleDecoderBinary_241": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_248": {
                    "variable": {
                        "value": "self.linear",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "output_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "SimpleDecoder_262": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.answer_num": {
                    "value": "answer_num",
                    "possible_values": []
                },
                "Linear_266": {
                    "variable": {
                        "value": "self.linear",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "output_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "answer_num",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "CNN_273": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv1d_276": {
                    "variable": {
                        "value": "self.conv1d",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "100",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "50",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "5",
                        "possible_values": []
                    }
                },
                "Embedding_277": {
                    "variable": {
                        "value": "self.char_W",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "115",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "100",
                        "possible_values": []
                    }
                }
            },
            "SelfAttentiveSum_288": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_295": {
                    "variable": {
                        "value": "self.key_maker",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "output_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "hidden_dim",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ReLU_296": {
                    "variable": {
                        "value": "self.key_rel",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "self.hidden_dim": {
                    "value": "hidden_dim",
                    "possible_values": []
                },
                "Linear_298": {
                    "variable": {
                        "value": "self.key_output",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "hidden_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Softmax_299": {
                    "variable": {
                        "value": "self.key_softmax",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "_Loss_327": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "CNNReducer_434": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_437": {
                    "variable": {
                        "value": "self.conv2d_1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "1",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "8",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(3, 3)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "(1, 1)",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(1, 1)",
                        "possible_values": []
                    }
                },
                "Conv2d_438": {
                    "variable": {
                        "value": "self.conv2d_2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "8",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "16",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(3, 3)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "(1, 1)",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(1, 1)",
                        "possible_values": []
                    }
                },
                "MaxPool2d_439": {
                    "variable": {
                        "value": "self.pool1",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(4, 2)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "(4, 1)",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "0",
                        "possible_values": []
                    },
                    "ceil_mode": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "MaxPool2d_440": {
                    "variable": {
                        "value": "self.pool2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(4, 2)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "(4, 1)",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "0",
                        "possible_values": []
                    },
                    "ceil_mode": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_441": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "8",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_442": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "16",
                        "possible_values": []
                    }
                }
            },
            "ELMoWeightedSum_457": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_460": {
                    "variable": {
                        "value": "self.gamma",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.randn(1)",
                        "possible_values": []
                    }
                },
                "Parameter_461": {
                    "variable": {
                        "value": "self.S",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.randn(1, 3)",
                        "possible_values": []
                    }
                },
                "Softmax_462": {
                    "variable": {
                        "value": "self.softmax",
                        "possible_values": []
                    },
                    "dim": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "LinearProjection_486": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_features": {
                    "value": "in_features",
                    "possible_values": []
                },
                "self.out_features": {
                    "value": "out_features",
                    "possible_values": []
                },
                "Linear_491": {
                    "variable": {
                        "value": "self.linear",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "in_features",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "out_features",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "MultiRNNoutput2Logits_514": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_521": {
                    "variable": {
                        "value": "self.linear",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "output_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "constant.ANSWER_NUM_DICT['open']",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "RNNDecoderState_535": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Embedding_541": {
                    "variable": {
                        "value": "self.dec_emb",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "constant.ANSWER_NUM_DICT['open'] + 3",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "type_emb_size",
                        "possible_values": [
                            [
                                "300",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "Linear_550": {
                    "variable": {
                        "value": "self.linear",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "constant.ANSWER_NUM_DICT['open'] + 3",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "LogSoftmax_551": {
                    "variable": {
                        "value": "self.softmax",
                        "possible_values": []
                    },
                    "dim": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "self.n_layers": {
                    "value": "n_layers",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._rnn_cell": {
                    "value": "rnn_cell",
                    "possible_values": [
                        [
                            "'lstm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConditionedAttentiveSum_568": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_573": {
                    "variable": {
                        "value": "self.key_maker",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "output_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "hidden_dim",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ReLU_574": {
                    "variable": {
                        "value": "self.key_rel",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "self.hidden_dim": {
                    "value": "hidden_dim",
                    "possible_values": []
                },
                "Softmax_577": {
                    "variable": {
                        "value": "self.key_softmax",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "TypeAttentiveSum_611": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_615": {
                    "variable": {
                        "value": "self.dim_adjuster",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "output_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "hidden_dim",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Bilinear_616": {
                    "variable": {
                        "value": "self.key_maker",
                        "possible_values": []
                    },
                    "in1_features": {
                        "value": "hidden_dim",
                        "possible_values": []
                    },
                    "in2_features": {
                        "value": "hidden_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "self.hidden_dim": {
                    "value": "hidden_dim",
                    "possible_values": []
                }
            },
            "RerankerAttentiveSum_640": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.sent_dim": {
                    "value": "sent_dim",
                    "possible_values": []
                },
                "self.type_emb_dim": {
                    "value": "type_emb_dim",
                    "possible_values": []
                },
                "self.hidden_dim": {
                    "value": "hidden_dim",
                    "possible_values": []
                },
                "Linear_648": {
                    "variable": {
                        "value": "self.linear",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "type_emb_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "hidden_dim",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "ReLU_649": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Softmax_650": {
                    "variable": {
                        "value": "self.key_softmax",
                        "possible_values": []
                    },
                    "dim": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "self.score": {
                    "value": "score",
                    "possible_values": [
                        [
                            "self.bilinear(sent_vec, type_embed).view(batch_size)",
                            "Call"
                        ],
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RerankerSimpleScore_679": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Bilinear_682": {
                    "variable": {
                        "value": "self.bilinear",
                        "possible_values": []
                    },
                    "in1_features": {
                        "value": "sent_dim",
                        "possible_values": []
                    },
                    "in2_features": {
                        "value": "type_emb_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "HighwayNetwork_693": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.n_layers": {
                    "value": "n_layers",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_697": {
                    "variable": {
                        "value": "self.nonlinear",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[nn.Linear(input_dim, input_dim) for _ in range(n_layers)]",
                        "possible_values": []
                    }
                },
                "ModuleList_699": {
                    "variable": {
                        "value": "self.gate",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[nn.Linear(input_dim, input_dim) for _ in range(n_layers)]",
                        "possible_values": []
                    }
                },
                "self.activation": {
                    "value": "activation",
                    "possible_values": []
                },
                "Sigmoid_703": {
                    "variable": {
                        "value": "self.sigmoid",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "LogSigmoid_362": {
                "variable": {
                    "value": "log_sigmoid",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "squeeze_284": {
                "variable": {
                    "value": "cnn_output",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(cnn_rep, 1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "exp_304": {
                "variable": {
                    "value": "X_exp",
                    "possible_values": []
                },
                "input": {
                    "value": "X - X_max",
                    "possible_values": []
                }
            },
            "sum_322": {
                "variable": {
                    "value": "weighted_values",
                    "possible_values": []
                },
                "input": {
                    "value": "weighted_keys * input_embed",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clamp_394": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "relu_449": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv2d_1(x))",
                    "possible_values": []
                }
            },
            "relu_451": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2d_2(x))",
                    "possible_values": []
                }
            },
            "exp_582": {
                "variable": {
                    "value": "X_exp",
                    "possible_values": []
                },
                "input": {
                    "value": "X - X_max",
                    "possible_values": []
                }
            },
            "sum_607": {
                "variable": {
                    "value": "weighted_values",
                    "possible_values": []
                },
                "input": {
                    "value": "weighted_keys * input_embed",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "exp_622": {
                "variable": {
                    "value": "X_exp",
                    "possible_values": []
                },
                "input": {
                    "value": "X - X_max",
                    "possible_values": []
                }
            },
            "sum_636": {
                "variable": {
                    "value": "weighted_values",
                    "possible_values": []
                },
                "input": {
                    "value": "weighted_keys * input_embed",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_675": {
                "variable": {
                    "value": "weighted_vecs",
                    "possible_values": []
                },
                "input": {
                    "value": "weighted_keys * type_embed",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "arange_209": {
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "len(sequence_lengths)",
                    "possible_values": []
                }
            },
            "Bilinear_647": {
                "variable": {
                    "value": "self.key_output",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "hidden_dim",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "hidden_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_701": {
                "variable": {
                    "value": "layer.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0 * torch.ones_like(layer.bias)",
                    "possible_values": []
                }
            },
            "relu_282": {
                "input": {
                    "value": "c",
                    "possible_values": []
                }
            },
            "max_pool1d_283": {
                "input": {
                    "value": "i",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "i.size(2)",
                    "possible_values": []
                }
            },
            "cat_284": {
                "tensors": {
                    "value": "cnn_rep",
                    "possible_values": [
                        [
                            "[F.max_pool1d(i, i.size(2)) for i in conv_output]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_303": {
                "input": {
                    "value": "X",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "randn_460": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "randn_461": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "max_581": {
                "input": {
                    "value": "X",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_621": {
                "input": {
                    "value": "X",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "linear_232": {
                "input": {
                    "value": "inputs",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.linear.weight[:constant.ANSWER_NUM_DICT['wiki'], :]",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.linear.bias[:constant.ANSWER_NUM_DICT['wiki']]",
                    "possible_values": []
                }
            },
            "linear_255": {
                "input": {
                    "value": "inputs",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.linear.weight[:constant.ANSWER_NUM_DICT['wiki'], :]",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.linear.bias",
                    "possible_values": []
                }
            },
            "sum_308": {
                "input": {
                    "value": "X_exp",
                    "possible_values": [
                        [
                            "torch.exp(X - X_max)",
                            "Call"
                        ],
                        [
                            "X_exp * mask",
                            "BinOp"
                        ],
                        [
                            "torch.exp(X - X_max)",
                            "Call"
                        ],
                        [
                            "X_exp * mask",
                            "BinOp"
                        ],
                        [
                            "torch.exp(X - X_max)",
                            "Call"
                        ],
                        [
                            "X_exp * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "linear_528": {
                "input": {
                    "value": "inputs",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.linear.weight[:constant.ANSWER_NUM_DICT['wiki'], :]",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.linear.bias",
                    "possible_values": []
                }
            },
            "sum_586": {
                "input": {
                    "value": "X_exp",
                    "possible_values": [
                        [
                            "torch.exp(X - X_max)",
                            "Call"
                        ],
                        [
                            "X_exp * mask",
                            "BinOp"
                        ],
                        [
                            "torch.exp(X - X_max)",
                            "Call"
                        ],
                        [
                            "X_exp * mask",
                            "BinOp"
                        ],
                        [
                            "torch.exp(X - X_max)",
                            "Call"
                        ],
                        [
                            "X_exp * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_626": {
                "input": {
                    "value": "X_exp",
                    "possible_values": [
                        [
                            "torch.exp(X - X_max)",
                            "Call"
                        ],
                        [
                            "X_exp * mask",
                            "BinOp"
                        ],
                        [
                            "torch.exp(X - X_max)",
                            "Call"
                        ],
                        [
                            "X_exp * mask",
                            "BinOp"
                        ],
                        [
                            "torch.exp(X - X_max)",
                            "Call"
                        ],
                        [
                            "X_exp * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_665": {
                "variable": {
                    "value": "k",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_x * type_embed",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Linear_697": {
                "in_features": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "possible_values": []
                }
            },
            "Linear_699": {
                "in_features": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "possible_values": []
                }
            },
            "linear_235": {
                "input": {
                    "value": "inputs",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.linear.weight[:constant.ANSWER_NUM_DICT['kb'], :]",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.linear.bias[:constant.ANSWER_NUM_DICT['kb']]",
                    "possible_values": []
                }
            },
            "linear_257": {
                "input": {
                    "value": "inputs",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.linear.weight[:constant.ANSWER_NUM_DICT['kb'], :]",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.linear.bias",
                    "possible_values": []
                }
            },
            "linear_530": {
                "input": {
                    "value": "inputs",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.linear.weight[:constant.ANSWER_NUM_DICT['kb'], :]",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.linear.bias",
                    "possible_values": []
                }
            },
            "sum_667": {
                "variable": {
                    "value": "k",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_x * type_embed",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sqrt_668": {
                "variable": {
                    "value": "tgt_x_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(tgt_x * tgt_x, 2)",
                    "possible_values": []
                }
            },
            "sqrt_669": {
                "variable": {
                    "value": "type_embed_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(type_embed * type_embed, 2)",
                    "possible_values": []
                }
            },
            "ones_like_701": {
                "input": {
                    "value": "layer.bias",
                    "possible_values": []
                }
            },
            "sum_668": {
                "input": {
                    "value": "tgt_x * tgt_x",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sum_669": {
                "input": {
                    "value": "type_embed * type_embed",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "ModelBase_24": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "BCEWithLogitsLoss_29": {
                    "variable": {
                        "value": "self.loss_func",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "pack_padded_sequence_33": {
                "variable": {
                    "value": "packed_sequence_input",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_inputs",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sorted_sequence_lengths.data.long().tolist()",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_37": {
                "variable": {
                    "value": "(unpacked_sequence_tensor, _)",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_sequence_output",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Tensor_54": {
                "variable": {
                    "value": "comparison_tensor",
                    "possible_values": []
                }
            },
            "sum_57": {
                "variable": {
                    "value": "gen_target_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_targets",
                    "possible_values": [
                        [
                            "targets[:, :gen_cutoff]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "fine_target_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "fine_targets",
                    "possible_values": [
                        [
                            "targets[:, gen_cutoff:fine_cutoff]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout_99": {
                "variable": {
                    "value": "self.mention_dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "args.mention_dropout",
                    "possible_values": []
                }
            },
            "Dropout_100": {
                "variable": {
                    "value": "self.input_dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "args.input_dropout",
                    "possible_values": []
                }
            },
            "LSTM_121": {
                "variable": {
                    "value": "self.lstm",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embed_dim + 50",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.token_mask",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "possible_values": []
                }
            },
            "Sigmoid_130": {
                "variable": {
                    "value": "self.sigmoid_fn",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "token_embed",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(token_embed, token_mask_embed)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Dropout_186": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "self.bert_config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "squeeze_61": {
                "variable": {
                    "value": "gen_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nonzero(torch.min(gen_target_sum.data, comparison_tensor))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "squeeze_68": {
                "variable": {
                    "value": "fine_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nonzero(torch.min(fine_target_sum.data, comparison_tensor))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LSTM_126": {
                "variable": {
                    "value": "self.lstm_mention",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embed_dim",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "mention_embed",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(span_cnn_embed, mention_embed)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_160": {
                "variable": {
                    "value": "mention_embed",
                    "possible_values": []
                },
                "input": {
                    "value": "mention_embed",
                    "possible_values": [
                        [
                            "self.weighted_sum(feed_dict['mention_embed'])",
                            "Call"
                        ],
                        [
                            "torch.sum(mention_embed, dim=1)",
                            "Call"
                        ],
                        [
                            "self.mention_dropout(mention_embed)",
                            "Call"
                        ],
                        [
                            "torch.cat((span_cnn_embed, mention_embed), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_rep, mention_embed, mention_headword_embed)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_rep, mention_embed)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_60": {
                "input": {
                    "value": "gen_target_sum.data",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "fine_target_sum.data",
                    "possible_values": []
                }
            },
            "squeeze_83": {
                "variable": {
                    "value": "finer_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nonzero(torch.min(torch.sum(finer_targets, 1).data, comparison_tensor))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "nonzero_61": {
                "input": {
                    "value": "torch.min(gen_target_sum.data, comparison_tensor)",
                    "possible_values": []
                }
            },
            "nonzero_68": {
                "input": {
                    "value": "torch.min(fine_target_sum.data, comparison_tensor)",
                    "possible_values": []
                }
            },
            "sum_82": {
                "input": {
                    "value": "finer_targets",
                    "possible_values": [
                        [
                            "targets[:, fine_cutoff:final_cutoff]",
                            "Subscript"
                        ],
                        [
                            "targets[:, fine_cutoff:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "min_61": {
                "input": {
                    "value": "gen_target_sum.data",
                    "possible_values": []
                }
            },
            "min_68": {
                "input": {
                    "value": "fine_target_sum.data",
                    "possible_values": []
                }
            },
            "nonzero_83": {
                "input": {
                    "value": "torch.min(torch.sum(finer_targets, 1).data, comparison_tensor)",
                    "possible_values": []
                }
            },
            "min_83": {
                "input": {
                    "value": "torch.sum(finer_targets, 1).data",
                    "possible_values": []
                }
            },
            "sum_83": {
                "input": {
                    "value": "finer_targets",
                    "possible_values": [
                        [
                            "targets[:, fine_cutoff:final_cutoff]",
                            "Subscript"
                        ],
                        [
                            "targets[:, fine_cutoff:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    }
}