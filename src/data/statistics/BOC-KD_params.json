{
    "models/Densenet.py": {
        "torch": {
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "interChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * growthRate",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "interChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * growthRate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "interChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * growthRate",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growthRate",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growthRate",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOutChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(nChannels * reduction))",
                            "Call"
                        ],
                        [
                            "int(math.floor(nChannels * reduction))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_72": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(F.avg_pool2d(F.relu(self.bn1(x_3)), 8))",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_129": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nClasses",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_156": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.avg_pool2d(F.relu(self.bn1(x_3)), 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_277": {
                "variable": {
                    "value": "Teacher_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weights * Combined_student_outs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_277": {
                "variable": {
                    "value": "Teacher_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_46": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_47": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_59": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_71": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_156": {
                "input": {
                    "value": "F.relu(self.bn1(x_3))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_178": {
                "module": {
                    "value": "self.BaseNet.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_270": {
                "variable": {
                    "value": "Combined_student_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Combined_student_outs, Final_out.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_156": {
                "input": {
                    "value": "self.bn1(x_3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_214": {
                "module": {
                    "value": "Student_M.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/EfficientNet.py": {
        "torch": {
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.se",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "self.features_stage_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features_stage_1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_221": {
                "variable": {
                    "value": "self.features_stage_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features_stage_2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_222": {
                "variable": {
                    "value": "self.features_stage_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features_stage_3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_224": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(dropout_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_368": {
                "variable": {
                    "value": "Teacher_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weights * Combined_student_outs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_368": {
                "variable": {
                    "value": "Teacher_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_420": {
                "variable": {
                    "value": "Overall_model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../models/pretrained_weights/Efficientnet/efficientnet-b0.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_114": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_423": {
                "variable": {
                    "value": "Overall_model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../models/pretrained_weights/Efficientnet/efficientnet-b1.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.BaseNet(x)",
                            "Call"
                        ],
                        [
                            "self.BaseNet(x)",
                            "Call"
                        ],
                        [
                            "self.BaseNet(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ZeroPad2d_45": {
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_padding(kernel_size, stride)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_61": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduced_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(1, int(in_planes / reduction_ratio))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "reduced_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(1, int(in_planes / reduction_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes * expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_225": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_226": {
                "in_features": {
                    "value": "last_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_round_filters(1280, width_mult)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataParallel_285": {
                "module": {
                    "value": "self.BaseNet.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_361": {
                "variable": {
                    "value": "Combined_student_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Combined_student_outs, Final_out.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_426": {
                "variable": {
                    "value": "Overall_model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../models/pretrained_weights/Efficientnet/efficientnet-b2.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_429": {
                "variable": {
                    "value": "Overall_model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../models/pretrained_weights/Efficientnet/efficientnet-b3.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_305": {
                "module": {
                    "value": "Student_M.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_432": {
                "variable": {
                    "value": "Overall_model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../models/pretrained_weights/Efficientnet/efficientnet-b4.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_435": {
                "variable": {
                    "value": "Overall_model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../models/pretrained_weights/Efficientnet/efficientnet-b5.pth",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/ResNet_cifar.py": {
        "torch": {
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x3, x3.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_104": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "depth_channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_119": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "avg_pool2d_137": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3(x2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x3.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_261": {
                "variable": {
                    "value": "Teacher_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weights * Combined_student_outs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_261": {
                "variable": {
                    "value": "Teacher_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "DataParallel_177": {
                "module": {
                    "value": "self.BaseNet.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_254": {
                "variable": {
                    "value": "Combined_student_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Combined_student_outs, Final_out.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_198": {
                "module": {
                    "value": "Student_M.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_79": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_83": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/Resnet.py": {
        "torch": {
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_204": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_207": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_208": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_304": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_305": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "depth_channels[2] * int(block.expansion * Expansion_fix[2])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_341": {
                "variable": {
                    "value": "downsample_fix",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(planes, planes * int(Expansion_fix * block.expansion), stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_371": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.avgpool(x3)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x_out, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x_out)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_514": {
                "variable": {
                    "value": "Teacher_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weights * Combined_student_outs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_514": {
                "variable": {
                    "value": "Teacher_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_565": {
                "variable": {
                    "value": "Overall_model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../models/pretrained_weights/Resnet/resnet18.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_237": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_251": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_336": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(int(First_block_fix * self.inplanes), planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_361": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_568": {
                "variable": {
                    "value": "Overall_model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../models/pretrained_weights/Resnet/resnet34.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_424": {
                "module": {
                    "value": "self.BaseNet.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_507": {
                "variable": {
                    "value": "Combined_student_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Combined_student_outs, Final_out.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_571": {
                "variable": {
                    "value": "Overall_model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../models/pretrained_weights/Resnet/resnet50.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_574": {
                "variable": {
                    "value": "Overall_model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../models/pretrained_weights/Resnet/resnet101.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_451": {
                "module": {
                    "value": "Student_M.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_577": {
                "variable": {
                    "value": "Overall_model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../models/pretrained_weights/Resnet/resnet152.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_580": {
                "variable": {
                    "value": "Overall_model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../models/pretrained_weights/Resnext/resnext50_32x4d.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_583": {
                "variable": {
                    "value": "Overall_model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../models/pretrained_weights/Resnext/resnext101_32x8d.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_586": {
                "variable": {
                    "value": "Overall_model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../models/pretrained_weights/Wide_Resnet/wide_resnet50_2.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_589": {
                "variable": {
                    "value": "Overall_model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../models/pretrained_weights/Wide_Resnet/wide_resnet101_2.pth",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_294": {
                "variable": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_295": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.eq(pred_labels, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_402": {
                "variable": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_403": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.eq(pred_labels, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_525": {
                "variable": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "single_model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_609": {
                "variable": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "single_model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_725": {
                "obj": {
                    "value": "model.BaseNet.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(Store_root, run_id, 'Model_saved_states', 'Student_training', 'Student_{}'.format(Current_cfg['Student_model']), 'Epoch_{}'.format(i + 1), 'BaseNet.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_727": {
                "obj": {
                    "value": "model.student_models[Current_cfg['Student_model']].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(Store_root, run_id, 'Model_saved_states', 'Student_training', 'Student_{}'.format(Current_cfg['Student_model']), 'Epoch_{}'.format(i + 1), 'Non_BaseNet.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_747": {
                "obj": {
                    "value": "model.BaseNet.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(Store_root, run_id, 'Model_saved_states', 'Epoch_{}'.format(i + 1), 'BaseNet.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_752": {
                "obj": {
                    "value": "model.BaseNet.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(Store_root, run_id, 'Model_saved_states', 'Epoch_{}'.format(i + 1), 'BaseNet.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_735": {
                "obj": {
                    "value": "model.BaseNet.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(Store_root, run_id, 'Model_saved_states', 'Pretraining', 'Epoch_{}'.format(i + 1), 'BaseNet.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_736": {
                "obj": {
                    "value": "model.student_models[0].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(Store_root, run_id, 'Model_saved_states', 'Pretraining', 'Epoch_{}'.format(i + 1), 'student_0.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_749": {
                "obj": {
                    "value": "model.student_models[g].module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(Store_root, run_id, 'Model_saved_states', 'Epoch_{}'.format(i + 1), 'student_{}.pth'.format(g))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_754": {
                "obj": {
                    "value": "model.student_models[g].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(Store_root, run_id, 'Model_saved_states', 'Epoch_{}'.format(i + 1), 'student_{}.pth'.format(g))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_526": {
                "input": {
                    "value": "torch.eq(pred_labels, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_610": {
                "input": {
                    "value": "torch.eq(pred_labels, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_807": {
                "f": {
                    "value": "os.path.join(Load_path, 'BaseNet.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_814": {
                "f": {
                    "value": "os.path.join(Load_path, 'BaseNet.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_295": {
                "input": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(single_model_output, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(single_model_output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_403": {
                "input": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(single_model_output, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(single_model_output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_809": {
                "f": {
                    "value": "os.path.join(Load_path, 'Non_BaseNet.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_816": {
                "f": {
                    "value": "os.path.join(Load_path, 'Non_BaseNet.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_812": {
                "f": {
                    "value": "os.path.join(Load_path, 'student_{}.pth'.format(g))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_819": {
                "f": {
                    "value": "os.path.join(Load_path, 'student_{}.pth'.format(g))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_526": {
                "input": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(single_model_output, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(single_model_output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_610": {
                "input": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(single_model_output, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(single_model_output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/CUB2011_loader.py": {
        "torch": {}
    },
    "utils/Caltech_loader.py": {
        "torch": {}
    },
    "utils/ImageNet_loader.py": {
        "torch": {}
    },
    "utils/Losses.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_33": {
                "variable": {
                    "value": "student_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "student_pred / self.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_34": {
                "variable": {
                    "value": "teacher_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "teacher_pred / self.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "student_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intermmediate_maps[i][j].size(1)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Teacher_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intermmediate_maps[i][0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/Mobilenet.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_bn(3, 32, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU6_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU6_71": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, hidden_dim, 3, stride, 1, groups=hidden_dim, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "*args": {
                    "value": "nn.Conv2d(inp, inp, 3, stride, 1, groups=inp, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_46": {
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_154": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "in_features": {
                    "value": "self.last_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_89": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_92": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_103": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/Model_builder.py": {
        "torch": {
            "is_available_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/data_builder.py": {
        "torch": {
            "DataLoader_221": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Trainloader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Data.MNIST(Data_root, download=True, train=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "Data.MNIST(os.path.join(Data_root, 'MNIST'), download=False, train=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "Data.CIFAR10(os.path.join(Data_root, 'cifar10'), download=False, train=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "Data.CIFAR10(os.path.join(Data_root, 'cifar10'), download=True, train=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "Data.CIFAR100(Data_root, download=True, train=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "Data.CIFAR100(Data_root, download=False, train=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "Data.FashionMNIST(Data_root, download=True, train=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "Data.FashionMNIST(os.path.join(Data_root, 'Fashion-MNIST'), download=False, train=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "Data.SVHN(os.path.join(Data_root, 'SVHN'), download=False, split='train', transform=img_transform)",
                            "Call"
                        ],
                        [
                            "Data.SVHN(os.path.join(Data_root, 'SVHN'), download=True, split='train', transform=img_transform)",
                            "Call"
                        ],
                        [
                            "Data.STL10(os.path.join(Data_root), download=True, split='train', transform=img_transform)",
                            "Call"
                        ],
                        [
                            "Data.STL10(os.path.join(Data_root), download=False, split='train', transform=img_transform)",
                            "Call"
                        ],
                        [
                            "Caltech256(os.path.join(Data_root, 'Caltech'), train=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "ImageNetDataset(os.path.join(Data_root, 'ImageNet/ILSVRC-train.lmdb'), transform=img_transform)",
                            "Call"
                        ],
                        [
                            "Caltech256(os.path.join(Data_root, 'Caltech'), download=True, train=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "Cub2011(Data_root, train=True, transform=img_transform, download=True)",
                            "Call"
                        ],
                        [
                            "Cub2011(Data_root, train=True, transform=img_transform, download=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Train_configer['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "data_configer['train_cfg']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "Train_configer['shuffle']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "data_configer['train_cfg']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_227": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Testloader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Data.MNIST(Data_root, download=True, train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "Data.MNIST(os.path.join(Data_root, 'MNIST'), download=False, train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "Data.CIFAR10(os.path.join(Data_root, 'cifar10'), download=False, train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "Data.CIFAR10(os.path.join(Data_root, 'cifar10'), download=True, train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "Data.CIFAR100(Data_root, download=True, train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "Data.CIFAR100(Data_root, download=False, train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "Data.FashionMNIST(Data_root, download=True, train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "Data.FashionMNIST(os.path.join(Data_root, 'Fashion-MNIST'), download=False, train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "Data.SVHN(os.path.join(Data_root, 'SVHN'), download=False, split='test', transform=test_transform)",
                            "Call"
                        ],
                        [
                            "Data.SVHN(os.path.join(Data_root, 'SVHN'), download=True, split='test', transform=test_transform)",
                            "Call"
                        ],
                        [
                            "Data.STL10(os.path.join(Data_root), download=True, split='test', transform=test_transform)",
                            "Call"
                        ],
                        [
                            "Data.STL10(os.path.join(Data_root), download=False, split='test', transform=test_transform)",
                            "Call"
                        ],
                        [
                            "Caltech256(os.path.join(Data_root, 'Caltech'), train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "ImageNetDataset(os.path.join(Data_root, 'ImageNet/ILSVRC-val.lmdb'), transform=test_transform)",
                            "Call"
                        ],
                        [
                            "Caltech256(os.path.join(Data_root, 'Caltech'), download=True, train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "Cub2011(Data_root, train=False, transform=test_transform, download=True)",
                            "Call"
                        ],
                        [
                            "Cub2011(Data_root, train=False, transform=test_transform, download=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Val_configer['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "data_configer['val_cfg']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "Val_configer['shuffle']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "data_configer['val_cfg']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/transforms.py": {
        "torch": {
            "from_numpy_54": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr[0].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}