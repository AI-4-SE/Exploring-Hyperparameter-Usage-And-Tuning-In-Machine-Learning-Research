{
    "aboleth/datasets.py": {
        "sklearn": {
            "Bunch_109": {
                "variable": {
                    "value": "train_bunch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_data[:, :21]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "loadmat(train_filename).get('sarcos_inv')",
                            "Call"
                        ]
                    ]
                },
                "targets": {
                    "value": "train_data[:, 21]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "loadmat(train_filename).get('sarcos_inv')",
                            "Call"
                        ]
                    ]
                }
            },
            "Bunch_112": {
                "variable": {
                    "value": "test_bunch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_data[:, :21]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "loadmat(test_filename).get('sarcos_inv_test')",
                            "Call"
                        ]
                    ]
                },
                "targets": {
                    "value": "test_data[:, 21]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "loadmat(test_filename).get('sarcos_inv_test')",
                            "Call"
                        ]
                    ]
                }
            },
            "RBF_15": {
                "length_scale": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Bunch_115": {
                "train": {
                    "value": "train_bunch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Bunch(data=train_data[:, :21], targets=train_data[:, 21])",
                            "Call"
                        ]
                    ]
                },
                "test": {
                    "value": "test_bunch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Bunch(data=test_data[:, :21], targets=test_data[:, 21])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "demos/classification.py": {
        "sklearn": {
            "load_breast_cancer_52": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_55": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestClassifier_59": {
                "variable": {
                    "value": "bcl",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RSEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                }
            },
            "KFold_76": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "FOLDS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RSEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                }
            },
            "accuracy_score_119": {
                "y_true": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Ep.argmax(axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_loss_120": {
                "y_true": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Ep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack((1.0 - ps, ps))",
                            "Call"
                        ],
                        [
                            "Ep",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_26": {
                "variable": {
                    "value": "CONFIG",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "placeholder_with_default_33": {
                "variable": {
                    "value": "n_samples_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "LSAMPLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_80": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, D)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Bernoulli_68": {
                "variable": {
                    "value": "lkhood",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(X=X_)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_62": {
                "name": {
                    "value": "Input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_66": {
                "name": {
                    "value": "Deepnet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_72": {
                "name": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_82": {
                "config": {
                    "value": "CONFIG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "demos/imputation.py": {
        "sklearn": {
            "fetch_covtype_45": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_49": {
                "variable": {
                    "value": "Xo[:, :10]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_111": {
                "variable": {
                    "value": "(Xo_tr, Xo_ts, Xc_tr, Xc_ts, Y_tr, Y_ts, M_tr, M_ts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "Xo.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Xc.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "Y.astype(np.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "FRAC_TEST",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                },
                "random_state": {
                    "value": "RSEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "666",
                            "int"
                        ]
                    ]
                }
            },
            "accuracy_score_179": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(Xo.astype(np.float32), Xc.astype(np.float32), Y.astype(np.int32), mask, test_size=FRAC_TEST, random_state=RSEED)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Ey",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.argmax(axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_loss_180": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(Xo.astype(np.float32), Xc.astype(np.float32), Y.astype(np.int32), mask, test_size=FRAC_TEST, random_state=RSEED)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(prob, feed_dict=feed_dict)",
                            "Call"
                        ]
                    ]
                }
            },
            "confusion_matrix_181": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(Xo.astype(np.float32), Xc.astype(np.float32), Y.astype(np.int32), mask, test_size=FRAC_TEST, random_state=RSEED)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Ey",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.argmax(axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_20": {
                "variable": {
                    "value": "CONFIG",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "placeholder_with_default_52": {
                "variable": {
                    "value": "n_samples_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "LSAMPLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LoggingTensorHook_149": {
                "variable": {
                    "value": "log",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "{'step': global_step, 'loss': loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "every_n_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shuffle_190": {
                "variable": {
                    "value": "data_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "seed": {
                    "value": "RSEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "666",
                            "int"
                        ]
                    ]
                }
            },
            "repeat_190": {
                "variable": {
                    "value": "data_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_epochs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_190": {
                "variable": {
                    "value": "data_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_with_default_126": {
                "variable": {
                    "value": "Xo_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_training(Xo_tr, Xc_tr, Y_tr, M_tr, n_epochs=NEPOCHS, batch_size=BSIZE)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(None, Do)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_with_default_127": {
                "variable": {
                    "value": "Xc_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xcb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_training(Xo_tr, Xc_tr, Y_tr, M_tr, n_epochs=NEPOCHS, batch_size=BSIZE)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(None, Dc)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_with_default_129": {
                "variable": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Yb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_training(Xo_tr, Xc_tr, Y_tr, M_tr, n_epochs=NEPOCHS, batch_size=BSIZE)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Categorical_139": {
                "variable": {
                    "value": "lkhood",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(Xo=Xo_, Xc=Xc_, M=M_)",
                            "Call"
                        ],
                        [
                            "net(Xo=Xo_, Xc=Xc_)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_144": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_145": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_68": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.ma.mean(xm, axis=0).data.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_123": {
                "name": {
                    "value": "Input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_131": {
                "variable": {
                    "value": "M_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_training(Xo_tr, Xc_tr, Y_tr, M_tr, n_epochs=NEPOCHS, batch_size=BSIZE)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(None, Do)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_133": {
                "name": {
                    "value": "Deepnet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_143": {
                "name": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MonitoredTrainingSession_155": {
                "config": {
                    "value": "CONFIG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                },
                "save_summaries_steps": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "save_checkpoint_secs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "hooks": {
                    "value": "[log]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_73": {
                "variable": {
                    "value": "scalar",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(Xo.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "shape": {
                    "value": "Xo.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "demos/multi_input.py": {
        "sklearn": {
            "accuracy_score_123": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Ys.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "Ey.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_loss_124": {
                "variable": {
                    "value": "logloss",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Ys.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.hstack((1 - Ep, Ep))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "ConfigProto_39": {
                "variable": {
                    "value": "CONFIG",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "placeholder_with_default_49": {
                "variable": {
                    "value": "n_samples_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T_SAMPLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "X_con_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, Xt_con.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "X_cat_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, Xt_cat.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Bernoulli_94": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(con=X_con_, cat=X_cat_)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_98": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_100": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_102": {
                "config": {
                    "value": "CONFIG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "demos/regression.py": {
        "sklearn": {},
        "tensorflow": {
            "ConfigProto_35": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "n_samples_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LoggingTensorHook_109": {
                "variable": {
                    "value": "log",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "{'step': global_step, 'loss': loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "every_n_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shuffle_155": {
                "variable": {
                    "value": "data_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "seed": {
                    "value": "RSEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "666",
                            "int"
                        ]
                    ]
                }
            },
            "repeat_155": {
                "variable": {
                    "value": "data_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "n_epochs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_155": {
                "variable": {
                    "value": "data_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_with_default_88": {
                "variable": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_training(Xr, Yr, n_epochs=n_epochs, batch_size=batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(None, D)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_with_default_89": {
                "variable": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Yb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_training(Xr, Yr, n_epochs=n_epochs, batch_size=batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Normal_95": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(X=X_)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ab.pos_variable(NOISE)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_100": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_101": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_83": {
                "name": {
                    "value": "Input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_92": {
                "name": {
                    "value": "Deepnet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_99": {
                "name": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_105": {
                "name": {
                    "value": "Predict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MonitoredTrainingSession_115": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                },
                "save_summaries_steps": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "save_checkpoint_secs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "hooks": {
                    "value": "[log]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "demos/regression_keras.py": {
        "sklearn": {},
        "tensorflow": {
            "ConfigProto_39": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "n_samples_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l1_l2_61": {
                "variable": {
                    "value": "l1_l2_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "l1": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "l2": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LoggingTensorHook_121": {
                "variable": {
                    "value": "log",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "{'step': global_step, 'loss': loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "every_n_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shuffle_173": {
                "variable": {
                    "value": "data_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "seed": {
                    "value": "RSEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "666",
                            "int"
                        ]
                    ]
                }
            },
            "repeat_173": {
                "variable": {
                    "value": "data_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "int"
                        ],
                        [
                            "n_epochs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_173": {
                "variable": {
                    "value": "data_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_54": {
                "variable": {
                    "value": "KL",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.layer.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_100": {
                "variable": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_training(Xr, Yr, n_epochs=n_epochs, batch_size=batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(None, D)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_with_default_101": {
                "variable": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Yb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_training(Xr, Yr, n_epochs=n_epochs, batch_size=batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Normal_107": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(X=X_)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ab.pos_variable(NOISE)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_112": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_113": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_118": {
                "variable": {
                    "value": "logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.distributions.Normal(loc=phi, scale=noise).log_prob(Y_)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_95": {
                "name": {
                    "value": "Input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_104": {
                "name": {
                    "value": "Deepnet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_111": {
                "name": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_117": {
                "name": {
                    "value": "Predict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MonitoredTrainingSession_127": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                },
                "save_summaries_steps": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "save_checkpoint_secs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "hooks": {
                    "value": "[log]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "demos/regression_tutorial.py": {
        "sklearn": {
            "r2_score_320": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Ys.flatten()[test_bounds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "Eymean.flatten()[test_bounds]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "ConfigProto_31": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "placeholder_with_default_32": {
                "variable": {
                    "value": "n_samples_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Normal_49": {
                "variable": {
                    "value": "lkhood",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "Xw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(X=X)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "ab.pos_variable(1.0)",
                            "Call"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "ab.pos_variable(0.5)",
                            "Call"
                        ],
                        [
                            "ab.pos_variable(0.5)",
                            "Call"
                        ],
                        [
                            "ab.pos_variable(0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_66": {
                "variable": {
                    "value": "lkhood",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "f",
                            "Call"
                        ],
                        [
                            "model_dict[model](X_, Y_)",
                            "Call"
                        ],
                        [
                            "bk.figure(plot_width=1000, plot_height=600, x_axis_label='x', y_axis_label='y', title='{}, R-square = {:.4f}'.format(model, r2))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "ab.pos_variable(1.0)",
                            "Call"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "ab.pos_variable(0.5)",
                            "Call"
                        ],
                        [
                            "ab.pos_variable(0.5)",
                            "Call"
                        ],
                        [
                            "ab.pos_variable(0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_89": {
                "variable": {
                    "value": "lkhood",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "f",
                            "Call"
                        ],
                        [
                            "model_dict[model](X_, Y_)",
                            "Call"
                        ],
                        [
                            "bk.figure(plot_width=1000, plot_height=600, x_axis_label='x', y_axis_label='y', title='{}, R-square = {:.4f}'.format(model, r2))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "ab.pos_variable(1.0)",
                            "Call"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "ab.pos_variable(0.5)",
                            "Call"
                        ],
                        [
                            "ab.pos_variable(0.5)",
                            "Call"
                        ],
                        [
                            "ab.pos_variable(0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_113": {
                "variable": {
                    "value": "lkhood",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "f",
                            "Call"
                        ],
                        [
                            "model_dict[model](X_, Y_)",
                            "Call"
                        ],
                        [
                            "bk.figure(plot_width=1000, plot_height=600, x_axis_label='x', y_axis_label='y', title='{}, R-square = {:.4f}'.format(model, r2))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "ab.pos_variable(1.0)",
                            "Call"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "ab.pos_variable(0.5)",
                            "Call"
                        ],
                        [
                            "ab.pos_variable(0.5)",
                            "Call"
                        ],
                        [
                            "ab.pos_variable(0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_134": {
                "variable": {
                    "value": "lkhood",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "f",
                            "Call"
                        ],
                        [
                            "model_dict[model](X_, Y_)",
                            "Call"
                        ],
                        [
                            "bk.figure(plot_width=1000, plot_height=600, x_axis_label='x', y_axis_label='y', title='{}, R-square = {:.4f}'.format(model, r2))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "ab.pos_variable(1.0)",
                            "Call"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "ab.pos_variable(0.5)",
                            "Call"
                        ],
                        [
                            "ab.pos_variable(0.5)",
                            "Call"
                        ],
                        [
                            "ab.pos_variable(0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_158": {
                "variable": {
                    "value": "lkhood",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "f",
                            "Call"
                        ],
                        [
                            "model_dict[model](X_, Y_)",
                            "Call"
                        ],
                        [
                            "bk.figure(plot_width=1000, plot_height=600, x_axis_label='x', y_axis_label='y', title='{}, R-square = {:.4f}'.format(model, r2))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "ab.pos_variable(1.0)",
                            "Call"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "ab.pos_variable(0.5)",
                            "Call"
                        ],
                        [
                            "ab.pos_variable(0.5)",
                            "Call"
                        ],
                        [
                            "ab.pos_variable(0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_197": {
                "variable": {
                    "value": "lkhood",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "f",
                            "Call"
                        ],
                        [
                            "model_dict[model](X_, Y_)",
                            "Call"
                        ],
                        [
                            "bk.figure(plot_width=1000, plot_height=600, x_axis_label='x', y_axis_label='y', title='{}, R-square = {:.4f}'.format(model, r2))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "ab.pos_variable(1.0)",
                            "Call"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "ab.pos_variable(0.5)",
                            "Call"
                        ],
                        [
                            "ab.pos_variable(0.5)",
                            "Call"
                        ],
                        [
                            "ab.pos_variable(0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_216": {
                "variable": {
                    "value": "lkhood",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "net(X=X)",
                            "Call"
                        ],
                        [
                            "f",
                            "Call"
                        ],
                        [
                            "model_dict[model](X_, Y_)",
                            "Call"
                        ],
                        [
                            "bk.figure(plot_width=1000, plot_height=600, x_axis_label='x', y_axis_label='y', title='{}, R-square = {:.4f}'.format(model, r2))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "ab.pos_variable(1.0)",
                            "Call"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "ab.pos_variable(0.5)",
                            "Call"
                        ],
                        [
                            "ab.pos_variable(0.5)",
                            "Call"
                        ],
                        [
                            "ab.pos_variable(0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "LoggingTensorHook_292": {
                "variable": {
                    "value": "log",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "{'step': global_step, 'loss': loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "every_n_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shuffle_346": {
                "variable": {
                    "value": "data_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "seed": {
                    "value": "RSEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "666",
                            "int"
                        ]
                    ]
                }
            },
            "repeat_346": {
                "variable": {
                    "value": "data_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4000",
                            "int"
                        ],
                        [
                            "n_epochs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_346": {
                "variable": {
                    "value": "data_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_with_default_278": {
                "variable": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_training(Xr, Yr, n_epochs=n_epochs, batch_size=batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(None, D)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_with_default_279": {
                "variable": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Yb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_training(Xr, Yr, n_epochs=n_epochs, batch_size=batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_287": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_288": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_181": {
                "input_tensor": {
                    "value": "tf.nn.relu(tf.abs(Y - f) - eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_273": {
                "name": {
                    "value": "Input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_282": {
                "name": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_286": {
                "name": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MonitoredTrainingSession_298": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                },
                "save_summaries_steps": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "save_checkpoint_secs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "hooks": {
                    "value": "[log]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_181": {
                "features": {
                    "value": "tf.abs(Y - f) - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_181": {
                "x": {
                    "value": "Y - f",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "demos/sarcos.py": {
        "sklearn": {
            "StandardScaler_42": {
                "variable": {
                    "value": "ss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "r2_score_176": {
                "y_true": {
                    "value": "Ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.test.targets.astype(np.float32)[:, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "Ys - ym",
                            "BinOp"
                        ],
                        [
                            "get_data()",
                            "Call"
                        ],
                        [
                            "Ys",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Yt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(Yt, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "mean_squared_error_79": {
                "variable": {
                    "value": "(SST, update_op1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "tf.reduce_mean(labels, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_squared_error_81": {
                "variable": {
                    "value": "(SSE, update_op2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'predictions': predict_mean, 'samples': phi}",
                            "Dict"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "input_layer_90": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "feature_columns": {
                    "value": "params['feature_columns']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Normal_104": {
                "variable": {
                    "value": "ll_f",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(X=X)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ab.pos_variable(NOISE, name='noise')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_120": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predict_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ab.sample_mean(phi)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "mse_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Estimator_150": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "my_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_model",
                            "Call"
                        ]
                    ]
                },
                "model_dir": {
                    "value": "./sarcos/",
                    "type": "str",
                    "possible_values": []
                },
                "params": {
                    "value": "{'N': N, 'feature_columns': my_feature_columns}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "repeat_57": {
                "variable": {
                    "value": "data_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_57": {
                "variable": {
                    "value": "data_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_57": {
                "variable": {
                    "value": "data_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                }
            },
            "batch_66": {
                "variable": {
                    "value": "data_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                }
            },
            "batch_73": {
                "variable": {
                    "value": "data_pr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                }
            },
            "scalar_117": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ab.elbo(ll, kl, N)",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_136": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ab.elbo(ll, kl, N)",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_80": {
                "input_tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_82": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.div(SSE, SST)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_82": {
                "*inputs": {
                    "value": "update_op1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean_squared_error(labels, tf.reduce_mean(labels, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "update_op2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean_squared_error(labels, predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_113": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'predictions': predict_mean, 'samples': phi}",
                            "Dict"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "EstimatorSpec_128": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ab.elbo(ll, kl, N)",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "metrics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'mse': mse, 'r2': r2}",
                            "Dict"
                        ]
                    ]
                }
            },
            "div_82": {
                "x": {
                    "value": "SSE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean_squared_error(labels, predictions)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "SST",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean_squared_error(labels, tf.reduce_mean(labels, axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_global_step_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "numeric_column_147": {
                "key": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Xr.keys()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "aboleth/baselayers.py": {
        "tensorflow": {
            "add_161": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer1(*args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer2(result1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "aboleth/distributions.py": {
        "tensorflow": {
            "zeros_32": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Normal_33": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(dim)",
                            "Call"
                        ],
                        [
                            "tf.Variable(mu_0, name=_add_suffix('W_mu_q', suffix))",
                            "Call"
                        ],
                        [
                            "tf.Variable(mu_0, name=_add_suffix('W_mu_q', suffix))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_variable(std0, name=_add_suffix('W_std_q', suffix))",
                            "Call"
                        ],
                        [
                            "std",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "mu_0",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_65": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "mu_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(dim)",
                            "Call"
                        ],
                        [
                            "tf.zeros((o, i))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "_add_suffix('W_mu_q', suffix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_74": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(dim)",
                            "Call"
                        ],
                        [
                            "tf.Variable(mu_0, name=_add_suffix('W_mu_q', suffix))",
                            "Call"
                        ],
                        [
                            "tf.Variable(mu_0, name=_add_suffix('W_mu_q', suffix))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_variable(std0, name=_add_suffix('W_std_q', suffix))",
                            "Call"
                        ],
                        [
                            "std",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_115": {
                "variable": {
                    "value": "lflat",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "l0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.eye(i, dtype=np.float32) * std0, [o, 1, 1])[:, u, v].T",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "_add_suffix('W_cov_q', suffix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_116": {
                "variable": {
                    "value": "Lt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.scatter_nd(indices, lflat, shape=(i * i, o))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Lt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.scatter_nd(indices, lflat, shape=(i * i, o)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(o, i, i)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "mu_0",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(o, i)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_120": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "mu_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(dim)",
                            "Call"
                        ],
                        [
                            "tf.zeros((o, i))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "_add_suffix('W_mu_q', suffix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_152": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.distributions.kl_divergence(q, p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_178": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q.event_shape_tensor()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_179": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q.batch_shape_tensor()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RegisterKL_156": {
                "dist_cls_a": {
                    "value": "tfp.distributions.MultivariateNormalTriL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dist_cls_b": {
                    "value": "tf.distributions.Normal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_200": {
                "variable": {
                    "value": "ldiag",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(tf.matrix_diag_part(L))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "JIT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-15",
                            "float"
                        ]
                    ]
                }
            },
            "identity_190": {
                "variable": {
                    "value": "KL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "KL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (tr + dist + logdet - n * D)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(KL, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scatter_nd_116": {
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(u * i + v)[:, np.newaxis]",
                            "Subscript"
                        ]
                    ]
                },
                "updates": {
                    "value": "lflat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(l0, name=_add_suffix('W_cov_q', suffix))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(i * i, o)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "kl_divergence_152": {
                "y_true": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_182": {
                "input_tensor": {
                    "value": "L * L",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_184": {
                "input_tensor": {
                    "value": "(p.mean() - q.mean()) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_200": {
                "x": {
                    "value": "tf.matrix_diag_part(L)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_201": {
                "input_tensor": {
                    "value": "tf.log(ldiag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_68": {
                "shape": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_187": {
                "x": {
                    "value": "p_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.scale ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_201": {
                "x": {
                    "value": "ldiag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.abs(tf.matrix_diag_part(L)), JIT)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "aboleth/hlayers.py": {
        "tensorflow": {
            "concat_24": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*map(lambda l: l(**kwargs), self.layers))",
                            "Call"
                        ],
                        [
                            "zip(*map(lambda l: l(**kwargs), self.layers))",
                            "Call"
                        ],
                        [
                            "zip(*[l(X[..., s]) for (s, l) in zip(self.slices, self.layers)])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_n_25": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*map(lambda l: l(**kwargs), self.layers))",
                            "Call"
                        ],
                        [
                            "zip(*map(lambda l: l(**kwargs), self.layers))",
                            "Call"
                        ],
                        [
                            "zip(*[l(X[..., s]) for (s, l) in zip(self.slices, self.layers)])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_46": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*map(lambda l: l(**kwargs), self.layers))",
                            "Call"
                        ],
                        [
                            "zip(*map(lambda l: l(**kwargs), self.layers))",
                            "Call"
                        ],
                        [
                            "zip(*[l(X[..., s]) for (s, l) in zip(self.slices, self.layers)])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_47": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*map(lambda l: l(**kwargs), self.layers))",
                            "Call"
                        ],
                        [
                            "zip(*map(lambda l: l(**kwargs), self.layers))",
                            "Call"
                        ],
                        [
                            "zip(*[l(X[..., s]) for (s, l) in zip(self.slices, self.layers)])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_90": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*map(lambda l: l(**kwargs), self.layers))",
                            "Call"
                        ],
                        [
                            "zip(*map(lambda l: l(**kwargs), self.layers))",
                            "Call"
                        ],
                        [
                            "zip(*[l(X[..., s]) for (s, l) in zip(self.slices, self.layers)])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_n_91": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*map(lambda l: l(**kwargs), self.layers))",
                            "Call"
                        ],
                        [
                            "zip(*map(lambda l: l(**kwargs), self.layers))",
                            "Call"
                        ],
                        [
                            "zip(*[l(X[..., s]) for (s, l) in zip(self.slices, self.layers)])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "aboleth/impute.py": {
        "tensorflow": {
            "convert_to_tensor_29": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[self.name]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "map_fn_67": {
                "variable": {
                    "value": "Net",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "self._impute2D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "X_ND",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.datalayer(**kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_69": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.datalayer(**kwargs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.masklayer(**kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_106": {
                "variable": {
                    "value": "self.missing_ind",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(Mask)",
                            "Call"
                        ],
                        [
                            "self.masklayer(**kwargs)",
                            "Call"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_107": {
                "variable": {
                    "value": "self.real_val_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_not(M)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_141": {
                "variable": {
                    "value": "imputed_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "column_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._impute_columns(X_2D_zero)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.missing_ind[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scatter_nd_144": {
                "variable": {
                    "value": "X_new",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.missing_ind",
                    "type": "Attribute",
                    "possible_values": []
                },
                "updates": {
                    "value": "imputed_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(column_vals, self.missing_ind[:, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(X_2D, out_type=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_189": {
                "variable": {
                    "value": "col_tot",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "X_2D_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_2D * self.real_val_mask",
                            "BinOp"
                        ],
                        [
                            "X_2D_zero",
                            "Method Argument"
                        ],
                        [
                            "X_2D_zero",
                            "Method Argument"
                        ],
                        [
                            "X_2D_zero",
                            "Method Argument"
                        ],
                        [
                            "X_2D_zero",
                            "Method Argument"
                        ],
                        [
                            "X_2D_zero",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_192": {
                "variable": {
                    "value": "num_values_col",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.real_val_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_193": {
                "variable": {
                    "value": "num_values_col",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_values_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(self.real_val_mask, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(num_values_col, tf.ones(tf.shape(num_values_col)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones(tf.shape(num_values_col))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_195": {
                "variable": {
                    "value": "col_nan_means",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "col_tot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(X_2D_zero, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_values_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(self.real_val_mask, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(num_values_col, tf.ones(tf.shape(num_values_col)))",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_270": {
                "variable": {
                    "value": "self.normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((D,)) * self.loc",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((D,)) * self.scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_302": {
                "variable": {
                    "value": "self._ncats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "ncategory_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ncategory_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_dtype_28": {
                "type_value": {
                    "value": "Mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_dtype_101": {
                "type_value": {
                    "value": "M.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_not_107": {
                "x": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(Mask)",
                            "Call"
                        ],
                        [
                            "self.masklayer(**kwargs)",
                            "Call"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_194": {
                "shape": {
                    "value": "tf.shape(num_values_col)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_227": {
                "shape": {
                    "value": "(datadim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_268": {
                "shape": {
                    "value": "(D,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_269": {
                "shape": {
                    "value": "(D,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_145": {
                "input": {
                    "value": "X_2D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_2D",
                            "Method Argument"
                        ],
                        [
                            "X_2D",
                            "Method Argument"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_194": {
                "input": {
                    "value": "num_values_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(self.real_val_mask, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(num_values_col, tf.ones(tf.shape(num_values_col)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "aboleth/initialisers.py": {
        "tensorflow": {}
    },
    "aboleth/kernels.py": {
        "tensorflow": {
            "Normal_181": {
                "variable": {
                    "value": "pP",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "tf.zeros(dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "pP_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__len2std(self.lenscale, n_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_201": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 / tf.expand_dims(lenscale, axis=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, n_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_294": {
                "shape": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_116": {
                "input": {
                    "value": "self.lenscale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_275": {
                "input": {
                    "value": "self.lenscale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "shape": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(input_dim, n_features)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "expand_dims_201": {
                "input": {
                    "value": "lenscale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_variable(given_lenscale, name='kernel_lenscale')",
                            "Call"
                        ],
                        [
                            "given_lenscale",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "lenscale",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "aboleth/layers.py": {
        "tensorflow": {
            "tile_1183": {
                "variable": {
                    "value": "tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tensor, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n_samples] + [1] * len(tensor.shape)",
                            "BinOp"
                        ],
                        [
                            "tf.concat([tf.shape(X)[0:2], [flat_dim]], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_1189": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_94": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(X)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "map_fn_230": {
                "variable": {
                    "value": "Net",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda inputs: tf.nn.max_pool(inputs, ksize=self.ksize, strides=self.strides, padding=self.padding)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[self.name]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_252": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(X)[0:2], [flat_dim]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_253": {
                "variable": {
                    "value": "Net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[self.name]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n_samples] + [1] * len(tensor.shape)",
                            "BinOp"
                        ],
                        [
                            "tf.concat([tf.shape(X)[0:2], [flat_dim]], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_293": {
                "variable": {
                    "value": "Ps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(P, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_samples, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_296": {
                "variable": {
                    "value": "XP",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[self.name]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "Ps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(P, 0), [n_samples, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_302": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "XP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(X, Ps)",
                            "Call"
                        ],
                        [
                            "XP",
                            "Method Argument"
                        ],
                        [
                            "XP",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_303": {
                "variable": {
                    "value": "imag",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "XP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(X, Ps)",
                            "Call"
                        ],
                        [
                            "XP",
                            "Method Argument"
                        ],
                        [
                            "XP",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_fn_443": {
                "variable": {
                    "value": "Net",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda args: tf.nn.conv2d(*args, padding=self.padding, strides=self.strides)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "(X, Wsamples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_572": {
                "variable": {
                    "value": "Net",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[self.name]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "Wsamples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.sample(seed=next(seedgen), sample_shape=n_samples)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Wsamples, perm)",
                            "Call"
                        ],
                        [
                            "_sample_W(self.qW, n_samples, False)",
                            "Call"
                        ],
                        [
                            "_sample_W(self.qW, n_samples)",
                            "Call"
                        ],
                        [
                            "_sample_W(self.qW, n_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_707": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda wx: tf.gather(*wx, axis=0)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "(Wsamples, X)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Wsamples.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_712": {
                "variable": {
                    "value": "Net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda wx: tf.gather(*wx, axis=0), (Wsamples, X), dtype=Wsamples.dtype)",
                            "Call"
                        ],
                        [
                            "tf.gather(W, X, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_samples, n_batch, f_dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_761": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Normal_762": {
                "variable": {
                    "value": "noise_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "self.input_noise",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_765": {
                "variable": {
                    "value": "X_pert",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[X, X + noise]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_819": {
                "variable": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[self.name]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Bernoulli_822": {
                "variable": {
                    "value": "mask_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "self.flip_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Categorical_827": {
                "variable": {
                    "value": "flip_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(self.n_categories) / self.n_categories",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_832": {
                "variable": {
                    "value": "X_pert",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[X, X_flips]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_910": {
                "variable": {
                    "value": "self.f_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "latent_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "latent_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_923": {
                "variable": {
                    "value": "f_loc",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X_pert",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([X, X + noise], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([X, X_flips], axis=0)",
                            "Call"
                        ],
                        [
                            "X[n_samples:]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "qWmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tile2samples(n_samples, tf.transpose(self.qW.mean()))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_926": {
                "variable": {
                    "value": "f_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X_pert ** 2, qWvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_927": {
                "variable": {
                    "value": "f_post",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "f_loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(X_pert, qWmean)",
                            "Call"
                        ],
                        [
                            "f_loc + self.qb.mean()",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "f_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.matmul(X_pert ** 2, qWvar))",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_994": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "W_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initialise_weights(W_shape, self.init_fn)",
                            "Call"
                        ],
                        [
                            "initialise_weights(Wdim, self.init_fn)",
                            "Call"
                        ],
                        [
                            "initialise_weights(Wdim, self.init_fn)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "W_map",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_fn_997": {
                "variable": {
                    "value": "Net",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.nn.conv2d(x, W, padding=self.padding, strides=self.strides)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[self.name]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_1073": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "W_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initialise_weights(W_shape, self.init_fn)",
                            "Call"
                        ],
                        [
                            "initialise_weights(Wdim, self.init_fn)",
                            "Call"
                        ],
                        [
                            "initialise_weights(Wdim, self.init_fn)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "W_map",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_1077": {
                "variable": {
                    "value": "Net",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[self.name]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "_tile2samples(n_samples, W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_1162": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "W_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initialise_weights(W_shape, self.init_fn)",
                            "Call"
                        ],
                        [
                            "initialise_weights(Wdim, self.init_fn)",
                            "Call"
                        ],
                        [
                            "initialise_weights(Wdim, self.init_fn)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "W_map",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_1166": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(W_init, name='W_map')",
                            "Call"
                        ],
                        [
                            "tf.Variable(W_init, name='W_map')",
                            "Call"
                        ],
                        [
                            "tf.Variable(W_init, name='W_map')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[self.name]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1168": {
                "variable": {
                    "value": "Net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda wx: tf.gather(*wx, axis=0), (Wsamples, X), dtype=Wsamples.dtype)",
                            "Call"
                        ],
                        [
                            "tf.gather(W, X, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_samples, n_batch, f_dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_to_collection_1202": {
                "name": {
                    "value": "SampleTensors",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "Wsamples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.sample(seed=next(seedgen), sample_shape=n_samples)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Wsamples, perm)",
                            "Call"
                        ],
                        [
                            "_sample_W(self.qW, n_samples, False)",
                            "Call"
                        ],
                        [
                            "_sample_W(self.qW, n_samples)",
                            "Call"
                        ],
                        [
                            "_sample_W(self.qW, n_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_1207": {
                "variable": {
                    "value": "Wsamples",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Wsamples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.sample(seed=next(seedgen), sample_shape=n_samples)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Wsamples, perm)",
                            "Call"
                        ],
                        [
                            "_sample_W(self.qW, n_samples, False)",
                            "Call"
                        ],
                        [
                            "_sample_W(self.qW, n_samples)",
                            "Call"
                        ],
                        [
                            "_sample_W(self.qW, n_samples)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(rank))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_198": {
                "variable": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(X)[:self.obsax], [1], tf.shape(X)[self.obsax + 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_459": {
                "variable": {
                    "value": "bsamples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_sample_W(self.qb, n_samples, False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_samples, 1, 1, 1, self.filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_584": {
                "variable": {
                    "value": "bsamples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_sample_W(self.qb, n_samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_1007": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initialise_weights(b_shape, self.init_fn)",
                            "Call"
                        ],
                        [
                            "initialise_weights((1, self.output_dim), self.init_fn)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "b_map",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_1010": {
                "variable": {
                    "value": "Net",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._build(X)",
                            "Call"
                        ],
                        [
                            "super(SampleLayer3, self).__call__(X)",
                            "Call"
                        ],
                        [
                            "self.h(X)",
                            "Call"
                        ],
                        [
                            "self.dropout(X, self.keep_prob, noise_shape, seed=next(seedgen))",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda inputs: tf.nn.max_pool(inputs, ksize=self.ksize, strides=self.strides, padding=self.padding), X)",
                            "Call"
                        ],
                        [
                            "tf.reshape(X, new_shape)",
                            "Call"
                        ],
                        [
                            "self._transformation(XP)",
                            "Call"
                        ],
                        [
                            "tf.concat([real, imag], axis=-1) / np.sqrt(self.n_features)",
                            "BinOp"
                        ],
                        [
                            "np.sqrt(2.0 / self.n_features) * tf.nn.relu(self.pfunc(XP))",
                            "BinOp"
                        ],
                        [
                            "tf.map_fn(lambda args: tf.nn.conv2d(*args, padding=self.padding, strides=self.strides), elems=(X, Wsamples), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "Net + b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(X, Wsamples)",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, [n_samples, n_batch, f_dims])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.conv2d(x, W, padding=self.padding, strides=self.strides), X)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(Net, b)",
                            "Call"
                        ],
                        [
                            "tf.matmul(X, _tile2samples(n_samples, W))",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, [n_samples, n_batch, f_dims])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(b_init, name='b_map')",
                            "Call"
                        ],
                        [
                            "tf.Variable(b_init, name='b_map')",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_1085": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initialise_weights(b_shape, self.init_fn)",
                            "Call"
                        ],
                        [
                            "initialise_weights((1, self.output_dim), self.init_fn)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "b_map",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_1183": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_1189": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[self.name]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_293": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel.weights(input_dim, self.n_features, dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_304": {
                "values": {
                    "value": "[real, imag]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_371": {
                "features": {
                    "value": "self.pfunc(XP)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_695": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[self.name]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_763": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[self.name]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_826": {
                "shape": {
                    "value": "self.n_categories",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_921": {
                "a": {
                    "value": "self.qW.mean()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_922": {
                "a": {
                    "value": "self.qW.variance()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_926": {
                "a": {
                    "value": "X_pert ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "qWvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tile2samples(n_samples, tf.transpose(self.qW.variance()))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_930": {
                "x": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.shape(X)[0])",
                            "Call"
                        ],
                        [
                            "self._get_X_dims(X)",
                            "Call"
                        ],
                        [
                            "self._get_X_dims(X)",
                            "Call"
                        ],
                        [
                            "self._get_X_dims(X)",
                            "Call"
                        ],
                        [
                            "self._get_X_dims(X)",
                            "Call"
                        ],
                        [
                            "tf.shape(X)[0] // 2",
                            "BinOp"
                        ],
                        [
                            "self._get_X_dims(X)",
                            "Call"
                        ],
                        [
                            "self._get_X_dims(X)",
                            "Call"
                        ],
                        [
                            "self._get_X_dims(X)",
                            "Call"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_1159": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[self.name]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_94": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[self.name]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool_230": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "self.ksize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_444": {
                "input": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.strides",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_707": {
                "params": {
                    "value": "*wx",
                    "type": "Starred",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_914": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[self.name]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_998": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(W_init, name='W_map')",
                            "Call"
                        ],
                        [
                            "tf.Variable(W_init, name='W_map')",
                            "Call"
                        ],
                        [
                            "tf.Variable(W_init, name='W_map')",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.strides",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_1002": {
                "t": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(W_init, name='W_map')",
                            "Call"
                        ],
                        [
                            "tf.Variable(W_init, name='W_map')",
                            "Call"
                        ],
                        [
                            "tf.Variable(W_init, name='W_map')",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_1080": {
                "t": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(W_init, name='W_map')",
                            "Call"
                        ],
                        [
                            "tf.Variable(W_init, name='W_map')",
                            "Call"
                        ],
                        [
                            "tf.Variable(W_init, name='W_map')",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_1171": {
                "t": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(W_init, name='W_map')",
                            "Call"
                        ],
                        [
                            "tf.Variable(W_init, name='W_map')",
                            "Call"
                        ],
                        [
                            "tf.Variable(W_init, name='W_map')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_252": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[self.name]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_367": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(self.n_categories) / self.n_categories",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_loss_1011": {
                "t": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(b_init, name='b_map')",
                            "Call"
                        ],
                        [
                            "tf.Variable(b_init, name='b_map')",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_1089": {
                "t": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(b_init, name='b_map')",
                            "Call"
                        ],
                        [
                            "tf.Variable(b_init, name='b_map')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_198": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[self.name]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_199": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[self.name]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "aboleth/losses.py": {
        "tensorflow": {
            "to_float_55": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(log_likelihood)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_111": {
                "variable": {
                    "value": "AVLL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_mean(log_likelihood, axis=[0, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_52": {
                "x": {
                    "value": "tf.shape(log_likelihood)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_58": {
                "input": {
                    "value": "tf.reduce_sum(log_likelihood, axis=[0, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "input_tensor": {
                    "value": "log_likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_likelihood",
                            "Method Argument"
                        ],
                        [
                            "log_likelihood",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_55": {
                "input": {
                    "value": "log_likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_likelihood",
                            "Method Argument"
                        ],
                        [
                            "log_likelihood",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_58": {
                "input_tensor": {
                    "value": "log_likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_likelihood",
                            "Method Argument"
                        ],
                        [
                            "log_likelihood",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_52": {
                "input": {
                    "value": "log_likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_likelihood",
                            "Method Argument"
                        ],
                        [
                            "log_likelihood",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "aboleth/prediction.py": {
        "tensorflow": {
            "reduce_mean_23": {
                "variable": {
                    "value": "expec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "predictor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor",
                            "Method Argument"
                        ],
                        [
                            "predictor",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_58": {
                "variable": {
                    "value": "percen",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "pers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[percentile(predictor, p, interpolation=interpolation, axis=0) for p in per]",
                            "ListComp"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_default_graph_88": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_90": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "aboleth/util.py": {
        "tensorflow": {
            "Variable_27": {
                "variable": {
                    "value": "var0",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "_inverse_softplus(initial_value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_28": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "var0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(_inverse_softplus(initial_value), **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values.name.replace(':', '_')",
                            "Call"
                        ],
                        [
                            "values.name.replace(':', '_')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_169": {
                "variable": {
                    "value": "x_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(x) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histogram_122": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values.name.replace(':', '_')",
                            "Call"
                        ],
                        [
                            "values.name.replace(':', '_')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "values": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "Method Argument"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_137": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values.name.replace(':', '_')",
                            "Call"
                        ],
                        [
                            "values.name.replace(':', '_')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "tensor": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "Method Argument"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_169": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "demos/mnist_softmax_regression.py": {
        "tensorflow": {
            "ConfigProto_16": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "set_verbosity_8": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_58": {
                "variable": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "n_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ]
                    ]
                }
            },
            "shuffle_58": {
                "variable": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnist_data.train.images.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "batch_58": {
                "variable": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                }
            },
            "make_one_shot_iterator_58": {
                "variable": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LoggingTensorHook_87": {
                "variable": {
                    "value": "logger",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dict(step=global_step, loss=loss, accuracy=accuracy)",
                    "type": "Call",
                    "possible_values": []
                },
                "every_n_secs": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_75": {
                "variable": {
                    "value": "llh",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(X=X)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_78": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.argmax(probs, axis=1), Y), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_83": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_84": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_73": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_82": {
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MonitoredTrainingSession_92": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                },
                "hooks": {
                    "value": "[logger]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_79": {
                "x": {
                    "value": "tf.equal(tf.argmax(probs, axis=1), Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_79": {
                "x": {
                    "value": "tf.argmax(probs, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.data.Dataset.from_tensor_slices((np.asarray(mnist_data.train.images, dtype=np.float32), np.asarray(mnist_data.train.labels, dtype=np.int64))).repeat(n_epochs).shuffle(N).batch(batch_size).make_one_shot_iterator().get_next()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_105": {
                "msg": {
                    "value": "step = %d, validation accuracy: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run([global_step, train])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "val_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "accuracy.eval(feed_dict={X: Xs, Y: Ys}, session=sess)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_79": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ab.sample_mean(llh.probs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/conftest.py": {
        "tensorflow": {
            "cast_29": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(tf.expand_dims(x, 0), [3, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_48": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(x, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[M, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_61": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(x, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_62": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.tile(tf.expand_dims(x, 0), [3, 1, 1]), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(x, 0), [M, 1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(x, 0), [3, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(X, tf.float32)",
                            "Call"
                        ],
                        [
                            "data()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "Y.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "N_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_29": {
                "input": {
                    "value": "tf.expand_dims(x, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack((x1, x2)).T",
                            "Attribute"
                        ],
                        [
                            "expit(RAND.randn(N, 28, 28, 3)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones((N, D)) * np.linspace(1, D, D)",
                            "BinOp"
                        ],
                        [
                            "RAND.randint(0, K, size=N)[:, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "x.astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((x1, x2), axis=2)",
                            "Call"
                        ],
                        [
                            "x.astype(np.int32)",
                            "Call"
                        ],
                        [
                            "data()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_61": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack((x1, x2)).T",
                            "Attribute"
                        ],
                        [
                            "expit(RAND.randn(N, 28, 28, 3)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones((N, D)) * np.linspace(1, D, D)",
                            "BinOp"
                        ],
                        [
                            "RAND.randint(0, K, size=N)[:, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "x.astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((x1, x2), axis=2)",
                            "Call"
                        ],
                        [
                            "x.astype(np.int32)",
                            "Call"
                        ],
                        [
                            "data()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_29": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack((x1, x2)).T",
                            "Attribute"
                        ],
                        [
                            "expit(RAND.randn(N, 28, 28, 3)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones((N, D)) * np.linspace(1, D, D)",
                            "BinOp"
                        ],
                        [
                            "RAND.randint(0, K, size=N)[:, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "x.astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((x1, x2), axis=2)",
                            "Call"
                        ],
                        [
                            "x.astype(np.int32)",
                            "Call"
                        ],
                        [
                            "data()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_baselayers.py": {
        "tensorflow": {
            "TestCase_18": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_35": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_49": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_62": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_distributions.py": {
        "tensorflow": {
            "Normal_18": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(dim, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "Normal_21": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(dim, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "Normal_26": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(dim, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "std1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0",
                            "float"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "Normal_32": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(dim, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "random.randn(*dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "random.randn(*dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "mu1",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "TestCase_36": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_57": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(dim, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "random.randn(*dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "random.randn(*dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "mu1",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "std1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0",
                            "float"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "TestCase_62": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_85": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_103": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_hlayers.py": {
        "tensorflow": {
            "TestCase_20": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_53": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_82": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_impute.py": {
        "tensorflow": {
            "TestCase_16": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_38": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_66": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_98": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_128": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_47": {
                "initial_value": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "initial_value": {
                    "value": "tf.ones(5) * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_76": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_77": {
                "initial_value": {
                    "value": "tf.ones(5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_78": {
                "initial_value": {
                    "value": "tf.ones(5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_48": {
                "shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_77": {
                "shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_78": {
                "shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_initialisers.py": {
        "tensorflow": {
            "TestCase_46": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_kernels.py": {
        "tensorflow": {}
    },
    "tests/test_layers.py": {
        "tensorflow": {
            "TestCase_20": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_35": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_with_default_45": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TestCase_49": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_69": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_93": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_122": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_137": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_156": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_184": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_213": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_231": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_250": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_274": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_316": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_363": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_388": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_405": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_421": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_430": {
                "variable": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "xtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_431": {
                "variable": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(x_, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[S] + np.ones_like(x.shape).tolist()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_390": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_390": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_423": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_423": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_431": {
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_make_placeholders(x, S)",
                            "Call"
                        ],
                        [
                            "_make_placeholders(x, S, tf.int32)",
                            "Call"
                        ],
                        [
                            "_make_placeholders(x, S)",
                            "Call"
                        ],
                        [
                            "_make_placeholders(x, S)",
                            "Call"
                        ],
                        [
                            "_make_placeholders(x, S)",
                            "Call"
                        ],
                        [
                            "_make_placeholders(x, S)",
                            "Call"
                        ],
                        [
                            "_make_placeholders(x, S)",
                            "Call"
                        ],
                        [
                            "_make_placeholders(x, S, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(xtype, x.shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_losses.py": {
        "tensorflow": {
            "Normal_14": {
                "variable": {
                    "value": "log_like",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers(X=X_)",
                            "Call"
                        ],
                        [
                            "layers(X=X_)",
                            "Call"
                        ],
                        [
                            "layers(X=X_)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TestCase_18": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_30": {
                "variable": {
                    "value": "log_like",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers(X=X_)",
                            "Call"
                        ],
                        [
                            "layers(X=X_)",
                            "Call"
                        ],
                        [
                            "layers(X=X_)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TestCase_34": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "Y.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "n_samples_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TestCase_78": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_prediction.py": {
        "tensorflow": {
            "TestCase_14": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TestCase_27": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_33": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_47": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_35": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TestCase_38": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_49": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tuple()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TestCase_53": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_55": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_utils.py": {
        "tensorflow": {}
    }
}