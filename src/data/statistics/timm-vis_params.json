{
    "build/lib/timm-vis/helpers.py": {
        "torch": {
            "sum_40": {
                "input": {
                    "value": "torch.abs(x[:, :, :-1, :] - x[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_40": {
                "input": {
                    "value": "x[:, :, :-1, :] - x[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "build/lib/timm-vis/methods.py": {
        "torch": {
            "softmax_86": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_139": {
                "variable": {
                    "value": "(saliency, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "img_t.grad.data.abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_161": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[noise]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_decay",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StepLR_162": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD([noise], lr=lr, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([orig_img], lr=lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([noise], lr=lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([img_t], lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "step_size",
                            "Method Argument"
                        ],
                        [
                            "step_size",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.6",
                            "Method Argument"
                        ],
                        [
                            "gamma",
                            "Method Argument"
                        ],
                        [
                            "gamma",
                            "Method Argument"
                        ],
                        [
                            "0.6",
                            "Method Argument"
                        ],
                        [
                            "0.6",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_195": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[orig_img]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StepLR_196": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD([noise], lr=lr, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([orig_img], lr=lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([noise], lr=lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([img_t], lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "step_size",
                            "Method Argument"
                        ],
                        [
                            "step_size",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.6",
                            "Method Argument"
                        ],
                        [
                            "gamma",
                            "Method Argument"
                        ],
                        [
                            "gamma",
                            "Method Argument"
                        ],
                        [
                            "0.6",
                            "Method Argument"
                        ],
                        [
                            "0.6",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_235": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[noise]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StepLR_236": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD([noise], lr=lr, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([orig_img], lr=lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([noise], lr=lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([img_t], lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "step_size",
                            "Method Argument"
                        ],
                        [
                            "step_size",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.6",
                            "Method Argument"
                        ],
                        [
                            "gamma",
                            "Method Argument"
                        ],
                        [
                            "gamma",
                            "Method Argument"
                        ],
                        [
                            "0.6",
                            "Method Argument"
                        ],
                        [
                            "0.6",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_273": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[img_t]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StepLR_274": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD([noise], lr=lr, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([orig_img], lr=lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([noise], lr=lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([img_t], lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "step_size",
                            "Method Argument"
                        ],
                        [
                            "step_size",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.6",
                            "Method Argument"
                        ],
                        [
                            "gamma",
                            "Method Argument"
                        ],
                        [
                            "gamma",
                            "Method Argument"
                        ],
                        [
                            "0.6",
                            "Method Argument"
                        ],
                        [
                            "0.6",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_107": {
                "variable": {
                    "value": "probs_occ",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_167": {
                "input": {
                    "value": "outs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_201": {
                "input": {
                    "value": "outs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_23": {
                "n": {
                    "value": "out_chs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "merged_weights.shape[0]",
                            "Subscript"
                        ],
                        [
                            "max_filters",
                            "variable"
                        ]
                    ]
                }
            },
            "randperm_58": {
                "n": {
                    "value": "acts.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "build/lib/timm_vis/helpers.py": {
        "torch": {
            "sum_55": {
                "input": {
                    "value": "torch.abs(x[:, :, :-1, :] - x[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_55": {
                "input": {
                    "value": "x[:, :, :-1, :] - x[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "build/lib/timm_vis/methods.py": {
        "torch": {
            "softmax_95": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "probs_occ",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_198": {
                "input": {
                    "value": "outs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_243": {
                "input": {
                    "value": "outs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "timm_vis/helpers.py": {
        "torch": {
            "sum_55": {
                "input": {
                    "value": "torch.abs(x[:, :, :-1, :] - x[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_55": {
                "input": {
                    "value": "x[:, :, :-1, :] - x[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "timm_vis/methods.py": {
        "torch": {
            "softmax_95": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "probs_occ",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_198": {
                "input": {
                    "value": "outs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_243": {
                "input": {
                    "value": "outs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}