{
    "dataset/dataset.py": {
        "torch": {}
    },
    "dataset/video_dataset.py": {
        "torch": {}
    },
    "image_train.py": {
        "torch": {
            "device_50": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_78": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': network.decoder.parameters()}, {'params': network.transform.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_55": {
                "f": {
                    "value": "args.vgg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "dataset": {
                    "value": "content_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FlatFolderDataset(args.content_dir, content_tf)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "InfiniteSamplerWrapper(content_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "dataset": {
                    "value": "style_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FlatFolderDataset(args.style_dir, style_tf)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "InfiniteSamplerWrapper(style_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_107": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder.state_dict()",
                            "Call"
                        ],
                        [
                            "network.transform.state_dict()",
                            "Call"
                        ],
                        [
                            "optimizer.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{:s}/decoder_iter_{:d}.pth'.format(args.save_dir, i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_113": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder.state_dict()",
                            "Call"
                        ],
                        [
                            "network.transform.state_dict()",
                            "Call"
                        ],
                        [
                            "optimizer.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{:s}/transformer_iter_{:d}.pth'.format(args.save_dir, i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_117": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder.state_dict()",
                            "Call"
                        ],
                        [
                            "network.transform.state_dict()",
                            "Call"
                        ],
                        [
                            "optimizer.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{:s}/optimizer_iter_{:d}.pth'.format(args.save_dir, i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_106": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_112": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "model/Decoder.py": {
        "torch": {
            "Sequential_31": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Upsample_22": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_24": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_27": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/Net.py": {
        "torch": {
            "Sequential_42": {
                "variable": {
                    "value": "self.enc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.children())[:4]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.enc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.children())[4:11]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.enc_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.children())[11:18]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.enc_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.children())[18:31]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.enc_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.children())[31:44]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MSELoss_53": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_54": {
                "variable": {
                    "value": "self.variation_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_51": {
                "f": {
                    "value": "weight/transformer_iter_ + str(start_iter) + .pth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_52": {
                "f": {
                    "value": "weight/decoder_iter_ + str(start_iter) + .pth",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/SANet.py": {
        "torch": {
            "Conv2d_24": {
                "variable": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softmax_27": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "bmm_38": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f(mean_variance_norm(content))",
                            "Call"
                        ],
                        [
                            "F.view(b, -1, w * h).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g(mean_variance_norm(style))",
                            "Call"
                        ],
                        [
                            "G.view(b, -1, w * h)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_42": {
                "variable": {
                    "value": "O",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h(style)",
                            "Call"
                        ],
                        [
                            "H.view(b, -1, w * h)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "S.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/VGG.py": {
        "torch": {
            "Sequential_32": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_26": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_28": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "video_train.py": {
        "torch": {
            "device_51": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_62": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': network.decoder.parameters()}, {'params': network.transform.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_55": {
                "f": {
                    "value": "args.vgg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_109": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder.state_dict()",
                            "Call"
                        ],
                        [
                            "network.transform.state_dict()",
                            "Call"
                        ],
                        [
                            "optimizer.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{:s}/decoder_iter_{:d}.pth'.format(args.save_dir, i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_115": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder.state_dict()",
                            "Call"
                        ],
                        [
                            "network.transform.state_dict()",
                            "Call"
                        ],
                        [
                            "optimizer.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{:s}/transformer_iter_{:d}.pth'.format(args.save_dir, i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_119": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder.state_dict()",
                            "Call"
                        ],
                        [
                            "network.transform.state_dict()",
                            "Call"
                        ],
                        [
                            "optimizer.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{:s}/optimizer_iter_{:d}.pth'.format(args.save_dir, i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_108": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_114": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}