{
    "GA.py": {
        "torch": {
            "seed_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_44": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "folder + '/' + filename + '/' + settings['target']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_63": {
                "variable": {
                    "value": "population",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "run1/model_stateFiles/weights_gen_1.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_65": {
                "variable": {
                    "value": "hidden_states_batched_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "run1/model_stateFiles/hidden_states_batched_A_gen_0.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_66": {
                "variable": {
                    "value": "hidden_states_batched_B",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "run1/model_stateFiles/hidden_states_batched_B_gen_0.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.normal(0, 1, self.weight_shape) * 0.1 * self.settings['initial_noise']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_117": {
                "obj": {
                    "value": "population[sort_idx[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "'{0}/bestofFiles/weights_gen_{1}_{2}.pt'.format(self.settings['run_directory'], epoch, sort_idx[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_120": {
                "obj": {
                    "value": "past_hidden_states_batched_A[sort_idx[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "'{0}/bestofFiles/past_hidden_states_batched_A_gen_{1}_id_{2}.pt'.format(self.settings['run_directory'], epoch, sort_idx[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_121": {
                "obj": {
                    "value": "past_hidden_states_batched_B[sort_idx[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "'{0}/bestofFiles/past_hidden_states_batched_B_gen_{1}_id_{2}.pt'.format(self.settings['run_directory'], epoch, sort_idx[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_176": {
                "obj": {
                    "value": "population",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.load('run1/model_stateFiles/weights_gen_1.pt')",
                            "Call"
                        ],
                        [
                            "new_pop",
                            "Name"
                        ]
                    ]
                },
                "f": {
                    "value": "'{0}/model_stateFiles/weights_gen_{1}.pt'.format(self.settings['run_directory'], epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_201": {
                "ndarray": {
                    "value": "np.random.normal(0, 1, self.weight_shape) * self.sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "GA_2d.py": {
        "torch": {
            "seed_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_48": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "folder + '/' + filename + '/' + settings['target']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.normal(0, 1, self.weight_shape) * 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_122": {
                "obj": {
                    "value": "population[sort_idx[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "'{0}/weightFiles/GA_saved_weights_gen_{1}_{2}.dat'.format(self.settings['run_directory'], epoch, max_fitness)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "population",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "new_pop",
                            "Name"
                        ]
                    ]
                },
                "f": {
                    "value": "'{0}/model_stateFiles/weights_gen_{1}_{2}.dat'.format(self.settings['run_directory'], epoch, max_fitness)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_166": {
                "obj": {
                    "value": "hidden_states_batched_A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[row[6] for row in results]",
                            "ListComp"
                        ]
                    ]
                },
                "f": {
                    "value": "'{0}/model_stateFiles/hidden_states_batched_A_gen_{1}.pt'.format(self.settings['run_directory'], epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_167": {
                "obj": {
                    "value": "hidden_states_batched_B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[row[7] for row in results]",
                            "ListComp"
                        ]
                    ]
                },
                "f": {
                    "value": "'{0}/model_stateFiles/hidden_states_batched_B_gen_{1}.pt'.format(self.settings['run_directory'], epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_185": {
                "ndarray": {
                    "value": "np.random.normal(0, 1, self.weight_shape) * self.sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "artefact_nca/base/base_torch_dataset.py": {
        "torch": {
            "randint_24": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "max_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.__len__()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "artefact_nca/base/base_torch_model.py": {
        "torch": {}
    },
    "artefact_nca/base/base_torch_trainer.py": {
        "torch": {
            "device_78": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(self.device_id) if self.use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_247": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attr.ib(init=False)",
                            "Call"
                        ],
                        [
                            "self.checkpoint_path",
                            "Attribute"
                        ],
                        [
                            "base_path",
                            "Name"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_228": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'model': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'scheduler': self.scheduler.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(checkpoint_path, map_location=self.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "torch_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "'{}/{}.pt'.format(path, self.name)",
                            "Call"
                        ],
                        [
                            "'{}/{}_iteration_{}.pt'.format(path, self.name, step)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "artefact_nca/dataset/voxel_dataset.py": {
        "torch": {
            "from_numpy_100": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "artefact_nca/model/voxel_ca_model.py": {
        "torch": {
            "Conv3d_14": {
                "variable": {
                    "value": "conv3d",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_channels * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "*args": {
                    "value": "*layer_list",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_35": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_channels * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_136": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_23": {
                "in_channels": {
                    "value": "channel_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool3d_139": {
                "input": {
                    "value": "x[:, self.living_channel_dim:self.living_channel_dim + 1, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_19": {
                "in_channels": {
                    "value": "channel_dims[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel_dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_like_155": {
                "input": {
                    "value": "x[:, :1, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "artefact_nca/trainer/voxel_ca_trainer.py": {
        "torch": {
            "mean_101": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.cross_entropy(x[:, :self.num_categories, :, :, :].float(), targets, reduction='none')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[-2, -3, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_192": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(targets, min=0, max=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_193": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.argmax(out[:, :self.num_categories, :, :, :], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_196": {
                "variable": {
                    "value": "intersect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out & targets",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_197": {
                "variable": {
                    "value": "union",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out | targets",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_174": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(initial).to(self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_entropy_206": {
                "variable": {
                    "value": "class_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :self.num_categories, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(targets, min=0, max=1)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_209": {
                "variable": {
                    "value": "alive",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, self.num_categories, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_210": {
                "variable": {
                    "value": "alive_target_cells",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(targets, min=0, max=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_213": {
                "variable": {
                    "value": "class_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :self.num_categories, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(targets, min=0, max=1)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_categories",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_218": {
                "variable": {
                    "value": "alive_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :self.num_categories, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(targets, min=0, max=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight.to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_102": {
                "input": {
                    "value": "x[:, :self.num_categories, :, :, :].float()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(targets, min=0, max=1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_134": {
                "ndarray": {
                    "value": "not_in_sphere[:, :, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "ndarray": {
                    "value": "ones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ones((batch.shape[1], batch.shape[2], batch.shape[3])) - not_in_sphere",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_194": {
                "input": {
                    "value": "out[:, :self.num_categories, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_260": {
                "variable": {
                    "value": "batch[:1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.get_seed()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "artefact_nca/utils/logging.py": {
        "torch": {
            "SummaryWriter_31": {
                "variable": {
                    "value": "tensorboard_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "tensorboard_run_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "artefact_nca/utils/minecraft/minecraft_client.py": {
        "torch": {
            "no_grad_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "artefact_nca/utils/torch_utils.py": {
        "torch": {
            "Linear_9": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_11": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[linear, activation]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "*args": {
                    "value": "*[input_layer, *hidden_layers, output_layer]",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "evaluation.py": {
        "torch": {
            "zeros_48": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "im_size * im_size * im_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_classes",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "settings['voxel_types']",
                            "Subscript"
                        ],
                        [
                            "settings['voxel_types'] + 1",
                            "BinOp"
                        ],
                        [
                            "settings['voxel_types']",
                            "Subscript"
                        ],
                        [
                            "settings['voxel_types'] + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_238": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "im_size * im_size * im_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_classes",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "settings['voxel_types']",
                            "Subscript"
                        ],
                        [
                            "settings['voxel_types'] + 1",
                            "BinOp"
                        ],
                        [
                            "settings['voxel_types']",
                            "Subscript"
                        ],
                        [
                            "settings['voxel_types'] + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "vector_to_parameters_39": {
                "vec": {
                    "value": "torch.tensor(w, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "parameters": {
                    "value": "p.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_62": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(im_size, im_size, 2, 1, im_size * im_size * im_size, hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_63": {
                "variable": {
                    "value": "hidden_states_batched_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, im_size * im_size * im_size, hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_64": {
                "variable": {
                    "value": "hidden_states_batched_B",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, im_size * im_size * im_size, hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_68": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(im_size, im_size, 2, 1, im_size * im_size * im_size, hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_69": {
                "variable": {
                    "value": "hidden_states_batched_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, im_size * im_size * im_size, hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_70": {
                "variable": {
                    "value": "hidden_states_batched_B",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, im_size * im_size * im_size, hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "batch_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "im_size * im_size * im_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "input_dim",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "settings['number_neighbors']",
                            "Subscript"
                        ],
                        [
                            "3 * 9 * 2",
                            "BinOp"
                        ],
                        [
                            "settings['number_neighbors']",
                            "Subscript"
                        ],
                        [
                            "3 * 9 * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "vector_to_parameters_228": {
                "vec": {
                    "value": "torch.tensor(w, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "parameters": {
                    "value": "p.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_249": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(im_size, im_size, 2, 1, im_size * im_size * im_size, hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_250": {
                "variable": {
                    "value": "hidden_states_batched_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, im_size * im_size * im_size, hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_251": {
                "variable": {
                    "value": "hidden_states_batched_B",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, im_size * im_size * im_size, hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_254": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(im_size, im_size, 2, 1, im_size * im_size * im_size, hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_255": {
                "variable": {
                    "value": "hidden_states_batched_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, im_size * im_size * im_size, hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_256": {
                "variable": {
                    "value": "hidden_states_batched_B",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, im_size * im_size * im_size, hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_279": {
                "variable": {
                    "value": "batch_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "im_size * im_size * im_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "input_dim",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "settings['number_neighbors']",
                            "Subscript"
                        ],
                        [
                            "3 * 9 * 2",
                            "BinOp"
                        ],
                        [
                            "settings['number_neighbors']",
                            "Subscript"
                        ],
                        [
                            "3 * 9 * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_39": {
                "data": {
                    "value": "w",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "params[0][1]",
                            "Subscript"
                        ],
                        [
                            "params[0][1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_228": {
                "data": {
                    "value": "w",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "params[0][1]",
                            "Subscript"
                        ],
                        [
                            "params[0][1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_90": {
                "variable": {
                    "value": "cell_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(morphogens[:, i - 1:i + 2, j - 1:j + 2, k - 1:k + 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "cell_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[morphogens[0, i - 1, j, k], morphogens[0, i + 1, j, k], morphogens[0, i, j + 1, k], morphogens[0, i, j - 1, k], morphogens[0, i, j, k - 1], morphogens[0, i, j, k + 1], morphogens[0, i, j, k]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_118": {
                "variable": {
                    "value": "morph_tmp[1, i, j, k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "morphogens[1][np.newaxis, :, :]",
                            "Subscript"
                        ],
                        [
                            "output[0, counter].data[5]",
                            "Subscript"
                        ],
                        [
                            "morphogens[1][np.newaxis, :, :]",
                            "Subscript"
                        ],
                        [
                            "output[0, counter].data[5]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "flatten_286": {
                "variable": {
                    "value": "cell_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(morphogens[:, i - 1:i + 2, j - 1:j + 2, k - 1:k + 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_288": {
                "variable": {
                    "value": "cell_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[morphogens[0, i - 1, j, k], morphogens[0, i + 1, j, k], morphogens[0, i, j + 1, k], morphogens[0, i, j - 1, k], morphogens[0, i, j, k - 1], morphogens[0, i, j, k + 1], morphogens[0, i, j, k]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_313": {
                "variable": {
                    "value": "morph_tmp[1, i, j, k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "morphogens[1][np.newaxis, :, :]",
                            "Subscript"
                        ],
                        [
                            "output[0, counter].data[5]",
                            "Subscript"
                        ],
                        [
                            "morphogens[1][np.newaxis, :, :]",
                            "Subscript"
                        ],
                        [
                            "output[0, counter].data[5]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_90": {
                "data": {
                    "value": "morphogens[:, i - 1:i + 2, j - 1:j + 2, k - 1:k + 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_286": {
                "data": {
                    "value": "morphogens[:, i - 1:i + 2, j - 1:j + 2, k - 1:k + 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation_2d.py": {
        "torch": {
            "zeros_57": {
                "variable": {
                    "value": "out_sleep",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "im_size * im_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "im_size * im_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "settings['voxel_types']",
                            "Subscript"
                        ],
                        [
                            "num_classes + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_70": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(im_size, im_size, 2, 1, im_size * im_size, hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_71": {
                "variable": {
                    "value": "hidden_states_batched_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, im_size * im_size, hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_72": {
                "variable": {
                    "value": "hidden_states_batched_B",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, im_size * im_size, hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "vector_to_parameters_46": {
                "vec": {
                    "value": "torch.tensor(w, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "parameters": {
                    "value": "p.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "batch_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "im_size * im_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "input_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "settings['number_neighbors']",
                            "Subscript"
                        ],
                        [
                            "9 * 2",
                            "BinOp"
                        ],
                        [
                            "input_dim + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_46": {
                "data": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params[0][1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "cell_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[morphogens_sleep[0, i - 1, e], morphogens_sleep[0, i + 1, e], morphogens_sleep[0, i, e + 1], morphogens_sleep[0, i, e - 1], morphogens_sleep[0, i, e], out[0][counter][num_classes - 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "cell_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "settings['number_neighbors']",
                            "Subscript"
                        ],
                        [
                            "9 * 2",
                            "BinOp"
                        ],
                        [
                            "input_dim + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_107": {
                "variable": {
                    "value": "cell_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(morphogens[:, i - 1:i + 2, e - 1:e + 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "cell_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[morphogens[0, i - 1, e], morphogens[0, i + 1, e], morphogens[0, i, e + 1], morphogens[0, i, e - 1], morphogens[0, i, e]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_147": {
                "variable": {
                    "value": "morph_tmp[1, i, e]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "morphogens[1][np.newaxis, :, :]",
                            "Subscript"
                        ],
                        [
                            "output[0, counter].data[4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_107": {
                "data": {
                    "value": "morphogens[:, i - 1:i + 2, e - 1:e + 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "genotype_net.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_22": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "32",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "number_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "number_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_34": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parameters_to_vector_46": {
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "main_creatures.py": {
        "torch": {
            "load_108": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.show",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main_creatures_2d.py": {
        "torch": {
            "load_109": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.show",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_168": {
                "obj": {
                    "value": "es.get_weights()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "regeneration_task.py": {
        "torch": {
            "load_109": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.show",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}