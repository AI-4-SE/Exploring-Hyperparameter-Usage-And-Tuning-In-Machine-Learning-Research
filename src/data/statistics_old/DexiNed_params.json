{
    "DexiNed-TF2/dataset_manager.py": {
        "tensorflow": {}
    },
    "DexiNed-TF2/mainTF.py": {
        "tensorflow": {
            "list_physical_devices_76": {
                "variable": {
                    "value": "gpus",
                    "type": "Name",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_log_device_placement_75": {
                "enabled": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "list_logical_devices_83": {
                "variable": {
                    "value": "logical_gpus",
                    "type": "Name",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_logical_device_configuration_80": {
                "device": {
                    "value": "gpus[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logical_devices": {
                    "value": "[tf.config.LogicalDeviceConfiguration(memory_limit=1024)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LogicalDeviceConfiguration_82": {
                "memory_limit": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "DexiNed-TF2/model.py": {
        "tensorflow": {
            "glorot_normal_16": {
                "variable": {
                    "value": "weight_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clear_session_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_307": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_308": {
                "variable": {
                    "value": "negatives",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_309": {
                "variable": {
                    "value": "positives",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label",
                            "Name"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_313": {
                "variable": {
                    "value": "cost",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "pos_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beta / (1 - beta)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(y, 0.0), beta2, beta)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_315": {
                "variable": {
                    "value": "cost",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cost * (1 - beta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2D_132": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 if i == up_scale - 1 else constant_features",
                            "IfExp"
                        ],
                        [
                            "mid_features if out_features is None else out_features",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "k_reg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Conv2D_167": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "mid_features",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.initializers.glorot_normal()",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "k_reg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "BatchNormalization_171": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_173": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 if i == up_scale - 1 else constant_features",
                            "IfExp"
                        ],
                        [
                            "mid_features if out_features is None else out_features",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.initializers.glorot_normal()",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "k_reg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "BatchNormalization_177": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_178": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_205": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_299": {
                "variable": {
                    "value": "block_cat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[out_1, out_2, out_3, out_4, out_5, out_6]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_316": {
                "condition": {
                    "value": "tf.equal(positives, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "cost",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.weighted_cross_entropy_with_logits(labels=label, logits=input, pos_weight=pos_w, name=None)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(cost * (1 - beta))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_329": {
                "variable": {
                    "value": "tmp_y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_330": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tmp_y > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_332": {
                "variable": {
                    "value": "positives",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.dtypes.cast(tmp_y > 0.0, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_337": {
                "variable": {
                    "value": "pos_w",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(y, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "beta2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 * positives / (negatives + positives)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "negatives / (negatives + positives)",
                            "BinOp"
                        ],
                        [
                            "1.1 * negatives / (positives + negatives)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_338": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tmp_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNormalization_137": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_316": {
                "x": {
                    "value": "positives",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.reduce_sum(y)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_sum(mask, axis=[1, 2, 3], keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "layers": {
                    "value": "[layers.ReLU(), layers.Conv2D(filters=out_features, kernel_size=(3, 3), strides=(1, 1), padding='same', use_bias=True, kernel_initializer=weight_init, kernel_regularizer=k_reg), layers.BatchNormalization(), layers.ReLU(), layers.Conv2D(filters=out_features, kernel_size=(3, 3), strides=(1, 1), padding='same', use_bias=True, kernel_initializer=weight_init, kernel_regularizer=k_reg), layers.BatchNormalization()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_337": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_242": {
                "value": {
                    "value": "1 / 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_32": {
                "filters": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 if i == up_scale - 1 else constant_features",
                            "IfExp"
                        ],
                        [
                            "mid_features if out_features is None else out_features",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.initializers.glorot_normal()",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "k_reg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "BatchNormalization_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_38": {
                "filters": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 if i == up_scale - 1 else constant_features",
                            "IfExp"
                        ],
                        [
                            "mid_features if out_features is None else out_features",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.initializers.glorot_normal()",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "k_reg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "BatchNormalization_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_92": {
                "filters": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 if i == up_scale - 1 else constant_features",
                            "IfExp"
                        ],
                        [
                            "mid_features if out_features is None else out_features",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.initializers.RandomNormal(mean=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "k_reg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_96": {
                "filters": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 if i == up_scale - 1 else constant_features",
                            "IfExp"
                        ],
                        [
                            "mid_features if out_features is None else out_features",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(total_up_scale, total_up_scale)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.initializers.RandomNormal(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "k_reg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_103": {
                "filters": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 if i == up_scale - 1 else constant_features",
                            "IfExp"
                        ],
                        [
                            "mid_features if out_features is None else out_features",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.initializers.glorot_normal()",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "k_reg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_107": {
                "filters": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 if i == up_scale - 1 else constant_features",
                            "IfExp"
                        ],
                        [
                            "mid_features if out_features is None else out_features",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(total_up_scale, total_up_scale)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.initializers.glorot_normal()",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "k_reg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ],
                        [
                            "None if w_decay is None else l2(w_decay)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "RandomNormal_94": {
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RandomNormal_99": {
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "legacy/run_model.py": {
        "tensorflow": {
            "GPUOptions_83": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "gpu_fraction",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Session_86": {
                "config": {
                    "value": "tf.compat.v1.ConfigProto(gpu_options=gpu_options, intra_op_parallelism_threads=num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_88": {
                "config": {
                    "value": "tf.compat.v1.ConfigProto()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_86": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=gpu_fraction)",
                            "Call"
                        ]
                    ]
                },
                "intra_op_parallelism_threads": {
                    "value": "num_threads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "ConfigProto_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "legacy/test.py": {
        "tensorflow": {
            "Saver_38": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "legacy/train.py": {
        "tensorflow": {
            "AdamOptimizer_43": {
                "variable": {
                    "value": "opt",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(self.args.learning_rate, dtype=tf.float16)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_45": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_39": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self.args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_85": {
                "variable": {
                    "value": "run_metadata",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_64": {
                "variable": {
                    "value": "last_ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.args.checkpoint_dir, self.args.model_name + '_' + self.args.train_dataset, 'train')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.args.checkpoint_dir, self.args.model_name + '_' + self.args.train_dataset)",
                            "Call"
                        ],
                        [
                            "os.path.join(model_path, 'train')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "legacy/utls/losses.py": {
        "tensorflow": {
            "cast_12": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_14": {
                "variable": {
                    "value": "count_neg",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_15": {
                "variable": {
                    "value": "count_pos",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_21": {
                "variable": {
                    "value": "cost",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "targets": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beta / (1 - beta)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_24": {
                "variable": {
                    "value": "cost",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cost * (1 - beta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_27": {
                "condition": {
                    "value": "tf.equal(count_pos, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "cost",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.weighted_cross_entropy_with_logits(logits=logits, targets=y, pos_weight=pos_weight)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cost * (1 - beta))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cross_entrony_loss'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "equal_27": {
                "x": {
                    "value": "count_pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(y)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "datasets.py": {
        "torch": {
            "from_numpy_304": {
                "variable": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_488": {
                "variable": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_489": {
                "variable": {
                    "value": "gt",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([gt])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_308": {
                "variable": {
                    "value": "gt",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([gt])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_314": {
                "variable": {
                    "value": "gt",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([gt])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dexi_utils.py": {
        "torch": {
            "sigmoid_79": {
                "variable": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.squeeze(tensor) if len(tensor.shape) > 2 else tensor",
                            "IfExp"
                        ]
                    ]
                }
            },
            "squeeze_78": {
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.squeeze(tensor) if len(tensor.shape) > 2 else tensor",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "losses.py": {
        "torch": {
            "sum_10": {
                "variable": {
                    "value": "num_positive",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(mask > 0.1).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_11": {
                "variable": {
                    "value": "num_negative",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(mask <= 0.0).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_15": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_26": {
                "variable": {
                    "value": "num_positive",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(mask > 0.0).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_27": {
                "variable": {
                    "value": "num_negative",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(mask <= 0.0).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_32": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_35": {
                "variable": {
                    "value": "cost",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "cost.float().mean((1, 2, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_54": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sigmoid_57": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_65": {
                "variable": {
                    "value": "num_positive",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(mask > 0.5).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_66": {
                "variable": {
                    "value": "num_negative",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(mask == 0).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_83": {
                "variable": {
                    "value": "filt",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 * radius + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 * radius + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_89": {
                "variable": {
                    "value": "texture_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "filt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(1, 1, 2 * radius + 1, 2 * radius + 1)",
                            "Call"
                        ],
                        [
                            "filt.to(device)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "radius",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_92": {
                "variable": {
                    "value": "pred_texture_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction * (1 - label) * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "filt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(1, 1, 2 * radius + 1, 2 * radius + 1)",
                            "Call"
                        ],
                        [
                            "filt.to(device)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "radius",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "clamp_94": {
                "variable": {
                    "value": "softmax_map",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_bdr_sum / (pred_texture_sum + pred_bdr_sum + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-10",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_106": {
                "variable": {
                    "value": "filt1",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_109": {
                "variable": {
                    "value": "filt2",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 * mask_radius + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 * mask_radius + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_113": {
                "variable": {
                    "value": "pred_sums",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "filt1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(1, 1, 3, 3)",
                            "Call"
                        ],
                        [
                            "filt1.to(device)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_114": {
                "variable": {
                    "value": "label_sums",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "filt2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(1, 1, 2 * mask_radius + 1, 2 * mask_radius + 1)",
                            "Call"
                        ],
                        [
                            "filt2.to(device)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "mask_radius",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sigmoid_139": {
                "variable": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prediction.float()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(prediction)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_141": {
                "variable": {
                    "value": "cost",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.functional.binary_cross_entropy(prediction.float(), label.float(), weight=mask, reduce=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_121": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.BCELoss(weights, reduction='sum')(inputs.float(), targets.float())",
                            "Call"
                        ],
                        [
                            "-torch.log(torch.clamp(1 - pred_sums / 9, 1e-10, 1 - 1e-10))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sum_133": {
                "variable": {
                    "value": "num_positive",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(mask == 1).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_134": {
                "variable": {
                    "value": "num_negative",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(mask == 0).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCELoss_16": {
                "weight": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "label.float()",
                            "Call"
                        ],
                        [
                            "(texture_mask != 0).float()",
                            "Call"
                        ],
                        [
                            "1 - torch.gt(label_sums, 0).float()",
                            "BinOp"
                        ],
                        [
                            "label.clone()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_18": {
                "input": {
                    "value": "cost",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.BCELoss(mask, reduction='sum')(inputs.float(), targets.float())",
                            "Call"
                        ],
                        [
                            "torch.nn.BCELoss(mask, reduction='none')(inputs, targets.float())",
                            "Call"
                        ],
                        [
                            "torch.sum(cost.float().mean((1, 2, 3)))",
                            "Call"
                        ],
                        [
                            "torch.nn.BCELoss(mask, reduction='sum')(inputs.float(), label.float())",
                            "Call"
                        ],
                        [
                            "-label * torch.log(softmax_map)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.nn.functional.binary_cross_entropy(prediction.float(), label.float(), weight=mask, reduce=False))",
                            "Call"
                        ]
                    ]
                }
            },
            "BCELoss_33": {
                "weight": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "label.float()",
                            "Call"
                        ],
                        [
                            "(texture_mask != 0).float()",
                            "Call"
                        ],
                        [
                            "1 - torch.gt(label_sums, 0).float()",
                            "BinOp"
                        ],
                        [
                            "label.clone()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_58": {
                "weight": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((n, c, h, w))",
                            "Call"
                        ],
                        [
                            "torch.Tensor(weights)",
                            "Call"
                        ],
                        [
                            "weights.cuda()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_72": {
                "weight": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "label.float()",
                            "Call"
                        ],
                        [
                            "(texture_mask != 0).float()",
                            "Call"
                        ],
                        [
                            "1 - torch.gt(label_sums, 0).float()",
                            "BinOp"
                        ],
                        [
                            "label.clone()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_74": {
                "input": {
                    "value": "cost",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.BCELoss(mask, reduction='sum')(inputs.float(), targets.float())",
                            "Call"
                        ],
                        [
                            "torch.nn.BCELoss(mask, reduction='none')(inputs, targets.float())",
                            "Call"
                        ],
                        [
                            "torch.sum(cost.float().mean((1, 2, 3)))",
                            "Call"
                        ],
                        [
                            "torch.nn.BCELoss(mask, reduction='sum')(inputs.float(), label.float())",
                            "Call"
                        ],
                        [
                            "-label * torch.log(softmax_map)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.nn.functional.binary_cross_entropy(prediction.float(), label.float(), weight=mask, reduce=False))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_88": {
                "input": {
                    "value": "bdr_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prediction * label",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "filt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(1, 1, 2 * radius + 1, 2 * radius + 1)",
                            "Call"
                        ],
                        [
                            "filt.to(device)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "radius",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "log_95": {
                "input": {
                    "value": "softmax_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(pred_bdr_sum / (pred_texture_sum + pred_bdr_sum + 1e-10), 1e-10, 1 - 1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_116": {
                "input": {
                    "value": "label_sums",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(label.float(), filt2, bias=None, stride=1, padding=mask_radius)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_118": {
                "input": {
                    "value": "torch.clamp(1 - pred_sums / 9, 1e-10, 1 - 1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_141": {
                "input": {
                    "value": "prediction.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "label.float()",
                            "Call"
                        ],
                        [
                            "(texture_mask != 0).float()",
                            "Call"
                        ],
                        [
                            "1 - torch.gt(label_sums, 0).float()",
                            "BinOp"
                        ],
                        [
                            "label.clone()",
                            "Call"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_118": {
                "input": {
                    "value": "1 - pred_sums / 9",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-10",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataLoader_391": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TestDataset(args.input_val_dir, test_data=args.test_data, img_width=args.test_img_width, img_height=args.test_img_height, mean_bgr=args.mean_pixel_values[0:3] if len(args.mean_pixel_values) == 4 else args.mean_pixel_values, test_list=args.test_list, arg=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_415": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_345": {
                "variable": {
                    "value": "tb_writer",
                    "type": "Name",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "training_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, args.train_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_378": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BipedDataset(args.input_dir, img_width=args.img_width, img_height=args.img_height, mean_bgr=args.mean_pixel_values[0:3] if len(args.mean_pixel_values) == 4 else args.mean_pixel_values, train_mode='train', arg=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "rand_275": {
                "variable": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "img_height",
                    "type": "Name",
                    "possible_values": [
                        [
                            "352",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "img_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "352",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_41": {
                "variable": {
                    "value": "self.norm_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_42": {
                "variable": {
                    "value": "self.norm_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_48": {
                "variable": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(attn)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_out_features(i, up_scale)",
                            "Call"
                        ],
                        [
                            "mid_features",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_124": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_out_features(i, up_scale)",
                            "Call"
                        ],
                        [
                            "mid_features",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_143": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_features",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_145": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_features",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_features",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_out_features(i, up_scale)",
                            "Call"
                        ],
                        [
                            "mid_features",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_147": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_out_features(i, up_scale)",
                            "Call"
                        ],
                        [
                            "mid_features",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_148": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_172": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "block_cat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[out_1, out_2, out_3, out_4, out_5, out_6]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_205": {
                "variable": {
                    "value": "new_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "(height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_out_features(i, up_scale)",
                            "Call"
                        ],
                        [
                            "mid_features",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_69": {
                "input": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "input_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_out_features(i, up_scale)",
                            "Call"
                        ],
                        [
                            "mid_features",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_out_features(i, up_scale)",
                            "Call"
                        ],
                        [
                            "mid_features",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_out_features(i, up_scale)",
                            "Call"
                        ],
                        [
                            "mid_features",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_out_features(i, up_scale)",
                            "Call"
                        ],
                        [
                            "mid_features",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_out_features(i, up_scale)",
                            "Call"
                        ],
                        [
                            "mid_features",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_104": {
                "in_channels": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_out_features(i, up_scale)",
                            "Call"
                        ],
                        [
                            "mid_features",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_out_features(i, up_scale)",
                            "Call"
                        ],
                        [
                            "mid_features",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 ** up_scale",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "all_pads[up_scale]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "utils/image.py": {
        "torch": {
            "sigmoid_74": {
                "variable": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor2",
                            "Name"
                        ],
                        [
                            "tensor",
                            "Name"
                        ],
                        [
                            "range(tmp.shape[0])",
                            "Call"
                        ],
                        [
                            "range(n)",
                            "Call"
                        ],
                        [
                            "range(n_imgs)",
                            "Call"
                        ],
                        [
                            [
                                0,
                                1
                            ],
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_57": {
                "variable": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor2",
                            "Name"
                        ],
                        [
                            "tensor",
                            "Name"
                        ],
                        [
                            "range(tmp.shape[0])",
                            "Call"
                        ],
                        [
                            "range(n)",
                            "Call"
                        ],
                        [
                            "range(n_imgs)",
                            "Call"
                        ],
                        [
                            [
                                0,
                                1
                            ],
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_43": {
                "input": {
                    "value": "tensor_image",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    }
}