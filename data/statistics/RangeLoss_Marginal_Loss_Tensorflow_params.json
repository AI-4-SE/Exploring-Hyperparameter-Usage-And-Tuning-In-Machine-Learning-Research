{
    "mnist_marginal_loss.py": {
        "tensorflow": {
            "Variable_18": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_128": {
                "variable": {
                    "value": "decayed_learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "starter_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "int"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "LEARNING_RATE_DECAY_FACTOR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "float"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "decayed_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(starter_learning_rate, global_step, decay_steps, LEARNING_RATE_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_138": {
                "variable": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "inference(input_images)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_141": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_142": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_148": {
                "variable": {
                    "value": "writer_test",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "./logdir/plot_test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FileWriter_149": {
                "variable": {
                    "value": "writer_train",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "./logdir/plot_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_152": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_153": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logs_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./logdir'",
                            "str"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_207": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "input_images",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_30": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.2",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_31": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_33": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "tf.divide(features, tf.norm(features, ord='euclidean'))",
                            "Call"
                        ],
                        [
                            "inference(input_images)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.norm(features, ord='euclidean')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_37": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "meshgrid_38": {
                "variable": {
                    "value": "(ii, jj)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(size)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(size)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "ij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_41": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.boolean_mask(ii, m), tf.boolean_mask(jj, m)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_43": {
                "variable": {
                    "value": "result_features",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "tf.divide(features, tf.norm(features, ord='euclidean'))",
                            "Call"
                        ],
                        [
                            "inference(input_images)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.boolean_mask(ii, m), tf.boolean_mask(jj, m)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_44": {
                "variable": {
                    "value": "result_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=None, name='labels')",
                            "Call"
                        ],
                        [
                            "mnist.train.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "mnist.test.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.boolean_mask(ii, m), tf.boolean_mask(jj, m)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_46": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_62": {
                "variable": {
                    "value": "(_, list_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[i, l]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[i.get_shape(), tf.TensorShape([None])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_64": {
                "variable": {
                    "value": "marginal_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "list_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.while_loop(condition, body, [i, l], shape_invariants=[i.get_shape(), tf.TensorShape([None])])",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_65": {
                "variable": {
                    "value": "marginal_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "marginal_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(list_val)",
                            "Call"
                        ],
                        [
                            "tf.divide(marginal_loss, tf.cast(tf.subtract(tf.square(size), size), dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "get_marginal_loss(features, labels)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(tf.subtract(tf.square(size), size), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_150": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.cast(tf.equal(tf.arg_max(logits, 1), labels), tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_151": {
                "name": {
                    "value": "cost",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "softmax_loss + ratio * marginal_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_14": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_55": {
                "variable": {
                    "value": "dis",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "result_features[i][0] - result_features[i][1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_56": {
                "variable": {
                    "value": "similar",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(result_labels[i][0], result_labels[i][1])",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 1.0",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : -1.0",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "maximum_57": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "epsilon - similar * (theta - dis)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_58": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[l, [temp]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.arg_max(logits, 1), labels), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_33": {
                "tensor": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "tf.divide(features, tf.norm(features, ord='euclidean'))",
                            "Call"
                        ],
                        [
                            "inference(input_images)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "ord": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_35": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "tf.divide(features, tf.norm(features, ord='euclidean'))",
                            "Call"
                        ],
                        [
                            "inference(input_images)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_49": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(10)",
                            "Call"
                        ],
                        [
                            "i in range(10)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.shape(result_features)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_65": {
                "x": {
                    "value": "tf.subtract(tf.square(size), size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_99": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_105": {
                "variable": {
                    "value": "softmax_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_110": {
                "name": {
                    "value": "acc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_113": {
                "name": {
                    "value": "loss/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_114": {
                "name": {
                    "value": "MarginalLoss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "marginal_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(list_val)",
                            "Call"
                        ],
                        [
                            "tf.divide(marginal_loss, tf.cast(tf.subtract(tf.square(size), size), dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "get_marginal_loss(features, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_115": {
                "name": {
                    "value": "SoftmaxLoss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "softmax_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_116": {
                "name": {
                    "value": "TotalLoss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "softmax_loss + ratio * marginal_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "boolean_mask_41": {
                "tensor": {
                    "value": "jj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(r, r, indexing='ij')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ii < jj",
                            "Compare"
                        ]
                    ]
                }
            },
            "equal_56": {
                "x": {
                    "value": "result_labels[i][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "result_labels[i][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_59": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(10)",
                            "Call"
                        ],
                        [
                            "i in range(10)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_65": {
                "x": {
                    "value": "tf.square(size)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(features)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "name_scope_101": {
                "name": {
                    "value": "marginal_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_104": {
                "name": {
                    "value": "softmax_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_107": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_111": {
                "x": {
                    "value": "tf.equal(tf.arg_max(logits, 1), labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_49": {
                "input": {
                    "value": "result_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(features, idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_63": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_65": {
                "x": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(features)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_105": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=None, name='labels')",
                            "Call"
                        ],
                        [
                            "mnist.train.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "mnist.test.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "inference(input_images)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_111": {
                "x": {
                    "value": "tf.arg_max(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=None, name='labels')",
                            "Call"
                        ],
                        [
                            "mnist.train.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "mnist.test.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arg_max_111": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "inference(input_images)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_range_loss.py": {
        "tensorflow": {
            "Variable_19": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_225": {
                "variable": {
                    "value": "decayed_learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "starter_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "int"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "LEARNING_RATE_DECAY_FACTOR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "float"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_231": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "decayed_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(starter_learning_rate, global_step, decay_steps, LEARNING_RATE_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_234": {
                "variable": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "inference(input_images)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_238": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_239": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_244": {
                "variable": {
                    "value": "writer_test",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "./logdir/plot_test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FileWriter_245": {
                "variable": {
                    "value": "writer_train",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "./logdir/plot_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_248": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_249": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logs_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./logdir'",
                            "str"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_303": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "input_images",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_25": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "meshgrid_26": {
                "variable": {
                    "value": "(ii, jj)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(size)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(tf.shape(features)[0], main_len_features), f2, f1)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(tf.shape(center_features)[0], min_number_centers), f2, f1)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(size)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(tf.shape(features)[0], main_len_features), f2, f1)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(tf.shape(center_features)[0], min_number_centers), f2, f1)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "ij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_29": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.boolean_mask(ii, m), tf.boolean_mask(jj, m)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_31": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.boolean_mask(ii, m), tf.boolean_mask(jj, m)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.unique(labels)",
                            "Call"
                        ],
                        [
                            "tf.unique(labels)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(condition, body, [i, output_list], shape_invariants=[i.get_shape(), tf.TensorShape([None])])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_33": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_34": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_45": {
                "variable": {
                    "value": "(_, list_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Call"
                        ],
                        [
                            "condition",
                            "Call"
                        ],
                        [
                            "condition",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ],
                        [
                            "body",
                            "Call"
                        ],
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[i, l]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[i.get_shape(), tf.TensorShape([None])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "main_len_features",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_58": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(tf.shape(features)[0], main_len_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f2",
                            "Call"
                        ],
                        [
                            "f2",
                            "Call"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f1",
                            "Call"
                        ],
                        [
                            "f1",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_63": {
                "variable": {
                    "value": "min_number_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_71": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(tf.shape(center_features)[0], min_number_centers)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f2",
                            "Call"
                        ],
                        [
                            "f2",
                            "Call"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f1",
                            "Call"
                        ],
                        [
                            "f1",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_75": {
                "variable": {
                    "value": "(unique_labels, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=None, name='labels')",
                            "Call"
                        ],
                        [
                            "mnist.train.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "mnist.test.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_76": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_77": {
                "variable": {
                    "value": "output_list_1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_89": {
                "variable": {
                    "value": "(idx1, center_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Call"
                        ],
                        [
                            "condition",
                            "Call"
                        ],
                        [
                            "condition",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ],
                        [
                            "body",
                            "Call"
                        ],
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[j, output_list_1]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[j.get_shape(), tf.TensorShape([None, None])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_90": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_91": {
                "variable": {
                    "value": "center_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "center_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.while_loop(condition, body, [j, output_list_1], shape_invariants=[j.get_shape(), tf.TensorShape([None, None])])",
                            "Call"
                        ],
                        [
                            "_calculate_centers(features, labels)",
                            "Call"
                        ],
                        [
                            "center_features",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ii < jj",
                            "Compare"
                        ],
                        [
                            "tf.nn.top_k(dist_array, k=2, sorted=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.top_k(dist_array2, k=tf.shape(dist_array2)[0], sorted=True)",
                            "Call"
                        ],
                        [
                            "tf.range(1, tf.shape(center_features)[0], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_97": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_98": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_99": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=None, name='labels')",
                            "Call"
                        ],
                        [
                            "mnist.train.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "mnist.test.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_103": {
                "variable": {
                    "value": "(unique_labels, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=None, name='labels')",
                            "Call"
                        ],
                        [
                            "mnist.train.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "mnist.test.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_104": {
                "variable": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_105": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_123": {
                "variable": {
                    "value": "(idx, intra_distance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Call"
                        ],
                        [
                            "condition",
                            "Call"
                        ],
                        [
                            "condition",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ],
                        [
                            "body",
                            "Call"
                        ],
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[i, output_list]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[i.get_shape(), tf.TensorShape([None])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_124": {
                "variable": {
                    "value": "intra_class_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "intra_distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.while_loop(condition, body, [i, output_list], shape_invariants=[i.get_shape(), tf.TensorShape([None])])",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_131": {
                "variable": {
                    "value": "inter_class_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "margin - min_inter_class_center_distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "add_133": {
                "variable": {
                    "value": "range_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(alpha, intra_class_loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(beta, inter_class_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_246": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.cast(tf.equal(tf.arg_max(logits, 1), labels), tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_247": {
                "name": {
                    "value": "cost",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "softmax_loss + ratio * range_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_15": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_40": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "result[i][0] - result[i][1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_41": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[l, [temp]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_54": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_distance(features)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "top_k_66": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_array2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_distance(center_features)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "tf.shape(dist_array2)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_67": {
                "variable": {
                    "value": "lowest_value",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "m[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.shape(dist_array2)[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_82": {
                "variable": {
                    "value": "index_array",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(labels, label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "index_array",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "index_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(labels, label))",
                            "Call"
                        ],
                        [
                            "tf.reshape(index_array, [-1])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(labels, label))",
                            "Call"
                        ],
                        [
                            "tf.reshape(index_array, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_84": {
                "variable": {
                    "value": "same_class_features",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "inference(input_images)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "index_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(labels, label))",
                            "Call"
                        ],
                        [
                            "tf.reshape(index_array, [-1])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(labels, label))",
                            "Call"
                        ],
                        [
                            "tf.reshape(index_array, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_85": {
                "variable": {
                    "value": "center_features_elements",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "same_class_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(features, index_array)",
                            "Call"
                        ],
                        [
                            "tf.gather(features, index_array)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_86": {
                "variable": {
                    "value": "output_list_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_list_1, [center_features_elements]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_111": {
                "variable": {
                    "value": "index_array",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(labels, label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "index_array",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "index_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(labels, label))",
                            "Call"
                        ],
                        [
                            "tf.reshape(index_array, [-1])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(labels, label))",
                            "Call"
                        ],
                        [
                            "tf.reshape(index_array, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_114": {
                "variable": {
                    "value": "same_class_features",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "inference(input_images)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "index_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(labels, label))",
                            "Call"
                        ],
                        [
                            "tf.reshape(index_array, [-1])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(labels, label))",
                            "Call"
                        ],
                        [
                            "tf.reshape(index_array, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_117": {
                "variable": {
                    "value": "same_class_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.divide(1.0, top_1 + epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.divide(1.0, top_2 + epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_118": {
                "variable": {
                    "value": "same_class_distances1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "same_class_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.divide(1.0, top_1 + epsilon), tf.divide(1.0, top_2 + epsilon))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_120": {
                "variable": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_list, [same_class_distances1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_208": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.arg_max(logits, 1), labels), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_23": {
                "input": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_36": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(10)",
                            "Call"
                        ],
                        [
                            "i in range(10)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.shape(result)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "less_58": {
                "x": {
                    "value": "tf.shape(features)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "main_len_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_71": {
                "x": {
                    "value": "tf.shape(center_features)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "min_number_centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_77": {
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_79": {
                "x": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "j",
                            "Method Argument"
                        ],
                        [
                            "j",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.shape(unique_labels)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "less_107": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(10)",
                            "Call"
                        ],
                        [
                            "i in range(10)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.shape(unique_labels)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_133": {
                "x": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.5)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "inter_class_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(margin - min_inter_class_center_distance, 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_196": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_202": {
                "variable": {
                    "value": "softmax_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_207": {
                "name": {
                    "value": "acc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_210": {
                "name": {
                    "value": "loss/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_211": {
                "name": {
                    "value": "RangeLoss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "range_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(alpha, intra_class_loss), tf.multiply(beta, inter_class_loss))",
                            "Call"
                        ],
                        [
                            "get_range_loss(features, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_212": {
                "name": {
                    "value": "SoftmaxLoss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "softmax_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_213": {
                "name": {
                    "value": "TotalLoss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "softmax_loss + ratio * range_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "boolean_mask_29": {
                "tensor": {
                    "value": "jj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(r, r, indexing='ij')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ii < jj",
                            "Compare"
                        ],
                        [
                            "tf.nn.top_k(dist_array, k=2, sorted=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.top_k(dist_array2, k=tf.shape(dist_array2)[0], sorted=True)",
                            "Call"
                        ],
                        [
                            "tf.range(1, tf.shape(center_features)[0], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_42": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(10)",
                            "Call"
                        ],
                        [
                            "i in range(10)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_82": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=None, name='labels')",
                            "Call"
                        ],
                        [
                            "mnist.train.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "mnist.test.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unique_labels[j]",
                            "Subscript"
                        ],
                        [
                            "unique_labels[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "add_87": {
                "x": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "j",
                            "Method Argument"
                        ],
                        [
                            "j",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_90": {
                "input": {
                    "value": "center_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.while_loop(condition, body, [j, output_list_1], shape_invariants=[j.get_shape(), tf.TensorShape([None, None])])",
                            "Call"
                        ],
                        [
                            "_calculate_centers(features, labels)",
                            "Call"
                        ],
                        [
                            "center_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_111": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=None, name='labels')",
                            "Call"
                        ],
                        [
                            "mnist.train.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "mnist.test.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unique_labels[j]",
                            "Subscript"
                        ],
                        [
                            "unique_labels[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "divide_117": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "top_2 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_121": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(10)",
                            "Call"
                        ],
                        [
                            "i in range(10)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_198": {
                "name": {
                    "value": "range_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_201": {
                "name": {
                    "value": "softmax_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_204": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_208": {
                "x": {
                    "value": "tf.equal(tf.arg_max(logits, 1), labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_36": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(array, idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_46": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_58": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "inference(input_images)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_71": {
                "input": {
                    "value": "center_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.while_loop(condition, body, [j, output_list_1], shape_invariants=[j.get_shape(), tf.TensorShape([None, None])])",
                            "Call"
                        ],
                        [
                            "_calculate_centers(features, labels)",
                            "Call"
                        ],
                        [
                            "center_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_79": {
                "input": {
                    "value": "unique_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unique(labels)",
                            "Call"
                        ],
                        [
                            "tf.unique(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_89": {
                "dims": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_107": {
                "input": {
                    "value": "unique_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unique(labels)",
                            "Call"
                        ],
                        [
                            "tf.unique(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_123": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_202": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=None, name='labels')",
                            "Call"
                        ],
                        [
                            "mnist.train.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "mnist.test.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "inference(input_images)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_208": {
                "x": {
                    "value": "tf.arg_max(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=None, name='labels')",
                            "Call"
                        ],
                        [
                            "mnist.train.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "mnist.test.labels[:10000]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_66": {
                "input": {
                    "value": "dist_array2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_distance(center_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_67": {
                "input": {
                    "value": "dist_array2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_distance(center_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "arg_max_208": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(input_images, labels, ratio=LAMBDA)",
                            "Call"
                        ],
                        [
                            "inference(input_images)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}