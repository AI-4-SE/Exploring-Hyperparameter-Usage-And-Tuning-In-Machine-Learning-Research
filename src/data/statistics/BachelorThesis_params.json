{
    "SinGAN/functions.py": {
        "sklearn": {
            "KMeans_409": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KMeans_422": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kmeans.cluster_centers_",
                            "Attribute"
                        ],
                        [
                            "centers",
                            "Method Argument"
                        ]
                    ]
                },
                "n_init": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Upsample_127": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[round(sx), round(sy)]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_131": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[round(sw), round(sx), round(sy)]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_150": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np2torchwithoutmove(img.imread('%s/frame%d.jpg' % (opt.path, 0)), opt)",
                            "Call"
                        ],
                        [
                            "img.imread('%s/%s' % (opt.input_dir, opt.input_name))",
                            "Call"
                        ],
                        [
                            "np2torchwithoutmove(x, opt)",
                            "Call"
                        ],
                        [
                            "np.transpose(x, (1, 0, 2, 3))",
                            "Call"
                        ],
                        [
                            "x[0:3, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "np.append(x, tx, axis=0)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "img.imread('%s' % dir)",
                            "Call"
                        ],
                        [
                            "np2torch(x, opt)",
                            "Call"
                        ],
                        [
                            "x[:, 0:3, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((3, 2, 0, 1)) / 255",
                            "BinOp"
                        ],
                        [
                            "color.rgb2gray(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((3, 2, 0, 1)) / 255",
                            "BinOp"
                        ],
                        [
                            "color.rgb2gray(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "x[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.permute((1, 2, 0))",
                            "Call"
                        ],
                        [
                            "255 * denorm(x)",
                            "BinOp"
                        ],
                        [
                            "x.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "x.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "img.imread('%s/%s' % (opt.input_dir, opt.input_name))",
                            "Call"
                        ],
                        [
                            "x[:, :, 0:3]",
                            "Subscript"
                        ],
                        [
                            "centers[labels]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if () else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "x.view(prev.shape)",
                            "Call"
                        ],
                        [
                            "centers[labels]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if torch.cuda.is_available() else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "x.view(paint.shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_229": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np2torchwithoutmove(img.imread('%s/frame%d.jpg' % (opt.path, 0)), opt)",
                            "Call"
                        ],
                        [
                            "img.imread('%s/%s' % (opt.input_dir, opt.input_name))",
                            "Call"
                        ],
                        [
                            "np2torchwithoutmove(x, opt)",
                            "Call"
                        ],
                        [
                            "np.transpose(x, (1, 0, 2, 3))",
                            "Call"
                        ],
                        [
                            "x[0:3, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "np.append(x, tx, axis=0)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "img.imread('%s' % dir)",
                            "Call"
                        ],
                        [
                            "np2torch(x, opt)",
                            "Call"
                        ],
                        [
                            "x[:, 0:3, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((3, 2, 0, 1)) / 255",
                            "BinOp"
                        ],
                        [
                            "color.rgb2gray(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((3, 2, 0, 1)) / 255",
                            "BinOp"
                        ],
                        [
                            "color.rgb2gray(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "x[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.permute((1, 2, 0))",
                            "Call"
                        ],
                        [
                            "255 * denorm(x)",
                            "BinOp"
                        ],
                        [
                            "x.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "x.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "img.imread('%s/%s' % (opt.input_dir, opt.input_name))",
                            "Call"
                        ],
                        [
                            "x[:, :, 0:3]",
                            "Subscript"
                        ],
                        [
                            "centers[labels]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if () else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "x.view(prev.shape)",
                            "Call"
                        ],
                        [
                            "centers[labels]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if torch.cuda.is_available() else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "x.view(paint.shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_382": {
                "variable": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if opt.not_cuda else cuda:0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_413": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np2torchwithoutmove(img.imread('%s/frame%d.jpg' % (opt.path, 0)), opt)",
                            "Call"
                        ],
                        [
                            "img.imread('%s/%s' % (opt.input_dir, opt.input_name))",
                            "Call"
                        ],
                        [
                            "np2torchwithoutmove(x, opt)",
                            "Call"
                        ],
                        [
                            "np.transpose(x, (1, 0, 2, 3))",
                            "Call"
                        ],
                        [
                            "x[0:3, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "np.append(x, tx, axis=0)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "img.imread('%s' % dir)",
                            "Call"
                        ],
                        [
                            "np2torch(x, opt)",
                            "Call"
                        ],
                        [
                            "x[:, 0:3, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((3, 2, 0, 1)) / 255",
                            "BinOp"
                        ],
                        [
                            "color.rgb2gray(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((3, 2, 0, 1)) / 255",
                            "BinOp"
                        ],
                        [
                            "color.rgb2gray(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "x[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.permute((1, 2, 0))",
                            "Call"
                        ],
                        [
                            "255 * denorm(x)",
                            "BinOp"
                        ],
                        [
                            "x.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "x.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "img.imread('%s/%s' % (opt.input_dir, opt.input_name))",
                            "Call"
                        ],
                        [
                            "x[:, :, 0:3]",
                            "Subscript"
                        ],
                        [
                            "centers[labels]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if () else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "x.view(prev.shape)",
                            "Call"
                        ],
                        [
                            "centers[labels]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if torch.cuda.is_available() else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "x.view(paint.shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_426": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np2torchwithoutmove(img.imread('%s/frame%d.jpg' % (opt.path, 0)), opt)",
                            "Call"
                        ],
                        [
                            "img.imread('%s/%s' % (opt.input_dir, opt.input_name))",
                            "Call"
                        ],
                        [
                            "np2torchwithoutmove(x, opt)",
                            "Call"
                        ],
                        [
                            "np.transpose(x, (1, 0, 2, 3))",
                            "Call"
                        ],
                        [
                            "x[0:3, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "np.append(x, tx, axis=0)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "img.imread('%s' % dir)",
                            "Call"
                        ],
                        [
                            "np2torch(x, opt)",
                            "Call"
                        ],
                        [
                            "x[:, 0:3, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((3, 2, 0, 1)) / 255",
                            "BinOp"
                        ],
                        [
                            "color.rgb2gray(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((3, 2, 0, 1)) / 255",
                            "BinOp"
                        ],
                        [
                            "color.rgb2gray(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "x[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.permute((1, 2, 0))",
                            "Call"
                        ],
                        [
                            "255 * denorm(x)",
                            "BinOp"
                        ],
                        [
                            "x.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "x.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "img.imread('%s/%s' % (opt.input_dir, opt.input_name))",
                            "Call"
                        ],
                        [
                            "x[:, :, 0:3]",
                            "Subscript"
                        ],
                        [
                            "centers[labels]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if () else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "x.view(prev.shape)",
                            "Call"
                        ],
                        [
                            "centers[labels]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if torch.cuda.is_available() else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "x.view(paint.shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_95": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "round(size[1] / scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "round(size[2] / scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_100": {
                "variable": {
                    "value": "noise2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "size[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_103": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "size[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_251": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/netG.pth' % opt.outf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_252": {
                "obj": {
                    "value": "netD.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/netD.pth' % opt.outf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_253": {
                "obj": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'%s/z_opt.pth' % opt.outf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_335": {
                "variable": {
                    "value": "Gs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/Gs.pth' % dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_336": {
                "variable": {
                    "value": "Zs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/Zs.pth' % dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_337": {
                "variable": {
                    "value": "reals",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/reals.pth' % dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_338": {
                "variable": {
                    "value": "NoiseAmp",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/NoiseAmp.pth' % dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_349": {
                "variable": {
                    "value": "in_s",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "real_down.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_396": {
                "seed": {
                    "value": "opt.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_145": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grad_165": {
                "outputs": {
                    "value": "disc_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD(interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * real_data + (1 - alpha) * fake_data",
                            "BinOp"
                        ],
                        [
                            "interpolates.to(device)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(interpolates, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size()).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_99": {
                "*size": {
                    "value": "num_samp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "size[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_141": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_166": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SIFID/inception.py": {
        "torch": {
            "ModuleList_58": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_132": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.upsample(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_75": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_84": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_107": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "*args": {
                    "value": "*block4",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "SIFID/sifid_score.py": {
        "torch": {
            "from_numpy_106": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([imread(str(f)).astype(np.float32) for f in files[start:end]])",
                            "Call"
                        ],
                        [
                            "images[:, :, :, 0:3]",
                            "Subscript"
                        ],
                        [
                            "images.transpose((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "images / 255",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "SinGAN/imresize.py": {
        "torch": {
            "from_numpy_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((3, 2, 0, 1)) / 255",
                            "BinOp"
                        ],
                        [
                            "color.rgb2gray(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((0, 3, 1, 2)) / 255",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((4, 3, 0, 1, 2)) / 255",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "x[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.permute((1, 2, 0))",
                            "Call"
                        ],
                        [
                            "255 * denorm(x)",
                            "BinOp"
                        ],
                        [
                            "x.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "x.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "x[0, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.permute((1, 2, 3, 0))",
                            "Call"
                        ],
                        [
                            "255 * denorm(x)",
                            "BinOp"
                        ],
                        [
                            "x.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "x.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((3, 2, 0, 1)) / 255",
                            "BinOp"
                        ],
                        [
                            "color.rgb2gray(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((0, 3, 1, 2)) / 255",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((4, 3, 0, 1, 2)) / 255",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "x[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.permute((1, 2, 0))",
                            "Call"
                        ],
                        [
                            "255 * denorm(x)",
                            "BinOp"
                        ],
                        [
                            "x.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "x.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "x[0, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.permute((1, 2, 3, 0))",
                            "Call"
                        ],
                        [
                            "255 * denorm(x)",
                            "BinOp"
                        ],
                        [
                            "x.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "x.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((3, 2, 0, 1)) / 255",
                            "BinOp"
                        ],
                        [
                            "color.rgb2gray(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((0, 3, 1, 2)) / 255",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((4, 3, 0, 1, 2)) / 255",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "x[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.permute((1, 2, 0))",
                            "Call"
                        ],
                        [
                            "255 * denorm(x)",
                            "BinOp"
                        ],
                        [
                            "x.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "x.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "x[0, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.permute((1, 2, 3, 0))",
                            "Call"
                        ],
                        [
                            "255 * denorm(x)",
                            "BinOp"
                        ],
                        [
                            "x.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "x.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_19": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "SinGAN/manipulate.py": {
        "torch": {
            "ZeroPad2d_34": {
                "variable": {
                    "value": "m_image",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(pad_image)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SinGAN/models.py": {
        "torch": {
            "is_available_25": {
                "variable": {
                    "value": "self.is_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_33": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "max(N, opt.min_nfc)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "opt.ker_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "opt.padd_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_45": {
                "variable": {
                    "value": "self.is_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(max(N, opt.min_nfc), opt.nc_im, kernel_size=opt.ker_size, stride=1, padding=opt.padd_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_12": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_54": {
                "in_channels": {
                    "value": "max(N, opt.min_nfc)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.nc_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "opt.ker_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "opt.padd_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_10": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ker_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ker_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padd",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_11": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "SinGAN/padding.py": {
        "torch": {
            "pad_9": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pad, self.pad, self.pad, self.pad, self.pad, self.pad)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_11": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pad, self.pad, self.pad, self.pad)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "SinGAN/training.py": {
        "torch": {
            "Adam_136": {
                "variable": {
                    "value": "optimizerD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_137": {
                "variable": {
                    "value": "optimizerG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MSELoss_263": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_204": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_213": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}