{
    "data_list.py": {
        "torch": {}
    },
    "my_loss.py": {
        "torch": {
            "sum_12": {
                "variable": {
                    "value": "entropy",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "possible_values": [
                        [
                            "-input_ * torch.log(input_ + 1e-07)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(entropy, dim=1)",
                            "Call"
                        ],
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "torch.ones(ad_out.size(0)).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "variable": {
                    "value": "dc_target",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1]] * train_bs + [[0]] * (train_bs + len_share))",
                    "possible_values": []
                }
            },
            "ones_like_30": {
                "variable": {
                    "value": "source_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "possible_values": [
                        [
                            "-input_ * torch.log(input_ + 1e-07)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(entropy, dim=1)",
                            "Call"
                        ],
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "torch.ones(ad_out.size(0)).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_35": {
                "variable": {
                    "value": "target_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "possible_values": [
                        [
                            "-input_ * torch.log(input_ + 1e-07)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(entropy, dim=1)",
                            "Call"
                        ],
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "torch.ones(ad_out.size(0)).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_50": {
                "variable": {
                    "value": "yHat",
                    "possible_values": []
                },
                "input": {
                    "value": "yHat",
                    "possible_values": [
                        [
                            "F.softmax(yHat, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_51": {
                "variable": {
                    "value": "Yg",
                    "possible_values": []
                },
                "input": {
                    "value": "yHat",
                    "possible_values": [
                        [
                            "F.softmax(yHat, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.unsqueeze(y, 1)",
                    "possible_values": []
                }
            },
            "log_54": {
                "variable": {
                    "value": "Px_log",
                    "possible_values": []
                },
                "input": {
                    "value": "Px + 1e-10",
                    "possible_values": []
                }
            },
            "ones_55": {
                "variable": {
                    "value": "y_zerohot",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "len(y)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "classes",
                    "possible_values": [
                        [
                            "classes",
                            "Name"
                        ],
                        [
                            "65",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_28": {
                "variable": {
                    "value": "entropy",
                    "possible_values": []
                },
                "*size": {
                    "value": "ad_out.size(0)",
                    "possible_values": []
                }
            },
            "log_11": {
                "input": {
                    "value": "input_ + 1e-07",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "(1.0 + len_share / train_bs) * source_weight / torch.sum(source_weight).detach().item() + target_weight / torch.sum(target_weight).detach().item()",
                            "BinOp"
                        ],
                        [
                            "weight.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "weight * (Yg_.view(len(yHat)) / Yg_.sum())",
                            "BinOp"
                        ],
                        [
                            "Yg_.view(len(yHat)) / Yg_.sum()",
                            "BinOp"
                        ],
                        [
                            "weight.detach()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_51": {
                "input": {
                    "value": "y",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_59": {
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "Px * Px_log * y_zerohot.cuda()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "(1.0 + len_share / train_bs) * source_weight / torch.sum(source_weight).detach().item() + target_weight / torch.sum(target_weight).detach().item()",
                            "BinOp"
                        ],
                        [
                            "weight.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "weight * (Yg_.view(len(yHat)) / Yg_.sum())",
                            "BinOp"
                        ],
                        [
                            "Yg_.view(len(yHat)) / Yg_.sum()",
                            "BinOp"
                        ],
                        [
                            "weight.detach()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_26": {
                "input": {
                    "value": "-entropy",
                    "possible_values": []
                }
            },
            "sum_41": {
                "input": {
                    "value": "source_weight",
                    "possible_values": [
                        [
                            "entropy * source_mask",
                            "BinOp"
                        ],
                        [
                            "source_weight * cls_weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_42": {
                "input": {
                    "value": "target_weight",
                    "possible_values": [
                        [
                            "entropy * target_mask",
                            "BinOp"
                        ],
                        [
                            "target_weight * cls_weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BCELoss_45": {
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            }
        }
    },
    "network.py": {
        "torch": {
            "Sequential_46": {
                "variable": {
                    "value": "self.feature_layers",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv1",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.feature_layers",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.features",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.ad_layer1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feature",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.ad_layer2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.ad_layer3",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "variable": {
                    "value": "self.relu1",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "variable": {
                    "value": "self.relu2",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dropout_154": {
                "variable": {
                    "value": "self.dropout1",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "Dropout_155": {
                "variable": {
                    "value": "self.dropout2",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "Sigmoid_156": {
                "variable": {
                    "value": "self.sigmoid",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.bottleneck",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_resnet.fc.in_features",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_resnet.fc.in_features",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.bottleneck",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "run_partial.py": {
        "torch": {
            "max_44": {
                "variable": {
                    "value": "(_, predict)",
                    "possible_values": []
                },
                "input": {
                    "value": "all_output",
                    "possible_values": [
                        [
                            "outputs.float().cpu()",
                            "Call"
                        ],
                        [
                            "torch.cat((all_output, outputs.float().cpu()), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_48": {
                "variable": {
                    "value": "hist_tar",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "dset_loaders[source]",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dsets['source']",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_bs",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.worker",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "dset_loaders[target]",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dsets['target']",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_bs",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.worker",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "dset_loaders[test]",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dsets['test']",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_bs",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.worker",
                    "possible_values": []
                }
            },
            "ones_169": {
                "variable": {
                    "value": "cls_weight",
                    "possible_values": []
                },
                "*size": {
                    "value": "outputs.size(0)",
                    "possible_values": []
                }
            },
            "mean_188": {
                "variable": {
                    "value": "tar_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "my_loss.Entropy(softmax_tar_out)",
                    "possible_values": []
                }
            },
            "save_202": {
                "obj": {
                    "value": "best_model",
                    "possible_values": [
                        [
                            "base_network.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'best_model.pt')",
                    "possible_values": []
                }
            },
            "manual_seed_264": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "manual_seed_265": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "torch.squeeze(predict).float() == all_label",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features_source, features_target, features_middle)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs_source, outputs_target, outputs_middle)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features_source, features_target)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs_source, outputs_target)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "all_output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_output, outputs.float().cpu())",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "all_label",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_label, labels.float())",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "DataLoader_138": {
                "variable": {
                    "value": "dset_loaders[middle]",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dsets['source']",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "len_share",
                    "possible_values": [
                        [
                            "int(max(0, train_bs // args.mu * (1 - epoch / total_epochs)))",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "int(train_bs // abs(args.mu))",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.worker",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Softmax_183": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Softmax_187": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_46": {
                "input": {
                    "value": "my_loss.Entropy(torch.nn.Softmax(dim=1)(all_output))",
                    "possible_values": []
                }
            },
            "Softmax_48": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_177": {
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "sum_179": {
                "input": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "class_weight[labels_source].detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_181": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "squeeze_45": {
                "input": {
                    "value": "predict",
                    "possible_values": []
                }
            },
            "Softmax_46": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    }
}