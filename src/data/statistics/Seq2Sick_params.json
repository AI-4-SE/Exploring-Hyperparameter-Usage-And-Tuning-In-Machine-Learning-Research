{
    "attack.py": {
        "torch": {
            "PairwiseDistance_210": {
                "variable": {
                    "value": "pdist",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_131": {
                "variable": {
                    "value": "loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "modifier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(modifier_initial, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_165": {
                "device": {
                    "value": "opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_266": {
                "variable": {
                    "value": "modifier_initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_embedding.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_268": {
                "variable": {
                    "value": "modifier_initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_embedding.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_95": {
                "variable": {
                    "value": "(real, reali)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(output_a, label_onehot)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_96": {
                "variable": {
                    "value": "(other, otheri)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(output_a, 1 - label_onehot)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_97": {
                "variable": {
                    "value": "loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(real - other, min=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_142": {
                "variable": {
                    "value": "l2dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "modifier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(modifier_initial, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_143": {
                "variable": {
                    "value": "(lidist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "modifier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(modifier_initial, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_56": {
                "variable": {
                    "value": "new_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_place - all_word_embedding.data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_58": {
                "variable": {
                    "value": "(_, new_word)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(temp_place - all_word_embedding.data, 2, 2)",
                            "Call"
                        ],
                        [
                            "pdist(new_embedding[i], all_word_embedding[dic_embedding_index])",
                            "Call"
                        ]
                    ]
                }
            },
            "min_59": {
                "variable": {
                    "value": "(min_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "v_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(new_dist, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_81": {
                "variable": {
                    "value": "(real, reali)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(output_a, fake_onehot)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_82": {
                "variable": {
                    "value": "(other, otheri)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(output_a, 1 - fake_onehot) - fake_onehot * 10000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_83": {
                "variable": {
                    "value": "(t_loss, t_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(other - real, min=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_99": {
                "input": {
                    "value": "modifier.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_104": {
                "variable": {
                    "value": "cur_best_modi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "modifier.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_95": {
                "input": {
                    "value": "output_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_a[:label_onehot.size()[0], :]",
                            "Subscript"
                        ],
                        [
                            "output_a[0:mask, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((output_a[0:mask, :], output_a[mask + 1:, :]))",
                            "Call"
                        ],
                        [
                            "best_output_a",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "label_onehot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "label_onehot[:output_a.size()[0], :]",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(true_label.size()[0], n_tgt)",
                            "Call"
                        ],
                        [
                            "label_onehot[1:-1, :]",
                            "Subscript"
                        ],
                        [
                            "Variable(label_onehot, requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_96": {
                "input": {
                    "value": "output_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_a[:label_onehot.size()[0], :]",
                            "Subscript"
                        ],
                        [
                            "output_a[0:mask, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((output_a[0:mask, :], output_a[mask + 1:, :]))",
                            "Call"
                        ],
                        [
                            "best_output_a",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - label_onehot",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_97": {
                "input": {
                    "value": "real - other",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_102": {
                "input": {
                    "value": "modifier.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_112": {
                "input": {
                    "value": "modifier.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "variable": {
                    "value": "modifier.data[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "output_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_a[0:mask, :], output_a[mask + 1:, :])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "fake_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fake_onehot[0:mask, :], fake_onehot[mask + 1:, :])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_81": {
                "input": {
                    "value": "output_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_a[:label_onehot.size()[0], :]",
                            "Subscript"
                        ],
                        [
                            "output_a[0:mask, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((output_a[0:mask, :], output_a[mask + 1:, :]))",
                            "Call"
                        ],
                        [
                            "best_output_a",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "fake_onehot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "placeholder.expand_as(output_a)",
                            "Call"
                        ],
                        [
                            "fake_onehot[0:mask, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((fake_onehot[0:mask, :], fake_onehot[mask + 1:, :]))",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_83": {
                "input": {
                    "value": "other - real",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_103": {
                "input": {
                    "value": "modifier.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_82": {
                "input": {
                    "value": "output_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_a[:label_onehot.size()[0], :]",
                            "Subscript"
                        ],
                        [
                            "output_a[0:mask, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((output_a[0:mask, :], output_a[mask + 1:, :]))",
                            "Call"
                        ],
                        [
                            "best_output_a",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - fake_onehot",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/Loss.py": {
        "torch": {
            "KLDivLoss_165": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_166": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "len(tgt_vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_171": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tgt_vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "NLLLoss_173": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(len(tgt_vocab))",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_188": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tdata.eq(self.padding_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_188": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_189": {
                "variable": {
                    "value": "likelihood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tdata.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "backward_260": {
                "tensors": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "grad_tensors": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_244": {
                "tensor": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(v.data, requires_grad=True, volatile=False)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "shard_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/ModelConstructor.py": {
        "torch": {
            "load_113": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(model_opt.rnn_size, len(fields['tgt'].vocab))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "in_features": {
                    "value": "model_opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(fields['tgt'].vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LogSoftmax_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "onmt/Models.py": {
        "torch": {
            "Dropout_205": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_271": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "unpack(outputs)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.context_gate(emb.view(-1, emb.size(2)), rnn_output.view(-1, rnn_output.size(2)), attn_outputs.view(-1, attn_outputs.size(2)))",
                            "Call"
                        ],
                        [
                            "outputs.view(input_len, input_batch, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "self.dropout(outputs)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [output]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_603": {
                "variable": {
                    "value": "self.input_feed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_273": {
                "variable": {
                    "value": "attns[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attns[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h[0:h.size(0):2], h[1:h.size(0):2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_460": {
                "variable": {
                    "value": "emb_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb_t, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/Optim.py": {
        "torch": {
            "SGD_51": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_53": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_59": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_61": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "self.betas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/Trainer.py": {
        "torch": {
            "save_241": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'generator': generator_state_dict, 'vocab': onmt.io.save_fields_to_vocab(fields), 'opt': opt, 'epoch': epoch, 'optim': self.optim}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'%s_acc_%.2f_ppl_%.2f_e%d.pt' % (opt.save_model, valid_stats.accuracy(), valid_stats.ppl(), epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/Utils.py": {
        "torch": {
            "arange_20": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_len or lengths.max()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "lt_20": {
                "input": {
                    "value": "lengths.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/io/IO.py": {
        "torch": {
            "zeros_93": {
                "variable": {
                    "value": "alignment",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "src_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max([t.size(0) for t in data])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "src_vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max([t.max() for t in data]) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "alignment",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max([t.size(0) for t in data])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_187": {
                "tensors": {
                    "value": "[level.unsqueeze(2) for level in levels]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[0].size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max([t.size(1) for t in data])",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max([t.size(2) for t in data])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "sounds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nfft",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[0].size(0)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max([t.size(1) for t in data])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "onmt/io/TextDataset.py": {
        "torch": {}
    },
    "onmt/modules/AudioEncoder.py": {
        "torch": {
            "Conv2d_24": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(41, 11)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.batch_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(21, 11)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.batch_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_35": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "hardtanh_50": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.batch_norm1(self.layer1(input[:, :, :, :]))",
                            "Call"
                        ],
                        [
                            "F.hardtanh(input, 0, 20, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.batch_norm2(self.layer2(input))",
                            "Call"
                        ],
                        [
                            "F.hardtanh(input, 0, 20, inplace=True)",
                            "Call"
                        ],
                        [
                            "input.view(batch_size, -1, length)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 2).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min_val": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max_val": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "hardtanh_57": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.batch_norm1(self.layer1(input[:, :, :, :]))",
                            "Call"
                        ],
                        [
                            "F.hardtanh(input, 0, 20, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.batch_norm2(self.layer2(input))",
                            "Call"
                        ],
                        [
                            "F.hardtanh(input, 0, 20, inplace=True)",
                            "Call"
                        ],
                        [
                            "input.view(batch_size, -1, length)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 2).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min_val": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max_val": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/Conv2Conv.py": {
        "torch": {
            "unsqueeze_22": {
                "input": {
                    "value": "torch.transpose(x, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embeddings.embedding_size",
                            "Attribute"
                        ],
                        [
                            "self.embeddings.embedding_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embeddings.embedding_size",
                            "Attribute"
                        ],
                        [
                            "self.embeddings.embedding_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_118": {
                "variable": {
                    "value": "self.attn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_22": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x + conv(x)",
                            "BinOp"
                        ],
                        [
                            "x * SCALE_WEIGHT",
                            "BinOp"
                        ],
                        [
                            "linear_out.view(tgt_emb.size(0), tgt_emb.size(1), -1)",
                            "Call"
                        ],
                        [
                            "shape_transform(x)",
                            "Call"
                        ],
                        [
                            "(x + (c + out) * SCALE_WEIGHT) * SCALE_WEIGHT",
                            "BinOp"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state.previous_input, input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "new_target_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_202": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_38": {
                "input": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.cnn_kernel_width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/ConvMultiStepAttention.py": {
        "torch": {
            "transpose_15": {
                "input": {
                    "value": "h.view(batch, length, hidden_size, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_58": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(base_target_emb + preatt) * SCALE_WEIGHT",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(target, 3)",
                            "Call"
                        ],
                        [
                            "torch.transpose(target, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_59": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(base_target_emb + preatt) * SCALE_WEIGHT",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(target, 3)",
                            "Call"
                        ],
                        [
                            "torch.transpose(target, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_60": {
                "variable": {
                    "value": "pre_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(base_target_emb + preatt) * SCALE_WEIGHT",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(target, 3)",
                            "Call"
                        ],
                        [
                            "torch.transpose(target, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_out_top",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_66": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(target, encoder_out_top)",
                            "Call"
                        ],
                        [
                            "pre_attn.transpose(0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_68": {
                "variable": {
                    "value": "context_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(pre_attn)",
                            "Call"
                        ],
                        [
                            "attn.transpose(0, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(encoder_out_combine, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_70": {
                "variable": {
                    "value": "context_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unsqueeze(context_output, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_13": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_69": {
                "input": {
                    "value": "encoder_out_combine",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "input": {
                    "value": "context_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(attn, torch.transpose(encoder_out_combine, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.unsqueeze(context_output, 3), 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/CopyGenerator.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(tgt_dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.linear_copy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_37": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear(hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_40": {
                "variable": {
                    "value": "copy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_copy(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_43": {
                "variable": {
                    "value": "out_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - copy.expand_as(prob)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_44": {
                "variable": {
                    "value": "mul_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "copy.expand_as(attn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_45": {
                "variable": {
                    "value": "copy_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_attn.view(-1, batch, slen).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "src_map.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_45": {
                "variable": {
                    "value": "copy_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "tensors": {
                    "value": "[out_prob, copy_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/Embeddings.py": {
        "torch": {
            "arange_12": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_12": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_15": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_16": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.make_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "mlp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "BottleLinear(in_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_150": {
                "variable": {
                    "value": "pretrained",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "emb_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_13": {
                "input": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "exponent": {
                    "value": "torch.arange(0, dim * 2, 2) / dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_100": {
                "num_embeddings": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_13": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/Gate.py": {
        "torch": {
            "Linear_32": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embeddings_size + decoder_size + attention_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_33": {
                "variable": {
                    "value": "self.sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.source_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "attention_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.target_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embeddings_size + decoder_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_emb, dec_state, attn_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_55": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_71": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_86": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_43": {
                "tensors": {
                    "value": "(prev_emb, dec_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/GlobalAttention.py": {
        "torch": {
            "Linear_80": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "out_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.attn_type == 'mlp'",
                            "Compare"
                        ]
                    ]
                }
            },
            "Softmax_82": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_83": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_184": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align_vectors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.sm(align.view(batch * targetL, sourceL))",
                            "Call"
                        ],
                        [
                            "align_vectors.view(batch, targetL, sourceL)",
                            "Call"
                        ],
                        [
                            "align_vectors.squeeze(1)",
                            "Call"
                        ],
                        [
                            "align_vectors.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "context + self.linear_cover(cover).view_as(context)",
                            "BinOp"
                        ],
                        [
                            "self.tanh(context)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_187": {
                "variable": {
                    "value": "concat_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c, input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.linear_cover",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_115": {
                "input": {
                    "value": "h_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "h_t_.view(tgt_batch, tgt_len, tgt_dim)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h_s_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "h_s.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "onmt/modules/ImageEncoder.py": {
        "torch": {
            "Conv2d_24": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.layer6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.batch_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.batch_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.batch_norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_42": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_46": {
                "variable": {
                    "value": "self.pos_lut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                }
            },
            "relu_56": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1(input[:, :, :, :] - 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_59": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer1(input[:, :, :, :] - 0.5), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2(input), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm1(self.layer3(input)), True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4(input), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(1, 2), stride=(1, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm2(self.layer5(input)), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 1), stride=(2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm3(self.layer6(input)), True)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer2(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_66": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer1(input[:, :, :, :] - 0.5), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2(input), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm1(self.layer3(input)), True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4(input), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(1, 2), stride=(1, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm2(self.layer5(input)), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 1), stride=(2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm3(self.layer6(input)), True)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm1(self.layer3(input))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer4(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_78": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer1(input[:, :, :, :] - 0.5), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2(input), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm1(self.layer3(input)), True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4(input), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(1, 2), stride=(1, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm2(self.layer5(input)), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 1), stride=(2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm3(self.layer6(input)), True)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm2(self.layer5(input))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_86": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer1(input[:, :, :, :] - 0.5), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2(input), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm1(self.layer3(input)), True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4(input), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(1, 2), stride=(1, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm2(self.layer5(input)), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 1), stride=(2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm3(self.layer6(input)), True)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm3(self.layer6(input))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_96": {
                "variable": {
                    "value": "row_vec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "with_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_emb.view(1, pos_emb.size(0), pos_emb.size(1)), inp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/MultiHeadedAttn.py": {
        "torch": {
            "ReLU_38": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_40": {
                "variable": {
                    "value": "self.res_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_77": {
                "variable": {
                    "value": "scaled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_projection(self.linear_query(query))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "key_up.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_96": {
                "input": {
                    "value": "drop_attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dropout(self.sm(scaled))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "value_up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_projection(self.linear_values(value))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "onmt/modules/SRU.py": {
        "torch": {
            "rand_360": {
                "variable": {
                    "value": "tmp_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_497": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_in, self.size_per_dir * 2 if bidirectional else self.size_per_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_501": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_out * 4 if bidirectional else n_out * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_569": {
                "variable": {
                    "value": "self.rnn_lst",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_432": {
                "variable": {
                    "value": "grad_last",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grad_last[0], grad_last[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_613": {
                "variable": {
                    "value": "fh",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lstc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_615": {
                "variable": {
                    "value": "fh",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lstc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_425": {
                "variable": {
                    "value": "last_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c[-1, :, :d], c[0, :, d:])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "current_stream_374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/StackedRNN.py": {
        "torch": {
            "Dropout_12": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_14": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_31": {
                "variable": {
                    "value": "h_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ],
                        [
                            "h_1 + [h_1_i]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_32": {
                "variable": {
                    "value": "c_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(c_1)",
                            "Call"
                        ],
                        [
                            "c_1 + [c_1_i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dropout_41": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_58": {
                "variable": {
                    "value": "h_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ],
                        [
                            "h_1 + [h_1_i]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMCell_17": {
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rnn_size",
                            "Name"
                        ],
                        [
                            "rnn_size",
                            "Name"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "rnn_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRUCell_46": {
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rnn_size",
                            "Name"
                        ],
                        [
                            "rnn_size",
                            "Name"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "rnn_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/StructuredAttention.py": {
        "torch": {
            "rand_45": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_25": {
                "input": {
                    "value": "lap.sum(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_39": {
                "input": {
                    "value": "roots_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input[b].diag().exp().mul(inv_laplacian.transpose(0, 1)[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_24": {
                "n": {
                    "value": "input.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ne_24": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/Transformer.py": {
        "torch": {
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_80": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerEncoderLayer(hidden_size, dropout) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "gt_155": {
                "variable": {
                    "value": "dec_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_pad_mask + self.mask[:, :tgt_pad_mask.size(1), :tgt_pad_mask.size(1)].expand_as(tgt_pad_mask)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "subsequent_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.triu(np.ones(attn_shape), k=1).astype('uint8')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(subsequent_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_201": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerDecoderLayer(hidden_size, dropout) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state.previous_input, input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_284": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/UtilClass.py": {
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(d_hid)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(d_hid)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_37": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_38": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_31": {
                "*size": {
                    "value": "d_hid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "*size": {
                    "value": "d_hid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_84": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[f(x) for (f, x) in zip(self, inputs)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/WeightNorm.py": {
        "torch": {
            "Parameter_43": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_103": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_176": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_87": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(x, V)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_151": {
                "variable": {
                    "value": "scalar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.view(self.out_channels, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_160": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(x, V)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scalar.view(self.out_channels, *[1] * (len(v.size()) - 1)).expand_as(v) * v",
                            "BinOp"
                        ],
                        [
                            "scalar.view(self.in_channels, self.out_channels, *[1] * (len(V.size()) - 2)).expand_as(V) * V",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_234": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(x, V)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scalar.view(self.out_channels, *[1] * (len(v.size()) - 1)).expand_as(v) * v",
                            "BinOp"
                        ],
                        [
                            "scalar.view(self.in_channels, self.out_channels, *[1] * (len(V.size()) - 2)).expand_as(V) * V",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "*size": {
                    "value": "self.V.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "*size": {
                    "value": "self.V.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_180": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_67": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(x, V)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "Variable(v_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_73": {
                "input": {
                    "value": "v_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_88": {
                "input": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_88": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_125": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(x, V)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "Variable(v_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_133": {
                "input": {
                    "value": "v_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv_transpose2d_199": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(x, V)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "Variable(v_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_210": {
                "input": {
                    "value": "v_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_229": {
                "input": {
                    "value": "V.transpose(0, 1).contiguous().view(self.out_channels, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_229": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_61": {
                "*size": {
                    "value": "self.V.data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_120": {
                "*size": {
                    "value": "self.V.data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_193": {
                "*size": {
                    "value": "self.V.data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/translate/Beam.py": {
        "torch": {
            "stack_137": {
                "tensors": {
                    "value": "attn[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_151": {
                "input": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "beam.global_state['coverage']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_151": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/translate/Translation.py": {
        "torch": {
            "sort_67": {
                "variable": {
                    "value": "(inds, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.indices.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_115": {
                "variable": {
                    "value": "(inds, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.indices.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_157": {
                "variable": {
                    "value": "(_, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.indices.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_110": {
                "input": {
                    "value": "output_i",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/translate/Translator.py": {
        "torch": {
            "Tensor_72": {
                "variable": {
                    "value": "src_lengths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_215": {
                "variable": {
                    "value": "src_lengths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "output_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_a, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_241": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "50004",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_89": {
                "tensors": {
                    "value": "[b.get_current_state() for b in beam]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "t_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_249": {
                "tensors": {
                    "value": "[b.get_current_state() for b in beam]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "t_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess.py": {
        "torch": {
            "manual_seed_37": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_169": {
                "obj": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "onmt.io.TextDataset(fields, src_iter, tgt_iter, src_iter.num_feats, tgt_iter.num_feats, src_seq_length=opt.src_seq_length, tgt_seq_length=opt.tgt_seq_length, dynamic_dict=opt.dynamic_dict)",
                            "Call"
                        ],
                        [
                            "onmt.io.build_dataset(fields, opt.data_type, src_corpus, tgt_corpus, src_dir=opt.src_dir, src_seq_length=opt.src_seq_length, tgt_seq_length=opt.tgt_seq_length, src_seq_length_trunc=opt.src_seq_length_trunc, tgt_seq_length_trunc=opt.tgt_seq_length_trunc, dynamic_dict=opt.dynamic_dict, sample_rate=opt.sample_rate, window_size=opt.window_size, window_stride=opt.window_stride, window=opt.window)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "pt_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'{:s}.{:s}.{:d}.pt'.format(opt.save_data, corpus_type, index)",
                            "Call"
                        ],
                        [
                            "'{:s}.{:s}.pt'.format(opt.save_data, corpus_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_189": {
                "obj": {
                    "value": "onmt.io.save_fields_to_vocab(fields)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "vocab_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.save_data + '.vocab.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_123": {
                "obj": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "onmt.io.TextDataset(fields, src_iter, tgt_iter, src_iter.num_feats, tgt_iter.num_feats, src_seq_length=opt.src_seq_length, tgt_seq_length=opt.tgt_seq_length, dynamic_dict=opt.dynamic_dict)",
                            "Call"
                        ],
                        [
                            "onmt.io.build_dataset(fields, opt.data_type, src_corpus, tgt_corpus, src_dir=opt.src_dir, src_seq_length=opt.src_seq_length, tgt_seq_length=opt.tgt_seq_length, src_seq_length_trunc=opt.src_seq_length_trunc, tgt_seq_length_trunc=opt.tgt_seq_length_trunc, dynamic_dict=opt.dynamic_dict, sample_rate=opt.sample_rate, window_size=opt.window_size, window_stride=opt.window_stride, window=opt.window)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "pt_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'{:s}.{:s}.{:d}.pt'.format(opt.save_data, corpus_type, index)",
                            "Call"
                        ],
                        [
                            "'{:s}.{:s}.pt'.format(opt.save_data, corpus_type)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/embeddings_to_torch.py": {
        "torch": {
            "load_23": {
                "variable": {
                    "value": "vocabs",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dict_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_88": {
                "obj": {
                    "value": "filtered_enc_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "enc_output_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.output_file + '.enc.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_89": {
                "obj": {
                    "value": "filtered_dec_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dec_output_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.output_file + '.dec.pt'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tools/extract_embeddings.py": {
        "torch": {
            "load_39": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "set_device_36": {
                "device": {
                    "value": "opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "manual_seed_45": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_54": {
                "device": {
                    "value": "opt.gpuid[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_230": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.data + '.' + data_type + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataParallel_280": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "onmt.ModelConstructor.make_base_model(model_opt, fields, use_gpu(opt), checkpoint)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=opt.gpuid, dim=1)",
                            "Call"
                        ],
                        [
                            "build_model(model_opt, opt, fields, checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "opt.gpuid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_319": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.train_from",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_56": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_241": {
                "f": {
                    "value": "opt.data + '.vocab.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_226": {
                "f": {
                    "value": "pt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pts",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "translate.py": {
        "torch": {
            "set_device_35": {
                "device": {
                    "value": "opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}