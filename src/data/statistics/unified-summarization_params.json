{
    "batcher.py": {
        "tensorflow": {
            "warning_393": {
                "msg": {
                    "value": "Bucket input queue is empty when calling next_batch. Bucket queue size: %i, Input queue size: %i",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._batch_queue.qsize()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self._example_queue.qsize()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_395": {
                "msg": {
                    "value": "Finished reading dataset in single_pass mode.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_493": {
                "msg": {
                    "value": "Found an example with empty article text. Skipping it.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_410": {
                "msg": {
                    "value": "The example generator for this example queue filling thread has exhausted data.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "error_464": {
                "msg": {
                    "value": "Found example queue thread dead. Restarting.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "error_471": {
                "msg": {
                    "value": "Found batch queue thread dead. Restarting.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "error_490": {
                "msg": {
                    "value": "Failed to get article or abstract from example",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_412": {
                "msg": {
                    "value": "\"single_pass mode is on, so we've finished reading dataset. This thread is stopping.\"",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "data.py": {
        "tensorflow": {}
    },
    "data/make_datafiles.py": {
        "tensorflow": {}
    },
    "end2end/beam_search.py": {
        "tensorflow": {}
    },
    "end2end/evaluate.py": {
        "tensorflow": {
            "Saver_34": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_35": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "util.get_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_275": {
                "msg": {
                    "value": "log_str",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "Constant"
                        ],
                        [
                            "log_str + '%s: %.4f with confidence interval (%.4f, %.4f)\\n' % (key, val, val_cb, val_ce)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_277": {
                "msg": {
                    "value": "Writing final ROUGE results to %s...",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "results_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(dir_to_write, 'ROUGE_results.txt')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_57": {
                "msg": {
                    "value": "'Save evaluation results to ' + self._decode_dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_169": {
                "msg": {
                    "value": "Wrote result data to %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "output_fname",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self._result_dir, 'result_%06d.pkl' % index)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._rouge_vis_dir, 'attn_vis_data_%06d.json' % count)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._decode_dir, 'attn_vis_data.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_196": {
                "msg": {
                    "value": "'Wrote example %i to file' % ex_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_230": {
                "msg": {
                    "value": "Wrote visualization data to %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "output_fname",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self._result_dir, 'result_%06d.pkl' % index)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._rouge_vis_dir, 'attn_vis_data_%06d.json' % count)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._decode_dir, 'attn_vis_data.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_43": {
                "msg": {
                    "value": "Loading best eval checkpoint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_92": {
                "msg": {
                    "value": "Decoder has finished reading dataset for single_pass.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_93": {
                "msg": {
                    "value": "Output has been saved in %s and %s. Starting ROUGE eval...",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._rouge_ref_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self._rouge_dec_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_97": {
                "msg": {
                    "value": "evaluation time: %.3f min",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "(t1 - t0) / 60.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_48": {
                "msg": {
                    "value": "Loading best train checkpoint",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "end2end/model.py": {
        "tensorflow": {
            "expand_dims_20": {
                "variable": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(0, limit=hps.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_21": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.tile(batch_nums, [1, enc_len]), self._rewriter._enc_sent_id_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_23": {
                "variable": {
                    "value": "selector_probs_projected",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self._selector.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack((tf.tile(batch_nums, [1, enc_len]), self._rewriter._enc_sent_id_mask), axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_26": {
                "variable": {
                    "value": "batch_nums_tilek",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(0, limit=hps.batch_size), 1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, hps.inconsistent_topk]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_39": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sum(losses) / tf.reduce_sum(self._rewriter._dec_padding_mask, axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_53": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_54": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss_to_minimize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._rewriter._total_loss if hps.coverage else self._rewriter._loss",
                            "IfExp"
                        ],
                        [
                            "loss_to_minimize + self._inconsistent_loss",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "aggregation_method": {
                    "value": "tf.AggregationMethod.EXPERIMENTAL_TREE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_65": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "hps.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "hps.adagrad_init_acc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_82": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "merge_all_85": {
                "variable": {
                    "value": "self._summaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "top_k_30": {
                "variable": {
                    "value": "(topk_w, topk_w_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "hps.inconsistent_topk",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_31": {
                "variable": {
                    "value": "topk_w_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_nums_tilek, topk_w_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_32": {
                "variable": {
                    "value": "topk_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "selector_probs_projected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(self._selector.probs, indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "topk_w_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack((batch_nums_tilek, topk_w_id), axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_34": {
                "variable": {
                    "value": "loss_one_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "topk_w * topk_s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_58": {
                "variable": {
                    "value": "(grads, global_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss_to_minimize, tvars, aggregation_method=tf.AggregationMethod.EXPERIMENTAL_TREE)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "hps.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_61": {
                "name": {
                    "value": "global_norm",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "global_norm",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_64": {
                "msg": {
                    "value": "Using Adagrad optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_72": {
                "msg": {
                    "value": "Building graph...",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_87": {
                "msg": {
                    "value": "Time to build graph: %i seconds",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "t1 - t0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_18": {
                "input": {
                    "value": "self._rewriter._enc_sent_id_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_20": {
                "limit": {
                    "value": "hps.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_57": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_66": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_76": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_21": {
                "input": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(0, limit=hps.batch_size), 1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, enc_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_35": {
                "x": {
                    "value": "loss_one_step + sys.float_info.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_39": {
                "input_tensor": {
                    "value": "self._rewriter._dec_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_81": {
                "name": {
                    "value": "inconsist_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self._inconsistent_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "end2end/run_end2end.py": {
        "tensorflow": {}
    },
    "main.py": {
        "tensorflow": {}
    },
    "rewriter/attention_decoder.py": {
        "tensorflow": {
            "expand_dims_60": {
                "variable": {
                    "value": "encoder_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(encoder_states, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "W_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, attn_size, attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "variable": {
                    "value": "encoder_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(encoder_states, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('W_h', [1, 1, attn_size, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_74": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_219": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_arg_size, output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_226": {
                "variable": {
                    "value": "bias_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "attention_decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_81": {
                "input": {
                    "value": "prev_coverage",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(prev_coverage, 2), 3)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "variable": {
                    "value": "prev_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, attn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_169": {
                "variable": {
                    "value": "p_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_gen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear([context_vector, state.c, state.h, x], 1, True)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(p_gen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "coverage",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coverage",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(coverage, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "coverage + array_ops.reshape(attn_dist, [batch_size, -1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(attn_dist, 2), 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "matmul_221": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "args[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [total_arg_size, output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_223": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.concat(axis=1, values=args)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [total_arg_size, output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_56": {
                "input": {
                    "value": "encoder_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(encoder_states, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_77": {
                "variable": {
                    "value": "w_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_c",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_98": {
                "input": {
                    "value": "decoder_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(decoder_state, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_144": {
                "variable": {
                    "value": "context_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "array_ops.reshape(attn_dist, [batch_size, -1, 1, 1]) * encoder_states",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_145": {
                "variable": {
                    "value": "context_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_sum(array_ops.reshape(attn_dist, [batch_size, -1, 1, 1]) * encoder_states, [1, 2])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(context_vector, [-1, attn_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, attn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "calculate_pgen",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "AttnOutputProjection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "coverage",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "Attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_102": {
                "variable": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_sum(v * math_ops.tanh(encoder_features + decoder_features + coverage_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v * math_ops.tanh(encoder_features + decoder_features), [2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_128": {
                "variable": {
                    "value": "coverage_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coverage",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(coverage, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "coverage + array_ops.reshape(attn_dist, [batch_size, -1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(attn_dist, 2), 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('w_c', [1, 1, 1, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_130": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v * math_ops.tanh(encoder_features + decoder_features + coverage_features)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_137": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v * math_ops.tanh(encoder_features + decoder_features)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_223": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[args]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_initializer_227": {
                "value": {
                    "value": "bias_start",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_107": {
                "variable": {
                    "value": "masked_sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attn_dist_norescale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_dist * enc_padding_mask",
                            "BinOp"
                        ],
                        [
                            "attn_dist_norescale / masked_sums",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_110": {
                "variable": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(0, limit=batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_111": {
                "variable": {
                    "value": "batch_nums_tile",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(0, limit=batch_size), 1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, attn_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_112": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_nums_tile, enc_sent_id_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_114": {
                "variable": {
                    "value": "selector_probs_projected",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "selector_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack((batch_nums_tile, enc_sent_id_mask), axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_117": {
                "variable": {
                    "value": "masked_sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "attn_dist * enc_padding_mask",
                            "BinOp"
                        ],
                        [
                            "attn_dist / masked_sums",
                            "BinOp"
                        ],
                        [
                            "attn_dist / masked_sums",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_122": {
                "variable": {
                    "value": "masked_sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "attn_dist * enc_padding_mask",
                            "BinOp"
                        ],
                        [
                            "attn_dist / masked_sums",
                            "BinOp"
                        ],
                        [
                            "attn_dist / masked_sums",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "tensor": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "attn_dist * enc_padding_mask",
                            "BinOp"
                        ],
                        [
                            "attn_dist / masked_sums",
                            "BinOp"
                        ],
                        [
                            "attn_dist / masked_sums",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_141": {
                "input": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "attn_dist * enc_padding_mask",
                            "BinOp"
                        ],
                        [
                            "attn_dist / masked_sums",
                            "BinOp"
                        ],
                        [
                            "attn_dist / masked_sums",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "tensor": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "attn_dist * enc_padding_mask",
                            "BinOp"
                        ],
                        [
                            "attn_dist / masked_sums",
                            "BinOp"
                        ],
                        [
                            "attn_dist / masked_sums",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_110": {
                "limit": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder_states.get_shape()[0].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tanh_130": {
                "x": {
                    "value": "encoder_features + decoder_features + coverage_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_137": {
                "x": {
                    "value": "encoder_features + decoder_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "rewriter/beam_search.py": {
        "tensorflow": {}
    },
    "rewriter/decode.py": {
        "tensorflow": {}
    },
    "rewriter/model.py": {
        "tensorflow": {
            "reduce_sum_606": {
                "variable": {
                    "value": "dec_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_623": {
                "variable": {
                    "value": "coverage",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_dists[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self._enc_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self._enc_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_lens",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "self._enc_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_padding_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self._enc_batch_extend_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_batch_extend_vocab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "self._max_art_oovs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "max_art_oovs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMCell_157": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "hps.hidden_dim_rewriter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.get_variable_scope().reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_320": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "train_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_416": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_417": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss_to_minimize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._total_loss if self._hps.coverage else self._loss",
                            "IfExp"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "aggregation_method": {
                    "value": "tf.AggregationMethod.EXPERIMENTAL_TREE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_427": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._hps.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "self._hps.adagrad_init_acc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_439": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "merge_all_442": {
                "variable": {
                    "value": "self._summaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMStateTuple_505": {
                "variable": {
                    "value": "dec_in_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "c": {
                    "value": "dec_in_state.c[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "h": {
                    "value": "dec_in_state.h[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_538": {
                "variable": {
                    "value": "new_dec_in_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "c": {
                    "value": "new_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(old_c, w_reduce_c) + bias_reduce_c)",
                            "Call"
                        ],
                        [
                            "np.concatenate(cells, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "new_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(old_h, w_reduce_h) + bias_reduce_h)",
                            "Call"
                        ],
                        [
                            "np.concatenate(hiddens, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_609": {
                "input_tensor": {
                    "value": "values_per_ex",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum(values_per_step) / dec_lens",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_626": {
                "variable": {
                    "value": "covloss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.minimum(a, coverage)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self._enc_sent_id_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_sent_id_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self._dec_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self._target_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self._dec_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_padding_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMCell_109": {
                "variable": {
                    "value": "cell_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hps.hidden_dim_rewriter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_110": {
                "variable": {
                    "value": "cell_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hps.hidden_dim_rewriter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_111": {
                "variable": {
                    "value": "(encoder_outputs, (fw_st, bw_st))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim_rewriter, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim_rewriter, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_112": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=encoder_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_130": {
                "variable": {
                    "value": "w_reduce_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_reduce_c",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim * 2, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_131": {
                "variable": {
                    "value": "w_reduce_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_reduce_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim * 2, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_132": {
                "variable": {
                    "value": "bias_reduce_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_reduce_c",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_133": {
                "variable": {
                    "value": "bias_reduce_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_reduce_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_136": {
                "variable": {
                    "value": "old_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_st.c, bw_st.c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_137": {
                "variable": {
                    "value": "old_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_st.h, bw_st.h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_138": {
                "variable": {
                    "value": "new_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(old_c, w_reduce_c) + bias_reduce_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_139": {
                "variable": {
                    "value": "new_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(old_h, w_reduce_h) + bias_reduce_h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_274": {
                "variable": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "self._hps.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_275": {
                "variable": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(0, limit=self._hps.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=hps.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_277": {
                "variable": {
                    "value": "batch_nums_tile",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(0, limit=self._hps.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=hps.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, attn_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_285": {
                "variable": {
                    "value": "extra_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self._hps.batch_size, self._max_art_oovs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_286": {
                "variable": {
                    "value": "vocab_dist_extended",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[vocab_dist, extra_zeros]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_292": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_nums_tile, self._enc_batch_extend_vocab)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_294": {
                "variable": {
                    "value": "attn_dist_projected",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack((batch_nums_tile, self._enc_batch_extend_vocab), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stack((batch_nums, targets), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1 - p_gen) * attn_dist",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self._hps.batch_size, extended_vsize]",
                            "List"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_334": {
                "variable": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "minval": {
                    "value": "-hps.rand_unif_init_mag",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "hps.rand_unif_init_mag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_335": {
                "variable": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "hps.trunc_norm_init_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_409": {
                "variable": {
                    "value": "(self._topk_log_probs, self._topk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "log_dists[0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "hps.batch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_421": {
                "variable": {
                    "value": "(grads, global_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss_to_minimize, tvars, aggregation_method=tf.AggregationMethod.EXPERIMENTAL_TREE)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self._hps.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_424": {
                "name": {
                    "value": "global_norm",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "global_norm",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_434": {
                "msg": {
                    "value": "Building graph...",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_444": {
                "msg": {
                    "value": "Time to build graph: %i seconds",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "t1 - t0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "self.prev_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.hidden_dim_rewriter * 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "prev_context",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "reduce_final_st",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_140": {
                "c": {
                    "value": "new_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(old_c, w_reduce_c) + bias_reduce_c)",
                            "Call"
                        ],
                        [
                            "np.concatenate(cells, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "new_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(old_h, w_reduce_h) + bias_reduce_h)",
                            "Call"
                        ],
                        [
                            "np.concatenate(hiddens, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_233": {
                "variable": {
                    "value": "inp_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dec_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "dec_inputs[0]",
                            "Subscript"
                        ],
                        [
                            "predict_word",
                            "Name"
                        ],
                        [
                            "tf.where(tf.less(inp, tf.constant(vsize)), inp, unk_batch)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.constant([self._vocab.word2id(data.START_DECODING)]), [hps.batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_256": {
                "variable": {
                    "value": "log_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "final_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._calc_final_dist_one_step(vocab_dist, attn_dist, p_gen)",
                            "Call"
                        ],
                        [
                            "vocab_dist_extended + attn_dist_projected",
                            "BinOp"
                        ],
                        [
                            "add_epsilon(final_dist)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_267": {
                "values": {
                    "value": "predict_words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_273": {
                "name_or_scope": {
                    "value": "final_distribution",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_332": {
                "name_or_scope": {
                    "value": "seq2seq",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_341": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vsize, hps.emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_344": {
                "variable": {
                    "value": "emb_enc_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self._enc_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_420": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_428": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_437": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_572": {
                "c": {
                    "value": "results['states'].c[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "h": {
                    "value": "results['states'].h[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "minimum_626": {
                "x": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_dists",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "coverage",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(attn_dists[0])",
                            "Call"
                        ],
                        [
                            "coverage + a",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.prev_coverage",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "prev_coverage",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_204": {
                "msg": {
                    "value": "Adding attention_decoder TF timestep %i of %i",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(dec_steps)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "dec_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hps.max_dec_steps",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_variable_245": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.hidden_dim_rewriter, vsize]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_247": {
                "variable": {
                    "value": "w_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [hps.hidden_dim_rewriter, vsize], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_248": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vsize]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_249": {
                "variable": {
                    "value": "vocab_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "decoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [hps.hidden_dim_rewriter, vsize], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('v', [vsize], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_250": {
                "variable": {
                    "value": "vocab_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "vocab_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(decoder_output, w, v)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_260": {
                "variable": {
                    "value": "predict_word",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.to_int32(tf.argmax(log_dist, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_276": {
                "input": {
                    "value": "self._enc_batch_extend_vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_340": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_346": {
                "variable": {
                    "value": "dec_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._dec_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_379": {
                "variable": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "hps.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_389": {
                "variable": {
                    "value": "self.p_gen_avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(self.p_gens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_138": {
                "a": {
                    "value": "old_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[fw_st.c, bw_st.c])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_reduce_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_reduce_c', [hidden_dim * 2, hidden_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_139": {
                "a": {
                    "value": "old_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[fw_st.h, bw_st.h])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_reduce_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_reduce_h', [hidden_dim * 2, hidden_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tile_216": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.constant([self._vocab.word2id(data.START_DECODING)])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[hps.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_scope_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tile_227": {
                "variable": {
                    "value": "unk_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.constant([self._vocab.word2id(data.UNKNOWN_TOKEN)])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[hps.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_228": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(inp, tf.constant(vsize))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dec_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "dec_inputs[0]",
                            "Subscript"
                        ],
                        [
                            "predict_word",
                            "Name"
                        ],
                        [
                            "tf.where(tf.less(inp, tf.constant(vsize)), inp, unk_batch)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.constant([self._vocab.word2id(data.START_DECODING)]), [hps.batch_size])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "unk_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.constant([self._vocab.word2id(data.UNKNOWN_TOKEN)]), [hps.batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "output_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_305": {
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_372": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_382": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_nums, targets)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_383": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "-log_dist",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack((batch_nums_tile, self._enc_batch_extend_vocab), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stack((batch_nums, targets), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_388": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_390": {
                "name": {
                    "value": "p_gen",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.p_gen_avg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_int32_260": {
                "x": {
                    "value": "tf.argmax(log_dist, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_389": {
                "values": {
                    "value": "self.p_gens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_400": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self._total_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_216": {
                "value": {
                    "value": "[self._vocab.word2id(data.START_DECODING)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_227": {
                "value": {
                    "value": "[self._vocab.word2id(data.UNKNOWN_TOKEN)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_228": {
                "x": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dec_inputs[i]",
                            "Subscript"
                        ],
                        [
                            "dec_inputs[0]",
                            "Subscript"
                        ],
                        [
                            "predict_word",
                            "Name"
                        ],
                        [
                            "tf.where(tf.less(inp, tf.constant(vsize)), inp, unk_batch)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.constant([self._vocab.word2id(data.START_DECODING)]), [hps.batch_size])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(vsize)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_260": {
                "input": {
                    "value": "log_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.log(final_dist)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_396": {
                "name_or_scope": {
                    "value": "coverage_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_398": {
                "name": {
                    "value": "coverage_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self._coverage_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_228": {
                "value": {
                    "value": "vsize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._vocab.size()",
                            "Call"
                        ],
                        [
                            "self._vocab.size()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rewriter/run_rewriter.py": {
        "tensorflow": {}
    },
    "selector/evaluate.py": {
        "tensorflow": {
            "info_271": {
                "msg": {
                    "value": "log_str",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "Constant"
                        ],
                        [
                            "log_str + 'Average ratio: %.3f\\n' % avg_ratio",
                            "BinOp"
                        ],
                        [
                            "''",
                            "Constant"
                        ]
                    ]
                }
            },
            "info_273": {
                "msg": {
                    "value": "Writing final ROUGE results to %s...",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "results_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(dir_to_write, output_file)",
                            "Call"
                        ],
                        [
                            "os.path.join(dir_to_write, 'results.txt')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_283": {
                "msg": {
                    "value": "Average precision: %.3f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "avg_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum(precision_list) / len(precision_list)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_284": {
                "msg": {
                    "value": "Average recall: %.3f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "avg_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum(recall_list) / len(recall_list)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_285": {
                "msg": {
                    "value": "Average accuracy: %.3f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "avg_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum(accuracy_list) / len(accuracy_list)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_286": {
                "msg": {
                    "value": "Average number of sentences: %.3f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "avg_sent_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(sum(sent_num_list)) / len(sent_num_list)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_287": {
                "msg": {
                    "value": "Average ratio: %.3f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "avg_ratio",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum(ratio_list) / len(ratio_list)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Saver_58": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_59": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "util.get_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_205": {
                "msg": {
                    "value": "Wrote result data to %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "output_fname",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self._result_dir, 'result_%06d.pkl' % index)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_234": {
                "msg": {
                    "value": "'Wrote example %i to file' % ex_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_42": {
                "msg": {
                    "value": "'Save evaluation results to ' + self._decode_dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_63": {
                "msg": {
                    "value": "Loading best eval checkpoint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_77": {
                "msg": {
                    "value": "'Save evaluation results to ' + self._decode_dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_124": {
                "msg": {
                    "value": "Decoder has finished reading dataset for single_pass.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_141": {
                "msg": {
                    "value": "evaluation time: %.3f min",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "(t1 - t0) / 60.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_68": {
                "msg": {
                    "value": "Loading best train checkpoint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_127": {
                "msg": {
                    "value": "Output has been saved in %s and %s. Starting ROUGE eval...",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._rouge_ref_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self._rouge_gt_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_136": {
                "msg": {
                    "value": "Output has been saved in %s and %s. Starting ROUGE eval...",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._rouge_ref_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self._rouge_dec_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "selector/model.py": {
        "tensorflow": {
            "placeholder_52": {
                "variable": {
                    "value": "self._art_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_art_len, hps.max_sent_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "art_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "self._art_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "art_lens",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self._sent_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_art_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sent_lens",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "self._art_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_art_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "art_padding_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self._sent_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_art_len, hps.max_sent_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sent_padding_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FileWriter_141": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "train_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_213": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_215": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss_to_minimize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._loss",
                            "Attribute"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "aggregation_method": {
                    "value": "tf.AggregationMethod.EXPERIMENTAL_TREE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_225": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "hps.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "hps.adagrad_init_acc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_237": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "merge_all_240": {
                "variable": {
                    "value": "self._summaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self._target_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_art_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GRUCell_93": {
                "variable": {
                    "value": "cell_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hps.hidden_dim_selector",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_94": {
                "variable": {
                    "value": "cell_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hps.hidden_dim_selector",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_95": {
                "variable": {
                    "value": "(encoder_outputs, (_, _))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.GRUCell(self._hps.hidden_dim_selector)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.GRUCell(self._hps.hidden_dim_selector)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_96": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=encoder_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_109": {
                "variable": {
                    "value": "w_content",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_content",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_110": {
                "variable": {
                    "value": "w_salience",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_salience",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_111": {
                "variable": {
                    "value": "w_novelty",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_novelty",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_112": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_155": {
                "variable": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "minval": {
                    "value": "-hps.rand_unif_init_mag",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "hps.rand_unif_init_mag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_156": {
                "variable": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "hps.trunc_norm_init_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_171": {
                "variable": {
                    "value": "sent_enc_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding, self._art_batch)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, hps.max_sent_len, hps.emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_172": {
                "variable": {
                    "value": "sent_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._sent_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "sent_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._sent_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, hps.max_sent_len, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_178": {
                "variable": {
                    "value": "sent_lens_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sent_padding_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._sent_padding_mask, [-1, hps.max_sent_len, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_179": {
                "variable": {
                    "value": "self.sent_lens_float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "sent_lens_float > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "sent_lens_float",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(sent_padding_mask, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones(sent_lens_float.get_shape().as_list())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_181": {
                "variable": {
                    "value": "art_enc_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "art_enc_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(sent_enc_outputs * sent_padding_mask, axis=1) / self.sent_lens_float",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(art_enc_inputs, [hps.batch_size, -1, hps.hidden_dim_selector * 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[hps.batch_size, -1, hps.hidden_dim_selector * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_186": {
                "variable": {
                    "value": "art_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._art_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_195": {
                "variable": {
                    "value": "self.avg_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(self.probs, 1) / tf.reduce_sum(self._art_padding_mask, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_219": {
                "variable": {
                    "value": "(grads, global_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss_to_minimize, tvars, aggregation_method=tf.AggregationMethod.EXPERIMENTAL_TREE)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "hps.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_222": {
                "name": {
                    "value": "global_norm",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "global_norm",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_232": {
                "msg": {
                    "value": "Building graph...",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_242": {
                "msg": {
                    "value": "Time to build graph: %i seconds",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "t1 - t0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_121": {
                "variable": {
                    "value": "content_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "sent_feats[:, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_content",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_content', [hidden_dim, 1], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_122": {
                "variable": {
                    "value": "salience_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.matmul(sent_feats[:, i, :], w_salience) * art_feats",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "variable": {
                    "value": "novelty_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.matmul(sent_feats[:, i, :], w_novelty) * tf.tanh(s)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_127": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "content_feats + salience_feats - novelty_feats + bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "SentSelector",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_162": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vsize, hps.emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_165": {
                "variable": {
                    "value": "emb_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self._art_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_196": {
                "name": {
                    "value": "avg_prob",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.avg_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_218": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_226": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_235": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_129": {
                "x": {
                    "value": "sent_feats[:, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(logit)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_131": {
                "values": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_179": {
                "shape": {
                    "value": "sent_lens_float.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_180": {
                "input_tensor": {
                    "value": "sent_enc_outputs * sent_padding_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_187": {
                "input_tensor": {
                    "value": "art_padding_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(self._art_padding_mask, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_203": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "labels": {
                    "value": "self._target_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_205": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(losses * self._art_padding_mask, 1) / tf.reduce_sum(self._art_padding_mask, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_initializer_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_195": {
                "input_tensor": {
                    "value": "self._art_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_202": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_206": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_122": {
                "a": {
                    "value": "sent_feats[:, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_salience",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_salience', [hidden_dim, hidden_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_123": {
                "a": {
                    "value": "sent_feats[:, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_novelty",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_novelty', [hidden_dim, hidden_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_123": {
                "x": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, hidden_dim])",
                            "Call"
                        ],
                        [
                            "s + tf.multiply(sent_feats[:, i, :], p)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_204": {
                "input_tensor": {
                    "value": "self._art_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "selector/run_selector.py": {
        "tensorflow": {}
    },
    "util.py": {
        "tensorflow": {
            "ConfigProto_28": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Summary_51": {
                "variable": {
                    "value": "loss_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_55": {
                "msg": {
                    "value": "tag_name + ': ' + str(running_avg_loss)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_181": {
                "msg": {
                    "value": "'avg num of sentences: ' + str(sent_nums)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_182": {
                "msg": {
                    "value": "'precision on all thres: ' + str(precisions)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_183": {
                "msg": {
                    "value": "'recalls on all thres: ' + str(recalls)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_184": {
                "msg": {
                    "value": "'accuracies on all thres: ' + str(accuracys)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_185": {
                "msg": {
                    "value": "'select ratios on all thres: ' + str(ratios)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_186": {
                "msg": {
                    "value": "avg precision: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "avg_ps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sum(avg_ps) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_187": {
                "msg": {
                    "value": "avg recall: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "avg_rs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sum(avg_rs) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_188": {
                "msg": {
                    "value": "avg accuracy: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "avg_accs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sum(avg_accs) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_244": {
                "msg": {
                    "value": "recall: %f, ratio: %f, thres: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "recall",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(len(TP)) / len(gt_selected_ids)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "sum(recalls) / float(batch_size)",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(select_num) / art_sent_num",
                            "BinOp"
                        ],
                        [
                            "thres",
                            "Name"
                        ],
                        [
                            "sum(ratios) / float(batch_size)",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_65": {
                "variable": {
                    "value": "ckpt_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, ckpt_dir)",
                            "Call"
                        ],
                        [
                            "'train'",
                            "MethodArgument"
                        ]
                    ]
                },
                "latest_filename": {
                    "value": "latest_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint_best' if 'eval' in ckpt_dir else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "info_67": {
                "msg": {
                    "value": "Loading checkpoint %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ckpt_state.model_checkpoint_path",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "warning_238": {
                "msg": {
                    "value": "'fail to reach target recall: ' + str(target_recall)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_71": {
                "msg": {
                    "value": "Failed to load checkpoint from %s. Sleeping for %i secs...",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "ckpt_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, ckpt_dir)",
                            "Call"
                        ],
                        [
                            "'train'",
                            "MethodArgument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}