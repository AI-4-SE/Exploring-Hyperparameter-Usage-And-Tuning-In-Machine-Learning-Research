{
    "utils/evaluate_ood.py": {
        "sklearn": {
            "roc_auc_score_63": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "anomaly_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.zeros(len(true_dataset)), torch.ones(len(ood_dataset))))",
                            "Call"
                        ],
                        [
                            "prepare_ood_datasets(true_dataset, ood_dataset)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(scores)",
                            "Call"
                        ],
                        [
                            "loop_over_dataloader(model, dataloader)",
                            "Call"
                        ],
                        [
                            "loop_over_dataloader(model, dataloader)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_76": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "1 - accuracies",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(scores)",
                            "Call"
                        ],
                        [
                            "loop_over_dataloader(model, dataloader)",
                            "Call"
                        ],
                        [
                            "loop_over_dataloader(model, dataloader)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "cat_20": {
                "variable": {
                    "value": "anomaly_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(len(true_dataset)), torch.ones(len(ood_dataset)))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConcatDataset_24": {
                "variable": {
                    "value": "concat_datasets",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "datasets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[true_dataset, ood_dataset]",
                            "List"
                        ]
                    ]
                }
            },
            "DataLoader_26": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "concat_datasets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.ConcatDataset(datasets)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "len(true_dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_21": {
                "*size": {
                    "value": "len(ood_dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_deep_ensemble.py": {
        "torch": {
            "tensor_54": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_54": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_130": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "5000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_147": {
                "variable": {
                    "value": "ensemble",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "ensemble",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[CNN(input_size, num_classes).cuda() for _ in range(args.ensemble)]",
                            "ListComp"
                        ],
                        [
                            "[ResNet(input_size, num_classes).cuda() for _ in range(args.ensemble)]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.ModuleList(ensemble)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_26": {
                "variable": {
                    "value": "self.resnet.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_121": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_176": {
                "obj": {
                    "value": "ensemble.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + '_ensemble.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_70": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(models)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_78": {
                "input": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(len(models), data.shape[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_156": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_162": {
                "optimizer": {
                    "value": "optimizers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 20]",
                            "List"
                        ],
                        [
                            "[25, 50]",
                            "List"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "train_duq_cifar.py": {
        "torch": {
            "SummaryWriter_35": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "f'runs/{output_dir}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "SGD_88": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_decay",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiStepLR_92": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=learning_rate, momentum=0.9, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[60, 120, 160]",
                            "List"
                        ],
                        [
                            "[25, 50, 75]",
                            "List"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_187": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "variable"
                        ],
                        [
                            "torch.utils.data.Subset(dataset, idx[:val_size])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_191": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_dataset",
                            "variable"
                        ],
                        [
                            "torch.utils.data.Subset(dataset, idx[val_size:])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_195": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Subset_49": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx[:val_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Subset_50": {
                "variable": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx[val_size:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "one_hot_131": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.cuda()",
                            "Call"
                        ],
                        [
                            "F.one_hot(y, num_classes).float()",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_133": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.cuda()",
                            "Call"
                        ],
                        [
                            "F.one_hot(y, num_classes).float()",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_249": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'runs/{output_dir}/model.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "feature_extractor.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_72": {
                "variable": {
                    "value": "feature_extractor.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_73": {
                "variable": {
                    "value": "feature_extractor.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_97": {
                "outputs": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(y_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_172": {
                "tensor": {
                    "value": "out['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_100": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "train_duq_fm.py": {
        "torch": {
            "SGD_49": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_137": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=0.05, momentum=0.9, weight_decay=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[10, 20]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_141": {
                "variable": {
                    "value": "dl_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "variable"
                        ],
                        [
                            "torch.utils.data.Subset(dataset, indices=idx[:55000])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_145": {
                "variable": {
                    "value": "dl_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_dataset",
                            "variable"
                        ],
                        [
                            "torch.utils.data.Subset(dataset, indices=idx[55000:])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_149": {
                "variable": {
                    "value": "dl_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FastFashionMNIST('data/', train=False, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Subset_32": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FastFashionMNIST('data/', train=True, download=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx[:55000]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "list(range(60000))",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_33": {
                "variable": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FastFashionMNIST('data/', train=True, download=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx[55000:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "list(range(60000))",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_89": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(y, num_classes=10).float()",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ],
                        [
                            "F.one_hot(y, num_classes=10).float()",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_97": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(y, num_classes=10).float()",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ],
                        [
                            "F.one_hot(y, num_classes=10).float()",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_115": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(y, num_classes=10).float()",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ],
                        [
                            "F.one_hot(y, num_classes=10).float()",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_59": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(y, num_classes=10).float()",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ],
                        [
                            "F.one_hot(y, num_classes=10).float()",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_66": {
                "outputs": {
                    "value": "y_pred_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred_sum",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(y_pred_sum)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_69": {
                "input": {
                    "value": "y_pred_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred_sum",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/cnn_duq.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 2 * 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.normal(torch.zeros(embedding_size, num_classes, 256), 0.05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_74": {
                "variable": {
                    "value": "features_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ik->jk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_layer(self.compute_features(x))",
                            "Call"
                        ],
                        [
                            "torch.einsum('ij,mnj->imn', z, self.W)",
                            "Call"
                        ],
                        [
                            "self.last_layer(self.compute_features(x))",
                            "Call"
                        ],
                        [
                            "self.last_layer(self.compute_features(x))",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_79": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ij,mnj->imn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_layer(self.compute_features(x))",
                            "Call"
                        ],
                        [
                            "torch.einsum('ij,mnj->imn', z, self.W)",
                            "Call"
                        ],
                        [
                            "self.last_layer(self.compute_features(x))",
                            "Call"
                        ],
                        [
                            "self.last_layer(self.compute_features(x))",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.last_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LogSoftmax_102": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_106": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_layer(self.compute_features(x))",
                            "Call"
                        ],
                        [
                            "torch.einsum('ij,mnj->imn', z, self.W)",
                            "Call"
                        ],
                        [
                            "self.last_layer(self.compute_features(x))",
                            "Call"
                        ],
                        [
                            "self.last_layer(self.compute_features(x))",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_63": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_classes) + length_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_52": {
                "mean": {
                    "value": "torch.zeros(embedding_size, num_classes, 256)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normal_57": {
                "mean": {
                    "value": "torch.zeros(embedding_size, num_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_55": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_57": {
                "*size": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/datasets.py": {
        "torch": {
            "tensor_118": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "data_dict['images'].transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_118": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "data_dict['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/resnet_duq.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(centroid_size, num_classes, model_output_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_35": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ij,mnj->imn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ij,mnj->imn', z, self.W)",
                            "Call"
                        ],
                        [
                            "self.feature_extractor(x)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ij,mnj->imn', z, self.W)",
                            "Call"
                        ],
                        [
                            "self.feature_extractor(x)",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_49": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ij,mnj->imn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ij,mnj->imn', z, self.W)",
                            "Call"
                        ],
                        [
                            "self.feature_extractor(x)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ij,mnj->imn', z, self.W)",
                            "Call"
                        ],
                        [
                            "self.feature_extractor(x)",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_50": {
                "variable": {
                    "value": "embedding_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ik->jk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ij,mnj->imn', z, self.W)",
                            "Call"
                        ],
                        [
                            "self.feature_extractor(x)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ij,mnj->imn', z, self.W)",
                            "Call"
                        ],
                        [
                            "self.feature_extractor(x)",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_20": {
                "*size": {
                    "value": "centroid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "centroid_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "model_output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normal_28": {
                "mean": {
                    "value": "torch.zeros(centroid_size, num_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_28": {
                "*size": {
                    "value": "centroid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "centroid_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/wide_resnet.py": {
        "torch": {
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "variable"
                        ],
                        [
                            "in_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "variable"
                        ],
                        [
                            "in_c",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nStages[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "strides[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_104": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_105": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(out))",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.flatten(1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "variable"
                        ],
                        [
                            "in_c",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_27": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_97": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    }
}