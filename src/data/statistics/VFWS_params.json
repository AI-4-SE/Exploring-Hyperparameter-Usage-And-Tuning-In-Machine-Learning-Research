{
    "datasets/dataloader.py": {
        "torch": {
            "stack_18": {
                "variable": {
                    "value": "target_mag_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_mag_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.stack(target_mag_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_19": {
                "variable": {
                    "value": "mixed_mag_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mixed_mag_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.stack(mixed_mag_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_27": {
                "dataset": {
                    "value": "VFWSDataset(hp, True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "hp.train.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "hp.train.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "train_collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_36": {
                "dataset": {
                    "value": "VFWSDataset(hp, False)",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "test_collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_66": {
                "variable": {
                    "value": "target_mag",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.target_mag_list[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_67": {
                "variable": {
                    "value": "mixed_mag",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.mixed_mag_list[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "target_mag",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(self.target_mag_list[idx])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target_mag)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "mixed_mag",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mixed_mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(self.mixed_mag_list[idx])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mixed_mag)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/model.py": {
        "torch": {
            "Sequential_8": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ZeroPad2d((3, 3, 0, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_48": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "8 * hp.audio.num_freq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hp.model.lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hp.model.fc1_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hp.model.fc1_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hp.model.fc2_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ZeroPad2d_10": {
                "padding": {
                    "value": "(3, 3, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_12": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_15": {
                "padding": {
                    "value": "(0, 0, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_20": {
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_25": {
                "padding": {
                    "value": "(2, 2, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_30": {
                "padding": {
                    "value": "(2, 2, 8, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_35": {
                "padding": {
                    "value": "(2, 2, 16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(8, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_40": {
                "padding": {
                    "value": "(2, 2, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(16, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pre_data_librispeech/generator.py": {
        "torch": {
            "save_69": {
                "obj": {
                    "value": "torch.from_numpy(target_mag)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "target_mag_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "formatter(clean_dir, hp.form.target.mag, num)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_70": {
                "obj": {
                    "value": "torch.from_numpy(mixed_mag)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "mixed_mag_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "formatter(mixed_dir, hp.form.mixed.mag, num)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_69": {
                "ndarray": {
                    "value": "target_mag",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "ndarray": {
                    "value": "mixed_mag",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "set_device_30": {
                "device": {
                    "value": "hp.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/adabound.py": {
        "torch": {
            "full_like_116": {
                "variable": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['lr'] * math.sqrt(bias_correction2) / bias_correction1",
                            "BinOp"
                        ],
                        [
                            "torch.full_like(denom, step_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_79": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_81": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_84": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_101": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "utils/evaluation.py": {
        "torch": {
            "MSELoss_9": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/train.py": {
        "torch": {
            "set_device_17": {
                "device": {
                    "value": "hp.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "OneCycleLR_36": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AdaBound(model.parameters(), lr=hp.train.adabound.initial, final_lr=hp.train.adabound.final)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=hp.train.adam)",
                            "Call"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "hp.scheduler.oneCycle.max_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epochs": {
                    "value": "hp.train.epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "steps_per_epoch": {
                    "value": "len(trainloader)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_44": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "chkpt_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_31": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "hp.train.adam",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_38": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AdaBound(model.parameters(), lr=hp.train.adabound.initial, final_lr=hp.train.adabound.final)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=hp.train.adam)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "hp.scheduler.Plateau.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "hp.scheduler.Plateau.patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "factor": {
                    "value": "hp.scheduler.Plateau.factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_58": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_60": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_62": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_76": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mixed_mag * mask",
                            "BinOp"
                        ],
                        [
                            "torch.pow(output, 2)",
                            "Call"
                        ],
                        [
                            "10 * torch.log10(output + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_77": {
                "variable": {
                    "value": "target_mag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_mag.cuda()",
                            "Call"
                        ],
                        [
                            "torch.pow(target_mag, 2)",
                            "Call"
                        ],
                        [
                            "10 * torch.log10(target_mag + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log10_80": {
                "input": {
                    "value": "output + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log10_81": {
                "input": {
                    "value": "target_mag + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_116": {
                "obj": {
                    "value": "{'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'step': step, 'hp_str': hp_str}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(pt_dir, 'chkpt_%d.pt' % step)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}