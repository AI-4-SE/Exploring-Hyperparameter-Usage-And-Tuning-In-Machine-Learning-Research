{
    "src/algos/count.py": {
        "torch": {
            "RMSprop_187": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "learner_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "flags.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "flags.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "flags.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_198": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.RMSprop(learner_model.parameters(), lr=flags.learning_rate, momentum=flags.momentum, eps=flags.epsilon, alpha=flags.alpha)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_46": {
                "variable": {
                    "value": "intrinsic_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(flags.unroll_length, flags.batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_69": {
                "variable": {
                    "value": "clipped_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsic_rewards",
                            "variable"
                        ],
                        [
                            "rewards + intrinsic_rewards",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_132": {
                "variable": {
                    "value": "flags.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_135": {
                "variable": {
                    "value": "flags.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_norm__107": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "flags.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_252": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict(), 'flags': vars(flags)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpointpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.expandvars(os.path.expanduser('%s/%s/%s' % (flags.savedir, flags.xpid, 'model.tar')))",
                            "Call"
                        ],
                        [
                            "os.path.expandvars(os.path.expanduser('%s/%s/%s' % (flags.savedir, flags.xpid, 'model.tar')))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_94": {
                "input": {
                    "value": "episode_returns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['episode_return'][batch['done']]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_99": {
                "input": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['reward']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_100": {
                "input": {
                    "value": "intrinsic_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones((flags.unroll_length, flags.batch_size), dtype=torch.float32).to(device=flags.device)",
                            "Call"
                        ],
                        [
                            "batch['train_state_count'][1:].float().to(device=flags.device)",
                            "Call"
                        ],
                        [
                            "intrinsic_rewards * intrinsic_reward_coef",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_101": {
                "input": {
                    "value": "total_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsic_rewards",
                            "variable"
                        ],
                        [
                            "rewards + intrinsic_rewards",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/algos/curiosity.py": {
        "torch": {
            "RMSprop_260": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "learner_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "flags.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "flags.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "flags.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_267": {
                "variable": {
                    "value": "state_embedding_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "state_embedding_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "flags.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "flags.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "flags.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_274": {
                "variable": {
                    "value": "inverse_dynamics_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "inverse_dynamics_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "flags.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "flags.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "flags.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_281": {
                "variable": {
                    "value": "forward_dynamics_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "forward_dynamics_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "flags.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "flags.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "flags.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_292": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.RMSprop(learner_model.parameters(), lr=flags.learning_rate, momentum=flags.momentum, eps=flags.epsilon, alpha=flags.alpha)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_76": {
                "variable": {
                    "value": "intrinsic_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_next_state_emb - next_state_emb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_113": {
                "variable": {
                    "value": "clipped_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsic_rewards",
                            "variable"
                        ],
                        [
                            "rewards + intrinsic_rewards",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_190": {
                "variable": {
                    "value": "flags.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_193": {
                "variable": {
                    "value": "flags.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_norm__159": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "flags.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__160": {
                "parameters": {
                    "value": "state_embedding_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "flags.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__161": {
                "parameters": {
                    "value": "forward_dynamics_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "flags.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__162": {
                "parameters": {
                    "value": "inverse_dynamics_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "flags.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_353": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'state_embedding_model_state_dict': state_embedding_model.state_dict(), 'forward_dynamics_model_state_dict': forward_dynamics_model.state_dict(), 'inverse_dynamics_model_state_dict': inverse_dynamics_model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'state_embedding_optimizer_state_dict': state_embedding_optimizer.state_dict(), 'forward_dynamics_optimizer_state_dict': forward_dynamics_optimizer.state_dict(), 'inverse_dynamics_optimizer_state_dict': inverse_dynamics_optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict(), 'flags': vars(flags)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpointpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.expandvars(os.path.expanduser('%s/%s/%s' % (flags.savedir, flags.xpid, 'model.tar')))",
                            "Call"
                        ],
                        [
                            "os.path.expandvars(os.path.expanduser('%s/%s/%s' % (flags.savedir, flags.xpid, 'model.tar')))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_141": {
                "input": {
                    "value": "episode_returns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['episode_return'][batch['done']]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_148": {
                "input": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['reward']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_149": {
                "input": {
                    "value": "intrinsic_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(pred_next_state_emb - next_state_emb, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "intrinsic_rewards * intrinsic_reward_coef",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_150": {
                "input": {
                    "value": "total_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsic_rewards",
                            "variable"
                        ],
                        [
                            "rewards + intrinsic_rewards",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/algos/no_episodic_counts.py": {
        "torch": {
            "RMSprop_237": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "learner_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "flags.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "flags.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "flags.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_244": {
                "variable": {
                    "value": "state_embedding_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "state_embedding_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "flags.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "flags.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "flags.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_251": {
                "variable": {
                    "value": "inverse_dynamics_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "inverse_dynamics_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "flags.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "flags.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "flags.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_258": {
                "variable": {
                    "value": "forward_dynamics_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "forward_dynamics_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "flags.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "flags.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "flags.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_269": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.RMSprop(learner_model.parameters(), lr=flags.learning_rate, momentum=flags.momentum, eps=flags.epsilon, alpha=flags.alpha)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_67": {
                "variable": {
                    "value": "intrinsic_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_state_emb - state_emb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_100": {
                "variable": {
                    "value": "clipped_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsic_rewards",
                            "variable"
                        ],
                        [
                            "rewards + intrinsic_rewards",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_176": {
                "variable": {
                    "value": "flags.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_179": {
                "variable": {
                    "value": "flags.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_norm__145": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "flags.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__146": {
                "parameters": {
                    "value": "state_embedding_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "flags.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__147": {
                "parameters": {
                    "value": "forward_dynamics_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "flags.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__148": {
                "parameters": {
                    "value": "inverse_dynamics_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "flags.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_331": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'state_embedding_model_state_dict': state_embedding_model.state_dict(), 'forward_dynamics_model_state_dict': forward_dynamics_model.state_dict(), 'inverse_dynamics_model_state_dict': inverse_dynamics_model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'state_embedding_optimizer_state_dict': state_embedding_optimizer.state_dict(), 'forward_dynamics_optimizer_state_dict': forward_dynamics_optimizer.state_dict(), 'inverse_dynamics_optimizer_state_dict': inverse_dynamics_optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict(), 'flags': vars(flags)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpointpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.expandvars(os.path.expanduser('%s/%s/%s' % (flags.savedir, flags.xpid, 'model.tar')))",
                            "Call"
                        ],
                        [
                            "os.path.expandvars(os.path.expanduser('%s/%s/%s' % (flags.savedir, flags.xpid, 'model.tar')))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_126": {
                "input": {
                    "value": "episode_returns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['episode_return'][batch['done']]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_133": {
                "input": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['reward']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_134": {
                "input": {
                    "value": "intrinsic_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(next_state_emb - state_emb, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "intrinsic_rewards * intrinsic_reward_coef",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_135": {
                "input": {
                    "value": "total_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsic_rewards",
                            "variable"
                        ],
                        [
                            "rewards + intrinsic_rewards",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/algos/only_episodic_counts.py": {
        "torch": {
            "RMSprop_184": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "learner_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "flags.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "flags.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "flags.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_195": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.RMSprop(learner_model.parameters(), lr=flags.learning_rate, momentum=flags.momentum, eps=flags.epsilon, alpha=flags.alpha)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_47": {
                "variable": {
                    "value": "count_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(flags.unroll_length, flags.batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_71": {
                "variable": {
                    "value": "clipped_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsic_rewards",
                            "variable"
                        ],
                        [
                            "rewards + intrinsic_rewards",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_136": {
                "variable": {
                    "value": "flags.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_139": {
                "variable": {
                    "value": "flags.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_norm__112": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "flags.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_250": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict(), 'flags': vars(flags)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpointpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.expandvars(os.path.expanduser('%s/%s/%s' % (flags.savedir, flags.xpid, 'model.tar')))",
                            "Call"
                        ],
                        [
                            "os.path.expandvars(os.path.expanduser('%s/%s/%s' % (flags.savedir, flags.xpid, 'model.tar')))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_98": {
                "input": {
                    "value": "episode_returns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['episode_return'][batch['done']]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_103": {
                "input": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['reward']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_104": {
                "input": {
                    "value": "intrinsic_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "count_rewards",
                            "variable"
                        ],
                        [
                            "intrinsic_rewards * intrinsic_reward_coef",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_105": {
                "input": {
                    "value": "total_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsic_rewards",
                            "variable"
                        ],
                        [
                            "rewards + intrinsic_rewards",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_106": {
                "input": {
                    "value": "count_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones((flags.unroll_length, flags.batch_size), dtype=torch.float32).to(device=flags.device)",
                            "Call"
                        ],
                        [
                            "batch['episode_state_count'][1:].float().to(device=flags.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/algos/ride.py": {
        "torch": {
            "RMSprop_256": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "learner_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "flags.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "flags.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "flags.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_263": {
                "variable": {
                    "value": "state_embedding_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "state_embedding_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "flags.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "flags.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "flags.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_270": {
                "variable": {
                    "value": "inverse_dynamics_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "inverse_dynamics_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "flags.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "flags.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "flags.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_277": {
                "variable": {
                    "value": "forward_dynamics_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "forward_dynamics_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "flags.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "flags.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "flags.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_288": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.RMSprop(learner_model.parameters(), lr=flags.learning_rate, momentum=flags.momentum, eps=flags.epsilon, alpha=flags.alpha)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_62": {
                "variable": {
                    "value": "count_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(flags.unroll_length, flags.batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_79": {
                "variable": {
                    "value": "control_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_state_emb - state_emb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_108": {
                "variable": {
                    "value": "clipped_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsic_rewards",
                            "variable"
                        ],
                        [
                            "rewards + intrinsic_rewards",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_184": {
                "variable": {
                    "value": "flags.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_187": {
                "variable": {
                    "value": "flags.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_norm__154": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "flags.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__155": {
                "parameters": {
                    "value": "state_embedding_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "flags.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__156": {
                "parameters": {
                    "value": "forward_dynamics_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "flags.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__157": {
                "parameters": {
                    "value": "inverse_dynamics_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "flags.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_349": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'state_embedding_model_state_dict': state_embedding_model.state_dict(), 'forward_dynamics_model_state_dict': forward_dynamics_model.state_dict(), 'inverse_dynamics_model_state_dict': inverse_dynamics_model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'state_embedding_optimizer_state_dict': state_embedding_optimizer.state_dict(), 'forward_dynamics_optimizer_state_dict': forward_dynamics_optimizer.state_dict(), 'inverse_dynamics_optimizer_state_dict': inverse_dynamics_optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict(), 'flags': vars(flags)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpointpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.expandvars(os.path.expanduser('%s/%s/%s' % (flags.savedir, flags.xpid, 'model.tar')))",
                            "Call"
                        ],
                        [
                            "os.path.expandvars(os.path.expanduser('%s/%s/%s' % (flags.savedir, flags.xpid, 'model.tar')))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_134": {
                "input": {
                    "value": "episode_returns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['episode_return'][batch['done']]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_139": {
                "input": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['reward']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_140": {
                "input": {
                    "value": "intrinsic_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "count_rewards * control_rewards",
                            "BinOp"
                        ],
                        [
                            "intrinsic_rewards * intrinsic_reward_coef",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_141": {
                "input": {
                    "value": "total_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsic_rewards",
                            "variable"
                        ],
                        [
                            "rewards + intrinsic_rewards",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_142": {
                "input": {
                    "value": "control_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(next_state_emb - state_emb, dim=2, p=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_143": {
                "input": {
                    "value": "count_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones((flags.unroll_length, flags.batch_size), dtype=torch.float32).to(device=flags.device)",
                            "Call"
                        ],
                        [
                            "batch['episode_state_count'][1:].float().to(device=flags.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/algos/rnd.py": {
        "torch": {
            "RMSprop_223": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "learner_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "flags.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "flags.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "flags.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_230": {
                "variable": {
                    "value": "predictor_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "predictor_network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "flags.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "flags.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "flags.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_241": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.RMSprop(learner_model.parameters(), lr=flags.learning_rate, momentum=flags.momentum, eps=flags.epsilon, alpha=flags.alpha)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_64": {
                "variable": {
                    "value": "intrinsic_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted_embedding.detach() - random_embedding.detach()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_92": {
                "variable": {
                    "value": "clipped_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsic_rewards",
                            "variable"
                        ],
                        [
                            "rewards + intrinsic_rewards",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_160": {
                "variable": {
                    "value": "flags.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_163": {
                "variable": {
                    "value": "flags.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_norm__132": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "flags.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__133": {
                "parameters": {
                    "value": "predictor_network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "flags.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_299": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'random_target_network_state_dict': random_target_network.state_dict(), 'predictor_network_state_dict': predictor_network.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'predictor_optimizer_state_dict': predictor_optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict(), 'flags': vars(flags)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpointpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.expandvars(os.path.expanduser('%s/%s/%s' % (flags.savedir, flags.xpid, 'model.tar')))",
                            "Call"
                        ],
                        [
                            "os.path.expandvars(os.path.expanduser('%s/%s/%s' % (flags.savedir, flags.xpid, 'model.tar')))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_117": {
                "input": {
                    "value": "episode_returns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['episode_return'][batch['done']]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_123": {
                "input": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['reward']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_124": {
                "input": {
                    "value": "intrinsic_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(predicted_embedding.detach() - random_embedding.detach(), dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "intrinsic_rewards * intrinsic_reward_coef",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_125": {
                "input": {
                    "value": "total_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsic_rewards",
                            "variable"
                        ],
                        [
                            "rewards + intrinsic_rewards",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/algos/torchbeast.py": {
        "torch": {
            "RMSprop_164": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "learner_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "flags.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "flags.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "flags.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_175": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.RMSprop(learner_model.parameters(), lr=flags.learning_rate, momentum=flags.momentum, eps=flags.epsilon, alpha=flags.alpha)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_57": {
                "variable": {
                    "value": "clipped_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['reward']",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_117": {
                "variable": {
                    "value": "flags.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_120": {
                "variable": {
                    "value": "flags.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_norm__92": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "flags.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_225": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict(), 'flags': vars(flags)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpointpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.expandvars(os.path.expanduser('%s/%s/%s' % (flags.savedir, flags.xpid, 'model.tar')))",
                            "Call"
                        ],
                        [
                            "os.path.expandvars(os.path.expanduser('%s/%s/%s' % (flags.savedir, flags.xpid, 'model.tar')))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_82": {
                "input": {
                    "value": "episode_returns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['episode_return'][batch['done']]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/core/environment.py": {
        "torch": {
            "from_numpy_11": {
                "variable": {
                    "value": "frame",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "frame",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(frame)",
                            "Call"
                        ],
                        [
                            "self.gym_env.step(action.item())",
                            "Call"
                        ],
                        [
                            "_format_frame(frame)",
                            "Call"
                        ],
                        [
                            "self.gym_env.reset()",
                            "Call"
                        ],
                        [
                            "frame",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "initial_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "initial_last_action",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "variable": {
                    "value": "self.episode_return",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "self.episode_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "initial_done",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gym_env.step(action.item())",
                            "Call"
                        ],
                        [
                            "torch.tensor(reward).view(1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "done",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "done",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gym_env.step(action.item())",
                            "Call"
                        ],
                        [
                            "torch.tensor(done).view(1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "self.episode_return",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "self.episode_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/core/vtrace.py": {
        "torch": {
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_91": {
                "variable": {
                    "value": "rhos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_rhos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_action_log_probs - behavior_action_log_probs",
                            "BinOp"
                        ],
                        [
                            "log_rhos",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_97": {
                "variable": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rhos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(log_rhos)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "values_t_plus_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[values[1:], torch.unsqueeze(bootstrap_value, 0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_103": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bootstrap_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bootstrap_value",
                            "Method Argument"
                        ],
                        [
                            "bootstrap_value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_109": {
                "variable": {
                    "value": "vs_minus_v_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "add_112": {
                "variable": {
                    "value": "vs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vs_minus_v_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(result)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "Method Argument"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_115": {
                "variable": {
                    "value": "vs_t_plus_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vs[1:], torch.unsqueeze(bootstrap_value, 0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_45": {
                "input": {
                    "value": "F.log_softmax(torch.flatten(policy_logits, 0, 1), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.flatten(actions, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_93": {
                "variable": {
                    "value": "clipped_rhos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rhos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(log_rhos)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_rho_threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_118": {
                "variable": {
                    "value": "clipped_pg_rhos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rhos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(log_rhos)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_pg_rho_threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_100": {
                "input": {
                    "value": "bootstrap_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bootstrap_value",
                            "Method Argument"
                        ],
                        [
                            "bootstrap_value",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_116": {
                "input": {
                    "value": "bootstrap_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bootstrap_value",
                            "Method Argument"
                        ],
                        [
                            "bootstrap_value",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_46": {
                "input": {
                    "value": "torch.flatten(policy_logits, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_47": {
                "input": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "actions",
                            "Method Argument"
                        ],
                        [
                            "actions",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_46": {
                "input": {
                    "value": "policy_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/core/vtrace_test.py": {
        "torch": {
            "from_numpy_104": {
                "ndarray": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(0, num_actions, size=(seq_len, batch_size), dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_159": {
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_195": {
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_235": {
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_236": {
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_237": {
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_238": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_249": {
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_250": {
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_252": {
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_254": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "src/env_utils.py": {
        "torch": {
            "tensor_16": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(obs)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "initial_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "self.episode_return",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "self.episode_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "self.episode_win",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_46": {
                "variable": {
                    "value": "initial_done",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gym_env.step(action.item())",
                            "Call"
                        ],
                        [
                            "torch.tensor(reward).view(1, 1)",
                            "Call"
                        ],
                        [
                            "self.env.step(action)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "done",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "done",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gym_env.step(action.item())",
                            "Call"
                        ],
                        [
                            "torch.tensor(done).view(1, 1)",
                            "Call"
                        ],
                        [
                            "self.env.step(action)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "self.episode_return",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "self.episode_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "self.episode_win",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/losses.py": {
        "torch": {
            "softmax_18": {
                "variable": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_19": {
                "variable": {
                    "value": "log_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_20": {
                "variable": {
                    "value": "entropy_per_timestep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-policy * log_policy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_25": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(torch.flatten(logits, 0, 1), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.flatten(actions, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "norm_36": {
                "variable": {
                    "value": "forward_dynamics_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_next_emb - next_emb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_41": {
                "variable": {
                    "value": "inverse_dynamics_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(torch.flatten(pred_actions, 0, 1), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.flatten(true_actions, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_32": {
                "input": {
                    "value": "torch.mean(policy_gradient_loss_per_timestep, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_37": {
                "input": {
                    "value": "torch.mean(forward_dynamics_loss, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_46": {
                "input": {
                    "value": "torch.mean(inverse_dynamics_loss, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_14": {
                "input": {
                    "value": "torch.mean(advantages ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_21": {
                "input": {
                    "value": "torch.mean(entropy_per_timestep, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_26": {
                "input": {
                    "value": "torch.flatten(logits, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_32": {
                "input": {
                    "value": "policy_gradient_loss_per_timestep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_entropy * advantages",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_37": {
                "input": {
                    "value": "forward_dynamics_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(pred_next_emb - next_emb, dim=2, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_42": {
                "input": {
                    "value": "torch.flatten(pred_actions, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_46": {
                "input": {
                    "value": "inverse_dynamics_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.nll_loss(F.log_softmax(torch.flatten(pred_actions, 0, 1), dim=-1), target=torch.flatten(true_actions, 0, 1), reduction='none')",
                            "Call"
                        ],
                        [
                            "inverse_dynamics_loss.view_as(true_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_14": {
                "input": {
                    "value": "advantages ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_21": {
                "input": {
                    "value": "entropy_per_timestep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(-policy * log_policy, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_26": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_27": {
                "input": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "actions",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_42": {
                "input": {
                    "value": "pred_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_actions",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_43": {
                "input": {
                    "value": "true_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_actions",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models.py": {
        "torch": {
            "Embedding_32": {
                "variable": {
                    "value": "self.embed_object",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.obj_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_33": {
                "variable": {
                    "value": "self.embed_color",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.col_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_34": {
                "variable": {
                    "value": "self.embed_contains",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.con_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_35": {
                "variable": {
                    "value": "self.embed_agent_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.observation_shape[0] * self.observation_shape[1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.agent_loc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.feat_extract",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "init_(nn.Conv2d(in_channels=self.num_channels, out_channels=32, kernel_size=(3, 3), stride=2, padding=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "init_(nn.Linear(32 + self.agent_loc_dim + self.obj_dim + self.col_dim, 1024))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_89": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "objects_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._select(self.embed_object, x[:, :, :, id::3])",
                            "Call"
                        ],
                        [
                            "self._select(self.embed_color, x[:, :, :, id::3])",
                            "Call"
                        ],
                        [
                            "self._select(self.embed_contains, x[:, :, :, id::3])",
                            "Call"
                        ],
                        [
                            "self._select(self.embed_object, x[:, :, :, id::3])",
                            "Call"
                        ],
                        [
                            "self._select(self.embed_color, x[:, :, :, id::3])",
                            "Call"
                        ],
                        [
                            "self._select(self.embed_contains, x[:, :, :, id::3])",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_94": {
                "variable": {
                    "value": "agent_location",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frames",
                            "Method Argument"
                        ],
                        [
                            "frames",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_107": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs['frame']",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.long()",
                            "Call"
                        ],
                        [
                            "torch.cat([self.create_embeddings(x, 0), self.create_embeddings(x, 1), self.create_embeddings(x, 2)], dim=3)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x.view(T * B, -1)",
                            "Call"
                        ],
                        [
                            "inputs['frame'][1:]",
                            "Subscript"
                        ],
                        [
                            "inputs['frame'][:-1]",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.long()",
                            "Call"
                        ],
                        [
                            "torch.cat([self.create_embeddings(x, 0), self.create_embeddings(x, 1), self.create_embeddings(x, 2)], dim=3)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x.view(T * B, -1)",
                            "Call"
                        ],
                        [
                            "inputs['partial_obs']",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x.view(T * B, -1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "inputs['frame']",
                            "Subscript"
                        ],
                        [
                            "x.reshape(T, B, W, H, C)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "x.reshape(T, B, W, H, C)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.create_embeddings(x, 0), self.create_embeddings(x, 1), self.create_embeddings(x, 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, agent_loc_emb, carried_obj_emb, carried_col_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_166": {
                "variable": {
                    "value": "self.embed_object",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.obj_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_167": {
                "variable": {
                    "value": "self.embed_color",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.col_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_168": {
                "variable": {
                    "value": "self.embed_contains",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.con_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_169": {
                "variable": {
                    "value": "self.embed_agent_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.observation_shape[0] * self.observation_shape[1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.agent_loc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_175": {
                "variable": {
                    "value": "self.feat_extract",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "init_(nn.Conv2d(in_channels=self.num_channels, out_channels=32, kernel_size=(3, 3), stride=2, padding=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "init_(nn.Linear(32 + self.agent_loc_dim + self.obj_dim + self.col_dim, 128))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_212": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "objects_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._select(self.embed_object, x[:, :, :, id::3])",
                            "Call"
                        ],
                        [
                            "self._select(self.embed_color, x[:, :, :, id::3])",
                            "Call"
                        ],
                        [
                            "self._select(self.embed_contains, x[:, :, :, id::3])",
                            "Call"
                        ],
                        [
                            "self._select(self.embed_object, x[:, :, :, id::3])",
                            "Call"
                        ],
                        [
                            "self._select(self.embed_color, x[:, :, :, id::3])",
                            "Call"
                        ],
                        [
                            "self._select(self.embed_contains, x[:, :, :, id::3])",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_217": {
                "variable": {
                    "value": "agent_location",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frames",
                            "Method Argument"
                        ],
                        [
                            "frames",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_233": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs['frame']",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.long()",
                            "Call"
                        ],
                        [
                            "torch.cat([self.create_embeddings(x, 0), self.create_embeddings(x, 1), self.create_embeddings(x, 2)], dim=3)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x.view(T * B, -1)",
                            "Call"
                        ],
                        [
                            "inputs['frame'][1:]",
                            "Subscript"
                        ],
                        [
                            "inputs['frame'][:-1]",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.long()",
                            "Call"
                        ],
                        [
                            "torch.cat([self.create_embeddings(x, 0), self.create_embeddings(x, 1), self.create_embeddings(x, 2)], dim=3)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x.view(T * B, -1)",
                            "Call"
                        ],
                        [
                            "inputs['partial_obs']",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x.view(T * B, -1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "inputs['frame']",
                            "Subscript"
                        ],
                        [
                            "x.reshape(T, B, W, H, C)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "x.reshape(T, B, W, H, C)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.create_embeddings(x, 0), self.create_embeddings(x, 1), self.create_embeddings(x, 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, agent_loc_emb, carried_obj_emb, carried_col_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_279": {
                "variable": {
                    "value": "self.feat_extract",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "init_(nn.Conv2d(in_channels=self.observation_shape[2], out_channels=32, kernel_size=(3, 3), stride=2, padding=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_288": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "init_(nn.Linear(32, 1024))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_295": {
                "variable": {
                    "value": "self.core",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_315": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs['frame']",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.long()",
                            "Call"
                        ],
                        [
                            "torch.cat([self.create_embeddings(x, 0), self.create_embeddings(x, 1), self.create_embeddings(x, 2)], dim=3)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x.view(T * B, -1)",
                            "Call"
                        ],
                        [
                            "inputs['frame'][1:]",
                            "Subscript"
                        ],
                        [
                            "inputs['frame'][:-1]",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.long()",
                            "Call"
                        ],
                        [
                            "torch.cat([self.create_embeddings(x, 0), self.create_embeddings(x, 1), self.create_embeddings(x, 2)], dim=3)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x.view(T * B, -1)",
                            "Call"
                        ],
                        [
                            "inputs['partial_obs']",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x.view(T * B, -1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "inputs['frame']",
                            "Subscript"
                        ],
                        [
                            "x.reshape(T, B, W, H, C)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "x.reshape(T, B, W, H, C)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_333": {
                "variable": {
                    "value": "core_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(core_output_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_360": {
                "variable": {
                    "value": "self.feat_extract",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "init_(nn.Conv2d(in_channels=self.observation_shape[2], out_channels=32, kernel_size=(3, 3), stride=2, padding=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_375": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs['frame']",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.long()",
                            "Call"
                        ],
                        [
                            "torch.cat([self.create_embeddings(x, 0), self.create_embeddings(x, 1), self.create_embeddings(x, 2)], dim=3)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x.view(T * B, -1)",
                            "Call"
                        ],
                        [
                            "inputs['frame'][1:]",
                            "Subscript"
                        ],
                        [
                            "inputs['frame'][:-1]",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.long()",
                            "Call"
                        ],
                        [
                            "torch.cat([self.create_embeddings(x, 0), self.create_embeddings(x, 1), self.create_embeddings(x, 2)], dim=3)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x.view(T * B, -1)",
                            "Call"
                        ],
                        [
                            "inputs['partial_obs']",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x.view(T * B, -1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "inputs['frame']",
                            "Subscript"
                        ],
                        [
                            "x.reshape(T, B, W, H, C)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "x.reshape(T, B, W, H, C)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_395": {
                "variable": {
                    "value": "self.inverse_dynamics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "init_(nn.Linear(2 * 128, 256))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_406": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state_embedding, next_state_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_419": {
                "variable": {
                    "value": "self.forward_dynamics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "init_(nn.Linear(128 + self.num_actions, 256))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_430": {
                "variable": {
                    "value": "action_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(F.softmax(policy_logits, dim=1), num_samples=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(policy_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "action.view(T, B)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(F.softmax(policy_logits, dim=1), num_samples=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(policy_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "action.view(T, B)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(F.softmax(policy_logits, dim=1), num_samples=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(policy_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "action.view(T, B)",
                            "Call"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_431": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state_embedding, action_one_hot)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_445": {
                "variable": {
                    "value": "self.feat_extract",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "init_(nn.Conv2d(in_channels=self.observation_shape[0], out_channels=32, kernel_size=(3, 3), stride=2, padding=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_459": {
                "variable": {
                    "value": "self.core",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "288",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_476": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs['frame']",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.long()",
                            "Call"
                        ],
                        [
                            "torch.cat([self.create_embeddings(x, 0), self.create_embeddings(x, 1), self.create_embeddings(x, 2)], dim=3)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x.view(T * B, -1)",
                            "Call"
                        ],
                        [
                            "inputs['frame'][1:]",
                            "Subscript"
                        ],
                        [
                            "inputs['frame'][:-1]",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.long()",
                            "Call"
                        ],
                        [
                            "torch.cat([self.create_embeddings(x, 0), self.create_embeddings(x, 1), self.create_embeddings(x, 2)], dim=3)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x.view(T * B, -1)",
                            "Call"
                        ],
                        [
                            "inputs['partial_obs']",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x.view(T * B, -1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "inputs['frame']",
                            "Subscript"
                        ],
                        [
                            "x.reshape(T, B, W, H, C)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "x.reshape(T, B, W, H, C)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_495": {
                "variable": {
                    "value": "core_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(core_output_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_522": {
                "variable": {
                    "value": "self.feat_extract",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "init_(nn.Conv2d(in_channels=self.observation_shape[0], out_channels=32, kernel_size=(3, 3), stride=2, padding=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_540": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs['frame']",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.long()",
                            "Call"
                        ],
                        [
                            "torch.cat([self.create_embeddings(x, 0), self.create_embeddings(x, 1), self.create_embeddings(x, 2)], dim=3)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x.view(T * B, -1)",
                            "Call"
                        ],
                        [
                            "inputs['frame'][1:]",
                            "Subscript"
                        ],
                        [
                            "inputs['frame'][:-1]",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.long()",
                            "Call"
                        ],
                        [
                            "torch.cat([self.create_embeddings(x, 0), self.create_embeddings(x, 1), self.create_embeddings(x, 2)], dim=3)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x.view(T * B, -1)",
                            "Call"
                        ],
                        [
                            "inputs['partial_obs']",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x.view(T * B, -1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "inputs['frame']",
                            "Subscript"
                        ],
                        [
                            "x.reshape(T, B, W, H, C)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "x.reshape(T, B, W, H, C)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x.float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.feat_extract(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_560": {
                "variable": {
                    "value": "self.forward_dynamics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "init_(nn.Linear(288 + self.num_actions, 256))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_571": {
                "variable": {
                    "value": "action_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(F.softmax(policy_logits, dim=1), num_samples=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(policy_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "action.view(T, B)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(F.softmax(policy_logits, dim=1), num_samples=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(policy_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "action.view(T, B)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(F.softmax(policy_logits, dim=1), num_samples=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(policy_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "action.view(T, B)",
                            "Call"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_572": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state_embedding, action_one_hot)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_584": {
                "variable": {
                    "value": "self.inverse_dynamics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "init_(nn.Linear(2 * 288, 256))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_596": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state_embedding, next_state_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_143": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(policy_logits, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_146": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy(core_output)",
                            "Call"
                        ],
                        [
                            "policy_logits.view(T, B, self.num_actions)",
                            "Call"
                        ],
                        [
                            "self.policy(core_output)",
                            "Call"
                        ],
                        [
                            "policy_logits.view(T, B, self.num_actions)",
                            "Call"
                        ],
                        [
                            "self.policy(core_output)",
                            "Call"
                        ],
                        [
                            "policy_logits.view(T, B, self.num_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_339": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(policy_logits, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_342": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy(core_output)",
                            "Call"
                        ],
                        [
                            "policy_logits.view(T, B, self.num_actions)",
                            "Call"
                        ],
                        [
                            "self.policy(core_output)",
                            "Call"
                        ],
                        [
                            "policy_logits.view(T, B, self.num_actions)",
                            "Call"
                        ],
                        [
                            "self.policy(core_output)",
                            "Call"
                        ],
                        [
                            "policy_logits.view(T, B, self.num_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_501": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(policy_logits, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_504": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy(core_output)",
                            "Call"
                        ],
                        [
                            "policy_logits.view(T, B, self.num_actions)",
                            "Call"
                        ],
                        [
                            "self.policy(core_output)",
                            "Call"
                        ],
                        [
                            "policy_logits.view(T, B, self.num_actions)",
                            "Call"
                        ],
                        [
                            "self.policy(core_output)",
                            "Call"
                        ],
                        [
                            "policy_logits.view(T, B, self.num_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_300": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_301": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_333": {
                "tensors": {
                    "value": "core_output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ELU_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_402": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_421": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_427": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_447": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_449": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_451": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_453": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_461": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_462": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_495": {
                "tensors": {
                    "value": "core_output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ELU_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_526": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_528": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_530": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_562": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_568": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "288",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_586": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_592": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "self.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "32 + self.agent_loc_dim + self.obj_dim + self.col_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_143": {
                "input": {
                    "value": "policy_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy(core_output)",
                            "Call"
                        ],
                        [
                            "policy_logits.view(T, B, self.num_actions)",
                            "Call"
                        ],
                        [
                            "self.policy(core_output)",
                            "Call"
                        ],
                        [
                            "policy_logits.view(T, B, self.num_actions)",
                            "Call"
                        ],
                        [
                            "self.policy(core_output)",
                            "Call"
                        ],
                        [
                            "policy_logits.view(T, B, self.num_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "in_channels": {
                    "value": "self.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_178": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_189": {
                "in_features": {
                    "value": "32 + self.agent_loc_dim + self.obj_dim + self.col_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_191": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_280": {
                "in_channels": {
                    "value": "self.observation_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_282": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_284": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_289": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_291": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_305": {
                "*size": {
                    "value": "self.core.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.core.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_340": {
                "input": {
                    "value": "policy_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy(core_output)",
                            "Call"
                        ],
                        [
                            "policy_logits.view(T, B, self.num_actions)",
                            "Call"
                        ],
                        [
                            "self.policy(core_output)",
                            "Call"
                        ],
                        [
                            "policy_logits.view(T, B, self.num_actions)",
                            "Call"
                        ],
                        [
                            "self.policy(core_output)",
                            "Call"
                        ],
                        [
                            "policy_logits.view(T, B, self.num_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_361": {
                "in_channels": {
                    "value": "self.observation_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_363": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_365": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_396": {
                "in_features": {
                    "value": "2 * 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_420": {
                "in_features": {
                    "value": "128 + self.num_actions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_446": {
                "in_channels": {
                    "value": "self.observation_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_448": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_450": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_452": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_466": {
                "*size": {
                    "value": "self.core.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.core.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_502": {
                "input": {
                    "value": "policy_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy(core_output)",
                            "Call"
                        ],
                        [
                            "policy_logits.view(T, B, self.num_actions)",
                            "Call"
                        ],
                        [
                            "self.policy(core_output)",
                            "Call"
                        ],
                        [
                            "policy_logits.view(T, B, self.num_actions)",
                            "Call"
                        ],
                        [
                            "self.policy(core_output)",
                            "Call"
                        ],
                        [
                            "policy_logits.view(T, B, self.num_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_523": {
                "in_channels": {
                    "value": "self.observation_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_525": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_527": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_529": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_561": {
                "in_features": {
                    "value": "288 + self.num_actions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_585": {
                "in_features": {
                    "value": "2 * 288",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "stack_96": {
                "tensors": {
                    "value": "[buffers[key][m] for m in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "buffers[episode_state_count][index][0, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1 / np.sqrt(episode_state_count_dict.get(episode_state_key))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_199": {
                "variable": {
                    "value": "buffers[train_state_count][index][0, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1 / np.sqrt(train_state_count_dict.get(train_state_key))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_227": {
                "variable": {
                    "value": "buffers[episode_state_count][index][t + 1, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1 / np.sqrt(episode_state_count_dict.get(episode_state_key))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_241": {
                "variable": {
                    "value": "buffers[train_state_count][index][t + 1, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1 / np.sqrt(train_state_count_dict.get(train_state_key))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}