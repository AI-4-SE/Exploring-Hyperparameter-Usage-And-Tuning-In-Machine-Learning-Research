{
    "CIFAR-10/evaluate_ULP.py": {
        "sklearn": {
            "roc_curve_76": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.zeros((len(clean_models),)), np.ones((len(poisoned_models_test),))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_np[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_77": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.zeros((len(clean_models),)), np.ones((len(poisoned_models_test),))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_np[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_35": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_42": {
                "input": {
                    "value": "cnn(ulps.to(device)).view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_63": {
                "f": {
                    "value": "model_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Softmax_67": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR-10/evaluate_noise.py": {
        "sklearn": {
            "LogisticRegression_67": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "roc_curve_80": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.zeros((len(clean_models),)), np.ones((len(poisoned_models_test),))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "decision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr.decision_function(test_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_81": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.zeros((len(clean_models),)), np.ones((len(poisoned_models_test),))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "decision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr.decision_function(test_feature)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_50": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_53": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_57": {
                "*size": {
                    "value": "(N, 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_61": {
                "f": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_72": {
                "f": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR-10/train_clean_model.py": {
        "sklearn": {
            "StratifiedShuffleSplit_90": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_121": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(mode='train', augment=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "StratifiedSampler(dataset.labels, batchsize)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(mode='val', augment=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_136": {
                "variable": {
                    "value": "crossentropy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_162": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cnn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(mode='train', augment=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_45": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_91": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.class_vector.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_157": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_160": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_182": {
                "variable": {
                    "value": "val_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_48": {
                "input": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_49": {
                "tensors": {
                    "value": "[torch.sum(self.labels == l).type(torch.DoubleTensor) for l in unique_labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "save_187": {
                "obj": {
                    "value": "cnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "trained_models_folder + '/clean_vggmod_CIFAR-10_%04d.pt' % count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "self.labels == l",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR-10/train_poisoned_model.py": {
        "sklearn": {
            "StratifiedShuffleSplit_116": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_145": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(mode='val', augment=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_163": {
                "variable": {
                    "value": "crossentropy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "new_dataset.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_dataset.data, dataset.data]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "new_dataset.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_dataset.labels, dataset.labels]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_178": {
                "variable": {
                    "value": "X_poisoned_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_poisoned",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_178": {
                "variable": {
                    "value": "X_poisoned_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_179": {
                "variable": {
                    "value": "y_poisoned_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_poisoned",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_182": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "new_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_append(dataset_clean, X_poisoned, y_poisoned)",
                            "Call"
                        ],
                        [
                            "custom_Dataset(X, y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "StratifiedSampler(new_dataset.labels, batchsize)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_197": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cnn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_50": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(self.class_vector.size(0), 2).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_70": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.to(device)",
                            "Call"
                        ],
                        [
                            "y.to(device)",
                            "Call"
                        ],
                        [
                            "self.class_vector.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_117": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.class_vector.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_193": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_196": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_233": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnn(X_poisoned_tensor.to(device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unique_53": {
                "input": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_54": {
                "tensors": {
                    "value": "[torch.sum(self.labels == l).type(torch.DoubleTensor) for l in unique_labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_223": {
                "variable": {
                    "value": "val_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_228": {
                "obj": {
                    "value": "cnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "saveDir + '/poisoned_vggmod_CIFAR-10_%04d.pt' % count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_54": {
                "input": {
                    "value": "self.labels == l",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "tiny-imagenet/evaluate_ULP.py": {
        "sklearn": {
            "roc_curve_70": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.zeros((len(clean_models),)), np.ones((len(poisoned_models),))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_np[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_71": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.zeros((len(clean_models),)), np.ones((len(poisoned_models),))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_np[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "AdaptiveAvgPool1d_29": {
                "variable": {
                    "value": "avgpool",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_50": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_55": {
                "f": {
                    "value": "model_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_59": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avgpool(cnn(X.to(device)).view(1, 1, -1)).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Softmax_61": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tiny-imagenet/evaluate_noise.py": {
        "sklearn": {
            "train_test_split_29": {
                "variable": {
                    "value": "(train_models, _, train_labels, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "models",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_57": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "roc_curve_70": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.zeros((len(clean_models),)), np.ones((len(poisoned_models),))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "decision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr.decision_function(test_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_71": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.zeros((len(clean_models),)), np.ones((len(poisoned_models),))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "decision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr.decision_function(test_feature)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_40": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_43": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_47": {
                "*size": {
                    "value": "(N, 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_51": {
                "f": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_62": {
                "f": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tiny-imagenet/train_ULP.py": {
        "sklearn": {
            "train_test_split_54": {
                "variable": {
                    "value": "(train_models, test_models, train_labels, test_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "models",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "rand_65": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_67": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(200, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_70": {
                "variable": {
                    "value": "optimizerX",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[X]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_71": {
                "variable": {
                    "value": "optimizerWb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[W, b]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_73": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_74": {
                "variable": {
                    "value": "avgpool",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_59": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_62": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([train_labels[i]])",
                            "Call"
                        ],
                        [
                            "np.array([train_labels[i]])",
                            "Call"
                        ],
                        [
                            "np.array([test_labels[i]])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_108": {
                "variable": {
                    "value": "Xgrad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Xgrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.stack(Xgrad, 0)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_90": {
                "f": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_95": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avgpool(cnn(X.to(device)).view(1, 1, -1)).squeeze(0)",
                            "Call"
                        ],
                        [
                            "avgpool(cnn(X.to(device)).view(1, 1, -1)).squeeze(0)",
                            "Call"
                        ],
                        [
                            "avgpool(cnn(X.to(device)).view(1, 1, -1)).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((200, 2), requires_grad=True, device='cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_97": {
                "input": {
                    "value": "torch.abs(X[:, :, :, :-1] - X[:, :, :, 1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_98": {
                "input": {
                    "value": "torch.abs(X[:, :, :-1, :] - X[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_128": {
                "f": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_132": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avgpool(cnn(X.to(device)).view(1, 1, -1)).squeeze(0)",
                            "Call"
                        ],
                        [
                            "avgpool(cnn(X.to(device)).view(1, 1, -1)).squeeze(0)",
                            "Call"
                        ],
                        [
                            "avgpool(cnn(X.to(device)).view(1, 1, -1)).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((200, 2), requires_grad=True, device='cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_133": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(output, W) + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(output, W) + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(output, W) + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_139": {
                "f": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_143": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avgpool(cnn(X.to(device)).view(1, 1, -1)).squeeze(0)",
                            "Call"
                        ],
                        [
                            "avgpool(cnn(X.to(device)).view(1, 1, -1)).squeeze(0)",
                            "Call"
                        ],
                        [
                            "avgpool(cnn(X.to(device)).view(1, 1, -1)).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((200, 2), requires_grad=True, device='cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_145": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(output, W) + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(output, W) + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(output, W) + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_97": {
                "input": {
                    "value": "X[:, :, :, :-1] - X[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_98": {
                "input": {
                    "value": "X[:, :, :-1, :] - X[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tiny-imagenet/train_clean_model.py": {
        "sklearn": {},
        "torch": {}
    },
    "tiny-imagenet/train_poisoned_model.py": {
        "sklearn": {},
        "torch": {}
    },
    "CIFAR-10/train_ULP.py": {
        "torch": {
            "rand_109": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_111": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N * nofclasses, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_114": {
                "variable": {
                    "value": "optimizerX",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[X]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "optimizerWb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[W, b]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_117": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_101": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_104": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_53": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([train_labels[i]])",
                            "Call"
                        ],
                        [
                            "np.array([train_labels[i]])",
                            "Call"
                        ],
                        [
                            "np.array([val_labels[i]])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_151": {
                "variable": {
                    "value": "Xgrad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Xgrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.stack(Xgrad, 0)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unique_56": {
                "input": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_57": {
                "tensors": {
                    "value": "[torch.sum(self.labels == l).type(torch.DoubleTensor) for l in unique_labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "load_133": {
                "f": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_137": {
                "input": {
                    "value": "cnn(X.to(device)).view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((N * nofclasses, 2), requires_grad=True, device='cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_139": {
                "input": {
                    "value": "torch.abs(X[:, :, :, :-1] - X[:, :, :, 1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_140": {
                "input": {
                    "value": "torch.abs(X[:, :, :-1, :] - X[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_177": {
                "f": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_180": {
                "input": {
                    "value": "cnn(X.to(device)).view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((N * nofclasses, 2), requires_grad=True, device='cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_181": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(cnn(X.to(device)).view(1, -1), W) + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(cnn(X.to(device)).view(1, -1), W) + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(cnn(X.to(device)).view(1, -1), W) + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_186": {
                "f": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_189": {
                "input": {
                    "value": "cnn(X.to(device)).view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((N * nofclasses, 2), requires_grad=True, device='cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_190": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(cnn(X.to(device)).view(1, -1), W) + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(cnn(X.to(device)).view(1, -1), W) + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(cnn(X.to(device)).view(1, -1), W) + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_57": {
                "input": {
                    "value": "self.labels == l",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "abs_139": {
                "input": {
                    "value": "X[:, :, :, :-1] - X[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_140": {
                "input": {
                    "value": "X[:, :, :-1, :] - X[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR-10/utils/model.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nofchannels, self.init_num_filters_ * 1, kernel_size=5, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.init_num_filters_ * 4 * 4, self.inter_fc_dim_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "nofchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.init_num_filters_ * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "self.init_num_filters_ * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "self.init_num_filters_ * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.init_num_filters_ * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "self.init_num_filters_ * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "self.init_num_filters_ * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.init_num_filters_ * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "self.init_num_filters_ * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "self.init_num_filters_ * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.init_num_filters_ * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "self.init_num_filters_ * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_43": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "self.init_num_filters_ * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.init_num_filters_ * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "self.init_num_filters_ * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "self.init_num_filters_ * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.init_num_filters_ * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "self.init_num_filters_ * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_53": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "self.init_num_filters_ * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.inter_fc_dim_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_58": {
                "num_features": {
                    "value": "self.inter_fc_dim_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "self.inter_fc_dim_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.inter_fc_dim_ / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_63": {
                "num_features": {
                    "value": "int(self.inter_fc_dim_ / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_65": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "int(self.inter_fc_dim_ / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nofclasses_",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR-10/utils/stn.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "self.localization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 16, kernel_size=7)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.fc_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "affine_grid_33": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_loc(xs)",
                            "Call"
                        ],
                        [
                            "theta.view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(x, grid)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, x.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_10": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_13": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_16": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "[1, 0, 0, 0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tiny-imagenet/convert_data.py": {
        "torch": {}
    },
    "tiny-imagenet/resnet.py": {
        "torch": {
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_148": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_156": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_212": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_198": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    }
}