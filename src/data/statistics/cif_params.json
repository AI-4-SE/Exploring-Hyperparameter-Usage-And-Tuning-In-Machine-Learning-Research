{
    "cif/datasets/two_d.py": {
        "sklearn": {},
        "torch": {
            "tensor_182": {
                "data": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sklearn.datasets.make_swiss_roll(n_samples=size, noise=1.0)[0]",
                            "Subscript"
                        ],
                        [
                            "data[:, [0, 2]]",
                            "Subscript"
                        ],
                        [
                            "data / 1.414",
                            "BinOp"
                        ],
                        [
                            "sklearn.datasets.make_circles(n_samples=size, factor=0.5, noise=0.08)[0]",
                            "Subscript"
                        ],
                        [
                            "X + np.random.normal(scale=0.08, size=X.shape)",
                            "BinOp"
                        ],
                        [
                            "2 * np.random.permutation(np.einsum('ti,tij->tj', features, rotations))",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "np.concatenate([x1[:, None], x2[:, None]], 1)",
                            "Call"
                        ],
                        [
                            "np.array(data)",
                            "Call"
                        ],
                        [
                            "np.stack((x, y), 1)",
                            "Call"
                        ],
                        [
                            "np.stack((x, y), 1)",
                            "Call"
                        ],
                        [
                            "np.stack((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "np.stack((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "util_shuffle(data)",
                            "Call"
                        ],
                        [
                            "np.stack((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "util_shuffle(data)",
                            "Call"
                        ],
                        [
                            "np.stack((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "util_shuffle(data)",
                            "Call"
                        ],
                        [
                            "np.stack((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "np.stack((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "np.stack((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "np.stack((x1, x2), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.get_default_dtype()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_dtype_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cif/datasets/gaussian.py": {
        "torch": {
            "zeros_8": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-4.0], [1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, -3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_32": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "A.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_33": {
                "variable": {
                    "value": "Az",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([[-4.0], [1.0]])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(size, A.shape[1], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_7": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_like_34": {
                "input": {
                    "value": "Az",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(A, z).view(size, A.shape[0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cif/datasets/image.py": {
        "torch": {
            "randperm_110": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "images.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dataset.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "permute_78": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(0, 3, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dataset.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "train_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_images, train_images.flip([3]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "train_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_labels, train_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dataset.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dataset.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_33": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_36": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_default_dtype_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_41": {
                "obj": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(data)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "data_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(root, 'data.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_42": {
                "obj": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(targets)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "targets_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(root, 'targets.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cif/datasets/loaders.py": {
        "torch": {
            "DataLoader_13": {
                "dataset": {
                    "value": "dset.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cif/datasets/supervised_dataset.py": {
        "torch": {
            "zeros_7": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cif/datasets/tabular.py": {
        "torch": {
            "tensor_170": {
                "data": {
                    "value": "train_raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "normalize_raw_data(train_raw, mu, s)",
                            "Call"
                        ],
                        [
                            "pandas.read_csv(filepath_or_buffer=train_data_path, index_col=False)",
                            "Call"
                        ],
                        [
                            "train_raw[train_raw[train_raw.columns[0]] == 1]",
                            "Subscript"
                        ],
                        [
                            "train_raw.drop(train_raw.columns[0], axis=1)",
                            "Call"
                        ],
                        [
                            "normalize_raw_data(train_raw, mu, s).to_numpy()",
                            "Call"
                        ],
                        [
                            "train_raw[:, np.array([i for i in range(train_raw.shape[1]) if i not in features_to_remove])]",
                            "Subscript"
                        ],
                        [
                            "normalize_raw_data(train_raw, mu, s)",
                            "Call"
                        ],
                        [
                            "f['train'][()]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.get_default_dtype()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_172": {
                "data": {
                    "value": "valid_raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "normalize_raw_data(valid_raw, mu, s)",
                            "Call"
                        ],
                        [
                            "normalize_raw_data(valid_raw, mu, s)",
                            "Call"
                        ],
                        [
                            "f['validation'][()]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.get_default_dtype()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "data": {
                    "value": "test_raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "normalize_raw_data(test_raw, mu, s)",
                            "Call"
                        ],
                        [
                            "pandas.read_csv(filepath_or_buffer=test_data_path, index_col=False)",
                            "Call"
                        ],
                        [
                            "test_raw[test_raw[test_raw.columns[0]] == 1]",
                            "Subscript"
                        ],
                        [
                            "test_raw.drop(test_raw.columns[0], axis=1)",
                            "Call"
                        ],
                        [
                            "test_raw.drop(test_raw.columns[-1], axis=1)",
                            "Call"
                        ],
                        [
                            "normalize_raw_data(test_raw, mu, s).to_numpy()",
                            "Call"
                        ],
                        [
                            "test_raw[:, np.array([i for i in range(test_raw.shape[1]) if i not in features_to_remove])]",
                            "Subscript"
                        ],
                        [
                            "normalize_raw_data(test_raw, mu, s)",
                            "Call"
                        ],
                        [
                            "f['test'][()]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.get_default_dtype()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_dtype_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_dtype_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_dtype_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cif/experiment.py": {
        "torch": {
            "device_126": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_110": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "run_dir / 'checkpoints' / 'best_valid.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_122": {
                "seed": {
                    "value": "config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_112": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "run_dir / 'checkpoints' / 'latest.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_199": {
                "optimizer": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_opt(density.parameters(), config)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "config['max_epochs'] * num_train_batches",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_63": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_71": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LambdaLR_205": {
                "optimizer": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_opt(density.parameters(), config)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda epoch: 1.0",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "cif/metrics.py": {
        "torch": {}
    },
    "cif/models/components/bijections/acl.py": {
        "torch": {
            "empty_50": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(height, width)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_14": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs, kwargs['u'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "tensors": {
                    "value": "(inputs1, inputs2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "any_183": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty((height, width))",
                            "Call"
                        ],
                        [
                            "mask.expand(num_channels, -1, -1)",
                            "Call"
                        ],
                        [
                            "1 - mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_89": {
                "input": {
                    "value": "log_scale",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_41": {
                "input": {
                    "value": "log_scale",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_101": {
                "input": {
                    "value": "-log_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_46": {
                "input": {
                    "value": "-log_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "cif/models/components/bijections/actnorm.py": {
        "torch": {}
    },
    "cif/models/components/bijections/affine.py": {
        "torch": {
            "Parameter_21": {
                "variable": {
                    "value": "self.shift",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(param_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(param_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "param_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x_shape[0], *[1 for _ in x_shape[1:]])",
                            "Tuple"
                        ],
                        [
                            "x_shape",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_22": {
                "*size": {
                    "value": "param_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x_shape[0], *[1 for _ in x_shape[1:]])",
                            "Tuple"
                        ],
                        [
                            "x_shape",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_37": {
                "input": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_54": {
                "input": {
                    "value": "log_scale",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_32": {
                "input": {
                    "value": "-self.log_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_59": {
                "input": {
                    "value": "-log_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_26": {
                "input": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cif/models/components/bijections/batchnorm.py": {
        "torch": {
            "Parameter_34": {
                "variable": {
                    "value": "self.shift",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(param_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(param_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.average_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_81": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "*size": {
                    "value": "param_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x_shape[0], *[1 for _ in x_shape[1:]])",
                            "Tuple"
                        ],
                        [
                            "x_shape",
                            "Name"
                        ]
                    ]
                }
            },
            "ones_29": {
                "*size": {
                    "value": "param_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x_shape[0], *[1 for _ in x_shape[1:]])",
                            "Tuple"
                        ],
                        [
                            "x_shape",
                            "Name"
                        ]
                    ]
                }
            },
            "sqrt_56": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_84": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "summands",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-0.5 * torch.log(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.log_scale + summands",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "param_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x_shape[0], *[1 for _ in x_shape[1:]])",
                            "Tuple"
                        ],
                        [
                            "x_shape",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "param_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x_shape[0], *[1 for _ in x_shape[1:]])",
                            "Tuple"
                        ],
                        [
                            "x_shape",
                            "Name"
                        ]
                    ]
                }
            },
            "exp_70": {
                "input": {
                    "value": "-self.log_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_72": {
                "input": {
                    "value": "self.running_var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_59": {
                "input": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cif/models/components/bijections/bijection.py": {
        "torch": {
            "ModuleList_114": {
                "variable": {
                    "value": "self._x_to_z_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reversed(layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_93": {
                "*size": {
                    "value": "inputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cif/models/components/bijections/bnaf.py": {
        "torch": {
            "leaky_relu_100": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_102": {
                "variable": {
                    "value": "log_jac",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_118": {
                "variable": {
                    "value": "log_jac",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eps + (1 - eps) * torch.sigmoid(inputs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_117": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_118": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cif/models/components/bijections/invconv.py": {
        "torch": {
            "Parameter_67": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.weights_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lu_unpack_80": {
                "variable": {
                    "value": "(P, lower, upper)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "LU_data": {
                    "value": "*torch.lu(self.weights_init)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "diag_81": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.triu(upper, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_82": {
                "variable": {
                    "value": "log_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_83": {
                "variable": {
                    "value": "upper",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.triu(upper, 1)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.lower",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "lower",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_91": {
                "variable": {
                    "value": "self.log_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "log_s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(torch.abs(s))",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.upper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "upper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.triu(upper, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(x_shape[0], *x_shape[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "input": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lower * self.l_mask + self.eye",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.upper * self.l_mask.transpose(0, 1).contiguous()",
                            "BinOp"
                        ],
                        [
                            "U + torch.diag(self.sign_s * torch.exp(self.log_s))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.u_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_channels, num_u_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_99": {
                "input": {
                    "value": "self.sign_s * torch.exp(self.log_s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "qr_21": {
                "input": {
                    "value": "torch.randn(*self.weight_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_30": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "weights.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_32": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights.view(*weights_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_58": {
                "input": {
                    "value": "self._get_weights()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_82": {
                "input": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.diag(upper)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_86": {
                "input": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.diag(upper)",
                            "Call"
                        ]
                    ]
                }
            },
            "tril_87": {
                "input": {
                    "value": "torch.ones(self.weight_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_88": {
                "n": {
                    "value": "*self.weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "*size": {
                    "value": "x_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "*x_shape[1:]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "self.log_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_21": {
                "*size": {
                    "value": "*self.weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_u_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "slogdet_73": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lu_80": {
                "*args": {
                    "value": "self.weights_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_87": {
                "*size": {
                    "value": "self.weight_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_99": {
                "input": {
                    "value": "self.log_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cif/models/components/bijections/made.py": {
        "torch": {
            "zeros_like_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x - means) * torch.exp(-log_stds)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_46": {
                "input": {
                    "value": "-log_stds",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_37": {
                "input": {
                    "value": "log_stds[:, dim]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cif/models/components/bijections/math.py": {
        "torch": {
            "sigmoid_49": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_60": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "full_like_87": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "np.log(np.abs(self.value))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_105": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_46": {
                "input": {
                    "value": "1 - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_53": {
                "input": {
                    "value": "x_clamped",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clamp(self._EPS, 1 - self._EPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_65": {
                "input": {
                    "value": "1 - z_clamped",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_68": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cif/models/components/bijections/nsf.py": {
        "torch": {}
    },
    "cif/models/components/bijections/ode.py": {
        "torch": {
            "cat_54": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, self._u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "data": {
                    "value": "self.cnf.odefunc.num_evals()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cif/models/components/bijections/planar.py": {
        "torch": {
            "tanh_35": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inner",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_batch_dot(z, w) + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_40": {
                "variable": {
                    "value": "jac",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 + _batch_dot(psi, u_hat)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_41": {
                "variable": {
                    "value": "log_jac",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "jac",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.abs(1 + _batch_dot(psi, u_hat))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_12": {
                "input": {
                    "value": "t1 * t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self._xavier_init_vector(num_input_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self._xavier_init_vector(num_input_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_28": {
                "input": {
                    "value": "wT_u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_batch_dot(u, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_57": {
                "*size": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_38": {
                "input": {
                    "value": "inner",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_batch_dot(z, w) + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_53": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_29": {
                "input": {
                    "value": "w ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cif/models/components/bijections/resflow.py": {
        "torch": {}
    },
    "cif/models/components/bijections/reshaping.py": {
        "torch": {
            "zeros_20": {
                "*size": {
                    "value": "inputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_55": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(self.dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randperm_33": {
                "n": {
                    "value": "x_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argsort_34": {
                "input": {
                    "value": "self.permutation",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cif/models/components/bijections/sos.py": {
        "torch": {}
    },
    "cif/models/components/conditional_densities/bernoulli.py": {
        "torch": {
            "Bernoulli_18": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.logit_net(cond_inputs)",
                            "Call"
                        ],
                        [
                            "self.logit_net(cond_inputs)",
                            "Call"
                        ],
                        [
                            "logits.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "Bernoulli_25": {
                "variable": {
                    "value": "bernoulli",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.logit_net(cond_inputs)",
                            "Call"
                        ],
                        [
                            "self.logit_net(cond_inputs)",
                            "Call"
                        ],
                        [
                            "logits.detach()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cif/models/components/conditional_densities/concrete.py": {
        "torch": {
            "logsumexp_18": {
                "variable": {
                    "value": "log_denominator",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(flat_alphas) - lam * torch.log(flat_u)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_21": {
                "variable": {
                    "value": "log_product_quotient",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_numerator - log_denominator",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Gumbel_26": {
                "variable": {
                    "value": "standard_gumbel",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros_like(alphas)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones_like(alphas)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logsumexp_32": {
                "variable": {
                    "value": "log_denominator",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_numerator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(flat_alphas) - (lam + 1) * torch.log(flat_u)",
                            "BinOp"
                        ],
                        [
                            "(torch.log(alphas) + gumbels) / lam",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "log_numerator - log_denominator",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_20": {
                "input": {
                    "value": "flat_u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "u.flatten(start_dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_27": {
                "input": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._alphas(cond_inputs)",
                            "Call"
                        ],
                        [
                            "alphas.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_28": {
                "input": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._alphas(cond_inputs)",
                            "Call"
                        ],
                        [
                            "alphas.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_70": {
                "input": {
                    "value": "self.log_alpha_map(cond_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_18": {
                "input": {
                    "value": "flat_u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "u.flatten(start_dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_31": {
                "input": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._alphas(cond_inputs)",
                            "Call"
                        ],
                        [
                            "alphas.detach()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cif/models/components/conditional_densities/conditional_density.py": {
        "torch": {}
    },
    "cif/models/components/conditional_densities/gaussian.py": {
        "torch": {
            "exp_44": {
                "input": {
                    "value": "result['log-scale']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cif/models/components/couplers.py": {
        "torch": {}
    },
    "cif/models/components/densities/density.py": {
        "torch": {}
    },
    "cif/models/components/densities/flow.py": {
        "torch": {}
    },
    "cif/models/components/densities/gaussian.py": {
        "torch": {
            "sum_19": {
                "input": {
                    "value": "torch.log(flat_vars)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "(flat_w - flat_means) ** 2 / flat_vars",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_32": {
                "input": {
                    "value": "torch.log(flat_stddevs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_19": {
                "input": {
                    "value": "flat_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stddevs.flatten(start_dim=1) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_26": {
                "input": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_32": {
                "input": {
                    "value": "flat_stddevs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stddevs.flatten(start_dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cif/models/components/densities/split.py": {
        "torch": {
            "chunk_15": {
                "variable": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_43": {
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_48": {
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cif/models/components/densities/wrapper.py": {
        "torch": {
            "Bernoulli_55": {
                "variable": {
                    "value": "bernoulli",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "x / self.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_like_42": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cif/models/components/networks.py": {
        "torch": {
            "Conv2d_128": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "input_degrees.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_136": {
                "variable": {
                    "value": "bn1",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_146": {
                "variable": {
                    "value": "bn2",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_degrees.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_159": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_439": {
                "variable": {
                    "value": "dummy_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*input_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + inputs",
                            "BinOp"
                        ],
                        [
                            "self.module(inputs)",
                            "Call"
                        ],
                        [
                            "self.weights * torch.tanh(out) + self.bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_45": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + inputs",
                            "BinOp"
                        ],
                        [
                            "self.module(inputs)",
                            "Call"
                        ],
                        [
                            "self.weights * torch.tanh(out) + self.bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_channels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_channels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "*args": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_182": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_input_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "input_degrees.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_output_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_degrees.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_226": {
                "variable": {
                    "value": "prev_degrees",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_input_channels + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_237": {
                "variable": {
                    "value": "degrees",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_input_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "input_degrees.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_262": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "num_input_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "input_degrees.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "num_hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "num_hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_degrees.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "in_features": {
                    "value": "prev_num_hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_output_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_degrees.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_200": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.mask * self.linear.weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.linear.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_440": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "*size": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "in_features": {
                    "value": "prev_num_hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_180": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_76": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + inputs",
                            "BinOp"
                        ],
                        [
                            "self.module(inputs)",
                            "Call"
                        ],
                        [
                            "self.weights * torch.tanh(out) + self.bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_230": {
                "start": {
                    "value": "hidden_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cif/models/factory.py": {
        "torch": {
            "randperm_75": {
                "n": {
                    "value": "x_train.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "*size": {
                    "value": "x_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_train.shape[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_223": {
                "*size": {
                    "value": "x_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_train.shape[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "full_536": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_output_channels, *input_shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "net_config['value']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.get_default_dtype()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_dtype_536": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cif/trainer.py": {
        "torch": {
            "no_grad_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_32": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "numel_33": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__193": {
                "parameters": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._iter_params(param_name)",
                            "Call"
                        ],
                        [
                            "self._iter_params(param_name)",
                            "Call"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "self._iter_params(param_name)",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "self._max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isfinite_233": {
                "input": {
                    "value": "valid_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state.metrics['loss']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "isfinite_207": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cif/visualizer.py": {
        "torch": {
            "meshgrid_71": {
                "variable": {
                    "value": "(grid_x1, grid_x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "(torch.linspace(*self._x1_lims, self._GRID_SIZE), torch.linspace(*self._x2_lims, self._GRID_SIZE))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "x1_x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_x1, grid_x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.TensorDataset(x1_x2.to(self._device))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self._BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(probs, dim=0).view(*grid_x1.shape).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_79": {
                "*tensors": {
                    "value": "x1_x2.to(self._device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_105": {
                "high": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(self._NUM_TRAIN_POINTS_TO_SHOW,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linspace_72": {
                "start": {
                    "value": "*self._x1_lims",
                    "type": "Starred",
                    "possible_values": []
                },
                "end": {
                    "value": "self._GRID_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_73": {
                "start": {
                    "value": "*self._x2_lims",
                    "type": "Starred",
                    "possible_values": []
                },
                "end": {
                    "value": "self._GRID_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_92": {
                "input": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "metrics(density, x1_x2_batch, self._num_importance_samples)[key]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "cif/writer.py": {
        "torch": {
            "save_110": {
                "obj": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.decode()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "tmp_checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(checkpoint_path), f'{os.path.basename(checkpoint_path)}.tmp')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_115": {
                "f": {
                    "value": "self._checkpoint_path(tag)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_bijection.py": {
        "torch": {
            "randn_39": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "*self.bijection.z_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "*self.bijection.x_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "*self.bijection.x_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_68": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "*self.bijection.z_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_77": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "*self.bijection.x_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_84": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "*self.bijection.z_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_160": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "*self.bijection.x_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_176": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "*self.bijection.x_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tensor_305": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2, 5, 6], [3, 4, 7, 8], [9, 10, 13, 14], [11, 12, 15, 16]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.get_default_dtype()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_341": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1, 2, 5, 6], [3, 4, 7, 8], [9, 10, 13, 14], [11, 12, 15, 16]], [[17, 18, 21, 22], [19, 20, 23, 24], [25, 26, 29, 30], [27, 28, 31, 32]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.get_default_dtype()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_363": {
                "variable": {
                    "value": "result1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2.0, 3.0, 4.0, 17.0, 18.0, 19.0, 20.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_366": {
                "variable": {
                    "value": "result2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[5.0, 6.0, 7.0, 8.0, 21.0, 22.0, 23.0, 24.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_369": {
                "variable": {
                    "value": "result3",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[9.0, 10.0, 11.0, 12.0, 25.0, 26.0, 27.0, 28.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_372": {
                "variable": {
                    "value": "result4",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[13.0, 14.0, 15.0, 16.0, 29.0, 30.0, 31.0, 32.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_446": {
                "variable": {
                    "value": "new_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sign_447": {
                "variable": {
                    "value": "self.bijection.sign_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "new_s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(x_shape[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_448": {
                "variable": {
                    "value": "self.bijection.log_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.log(torch.abs(new_s))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_453": {
                "variable": {
                    "value": "self.bijection_to_compare.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.bijection._get_weights()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_456": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "*self.bijection.x_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_467": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "*self.bijection.x_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "all_80": {
                "input": {
                    "value": "torch.isfinite(result['z'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_81": {
                "input": {
                    "value": "torch.isfinite(result['log-jac'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_87": {
                "input": {
                    "value": "torch.isfinite(result['x'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_88": {
                "input": {
                    "value": "torch.isfinite(result['log-jac'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_106": {
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "*self.u_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "log_448": {
                "input": {
                    "value": "torch.abs(new_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isfinite_80": {
                "input": {
                    "value": "result['z']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isfinite_81": {
                "input": {
                    "value": "result['log-jac']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isfinite_87": {
                "input": {
                    "value": "result['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isfinite_88": {
                "input": {
                    "value": "result['log-jac']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_default_dtype_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_dtype_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_448": {
                "input": {
                    "value": "new_s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(x_shape[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_320": {
                "data": {
                    "value": "[[1.0, 5.0], [9.0, 13.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_325": {
                "data": {
                    "value": "[[2.0, 6.0], [10.0, 14.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_330": {
                "data": {
                    "value": "[[3.0, 7.0], [11.0, 15.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_335": {
                "data": {
                    "value": "[[4.0, 8.0], [12.0, 16.0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_density.py": {
        "torch": {
            "rand_26": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_37": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "*self.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_97": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "*self.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_98": {
                "variable": {
                    "value": "cond_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "*self.cond_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "exp_105": {
                "variable": {
                    "value": "stds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_log_std['log-scale']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_117": {
                "variable": {
                    "value": "cond_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "*self.cond_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "exp_129": {
                "variable": {
                    "value": "stds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_log_std['log-scale']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_129": {
                "variable": {
                    "value": "stds",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_183": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "*input_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "exp_206": {
                "variable": {
                    "value": "self.lam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_221": {
                "variable": {
                    "value": "cond_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "*self.cond_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mean_68": {
                "variable": {
                    "value": "moments",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_samples ** m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_131": {
                "variable": {
                    "value": "moments",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples ** m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_132": {
                "variable": {
                    "value": "ground_truth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "moments",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(flat_samples ** m, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mean(samples ** m, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_206": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_27": {
                "*size": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x_dim,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "ones_153": {
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x_dim,)",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_neural_nets.py": {
        "torch": {
            "randn_28": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "*in_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_51": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "*in_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_input_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_107": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_input_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_110": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(self.batch_size, self.num_input_channels)",
                            "Call"
                        ],
                        [
                            "torch.randn(self.batch_size, self.num_input_channels)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_111": {
                "variable": {
                    "value": "noise[:, coord:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "noise[:, coord:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_118": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_input_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isfinite_120": {
                "input": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.ar_mlp(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}