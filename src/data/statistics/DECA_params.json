{
    "A2V/dataloader_utils.py": {
        "torch": {
            "Tensor_23": {
                "variable": {
                    "value": "audio_data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "dset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(FRAMES_PATH, data_transform['frames'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "38",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "audio_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(audio_data, sample)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "A2V/driver.py": {
        "torch": {
            "Adam_73": {
                "variable": {
                    "value": "optimizer_unet",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0008",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_74": {
                "variable": {
                    "value": "optimizer_fd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "frame_discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_75": {
                "variable": {
                    "value": "optimizer_sd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sequence_discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_385": {
                "variable": {
                    "value": "video_d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "video_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(VIDEO_DATA_PATH, videos[i]))",
                            "Call"
                        ],
                        [
                            "video_d.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(video_d)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(VIDEO_TEST_PATH, videos[i]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(video_d)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(VIDEO_TEST_PATH, videos[i]))",
                            "Call"
                        ],
                        [
                            "video_d.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(video_d)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(DATA_PATH, name))",
                            "Call"
                        ],
                        [
                            "video_d.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(video_d)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_386": {
                "variable": {
                    "value": "audio_d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "audio_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(AUDIO_DATA_PATH, audios[i]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio_d)",
                            "Call"
                        ],
                        [
                            "audio_d.view(audio_d.size()[0], audio_d.size()[2], audio_d.size()[1])",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(AUDIO_TEST_PATH, audios[i]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio_d)",
                            "Call"
                        ],
                        [
                            "audio_d.view(audio_d.size()[0], audio_d.size()[2], audio_d.size()[1])",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(AUDIO_DATA_PATH, audios[i]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio_d)",
                            "Call"
                        ],
                        [
                            "audio_d.view(audio_d.size()[0], audio_d.size()[2], audio_d.size()[1])",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(AUDIO_DATA_PATH, name))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio_d)",
                            "Call"
                        ],
                        [
                            "audio_d.view(audio_d.size()[0], audio_d.size()[2], audio_d.size()[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_222": {
                "variable": {
                    "value": "video_d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "video_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(VIDEO_DATA_PATH, videos[i]))",
                            "Call"
                        ],
                        [
                            "video_d.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(video_d)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(VIDEO_TEST_PATH, videos[i]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(video_d)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(VIDEO_TEST_PATH, videos[i]))",
                            "Call"
                        ],
                        [
                            "video_d.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(video_d)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(DATA_PATH, name))",
                            "Call"
                        ],
                        [
                            "video_d.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(video_d)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_223": {
                "variable": {
                    "value": "audio_d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "audio_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(AUDIO_DATA_PATH, audios[i]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio_d)",
                            "Call"
                        ],
                        [
                            "audio_d.view(audio_d.size()[0], audio_d.size()[2], audio_d.size()[1])",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(AUDIO_TEST_PATH, audios[i]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio_d)",
                            "Call"
                        ],
                        [
                            "audio_d.view(audio_d.size()[0], audio_d.size()[2], audio_d.size()[1])",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(AUDIO_DATA_PATH, audios[i]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio_d)",
                            "Call"
                        ],
                        [
                            "audio_d.view(audio_d.size()[0], audio_d.size()[2], audio_d.size()[1])",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(AUDIO_DATA_PATH, name))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio_d)",
                            "Call"
                        ],
                        [
                            "audio_d.view(audio_d.size()[0], audio_d.size()[2], audio_d.size()[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "load_283": {
                "variable": {
                    "value": "unet",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./4/30Unet.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_305": {
                "variable": {
                    "value": "video_d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "video_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(VIDEO_DATA_PATH, videos[i]))",
                            "Call"
                        ],
                        [
                            "video_d.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(video_d)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(VIDEO_TEST_PATH, videos[i]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(video_d)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(VIDEO_TEST_PATH, videos[i]))",
                            "Call"
                        ],
                        [
                            "video_d.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(video_d)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(DATA_PATH, name))",
                            "Call"
                        ],
                        [
                            "video_d.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(video_d)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_306": {
                "variable": {
                    "value": "audio_d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "audio_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(AUDIO_DATA_PATH, audios[i]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio_d)",
                            "Call"
                        ],
                        [
                            "audio_d.view(audio_d.size()[0], audio_d.size()[2], audio_d.size()[1])",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(AUDIO_TEST_PATH, audios[i]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio_d)",
                            "Call"
                        ],
                        [
                            "audio_d.view(audio_d.size()[0], audio_d.size()[2], audio_d.size()[1])",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(AUDIO_DATA_PATH, audios[i]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio_d)",
                            "Call"
                        ],
                        [
                            "audio_d.view(audio_d.size()[0], audio_d.size()[2], audio_d.size()[1])",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(AUDIO_DATA_PATH, name))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio_d)",
                            "Call"
                        ],
                        [
                            "audio_d.view(audio_d.size()[0], audio_d.size()[2], audio_d.size()[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "load_352": {
                "variable": {
                    "value": "unet",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path.cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_355": {
                "variable": {
                    "value": "unet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "unet.cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_47": {
                "input": {
                    "value": "torch.log(EPS + 1 - SDwG2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_52": {
                "input": {
                    "value": "torch.log(EPS + FDwO1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_53": {
                "input": {
                    "value": "torch.log(EPS + 1 - FDwG1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_58": {
                "input": {
                    "value": "torch.log(EPS + SDwO2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_59": {
                "input": {
                    "value": "torch.log(EPS + 1 - SDwG2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_64": {
                "input": {
                    "value": "torch.log(EPS + FDwG1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_65": {
                "input": {
                    "value": "torch.log(EPS + SDwG2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_397": {
                "*size": {
                    "value": "MINIBATCHSIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "video_d.size()[0]",
                            "Subscript"
                        ],
                        [
                            "video_d.size()[0]",
                            "Subscript"
                        ],
                        [
                            "video_d.size()[0]",
                            "Subscript"
                        ],
                        [
                            "video_d.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "NOISE_OUTPUT",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_46": {
                "input": {
                    "value": "torch.log(EPS + SDwO2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_47": {
                "input": {
                    "value": "EPS + 1 - SDwG2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_52": {
                "input": {
                    "value": "EPS + FDwO1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_53": {
                "input": {
                    "value": "EPS + 1 - FDwG1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_58": {
                "input": {
                    "value": "EPS + SDwO2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_59": {
                "input": {
                    "value": "EPS + 1 - SDwG2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_64": {
                "input": {
                    "value": "EPS + FDwG1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_65": {
                "input": {
                    "value": "EPS + SDwG2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "video_d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "video_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(VIDEO_DATA_PATH, videos[i]))",
                            "Call"
                        ],
                        [
                            "video_d.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(video_d)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(VIDEO_TEST_PATH, videos[i]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(video_d)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(VIDEO_TEST_PATH, videos[i]))",
                            "Call"
                        ],
                        [
                            "video_d.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(video_d)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(DATA_PATH, name))",
                            "Call"
                        ],
                        [
                            "video_d.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(video_d)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "audio_d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "audio_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(AUDIO_DATA_PATH, audios[i]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio_d)",
                            "Call"
                        ],
                        [
                            "audio_d.view(audio_d.size()[0], audio_d.size()[2], audio_d.size()[1])",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(AUDIO_TEST_PATH, audios[i]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio_d)",
                            "Call"
                        ],
                        [
                            "audio_d.view(audio_d.size()[0], audio_d.size()[2], audio_d.size()[1])",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(AUDIO_DATA_PATH, audios[i]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio_d)",
                            "Call"
                        ],
                        [
                            "audio_d.view(audio_d.size()[0], audio_d.size()[2], audio_d.size()[1])",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(AUDIO_DATA_PATH, name))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio_d)",
                            "Call"
                        ],
                        [
                            "audio_d.view(audio_d.size()[0], audio_d.size()[2], audio_d.size()[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_151": {
                "input": {
                    "value": "torch.abs(video_data - gen_frames)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_192": {
                "obj": {
                    "value": "unet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unet(debug=False)",
                            "Call"
                        ],
                        [
                            "unet.cuda()",
                            "Call"
                        ],
                        [
                            "torch.load('./4/30Unet.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(model_path.cuda())",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(unet.cuda())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "view + str(epoch) + 'Unet.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_196": {
                "obj": {
                    "value": "unet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unet(debug=False)",
                            "Call"
                        ],
                        [
                            "unet.cuda()",
                            "Call"
                        ],
                        [
                            "torch.load('./4/30Unet.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(model_path.cuda())",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(unet.cuda())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "view + 'Unet.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_234": {
                "*size": {
                    "value": "MINIBATCHSIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "video_d.size()[0]",
                            "Subscript"
                        ],
                        [
                            "video_d.size()[0]",
                            "Subscript"
                        ],
                        [
                            "video_d.size()[0]",
                            "Subscript"
                        ],
                        [
                            "video_d.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "NOISE_OUTPUT",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_317": {
                "*size": {
                    "value": "MINIBATCHSIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "video_d.size()[0]",
                            "Subscript"
                        ],
                        [
                            "video_d.size()[0]",
                            "Subscript"
                        ],
                        [
                            "video_d.size()[0]",
                            "Subscript"
                        ],
                        [
                            "video_d.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "NOISE_OUTPUT",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_44": {
                "input": {
                    "value": "torch.log(EPS + FDwO1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_45": {
                "input": {
                    "value": "torch.log(EPS + 1 - FDwG1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_46": {
                "input": {
                    "value": "EPS + SDwO2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_44": {
                "input": {
                    "value": "EPS + FDwO1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_45": {
                "input": {
                    "value": "EPS + 1 - FDwG1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_110": {
                "*size": {
                    "value": "MINIBATCHSIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "video_d.size()[0]",
                            "Subscript"
                        ],
                        [
                            "video_d.size()[0]",
                            "Subscript"
                        ],
                        [
                            "video_d.size()[0]",
                            "Subscript"
                        ],
                        [
                            "video_d.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "NOISE_OUTPUT",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_151": {
                "input": {
                    "value": "video_data - gen_frames",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "A2V/models/audio_encoder.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=in_ch, out_channels=out_ch, kernel_size=kernel, stride=stride, padding=padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_33": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "AUDIO_OUTPUT",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_34": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_46": {
                "variable": {
                    "value": "rnn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "AUDIO_OUTPUT",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=in_ch, out_channels=out_ch, kernel_size=kernel, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.i_c_6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=256, out_channels=50, kernel_size=(3, 3), stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_84": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_14": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_15": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "A2V/models/discriminators.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=in_ch, out_channels=out_ch, kernel_size=kernel, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.c6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.c7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target, still_image)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_50": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.c7(x)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_59": {
                "variable": {
                    "value": "self.gru_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_60": {
                "variable": {
                    "value": "self.gru_audio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "306",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o_a, o_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_80": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((target, still_image), dim=1)",
                            "Call"
                        ],
                        [
                            "self.c1(x)",
                            "Call"
                        ],
                        [
                            "self.c2(x)",
                            "Call"
                        ],
                        [
                            "self.c3(x)",
                            "Call"
                        ],
                        [
                            "self.c4(x)",
                            "Call"
                        ],
                        [
                            "self.c5(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.c6(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([o_a, o_i], dim=2)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "A2V/models/generators.py": {
        "torch": {}
    },
    "A2V/models/noise_encoder.py": {
        "torch": {
            "rand_15": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "38",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "NOISE_OUTPUT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "GRU_18": {
                "variable": {
                    "value": "rnn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "NOISE_OUTPUT",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "A2V/models/unet.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=in_ch, out_channels=out_ch, kernel_size=(kernel_x, kernel_y), stride=stride, padding=padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_channels=in_ch, out_channels=out_ch, kernel_size=(d_k_x, d_k_y), stride=s_d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=2 * out_ch, out_channels=out_ch, kernel_size=(c_k_x, c_k_y), stride=s_c, padding=padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_65": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x2, (diffX // 2, int(diffX / 2), diffY // 2, int(diffY / 2)))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(diffX // 2, int(diffX / 2), diffY // 2, int(diffY / 2))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.f_d_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_channels=128, out_channels=64, kernel_size=(4, 4), stride=2, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.f_d_6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_channels=64, out_channels=3, kernel_size=(4, 4), stride=2, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_124": {
                "variable": {
                    "value": "self.noise_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "NOISE_OUTPUT",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(audio_encoded, latent, output_noise)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_187": {
                "variable": {
                    "value": "f_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_d_6(f_64)",
                            "Call"
                        ],
                        [
                            "F.pad(f_3, (diffX // 2, int(diffX / 2), diffY // 2, int(diffY / 2)))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(diffX // 2, int(diffX / 2), diffY // 2, int(diffY / 2))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_x, kernel_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_39": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(d_k_x, d_k_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "s_d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "2 * out_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(c_k_x, c_k_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "s_c",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_102": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_113": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "A2V/models/util_models.py": {
        "torch": {}
    },
    "A2V/utils.py": {
        "torch": {
            "Tensor_10": {
                "variable": {
                    "value": "audio_data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_16": {
                "variable": {
                    "value": "audio_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(audio_data, sample)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "lipreading_model/code/1stream.py": {
        "torch": {
            "from_numpy_91": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "y_val[:].contiguous()",
                            "Call"
                        ],
                        [
                            "y_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mask_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val[:, :seq_len].contiguous()",
                            "Call"
                        ],
                        [
                            "mask_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_100": {
                "variable": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "y_val[:].contiguous()",
                            "Call"
                        ],
                        [
                            "y_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_101": {
                "variable": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mask_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val[:, :seq_len].contiguous()",
                            "Call"
                        ],
                        [
                            "mask_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_105": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_217": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "'cuda:' + str(gpu)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_303": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "float"
                        ]
                    ]
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_val).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(m).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(m, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_61": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_62": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(m).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(m, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__72": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_428": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'state_dict': model.state_dict(), 'test_loss': test_loss, 'test_accuracy': test_acc, 'test_predictions': predictions_test, 'test_true_label': true_label_test, 'train_loss': train_loss, 'train_accuracy': train_acc, 'train_predictions': predictions_train, 'train_true_label': true_label_train, 'val_loss': val_loss, 'val_accuracy': val_acc, 'val_predictions': predictions_val, 'val_true_label': true_label_val}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_path + '/models/epoch_' + str(epoch) + '_checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lipreading_model/code/2stream.py": {
        "torch": {
            "from_numpy_102": {
                "variable": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s1_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s2_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s2_val_X, idxs_val, s1_val_vidlens, integral_lens_val, np.max(s1_val_vidlens))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "y_val[:].contiguous()",
                            "Call"
                        ],
                        [
                            "y_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_107": {
                "variable": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mask_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val[:, :seq_len].contiguous()",
                            "Call"
                        ],
                        [
                            "mask_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_113": {
                "variable": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "y_val[:].contiguous()",
                            "Call"
                        ],
                        [
                            "y_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_114": {
                "variable": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mask_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val[:, :seq_len].contiguous()",
                            "Call"
                        ],
                        [
                            "mask_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_117": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_118": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_236": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "'cuda:' + str(gpu)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_295": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "float"
                        ]
                    ]
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "X_s2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s2_train_X, batch_idxs, s1_train_vidlens, integral_lens, np.max(s1_train_vidlens))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_s2).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(m).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(m, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_72": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_73": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(m).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(m, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__83": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_430": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'state_dict': model.state_dict(), 'test_loss': test_loss, 'test_accuracy': test_acc, 'test_predictions': predictions_test, 'test_true_label': true_label_test, 'train_loss': train_loss, 'train_accuracy': train_acc, 'train_predictions': predictions_train, 'train_true_label': true_label_train, 'val_loss': val_loss, 'val_accuracy': val_acc, 'val_predictions': predictions_val, 'val_true_label': true_label_val}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_path + '/models/epoch_' + str(epoch) + '_checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lipreading_model/code/3stream.py": {
        "torch": {
            "from_numpy_104": {
                "variable": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s1_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s2_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s2_val_X, idxs_val, s1_val_vidlens, integral_lens_val, np.max(s1_val_vidlens))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "X3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s3_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s3_val_X, idxs_val, s1_val_vidlens, integral_lens_val, np.max(s1_val_vidlens))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_108": {
                "variable": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "y_val[:].contiguous()",
                            "Call"
                        ],
                        [
                            "y_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_109": {
                "variable": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_110": {
                "variable": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mask_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val[:, :seq_len].contiguous()",
                            "Call"
                        ],
                        [
                            "mask_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_116": {
                "variable": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "y_val[:].contiguous()",
                            "Call"
                        ],
                        [
                            "y_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_117": {
                "variable": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mask_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val[:, :seq_len].contiguous()",
                            "Call"
                        ],
                        [
                            "mask_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_121": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_237": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "'cuda:' + str(gpu)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_301": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "float"
                        ]
                    ]
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "X_s2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s2_train_X, batch_idxs, s1_train_vidlens, integral_lens, np.max(s1_train_vidlens))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_s2).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "X_s3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s3_train_X, batch_idxs, s1_train_vidlens, integral_lens, np.max(s1_train_vidlens))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_s3).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(m).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(m, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_74": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_75": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(m).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(m, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__85": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_448": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'state_dict': model.state_dict(), 'test_loss': test_loss, 'test_accuracy': test_acc, 'test_predictions': predictions_test, 'test_true_label': true_label_test, 'train_loss': train_loss, 'train_accuracy': train_acc, 'train_predictions': predictions_train, 'train_true_label': true_label_train, 'val_loss': val_loss, 'val_accuracy': val_acc, 'val_predictions': predictions_val, 'val_true_label': true_label_val}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_path + '/models/epoch_' + str(epoch) + '_checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lipreading_model/code/4stream.py": {
        "torch": {
            "from_numpy_108": {
                "variable": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s1_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_109": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s2_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s2_val_X, idxs_val, s1_val_vidlens, integral_lens_val, np.max(s1_val_vidlens))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_110": {
                "variable": {
                    "value": "X3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s3_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s3_val_X, idxs_val, s1_val_vidlens, integral_lens_val, np.max(s1_val_vidlens))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "X4",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s4_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s4_val_X, idxs_val, s1_val_vidlens, integral_lens_val, np.max(s1_val_vidlens))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_113": {
                "variable": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "y_val[:].contiguous()",
                            "Call"
                        ],
                        [
                            "y_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mask_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val[:, :seq_len].contiguous()",
                            "Call"
                        ],
                        [
                            "mask_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_121": {
                "variable": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "y_val[:].contiguous()",
                            "Call"
                        ],
                        [
                            "y_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_122": {
                "variable": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mask_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val[:, :seq_len].contiguous()",
                            "Call"
                        ],
                        [
                            "mask_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_126": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_242": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "'cuda:' + str(gpu)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_309": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "float"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "X_s2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s2_train_X, batch_idxs, s1_train_vidlens, integral_lens, np.max(s1_train_vidlens))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_s2).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "X_s3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s3_train_X, batch_idxs, s1_train_vidlens, integral_lens, np.max(s1_train_vidlens))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_s3).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "X_s4",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s4_train_X, batch_idxs, s1_train_vidlens, integral_lens, np.max(s1_train_vidlens))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_s4).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(m).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(m, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_78": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_79": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(m).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(m, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__89": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_467": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'state_dict': model.state_dict(), 'test_loss': test_loss, 'test_accuracy': test_acc, 'test_predictions': predictions_test, 'test_true_label': true_label_test, 'train_loss': train_loss, 'train_accuracy': train_acc, 'train_predictions': predictions_train, 'train_true_label': true_label_train, 'val_loss': val_loss, 'val_accuracy': val_acc, 'val_predictions': predictions_val, 'val_true_label': true_label_val}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_path + '/models/epoch_' + str(epoch) + '_checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lipreading_model/code/5stream.py": {
        "torch": {
            "from_numpy_112": {
                "variable": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s1_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_113": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s2_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s2_val_X, idxs_val, s1_val_vidlens, integral_lens_val, np.max(s1_val_vidlens))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "X3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s3_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s3_val_X, idxs_val, s1_val_vidlens, integral_lens_val, np.max(s1_val_vidlens))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "X4",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s4_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s4_val_X, idxs_val, s1_val_vidlens, integral_lens_val, np.max(s1_val_vidlens))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "X5",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s5_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s5_val_X, idxs_val, s1_val_vidlens, integral_lens_val, np.max(s1_val_vidlens))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_118": {
                "variable": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "y_val[:].contiguous()",
                            "Call"
                        ],
                        [
                            "y_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mask_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val[:, :seq_len].contiguous()",
                            "Call"
                        ],
                        [
                            "mask_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_126": {
                "variable": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "y_val[:].contiguous()",
                            "Call"
                        ],
                        [
                            "y_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_127": {
                "variable": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mask_val).to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask_val, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val[:, :seq_len].contiguous()",
                            "Call"
                        ],
                        [
                            "mask_val.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_130": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_131": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_248": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "'cuda:' + str(gpu)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_320": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "float"
                        ]
                    ]
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "X_s2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s2_train_X, batch_idxs, s1_train_vidlens, integral_lens, np.max(s1_train_vidlens))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_s2).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "X_s3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s3_train_X, batch_idxs, s1_train_vidlens, integral_lens, np.max(s1_train_vidlens))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_s3).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "X_s4",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s4_train_X, batch_idxs, s1_train_vidlens, integral_lens, np.max(s1_train_vidlens))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_s4).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "X_s5",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_s5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_seq_batch_from_idx(s5_train_X, batch_idxs, s1_train_vidlens, integral_lens, np.max(s1_train_vidlens))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_s5).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vid_lens_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(vid_lens_batch).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(m).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(m, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_82": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(m.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ],
                        [
                            "y_val.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "y.repeat(mask_val.shape[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).long().to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_83": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(m).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.index_select(m, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "mask_val.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__93": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_489": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'state_dict': model.state_dict(), 'test_loss': test_loss, 'test_accuracy': test_acc, 'test_predictions': predictions_test, 'test_true_label': true_label_test, 'train_loss': train_loss, 'train_accuracy': train_acc, 'train_predictions': predictions_train, 'train_true_label': true_label_train, 'val_loss': val_loss, 'val_accuracy': val_acc, 'val_predictions': predictions_val, 'val_true_label': true_label_val}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_path + '/models/epoch_' + str(epoch) + '_checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lipreading_model/code/data_model_loader.py": {
        "torch": {
            "load_36": {
                "variable": {
                    "value": "loaded_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "files",
                            "variable"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "lipreading_model/code/loss_datagen.py": {
        "torch": {
            "log_30": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, no_classes)",
                            "Call"
                        ],
                        [
                            "torch.gather(output, 1, y) * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_44": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask[:, :seq_len].contiguous()",
                            "Call"
                        ],
                        [
                            "mask.view(-1)",
                            "Call"
                        ],
                        [
                            "np.zeros((bsize, max_timesteps), dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.zeros((bsize, max_timesteps), dtype='uint8')",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_50": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, no_classes)",
                            "Call"
                        ],
                        [
                            "torch.gather(output, 1, y) * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_53": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, no_classes)",
                            "Call"
                        ],
                        [
                            "torch.gather(output, 1, y) * mask",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lipreading_model/code/models.py": {
        "torch": {
            "LSTM_41": {
                "variable": {
                    "value": "self.layer_blstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "shapes[-1] * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_55": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_56": {
                "variable": {
                    "value": "c_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_encoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_delta(x)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "delta",
                            "variable"
                        ],
                        [
                            "self.layer_encoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_delta(x)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_88": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_encoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_delta(x)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "delta",
                            "variable"
                        ],
                        [
                            "self.layer_encoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_delta(x)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_92": {
                "variable": {
                    "value": "(X, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_110": {
                "variable": {
                    "value": "self.layers_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_145": {
                "variable": {
                    "value": "new_state_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "combined[count].T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[:, 0, :].reshape(x.shape[0], 1, -1).repeat(1, self.window, 1), x, x[:, -1, :].reshape(x.shape[0], 1, -1).repeat(1, self.window, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[:, 0, :].reshape(x.shape[0], 1, -1).repeat(1, self.window, 1), x, x[:, -1, :].reshape(x.shape[0], 1, -1).repeat(1, self.window, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_215": {
                "variable": {
                    "value": "self.layer_blstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "shapes[-1] * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_224": {
                "variable": {
                    "value": "self.layer_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hidden_units * 2, self.output_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_232": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_233": {
                "variable": {
                    "value": "c_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_263": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_encoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_delta(x)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "delta",
                            "variable"
                        ],
                        [
                            "self.layer_encoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_delta(x)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_265": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_encoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_delta(x)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "delta",
                            "variable"
                        ],
                        [
                            "self.layer_encoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_delta(x)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_269": {
                "variable": {
                    "value": "(X, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_311": {
                "variable": {
                    "value": "self.layer_blstm_agg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.hidden_units * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_321": {
                "variable": {
                    "value": "self.layer_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hidden_units * 2, self.output_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_329": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_330": {
                "variable": {
                    "value": "c_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_358": {
                "variable": {
                    "value": "x_lengths_sorted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_360": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_362": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_encoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_delta(x)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "delta",
                            "variable"
                        ],
                        [
                            "self.layer_encoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_delta(x)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_366": {
                "variable": {
                    "value": "(X, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_414": {
                "variable": {
                    "value": "self.layer_blstm_agg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.hidden_units * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_424": {
                "variable": {
                    "value": "self.layer_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hidden_units * 2, self.output_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_431": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_432": {
                "variable": {
                    "value": "c_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_462": {
                "variable": {
                    "value": "x_lengths_sorted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_464": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_466": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_encoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_delta(x)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "delta",
                            "variable"
                        ],
                        [
                            "self.layer_encoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_delta(x)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_470": {
                "variable": {
                    "value": "(X, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_526": {
                "variable": {
                    "value": "self.layer_blstm_agg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.hidden_units * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_536": {
                "variable": {
                    "value": "self.layer_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hidden_units * 2, self.output_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_544": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_545": {
                "variable": {
                    "value": "c_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_578": {
                "variable": {
                    "value": "x_lengths_sorted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_580": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_582": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_encoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_delta(x)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "delta",
                            "variable"
                        ],
                        [
                            "self.layer_encoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_delta(x)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_586": {
                "variable": {
                    "value": "(X, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_648": {
                "variable": {
                    "value": "self.layer_blstm_agg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.hidden_units * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_658": {
                "variable": {
                    "value": "self.layer_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hidden_units * 2, self.output_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_666": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_667": {
                "variable": {
                    "value": "c_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers * directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x1.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_695": {
                "variable": {
                    "value": "x_lengths_sorted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ordered_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_697": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4, x5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_699": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_encoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_delta(x)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "delta",
                            "variable"
                        ],
                        [
                            "self.layer_encoder(x)",
                            "Call"
                        ],
                        [
                            "self.layer_delta(x)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_out(X)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x_lengths, 0, ordered_idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_703": {
                "variable": {
                    "value": "(X, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths_sorted, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_183": {
                "tensors": {
                    "value": "(inp, delta, double_delta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "shapes[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_224": {
                "in_features": {
                    "value": "self.hidden_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_224": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_321": {
                "in_features": {
                    "value": "self.hidden_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_321": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_424": {
                "in_features": {
                    "value": "self.hidden_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_424": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_536": {
                "in_features": {
                    "value": "self.hidden_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_536": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_658": {
                "in_features": {
                    "value": "self.hidden_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_658": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "in_features": {
                    "value": "shapes[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "shapes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lipreading_model/code/utils.py": {
        "torch": {}
    }
}