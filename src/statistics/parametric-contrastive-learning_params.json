{
    "LT/utils.py": {
        "sklearn": {},
        "torch": {}
    },
    "Full-ImageNet/losses.py": {
        "torch": {
            "eq_29": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[:batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "labels.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_32": {
                "variable": {
                    "value": "anchor_dot_contrast",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(features[:batch_size], features.T)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "anchor_dot_contrast",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sup_logits / self.supt, anchor_dot_contrast)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_40": {
                "variable": {
                    "value": "(logits_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_dot_contrast",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.div(torch.matmul(features[:batch_size], features.T), self.temperature)",
                            "Call"
                        ],
                        [
                            "torch.cat((sup_logits / self.supt, anchor_dot_contrast), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scatter_44": {
                "variable": {
                    "value": "logits_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(batch_size).view(-1, 1).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "src": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_54": {
                "variable": {
                    "value": "one_hot_label",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels[:batch_size,].view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(one_hot_label * self.beta, mask * self.alpha)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "logits_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones(batch_size, self.num_classes).to(device), self.gamma * logits_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_21": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_23": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_33": {
                "input": {
                    "value": "features[:batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "features.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_45": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.eq(labels[:batch_size], labels.T).float().to(device)",
                            "Call"
                        ],
                        [
                            "mask * logits_mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat((one_hot_label * self.beta, mask * self.alpha), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_47": {
                "start": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(features.shape[0] - self.K) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_59": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "anchor_dot_contrast - logits_max.detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_60": {
                "input": {
                    "value": "exp_logits.sum(1, keepdim=True) + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_58": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(features.shape[0] - self.K) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Full-ImageNet/moco/builder.py": {
        "torch": {
            "cat_246": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors_gather",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.ones_like(tensor) for _ in range(torch.distributed.get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_11": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(feat_dim, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_15": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_15": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(self.weight, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_57": {
                "variable": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_148": {
                "variable": {
                    "value": "idx_shuffle",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_gather.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x_gather.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argsort_154": {
                "variable": {
                    "value": "idx_unshuffle",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randperm(batch_size_all).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_195": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_q(im_q)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(q, dim=1)",
                            "Call"
                        ],
                        [
                            "self.encoder_q(image)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(q, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(q, k, self.queue.clone().detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(labels, labels, self.queue_l.clone().detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_223": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_q(im_q)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(q, dim=1)",
                            "Call"
                        ],
                        [
                            "self.encoder_q(image)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(q, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.encoder_q.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_mlp, dim_mlp)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.encoder_k.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_mlp, dim_mlp)",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_85": {
                "variable": {
                    "value": "self.feat_after_avg_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.feat_after_avg_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_91": {
                "variable": {
                    "value": "self.feat_after_avg_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.feat_after_avg_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "broadcast_151": {
                "tensor": {
                    "value": "idx_shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randperm(batch_size_all).cuda()",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_205": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_k(im_k)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(k, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_242": {
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "randn_56": {
                "*size": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "65536",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randint_59": {
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(K,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "dim_mlp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_mlp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BatchNorm1d_48": {
                "num_features": {
                    "value": "dim_mlp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "dim_mlp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_mlp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BatchNorm1d_49": {
                "num_features": {
                    "value": "dim_mlp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Full-ImageNet/models/resnet.py": {
        "torch": {
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_175": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_176": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_184": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "flatten_242": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_213": {
                "variable": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Full-ImageNet/paco_imagenet.py": {
        "torch": {
            "device_count_155": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_247": {
                "variable": {
                    "value": "criterion_ce",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_250": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_381": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_385": {
                "variable": {
                    "value": "val_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, val_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradScaler_395": {
                "variable": {
                    "value": "scaler",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedSampler_376": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transform_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_525": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'{args.root_model}/moco_ckpt.pth.tar'",
                            "JoinedStr"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_138": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_210": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "moco.builder.MoCo(getattr(resnet, args.arch), args.moco_dim, args.moco_k, args.moco_m, args.moco_t, args.mlp, args.normalize)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_235": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "moco.builder.MoCo(getattr(resnet, args.arch), args.moco_dim, args.moco_k, args.moco_m, args.moco_t, args.mlp, args.normalize)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ]
                    ]
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_587": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_203": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_237": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_259": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_263": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_498": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_452": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_218": {
                "f": {
                    "value": "args.reload",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Full-ImageNet/randaugment.py": {
        "torch": {
            "Conv2d_459": {
                "variable": {
                    "value": "self.blur_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_461": {
                "variable": {
                    "value": "self.blur_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_466": {
                "variable": {
                    "value": "self.blur",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(radias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_482": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.arange(-self.r, self.r + 1)",
                            "Call"
                        ],
                        [
                            "np.exp(-np.power(x, 2) / (2 * sigma * sigma))",
                            "Call"
                        ],
                        [
                            "x / x.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(x).view(1, -1).repeat(3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_467": {
                "padding": {
                    "value": "radias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_487": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LT/autoaug.py": {
        "torch": {
            "from_numpy_29": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LT/dataset/imagenet.py": {
        "torch": {}
    },
    "LT/dataset/imagenet_due.py": {
        "torch": {}
    },
    "LT/dataset/imagenet_moco.py": {
        "torch": {}
    },
    "LT/dataset/inat.py": {
        "torch": {}
    },
    "LT/dataset/inat_due.py": {
        "torch": {}
    },
    "LT/dataset/inat_moco.py": {
        "torch": {}
    },
    "LT/dataset/places.py": {
        "torch": {
            "DataLoader_85": {
                "dataset": {
                    "value": "set_inat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "INaturalist(data_root, txt, transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_dic['sampler'](set_inat, **sampler_dic['params'])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_90": {
                "dataset": {
                    "value": "set_inat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "INaturalist(data_root, txt, transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "LT/dataset/places_due.py": {
        "torch": {}
    },
    "LT/dataset/places_moco.py": {
        "torch": {}
    },
    "LT/losses.py": {
        "torch": {
            "Tensor_20": {
                "variable": {
                    "value": "cls_num_list",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "eq_33": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[:batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "labels.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_36": {
                "variable": {
                    "value": "anchor_dot_contrast",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(features[:batch_size], features.T)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "anchor_dot_contrast",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((sup_logits + torch.log(self.weight + 1e-09)) / self.supt, anchor_dot_contrast)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_44": {
                "variable": {
                    "value": "(logits_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_dot_contrast",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.div(torch.matmul(features[:batch_size], features.T), self.temperature)",
                            "Call"
                        ],
                        [
                            "torch.cat(((sup_logits + torch.log(self.weight + 1e-09)) / self.supt, anchor_dot_contrast), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scatter_48": {
                "variable": {
                    "value": "logits_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(batch_size).view(-1, 1).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "src": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_57": {
                "variable": {
                    "value": "one_hot_label",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels[:batch_size,].view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(one_hot_label * self.beta, mask * self.alpha)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "logits_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones(batch_size, self.num_classes).to(device), self.gamma * logits_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_22": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_25": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_27": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "input": {
                    "value": "features[:batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "features.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_49": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.eq(labels[:batch_size], labels.T).float().to(device)",
                            "Call"
                        ],
                        [
                            "mask * logits_mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat((one_hot_label * self.beta, mask * self.alpha), dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_51": {
                "start": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(features.shape[0] - self.K) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_62": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "anchor_dot_contrast - logits_max.detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_63": {
                "input": {
                    "value": "exp_logits.sum(1, keepdim=True) + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_61": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(features.shape[0] - self.K) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_41": {
                "input": {
                    "value": "self.weight + 1e-09",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "LT/moco/builder.py": {
        "torch": {
            "cat_256": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors_gather",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.ones_like(tensor) for _ in range(torch.distributed.get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_11": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(feat_dim, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_15": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_15": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(self.weight, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.linear_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalize_64": {
                "variable": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_158": {
                "variable": {
                    "value": "idx_shuffle",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_gather.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x_gather.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argsort_164": {
                "variable": {
                    "value": "idx_unshuffle",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randperm(batch_size_all).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_205": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_q(im_q)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(q, dim=1)",
                            "Call"
                        ],
                        [
                            "self.encoder_q(image)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(q, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(q, k, self.queue.clone().detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(labels, labels, self.queue_l.clone().detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_233": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_q(im_q)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(q, dim=1)",
                            "Call"
                        ],
                        [
                            "self.encoder_q(image)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(q, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.encoder_q.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_mlp, dim_mlp)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.encoder_k.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_mlp, dim_mlp)",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_92": {
                "variable": {
                    "value": "self.feat_after_avg_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.feat_after_avg_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_98": {
                "variable": {
                    "value": "self.feat_after_avg_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.feat_after_avg_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "broadcast_161": {
                "tensor": {
                    "value": "idx_shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randperm(batch_size_all).cuda()",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_215": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_k(im_k)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(k, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_252": {
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "randn_63": {
                "*size": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "65536",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randint_66": {
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "(K,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "dim_mlp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_mlp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BatchNorm1d_50": {
                "num_features": {
                    "value": "dim_mlp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "dim_mlp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_mlp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BatchNorm1d_51": {
                "num_features": {
                    "value": "dim_mlp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LT/models/resnet_cifar.py": {
        "torch": {
            "Parameter_20": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_24": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_24": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(self.weight, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(x, dim=1).mm(F.normalize(self.weight, dim=0))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.avgpool(out)",
                            "Call"
                        ],
                        [
                            "self.fc(encoding)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16 * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_82": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_98": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_55": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "LT/models/resnet_imagenet.py": {
        "torch": {
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_175": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_176": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_184": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "flatten_242": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_213": {
                "variable": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LT/paco_cifar.py": {
        "torch": {
            "device_count_159": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_251": {
                "variable": {
                    "value": "criterion_ce",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_254": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_393": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "INaturalist(root=args.data, txt=txt_train, transform=transforms.Compose(augmentation))",
                            "Call"
                        ],
                        [
                            "ImageNetLT_Due(root=args.data, txt=txt_train, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "ImbalanceCIFAR100(root='./cifar', imb_type='exp', imb_factor=args.imb_factor, rand_number=0, train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_397": {
                "variable": {
                    "value": "val_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "INaturalist(root=args.data, txt=txt_test, transform=val_transform)",
                            "Call"
                        ],
                        [
                            "ImageNetLT(root=args.data, txt=txt_test, transform=val_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./cifar', train=False, download=True, transform=val_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_452": {
                "variable": {
                    "value": "total_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 100)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_453": {
                "variable": {
                    "value": "total_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_502": {
                "variable": {
                    "value": "total_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 100)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_503": {
                "variable": {
                    "value": "total_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_388": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "INaturalist(root=args.data, txt=txt_train, transform=transforms.Compose(augmentation))",
                            "Call"
                        ],
                        [
                            "ImageNetLT_Due(root=args.data, txt=txt_train, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "ImbalanceCIFAR100(root='./cifar', imb_type='exp', imb_factor=args.imb_factor, rand_number=0, train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_469": {
                "variable": {
                    "value": "total_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_470": {
                "variable": {
                    "value": "total_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, target)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_540": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'{args.root_model}/moco_ckpt.pth.tar'",
                            "JoinedStr"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_142": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_212": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "moco.builder.MoCo(getattr(resnet_cifar, args.arch), args.moco_dim, args.moco_k, args.moco_m, args.moco_t, args.mlp, args.feat_dim, args.normalize, num_classes=args.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_239": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "moco.builder.MoCo(getattr(resnet_cifar, args.arch), args.moco_dim, args.moco_k, args.moco_m, args.moco_t, args.mlp, args.feat_dim, args.normalize, num_classes=args.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ]
                    ]
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_505": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_517": {
                "variable": {
                    "value": "total_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_logits, output)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_518": {
                "variable": {
                    "value": "total_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, target)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_601": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_205": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_241": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_263": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_267": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_510": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_222": {
                "f": {
                    "value": "args.reload",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "LT/paco_fp16_places.py": {
        "torch": {
            "device_count_175": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_284": {
                "variable": {
                    "value": "criterion_ce",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_287": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_424": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "PlacesLT_moco(root=args.data, txt=txt_train, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_428": {
                "variable": {
                    "value": "val_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "PlacesLT(root=args.data, txt=txt_test, transform=val_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradScaler_437": {
                "variable": {
                    "value": "scaler",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_476": {
                "variable": {
                    "value": "total_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_477": {
                "variable": {
                    "value": "total_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_533": {
                "variable": {
                    "value": "total_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_534": {
                "variable": {
                    "value": "total_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_418": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "PlacesLT_moco(root=args.data, txt=txt_train, transform=transform_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_568": {
                "variable": {
                    "value": "(probs, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "total_logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_568": {
                "variable": {
                    "value": "(probs, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_576": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'{args.root_model}/moco_ckpt.pth.tar'",
                            "JoinedStr"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_158": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_263": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "moco.builder.MoCo(models.__dict__[args.arch], args.moco_dim, args.moco_k, args.moco_m, args.moco_t, args.mlp, args.feat_dim, args.normalize, args.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu], find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_272": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "moco.builder.MoCo(models.__dict__[args.arch], args.moco_dim, args.moco_k, args.moco_m, args.moco_t, args.mlp, args.feat_dim, args.normalize, args.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu], find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_536": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_548": {
                "variable": {
                    "value": "total_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_logits, output)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_549": {
                "variable": {
                    "value": "total_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, target)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_638": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_221": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_231": {
                "variable": {
                    "value": "state_dict_imagenet",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.reload_torch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_274": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_296": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_300": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_541": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_494": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_242": {
                "f": {
                    "value": "args.reload",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "LT/paco_lt.py": {
        "torch": {
            "device_count_164": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_256": {
                "variable": {
                    "value": "criterion_ce",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_259": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_420": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "INaturalist_moco(root=args.data, txt=txt_train, transform=transform_train) if args.dataset == 'inat' else ImageNetLT_moco(root=args.data, txt=txt_train, transform=transform_train)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_424": {
                "variable": {
                    "value": "val_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "INaturalist(root=args.data, txt=txt_test, transform=val_transform) if args.dataset == 'inat' else ImageNetLT(root=args.data, txt=txt_test, transform=val_transform)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradScaler_434": {
                "variable": {
                    "value": "scaler",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_530": {
                "variable": {
                    "value": "total_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 1000)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_531": {
                "variable": {
                    "value": "total_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_414": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "INaturalist_moco(root=args.data, txt=txt_train, transform=transform_train) if args.dataset == 'inat' else ImageNetLT_moco(root=args.data, txt=txt_train, transform=transform_train)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "softmax_565": {
                "variable": {
                    "value": "(probs, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "total_logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_565": {
                "variable": {
                    "value": "(probs, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_572": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'{args.root_model}/moco_ckpt.pth.tar'",
                            "JoinedStr"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_147": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_219": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "moco.builder.MoCo(models.__dict__[args.arch] if args.arch != 'resnext101_32x4d' else getattr(resnet_imagenet, args.arch), args.moco_dim, args.moco_k, args.moco_m, args.moco_t, args.mlp, args.feat_dim, args.normalize, num_classes=args.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_244": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "moco.builder.MoCo(models.__dict__[args.arch] if args.arch != 'resnext101_32x4d' else getattr(resnet_imagenet, args.arch), args.moco_dim, args.moco_k, args.moco_m, args.moco_t, args.mlp, args.feat_dim, args.normalize, num_classes=args.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ]
                    ]
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_533": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_545": {
                "variable": {
                    "value": "total_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_logits, output)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_546": {
                "variable": {
                    "value": "total_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, target)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_634": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_212": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_246": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_268": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_272": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_538": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_490": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_227": {
                "f": {
                    "value": "args.reload",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "LT/randaugment.py": {
        "torch": {
            "Conv2d_459": {
                "variable": {
                    "value": "self.blur_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_461": {
                "variable": {
                    "value": "self.blur_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_466": {
                "variable": {
                    "value": "self.blur",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(radias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_482": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.arange(-self.r, self.r + 1)",
                            "Call"
                        ],
                        [
                            "np.exp(-np.power(x, 2) / (2 * sigma * sigma))",
                            "Call"
                        ],
                        [
                            "x / x.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(x).view(1, -1).repeat(3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_467": {
                "padding": {
                    "value": "radias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_487": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}