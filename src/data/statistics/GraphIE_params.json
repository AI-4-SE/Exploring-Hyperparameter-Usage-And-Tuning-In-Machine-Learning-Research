{
    "word-level/neuronlp2/io/record.py": {
        "tensorflow": {},
        "torch": {}
    },
    "sentence-level/ModelUtils.py": {
        "torch": {
            "max_25": {
                "variable": {
                    "value": "(m, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_58": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_131": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.max(input, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(input, dim=1)",
                            "Call"
                        ],
                        [
                            "out.div(text_len)",
                            "Call"
                        ],
                        [
                            "self._aggregate_last_hidden(word, text_len)",
                            "Call"
                        ],
                        [
                            "self._aggregate_max_pooling(word, text_mask)",
                            "Call"
                        ],
                        [
                            "self._aggregate_avg_pooling(word, text_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_146": {
                "variable": {
                    "value": "(out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.index_select(0, autograd.Variable(invert_order))",
                            "Call"
                        ],
                        [
                            "torch.cat((input, zero), dim=0)",
                            "Call"
                        ],
                        [
                            "input[invert_order]",
                            "Subscript"
                        ],
                        [
                            "input * text_mask.detach().unsqueeze(2).float()",
                            "BinOp"
                        ],
                        [
                            "input * text_mask.detach().unsqueeze(2).float()",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_162": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.index_select(0, autograd.Variable(invert_order))",
                            "Call"
                        ],
                        [
                            "torch.cat((input, zero), dim=0)",
                            "Call"
                        ],
                        [
                            "input[invert_order]",
                            "Subscript"
                        ],
                        [
                            "input * text_mask.detach().unsqueeze(2).float()",
                            "BinOp"
                        ],
                        [
                            "input * text_mask.detach().unsqueeze(2).float()",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_187": {
                "variable": {
                    "value": "word",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sort_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sort_tensor(input=word, initial=initial, lengths=text_len)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sort_len.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_237": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.d_output, self.d_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_314": {
                "variable": {
                    "value": "emission_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._pad_2(x)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "true_tag.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_314": {
                "variable": {
                    "value": "emission_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_315": {
                "variable": {
                    "value": "emission_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emission_score * x_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_320": {
                "variable": {
                    "value": "tran_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.transitions[:, self.START_TAG]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "true_tag[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, Variable(torch.ones(batch_size, doc_len, 2) * -10000.0).cuda()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_406": {
                "variable": {
                    "value": "pointers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pointers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pointers, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_417": {
                "variable": {
                    "value": "tags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tags[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_27": {
                "input": {
                    "value": "torch.sum(torch.exp(vec - max_exp), dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_49": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "d_input",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted_lengths.size()[0] - num_nonzero",
                            "BinOp"
                        ],
                        [
                            "self._sort_tensor(input=word, initial=initial, lengths=text_len)",
                            "Call"
                        ],
                        [
                            "num_zero",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_117": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, zero)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_194": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sort_initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sort_tensor(input=word, initial=initial, lengths=text_len)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_329": {
                "variable": {
                    "value": "trn_row",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trn_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transitions.unsqueeze(0).expand(batch_size, d_output, d_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tag_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_tag[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tag_r.unsqueeze(-1).expand(-1, -1, d_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_332": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trn_row",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(trn_expand, 1, tag_r)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tag_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_tag[:, :-1].unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_332": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "torch.exp(vec - max_exp)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_51": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "d_input",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_201": {
                "sequence": {
                    "value": "word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(text)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(sort_word, lengths=sort_len.cpu().numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.rnn(word)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(word, batch_first=True)[0]",
                            "Subscript"
                        ],
                        [
                            "self._unsort_tensor(word, invert_order, num_zero)",
                            "Call"
                        ],
                        [
                            "self.rnn(word, initial)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_238": {
                "*size": {
                    "value": "self.d_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_251": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "text.size()",
                            "Call"
                        ],
                        [
                            "logits.size()",
                            "Call"
                        ],
                        [
                            "logits.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.d_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_377": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "text.size()",
                            "Call"
                        ],
                        [
                            "logits.size()",
                            "Call"
                        ],
                        [
                            "logits.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "d_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.size()",
                            "Call"
                        ],
                        [
                            "logits.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "d_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_27": {
                "input": {
                    "value": "vec - max_exp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_414": {
                "input": {
                    "value": "pointers[-1 - i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(vec, dim)",
                            "Call"
                        ],
                        [
                            "vit.max(1)",
                            "Call"
                        ],
                        [
                            "idx.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "(1 - mask) * idx + mask * torch.gather(pointers[-1 - i, :, :], 1, idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_356": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "text.size()",
                            "Call"
                        ],
                        [
                            "logits.size()",
                            "Call"
                        ],
                        [
                            "logits.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "doc_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.size()",
                            "Call"
                        ],
                        [
                            "logits.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sentence-level/attention.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_out",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_24": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_40": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2)) / self.temper",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "self.act(torch.matmul(x, self.weight).squeeze(3))",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, self.weight).squeeze(3)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_49": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_50": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(d_k, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_53": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_87": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2)) / self.temper",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "self.act(torch.matmul(x, self.weight).squeeze(3))",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, self.weight).squeeze(3)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_107": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(n_head, d_input, d_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_108": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(n_head, d_input, d_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(n_head, d_input_v, d_v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_116": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_139": {
                "variable": {
                    "value": "q_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.repeat(n_head, 1, 1).view(n_head, -1, d_input)",
                            "Call"
                        ],
                        [
                            "torch.bmm(q_s, self.w_qs).view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_140": {
                "variable": {
                    "value": "k_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k.repeat(n_head, 1, 1).view(n_head, -1, d_input)",
                            "Call"
                        ],
                        [
                            "torch.bmm(k_s, self.w_ks).view(-1, len_k, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_141": {
                "variable": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.repeat(n_head, 1, 1).view(n_head, -1, d_input_v)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v_s, self.w_vs).view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(outputs, mb_size, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tanh_164": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_165": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(d_model, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_167": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_168": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_186": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relative_pos",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_186": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_197": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2)) / self.temper",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "self.act(torch.matmul(x, self.weight).squeeze(3))",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, self.weight).squeeze(3)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q - k",
                            "BinOp"
                        ],
                        [
                            "self.act(self.x_proj(x))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_30": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.unsqueeze(2).expand(-1, -1, len_k, -1)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q - k",
                            "BinOp"
                        ],
                        [
                            "self.act(self.x_proj(x))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_71": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_147": {
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=attn_mask.repeat(n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, mb_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ],
                        [
                            "self.dropout(outputs)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "mb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.size()",
                            "Call"
                        ],
                        [
                            "k.size()",
                            "Call"
                        ],
                        [
                            "q.size()",
                            "Call"
                        ],
                        [
                            "k.size()",
                            "Call"
                        ],
                        [
                            "v.size()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sentence-level/data_twitter.py": {
        "torch": {
            "zeros_36": {
                "variable": {
                    "value": "glove_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(WORD_VOCAB_SIZE, D_WORD_EMB)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_153": {
                "variable": {
                    "value": "self.data_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ByteTensor(np.pad(x.data_char, pad_width=[(0, max_num_sent - x.num_sent), (0, max_sent_len - x.max_sent_len), (0, max_word_len - x.max_word_len)], mode='constant', constant_values=0)) for x in users]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_158": {
                "variable": {
                    "value": "self.data_word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(np.pad(x.data_word, pad_width=[(0, max_num_sent - x.num_sent), (0, max_sent_len - x.max_sent_len)], mode='constant', constant_values=0)) for x in users]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ByteTensor(np.pad(x.mask, pad_width=[(0, max_num_sent - x.num_sent), (0, max_sent_len - x.max_sent_len)], mode='constant', constant_values=0)) for x in users]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_167": {
                "variable": {
                    "value": "self.length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(np.pad(x.length, pad_width=[(0, max_num_sent - x.num_sent)], mode='constant', constant_values=0)) for x in users]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_173": {
                "variable": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.pad(x.label, pad_width=[(0, max_num_sent - x.num_sent), (0, max_sent_len - x.max_sent_len)], mode='constant', constant_values=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_178": {
                "variable": {
                    "value": "self.entity_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x.entity_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_168": {
                "ndarray": {
                    "value": "np.pad(x.length, pad_width=[(0, max_num_sent - x.num_sent)], mode='constant', constant_values=0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sentence-level/gnn.py": {
        "torch": {
            "bmm_198": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj.ne(0).float()",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(2).expand(-1, -1, self.d_model).float()",
                            "Call"
                        ],
                        [
                            "mask.view(batch_size * docu_len, sent_len)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sort_tensor(x, mask)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "[torch.tanh(conv(x)) for conv in self.convs]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(sub_x, sub_x.size(2)).squeeze(2) for sub_x in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self._unsort_tensor(x, invert_order, num_zero)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, self.n_graph, -1, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_16": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_17": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(in_channels=embed_dim, out_channels=num_filters, kernel_size=k, padding=k - 1) for k in filter_sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sort_tensor(x, mask)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "[torch.tanh(conv(x)) for conv in self.convs]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(sub_x, sub_x.size(2)).squeeze(2) for sub_x in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self._unsort_tensor(x, invert_order, num_zero)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, self.n_graph, -1, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.linear_gi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.linear_go",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_116": {
                "variable": {
                    "value": "h_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tanh(self.linear_gi(x)) * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.linear_gcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_input * n_graph",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_142": {
                "variable": {
                    "value": "h_gcn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adjs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjs.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "adjs.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "adjs",
                            "Method Argument"
                        ],
                        [
                            "adjs",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sort_tensor(x, mask)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "[torch.tanh(conv(x)) for conv in self.convs]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(sub_x, sub_x.size(2)).squeeze(2) for sub_x in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self._unsort_tensor(x, invert_order, num_zero)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, self.n_graph, -1, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_142": {
                "variable": {
                    "value": "h_gcn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "elu_149": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "h + h_gcn / d",
                            "BinOp"
                        ],
                        [
                            "h + self.g_node(x, mask).unsqueeze(1).expand_as(h)",
                            "BinOp"
                        ],
                        [
                            "F.elu(h)",
                            "Call"
                        ],
                        [
                            "self.linear(x) + h_gcn",
                            "BinOp"
                        ],
                        [
                            "h + self.g_node(x, mask).unsqueeze(1).expand_as(h)",
                            "BinOp"
                        ],
                        [
                            "F.elu(h)",
                            "Call"
                        ],
                        [
                            "self.linear1(x) + self.linear2(h_gcn)",
                            "BinOp"
                        ],
                        [
                            "F.elu(h)",
                            "Call"
                        ],
                        [
                            "self.drop(h_word)",
                            "Call"
                        ],
                        [
                            "self.out_linear1(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.out_linear2(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "elu_171": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "h + h_gcn / d",
                            "BinOp"
                        ],
                        [
                            "h + self.g_node(x, mask).unsqueeze(1).expand_as(h)",
                            "BinOp"
                        ],
                        [
                            "F.elu(h)",
                            "Call"
                        ],
                        [
                            "self.linear(x) + h_gcn",
                            "BinOp"
                        ],
                        [
                            "h + self.g_node(x, mask).unsqueeze(1).expand_as(h)",
                            "BinOp"
                        ],
                        [
                            "F.elu(h)",
                            "Call"
                        ],
                        [
                            "self.linear1(x) + self.linear2(h_gcn)",
                            "BinOp"
                        ],
                        [
                            "F.elu(h)",
                            "Call"
                        ],
                        [
                            "self.drop(h_word)",
                            "Call"
                        ],
                        [
                            "self.out_linear1(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.out_linear2(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_179": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ],
                        [
                            "d_input",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_180": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "elu_187": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "h + h_gcn / d",
                            "BinOp"
                        ],
                        [
                            "h + self.g_node(x, mask).unsqueeze(1).expand_as(h)",
                            "BinOp"
                        ],
                        [
                            "F.elu(h)",
                            "Call"
                        ],
                        [
                            "self.linear(x) + h_gcn",
                            "BinOp"
                        ],
                        [
                            "h + self.g_node(x, mask).unsqueeze(1).expand_as(h)",
                            "BinOp"
                        ],
                        [
                            "F.elu(h)",
                            "Call"
                        ],
                        [
                            "self.linear1(x) + self.linear2(h_gcn)",
                            "BinOp"
                        ],
                        [
                            "F.elu(h)",
                            "Call"
                        ],
                        [
                            "self.drop(h_word)",
                            "Call"
                        ],
                        [
                            "self.out_linear1(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.out_linear2(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_211": {
                "variable": {
                    "value": "self.word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "word_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "args.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_214": {
                "variable": {
                    "value": "self.gnn_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_249": {
                "variable": {
                    "value": "self.out_linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.n_filter * len(args.filter_sizes) + args.d_embed",
                            "BinOp"
                        ],
                        [
                            "args.d_graph[0]",
                            "Subscript"
                        ],
                        [
                            "d_in + self.d_pos_embed",
                            "BinOp"
                        ],
                        [
                            "d_out",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.n_filter * len(args.filter_sizes) + args.d_embed",
                            "BinOp"
                        ],
                        [
                            "args.d_graph[0]",
                            "Subscript"
                        ],
                        [
                            "d_in + self.d_pos_embed",
                            "BinOp"
                        ],
                        [
                            "d_out",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_250": {
                "variable": {
                    "value": "self.out_linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.n_filter * len(args.filter_sizes) + args.d_embed",
                            "BinOp"
                        ],
                        [
                            "args.d_graph[0]",
                            "Subscript"
                        ],
                        [
                            "d_in + self.d_pos_embed",
                            "BinOp"
                        ],
                        [
                            "d_out",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_output",
                            "Method Argument"
                        ],
                        [
                            "d_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_254": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "h_word",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(char_emb, word_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_351": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "h + h_gcn / d",
                            "BinOp"
                        ],
                        [
                            "h + self.g_node(x, mask).unsqueeze(1).expand_as(h)",
                            "BinOp"
                        ],
                        [
                            "F.elu(h)",
                            "Call"
                        ],
                        [
                            "self.linear(x) + h_gcn",
                            "BinOp"
                        ],
                        [
                            "h + self.g_node(x, mask).unsqueeze(1).expand_as(h)",
                            "BinOp"
                        ],
                        [
                            "F.elu(h)",
                            "Call"
                        ],
                        [
                            "self.linear1(x) + self.linear2(h_gcn)",
                            "BinOp"
                        ],
                        [
                            "F.elu(h)",
                            "Call"
                        ],
                        [
                            "self.drop(h_word)",
                            "Call"
                        ],
                        [
                            "self.out_linear1(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.out_linear2(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted_mask.size()[0] - num_nonzero",
                            "BinOp"
                        ],
                        [
                            "self._sort_tensor(x, mask)",
                            "Call"
                        ],
                        [
                            "num_zero",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "*input.size()[1:]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, zero)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "variable": {
                    "value": "self.pos_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.d_pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_304": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pos_linear(pos)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_305": {
                "variable": {
                    "value": "h_gcn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_sent, feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_77": {
                "input": {
                    "value": "conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool1d_78": {
                "input": {
                    "value": "sub_x",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "sub_x.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_78": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_17": {
                "in_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "k - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_116": {
                "input": {
                    "value": "self.linear_gi(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sentence-level/gnn_twitter.py": {
        "torch": {
            "bmm_20": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_20": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_42": {
                "variable": {
                    "value": "self.word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "word_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "args.d_word_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.gnn_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.out_linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.n_filter * len(args.filter_sizes) + args.d_word_embed",
                            "BinOp"
                        ],
                        [
                            "args.d_graph[0]",
                            "Subscript"
                        ],
                        [
                            "d_out",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_79": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "h_word",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(char_emb, word_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_168": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_word[0]",
                            "Subscript"
                        ],
                        [
                            "h[:num_sent, :sent_len]",
                            "Subscript"
                        ],
                        [
                            "masked_mean(h, entity_mask)",
                            "Call"
                        ],
                        [
                            "self.drop(h)",
                            "Call"
                        ],
                        [
                            "self.out_linear1(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.out_linear2(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_31": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(mask.unsqueeze(1), x).squeeze(1)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.out_linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.n_filter * len(args.filter_sizes) + args.d_word_embed",
                            "BinOp"
                        ],
                        [
                            "args.d_graph[0]",
                            "Subscript"
                        ],
                        [
                            "d_out",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.n_filter * len(args.filter_sizes) + args.d_word_embed",
                            "BinOp"
                        ],
                        [
                            "args.d_graph[0]",
                            "Subscript"
                        ],
                        [
                            "d_out",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.out_linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.n_filter * len(args.filter_sizes) + args.d_word_embed",
                            "BinOp"
                        ],
                        [
                            "args.d_graph[0]",
                            "Subscript"
                        ],
                        [
                            "d_out",
                            "variable"
                        ]
                    ]
                }
            },
            "LogSoftmax_81": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_83": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "h_word",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_word, h_gcn]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sentence-level/scripts-for-visual-ie/data.py": {
        "torch": {
            "stack_324": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ByteTensor(np.pad(x.data, pad_width=[(0, max_docu_len - x.num_sent), (0, max_sent_len - x.max_sent_len), (0, max_word_len - x.max_word_len)], mode='constant', constant_values=0)) for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_329": {
                "variable": {
                    "value": "data_word",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(np.pad(x.data_word, pad_width=[(0, max_docu_len - x.num_sent), (0, max_sent_len - x.max_sent_len)], mode='constant', constant_values=0)) for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_333": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.FloatTensor(np.pad(x.pos, pad_width=[(0, max_docu_len - x.num_sent), (0, 0)], mode='constant', constant_values=0)) for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_337": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(np.pad(x.length, pad_width=[(0, max_docu_len - x.num_sent)], mode='constant', constant_values=0)) for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_341": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ByteTensor(np.pad(x.mask, pad_width=[(0, max_docu_len - x.num_sent), (0, max_sent_len - x.max_sent_len)], mode='constant', constant_values=0)) for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_346": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(np.pad(x.label, pad_width=[(0, max_docu_len - x.num_sent), (0, max_sent_len - x.max_sent_len)], mode='constant', constant_values=0)) for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_351": {
                "variable": {
                    "value": "adjs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.FloatTensor(np.pad(x.adjs, pad_width=[(0, 0), (0, max_docu_len - x.num_sent), (0, max_docu_len - x.num_sent)], mode='constant', constant_values=0)) for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_338": {
                "ndarray": {
                    "value": "np.pad(x.length, pad_width=[(0, max_docu_len - x.num_sent)], mode='constant', constant_values=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_347": {
                "ndarray": {
                    "value": "np.pad(x.label, pad_width=[(0, max_docu_len - x.num_sent), (0, max_sent_len - x.max_sent_len)], mode='constant', constant_values=0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sentence-level/scripts-for-visual-ie/train.py": {
        "torch": {
            "manual_seed_145": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_146": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(label2id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_174": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_175": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_258": {
                "variable": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path + '.model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_273": {
                "variable": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path + '.model'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "input": {
                    "value": "logit.view(batch_size, docu_len, sent_len, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "masked_select_210": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-model.crf_layer.loglikelihood(logit, mask, length, label)",
                            "UnaryOp"
                        ],
                        [
                            "torch.masked_select(loss, torch.gt(length, 0)).mean()",
                            "Call"
                        ],
                        [
                            "loss_function(logit.view(-1, d_output), label.view(-1))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(loss, mask.view(-1)).mean()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.gt(length, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_210": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "masked_select_213": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-model.crf_layer.loglikelihood(logit, mask, length, label)",
                            "UnaryOp"
                        ],
                        [
                            "torch.masked_select(loss, torch.gt(length, 0)).mean()",
                            "Call"
                        ],
                        [
                            "loss_function(logit.view(-1, d_output), label.view(-1))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(loss, mask.view(-1)).mean()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_213": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_240": {
                "obj": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'id': {'case': data.case_id, 'doc': data.doc_id, 'page': data.page_id}, 'prob': []}",
                            "Dict"
                        ],
                        [
                            "torch.load(args.save_path + '.model')",
                            "Call"
                        ],
                        [
                            "{'args': args, 'model': model.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(args.save_path + '.model', map_location=lambda storage, loc: storage)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.save_path + '.model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gt_210": {
                "input": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_var(tensors, cuda=args.cuda)",
                            "Call"
                        ],
                        [
                            "to_var(tensors, cuda=args.cuda)",
                            "Call"
                        ],
                        [
                            "length.view(batch_size * docu_len)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sentence-level/train_twitter.py": {
        "torch": {
            "CrossEntropyLoss_113": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "masked_select_79": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-model.crf_layer.loglikelihood(logit, mask[0], length[0], label)",
                            "UnaryOp"
                        ],
                        [
                            "torch.masked_select(loss, torch.gt(length[0], 0)).mean()",
                            "Call"
                        ],
                        [
                            "loss_function(logit.view(-1, d_output), label.view(-1))",
                            "Call"
                        ],
                        [
                            "loss.mean()",
                            "Call"
                        ],
                        [
                            "torch.masked_select(loss, mask[0].view(-1)).mean()",
                            "Call"
                        ],
                        [
                            "run_model(model, ego, loss_function, predict=True, args=args)",
                            "Call"
                        ],
                        [
                            "run_model(model, ego, loss_function, args=args)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.gt(length[0], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_79": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_218": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_219": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_283": {
                "variable": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path + '.model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_308": {
                "variable": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path + '.model'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_334": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_335": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "masked_select_85": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-model.crf_layer.loglikelihood(logit, mask[0], length[0], label)",
                            "UnaryOp"
                        ],
                        [
                            "torch.masked_select(loss, torch.gt(length[0], 0)).mean()",
                            "Call"
                        ],
                        [
                            "loss_function(logit.view(-1, d_output), label.view(-1))",
                            "Call"
                        ],
                        [
                            "loss.mean()",
                            "Call"
                        ],
                        [
                            "torch.masked_select(loss, mask[0].view(-1)).mean()",
                            "Call"
                        ],
                        [
                            "run_model(model, ego, loss_function, predict=True, args=args)",
                            "Call"
                        ],
                        [
                            "run_model(model, ego, loss_function, args=args)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask[0].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_85": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gt_79": {
                "input": {
                    "value": "length[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_266": {
                "obj": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'id': c_user.id, 'results': {}}",
                            "Dict"
                        ],
                        [
                            "torch.load(args.save_path + '.model')",
                            "Call"
                        ],
                        [
                            "{'args': args, 'model': model.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(args.save_path + '.model', map_location=lambda storage, loc: storage)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.save_path + '.model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "word-level/examples/NERCRF_conll.py": {
        "torch": {
            "clip_grad_norm__346": {
                "parameters": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.max_norm",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_209": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(show_time())",
                            "Call"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_210": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(show_time())",
                            "Call"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_227": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_271": {
                "ndarray": {
                    "value": "table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([word_alphabet.size(), embedd_dim], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_323": {
                "f": {
                    "value": "save_checkpoint + '_best.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_439": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_410": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_504": {
                "obj": {
                    "value": "network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_checkpoint + '_best.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "word-level/neuronlp2/io/conll03_data.py": {
        "torch": {
            "device_133": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "word-level/neuronlp2/io/make_graph.py": {
        "torch": {}
    },
    "word-level/neuronlp2/io/reader.py": {
        "torch": {
            "stack_297": {
                "variable": {
                    "value": "chars",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(np.pad(x.chars, pad_width=[(0, max_n_sent - x.n_sent), (0, max_sent_len - x.sent_len), (0, max_word_len - x.word_len)], mode='constant', constant_values=PAD_ID_CHAR)) for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_303": {
                "variable": {
                    "value": "word_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(np.pad(x.word_ids, pad_width=[(0, max_n_sent - x.n_sent), (0, max_sent_len - x.sent_len)], mode='constant', constant_values=PAD_ID_WORD)) for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_311": {
                "variable": {
                    "value": "posi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(np.pad(x.posi, pad_width=[(0, max_n_sent - x.n_sent), (0, max_sent_len - x.sent_len), (0, 0)], mode='constant', constant_values=PAD_ID_POSI)) for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_318": {
                "variable": {
                    "value": "ner_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(np.pad(x.ner_ids, pad_width=[(0, max_n_sent - x.n_sent), (0, max_sent_len - x.sent_len)], mode='constant', constant_values=PAD_ID_NER)) for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_324": {
                "variable": {
                    "value": "feat_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(np.pad(x.feat_ids, pad_width=[(0, max_doc_n_words - x.doc_n_words), (0, 0)], mode='constant', constant_values=PAD_ID_NER)) for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_330": {
                "variable": {
                    "value": "adjs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.FloatTensor(np.pad(x.adjs, pad_width=[(0, 0), (0, max_n_node - x.n_node), (0, max_n_node - x.n_node)], mode='constant', constant_values=0)) for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "device_231": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_319": {
                "ndarray": {
                    "value": "np.pad(x.ner_ids, pad_width=[(0, max_n_sent - x.n_sent), (0, max_sent_len - x.sent_len)], mode='constant', constant_values=PAD_ID_NER)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "word-level/neuronlp2/io/visual.py": {
        "torch": {
            "device_33": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_printoptions_45": {
                "threshold": {
                    "value": "print_thres",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjs.size(-1) * adjs.size(-2) + 1000",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "word-level/neuronlp2/models/sequence_labeling.py": {
        "torch": {
            "Embedding_109": {
                "variable": {
                    "value": "self.word_embedd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_words",
                            "Method Argument"
                        ],
                        [
                            "num_words",
                            "Method Argument"
                        ],
                        [
                            "num_words",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "word_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_dim",
                            "Method Argument"
                        ],
                        [
                            "word_dim",
                            "Method Argument"
                        ],
                        [
                            "word_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "_weight": {
                    "value": "embedd_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_110": {
                "variable": {
                    "value": "self.char_embedd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_chars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_chars",
                            "Method Argument"
                        ],
                        [
                            "num_chars",
                            "Method Argument"
                        ],
                        [
                            "num_chars",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "char_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "char_dim",
                            "Method Argument"
                        ],
                        [
                            "char_dim",
                            "Method Argument"
                        ],
                        [
                            "char_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "_weight": {
                    "value": "embedd_char",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout2d_122": {
                "variable": {
                    "value": "self.dropout_em",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_em",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.33",
                            "Method Argument"
                        ],
                        [
                            "0.33",
                            "Method Argument"
                        ],
                        [
                            "0.33",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_124": {
                "variable": {
                    "value": "self.dropout_rnn_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_rnn[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(0.5",
                            "Method Argument"
                        ],
                        [
                            "(0.5",
                            "Method Argument"
                        ],
                        [
                            "(0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_125": {
                "variable": {
                    "value": "self.dropout_rnn_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_rnn[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(0.5",
                            "Method Argument"
                        ],
                        [
                            "(0.5",
                            "Method Argument"
                        ],
                        [
                            "(0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_168": {
                "variable": {
                    "value": "self.dense_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "tag_space",
                            "variable"
                        ],
                        [
                            "tag_space if tag_space else hidden_size * 2",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_labels",
                            "Method Argument"
                        ],
                        [
                            "num_labels",
                            "Method Argument"
                        ],
                        [
                            "num_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LogSoftmax_169": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_170": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_324": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, :, leading_symbolic:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_578": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_579": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_586": {
                "variable": {
                    "value": "coref_adj_for_comp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coref_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_adj",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_140": {
                "variable": {
                    "value": "self.char_conv1d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "char_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "char_dim",
                            "Method Argument"
                        ],
                        [
                            "char_dim",
                            "Method Argument"
                        ],
                        [
                            "char_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "char_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "char_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "char_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "char_hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_151": {
                "variable": {
                    "value": "self.sent_conv1d_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_152": {
                "variable": {
                    "value": "self.sent_conv1d_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_165": {
                "variable": {
                    "value": "self.dropout_tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_tag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.lstm_to_tag_space",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "tag_space",
                            "variable"
                        ],
                        [
                            "tag_space if tag_space else hidden_size * 2",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "tag_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_212": {
                "variable": {
                    "value": "char",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded_dropout(self.char_embedd, input_char, dropout=self.p_em_vec if self.training else 0)",
                            "Call"
                        ],
                        [
                            "self.char_embedd(input_char)",
                            "Call"
                        ],
                        [
                            "char.view(char_size[0] * char_size[1], char_size[2], char_size[3]).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.char_conv1d(char).max(dim=2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(char).view(char_size[0], char_size[1], -1)",
                            "Call"
                        ],
                        [
                            "char.view(char_size[0] * char_size[1], char_size[2], char_size[3])",
                            "Call"
                        ],
                        [
                            "char.view(char_size[0], char_size[1], -1)",
                            "Call"
                        ],
                        [
                            "self.dropout_em(char)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_230": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word, char, 0.1 * elmo_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word, char]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_271": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sent_conv1d_layer1(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_273": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sent_conv1d_layer2(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_441": {
                "variable": {
                    "value": "self.dropout_rnn2_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_rnn2[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_444": {
                "variable": {
                    "value": "self.dropout_rnn2_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_rnn2[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_449": {
                "variable": {
                    "value": "self.dropout_tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_tag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_450": {
                "variable": {
                    "value": "self.to_tag_space",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_rnn2_in",
                            "variable"
                        ],
                        [
                            "d_out",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "tag_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "elu_548": {
                "input": {
                    "value": "self.to_tag_space(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_298": {
                "input": {
                    "value": "self.lstm_to_tag_space(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_343": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(output[:, :, leading_symbolic:], dim=2)",
                            "Call"
                        ],
                        [
                            "preds + leading_symbolic",
                            "BinOp"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ],
                        [
                            "self.crf.decode(output, mask=sent_mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "doc_target.view(batch_size * n_sent, sent_len) if doc_target is not None else None",
                            "IfExp"
                        ],
                        [
                            "target[length > 0] if doc_target is not None else None",
                            "IfExp"
                        ],
                        [
                            "target[:, :max_len].contiguous()",
                            "Call"
                        ],
                        [
                            "self._doc2sent(input_word, input_char, target, show_net=show_net)",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "self._doc2sent(input_word, input_char, target)",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "self._doc2sent(input_word, input_char, target, show_net=show_net)",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "self._get_gcn_output(input_word_orig, input_word, input_char, adjs, target, mask=mask, length=length, hx=hx, leading_symbolic=leading_symbolic, return_edge=return_edge, show_net=show_net, graph_types=graph_types)",
                            "Call"
                        ],
                        [
                            "self._get_gcn_output(input_word_orig, input_word, input_char, adjs, target, mask=mask, length=length, hx=hx, leading_symbolic=leading_symbolic, graph_types=graph_types)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_408": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(output[:, :, leading_symbolic:], dim=2)",
                            "Call"
                        ],
                        [
                            "preds + leading_symbolic",
                            "BinOp"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ],
                        [
                            "self.crf.decode(output, mask=sent_mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "doc_target.view(batch_size * n_sent, sent_len) if doc_target is not None else None",
                            "IfExp"
                        ],
                        [
                            "target[length > 0] if doc_target is not None else None",
                            "IfExp"
                        ],
                        [
                            "target[:, :max_len].contiguous()",
                            "Call"
                        ],
                        [
                            "self._doc2sent(input_word, input_char, target, show_net=show_net)",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "self._doc2sent(input_word, input_char, target)",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "self._doc2sent(input_word, input_char, target, show_net=show_net)",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "self._get_gcn_output(input_word_orig, input_word, input_char, adjs, target, mask=mask, length=length, hx=hx, leading_symbolic=leading_symbolic, return_edge=return_edge, show_net=show_net, graph_types=graph_types)",
                            "Call"
                        ],
                        [
                            "self._get_gcn_output(input_word_orig, input_word, input_char, adjs, target, mask=mask, length=length, hx=hx, leading_symbolic=leading_symbolic, graph_types=graph_types)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_623": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(output[:, :, leading_symbolic:], dim=2)",
                            "Call"
                        ],
                        [
                            "preds + leading_symbolic",
                            "BinOp"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ],
                        [
                            "self.crf.decode(output, mask=sent_mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "doc_target.view(batch_size * n_sent, sent_len) if doc_target is not None else None",
                            "IfExp"
                        ],
                        [
                            "target[length > 0] if doc_target is not None else None",
                            "IfExp"
                        ],
                        [
                            "target[:, :max_len].contiguous()",
                            "Call"
                        ],
                        [
                            "self._doc2sent(input_word, input_char, target, show_net=show_net)",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "self._doc2sent(input_word, input_char, target)",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "self._doc2sent(input_word, input_char, target, show_net=show_net)",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "self._get_gcn_output(input_word_orig, input_word, input_char, adjs, target, mask=mask, length=length, hx=hx, leading_symbolic=leading_symbolic, return_edge=return_edge, show_net=show_net, graph_types=graph_types)",
                            "Call"
                        ],
                        [
                            "self._get_gcn_output(input_word_orig, input_word, input_char, adjs, target, mask=mask, length=length, hx=hx, leading_symbolic=leading_symbolic, graph_types=graph_types)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_623": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "elu_529": {
                "input": {
                    "value": "self.lstm_to_tag_space(singles)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_339": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(output[:, :, leading_symbolic:], dim=2)",
                            "Call"
                        ],
                        [
                            "preds + leading_symbolic",
                            "BinOp"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ],
                        [
                            "self.crf.decode(output, mask=sent_mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "doc_target.view(batch_size * n_sent, sent_len) if doc_target is not None else None",
                            "IfExp"
                        ],
                        [
                            "target[length > 0] if doc_target is not None else None",
                            "IfExp"
                        ],
                        [
                            "target[:, :max_len].contiguous()",
                            "Call"
                        ],
                        [
                            "self._doc2sent(input_word, input_char, target, show_net=show_net)",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "self._doc2sent(input_word, input_char, target)",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "self._doc2sent(input_word, input_char, target, show_net=show_net)",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "self._get_gcn_output(input_word_orig, input_word, input_char, adjs, target, mask=mask, length=length, hx=hx, leading_symbolic=leading_symbolic, return_edge=return_edge, show_net=show_net, graph_types=graph_types)",
                            "Call"
                        ],
                        [
                            "self._get_gcn_output(input_word_orig, input_word, input_char, adjs, target, mask=mask, length=length, hx=hx, leading_symbolic=leading_symbolic, graph_types=graph_types)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eq_410": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(output[:, :, leading_symbolic:], dim=2)",
                            "Call"
                        ],
                        [
                            "preds + leading_symbolic",
                            "BinOp"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ],
                        [
                            "self.crf.decode(output, mask=sent_mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "doc_target.view(batch_size * n_sent, sent_len) if doc_target is not None else None",
                            "IfExp"
                        ],
                        [
                            "target[length > 0] if doc_target is not None else None",
                            "IfExp"
                        ],
                        [
                            "target[:, :max_len].contiguous()",
                            "Call"
                        ],
                        [
                            "self._doc2sent(input_word, input_char, target, show_net=show_net)",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "self._doc2sent(input_word, input_char, target)",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "self._doc2sent(input_word, input_char, target, show_net=show_net)",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "self._get_gcn_output(input_word_orig, input_word, input_char, adjs, target, mask=mask, length=length, hx=hx, leading_symbolic=leading_symbolic, return_edge=return_edge, show_net=show_net, graph_types=graph_types)",
                            "Call"
                        ],
                        [
                            "self._get_gcn_output(input_word_orig, input_word, input_char, adjs, target, mask=mask, length=length, hx=hx, leading_symbolic=leading_symbolic, graph_types=graph_types)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eq_625": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(output[:, :, leading_symbolic:], dim=2)",
                            "Call"
                        ],
                        [
                            "preds + leading_symbolic",
                            "BinOp"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ],
                        [
                            "self.crf.decode(output, mask=sent_mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "doc_target.view(batch_size * n_sent, sent_len) if doc_target is not None else None",
                            "IfExp"
                        ],
                        [
                            "target[length > 0] if doc_target is not None else None",
                            "IfExp"
                        ],
                        [
                            "target[:, :max_len].contiguous()",
                            "Call"
                        ],
                        [
                            "self._doc2sent(input_word, input_char, target, show_net=show_net)",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "self._doc2sent(input_word, input_char, target)",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "self._doc2sent(input_word, input_char, target, show_net=show_net)",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "self._get_gcn_output(input_word_orig, input_word, input_char, adjs, target, mask=mask, length=length, hx=hx, leading_symbolic=leading_symbolic, return_edge=return_edge, show_net=show_net, graph_types=graph_types)",
                            "Call"
                        ],
                        [
                            "self._get_gcn_output(input_word_orig, input_word, input_char, adjs, target, mask=mask, length=length, hx=hx, leading_symbolic=leading_symbolic, graph_types=graph_types)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "word-level/neuronlp2/nlinalg/nlinalg.py": {
        "torch": {
            "log_18": {
                "input": {
                    "value": "torch.eig(x.data)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_21": {
                "input": {
                    "value": "torch.log(u_chol.diag())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_21": {
                "input": {
                    "value": "u_chol.diag()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_38": {
                "input": {
                    "value": "torch.exp(x - xmax).sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_42": {
                "input": {
                    "value": "torch.exp(x - xmax).sum(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eig_18": {
                "input": {
                    "value": "x.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_38": {
                "input": {
                    "value": "x - xmax",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_42": {
                "input": {
                    "value": "x - xmax",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_42": {
                "input": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "word-level/neuronlp2/nn/_functions/activation.py": {
        "torch": {
            "tanh_11": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_11": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "word-level/neuronlp2/nn/_functions/embed_regularize.py": {
        "torch": {
            "embedding_20": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "words",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "masked_embed_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask * embed.weight",
                            "BinOp"
                        ],
                        [
                            "embed.weight",
                            "Attribute"
                        ],
                        [
                            "scale.expand_as(masked_embed_weight) * masked_embed_weight",
                            "BinOp"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed.padding_idx",
                            "Attribute"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "embed.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "embed.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "embed.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "embed.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "word-level/neuronlp2/nn/_functions/locked_dropout.py": {
        "torch": {}
    },
    "word-level/neuronlp2/nn/_functions/masked_rnn.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0).view(input.size(0), *output[0].size())",
                            "Call"
                        ],
                        [
                            "inner(input, hidden[l], cells[l], mask)",
                            "Call"
                        ],
                        [
                            "func(input, hidden, cells, mask)",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "hidden[0] if isinstance(hidden, tuple) else hidden",
                            "IfExp"
                        ],
                        [
                            "layer(input, hidden[l], cells[l], mask)",
                            "Call"
                        ],
                        [
                            "func(input, hidden, cells, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "input.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(num_layers, *next_h[0].size()), torch.cat(next_c, 0).view(num_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(num_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(num_layers, *next_h[0].size()), torch.cat(next_c, 0).view(num_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(num_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_57": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, p=dropout, training=train, inplace=False)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "F.dropout(input, p=dropout, training=train, inplace=False)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_138": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, p=dropout, training=train, inplace=False)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "F.dropout(input, p=dropout, training=train, inplace=False)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ],
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ],
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ],
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "tensors": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ],
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "word-level/neuronlp2/nn/_functions/skipconnect_rnn.py": {
        "torch": {
            "cat_12": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden, hidden_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_16": {
                "variable": {
                    "value": "hy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden, hidden_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_28": {
                "variable": {
                    "value": "hy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hx, hidden_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_43": {
                "variable": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ],
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_44": {
                "variable": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ],
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_45": {
                "variable": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ],
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_46": {
                "variable": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ],
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_59": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hx, hidden_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_73": {
                "variable": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ],
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_74": {
                "variable": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ],
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_75": {
                "variable": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ],
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_76": {
                "variable": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ],
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_86": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden, hidden_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "baddbmm_89": {
                "variable": {
                    "value": "gi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_ih.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_ih",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "baddbmm_90": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_hh.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(3, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_94": {
                "variable": {
                    "value": "resetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_r + h_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_95": {
                "variable": {
                    "value": "inputgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_i + h_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_96": {
                "variable": {
                    "value": "newgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_n + resetgate * h_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden, hidden_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_116": {
                "variable": {
                    "value": "gi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_ih",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_ih",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_117": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(3, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_121": {
                "variable": {
                    "value": "resetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_r + h_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "variable": {
                    "value": "inputgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_i + h_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_123": {
                "variable": {
                    "value": "newgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_n + resetgate * h_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_64": {
                "variable": {
                    "value": "igates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_ih",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_65": {
                "variable": {
                    "value": "hgates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(3, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_111": {
                "variable": {
                    "value": "gi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_ih",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_112": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(3, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_137": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h0.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "baddbmm_39": {
                "input": {
                    "value": "b_hh.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(3, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_49": {
                "input": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ],
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_69": {
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(3, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_79": {
                "input": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ],
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_197": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "input.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(num_layers, *next_h[0].size()), torch.cat(next_c, 0).view(num_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(num_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(num_layers, *next_h[0].size()), torch.cat(next_c, 0).view(num_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(num_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_16": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "cell(input[i], hidden, hidden_skip)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask[i], cx + (cp1 - cx) * mask[i])",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask[i]",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ],
                        [
                            "cell(input, hidden, hidden_skip)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask, cx + (cp1 - cx) * mask)",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_28": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "cell(input[i], hidden, hidden_skip)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask[i], cx + (cp1 - cx) * mask[i])",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask[i]",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ],
                        [
                            "cell(input, hidden, hidden_skip)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask, cx + (cp1 - cx) * mask)",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_202": {
                "tensors": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ],
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_203": {
                "tensors": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ],
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_279": {
                "tensors": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ],
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_280": {
                "tensors": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ],
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "word-level/neuronlp2/nn/_functions/variational_rnn.py": {
        "torch": {
            "relu_13": {
                "variable": {
                    "value": "hy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_22": {
                "variable": {
                    "value": "hy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_36": {
                "variable": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ],
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_37": {
                "variable": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ],
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_38": {
                "variable": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ],
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_39": {
                "variable": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ],
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_64": {
                "variable": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ],
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_65": {
                "variable": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ],
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_66": {
                "variable": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ],
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_67": {
                "variable": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ],
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "baddbmm_79": {
                "variable": {
                    "value": "gi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_ih.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_ih",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "baddbmm_80": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_hh.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden.expand(3, *hidden.size()) if noise_hidden is None else hidden.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hidden if noise_hidden is None else hidden * noise_hidden",
                            "IfExp"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_84": {
                "variable": {
                    "value": "resetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_r + h_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_85": {
                "variable": {
                    "value": "inputgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_i + h_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_86": {
                "variable": {
                    "value": "newgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_n + resetgate * h_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_103": {
                "variable": {
                    "value": "gi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_ih",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_ih",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_104": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden.expand(3, *hidden.size()) if noise_hidden is None else hidden.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hidden if noise_hidden is None else hidden * noise_hidden",
                            "IfExp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_108": {
                "variable": {
                    "value": "resetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_r + h_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_109": {
                "variable": {
                    "value": "inputgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_i + h_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_110": {
                "variable": {
                    "value": "newgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_n + resetgate * h_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_52": {
                "variable": {
                    "value": "igates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_ih",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_98": {
                "variable": {
                    "value": "gi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_ih",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ],
                        [
                            "w_ih",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_99": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden.expand(3, *hidden.size()) if noise_hidden is None else hidden.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hidden if noise_hidden is None else hidden * noise_hidden",
                            "IfExp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_137": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0).view(input.size(0), *output[0].size())",
                            "Call"
                        ],
                        [
                            "inner(input, hidden[l], cells[l], mask)",
                            "Call"
                        ],
                        [
                            "func(input, hidden, cells, mask)",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "hidden[0] if isinstance(hidden, tuple) else hidden",
                            "IfExp"
                        ],
                        [
                            "layer(input, hidden[l], cells[l], mask)",
                            "Call"
                        ],
                        [
                            "func(input, hidden, cells, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "baddbmm_32": {
                "input": {
                    "value": "b_hh.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden.expand(3, *hidden.size()) if noise_hidden is None else hidden.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hidden if noise_hidden is None else hidden * noise_hidden",
                            "IfExp"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_42": {
                "input": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ],
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_60": {
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden.expand(3, *hidden.size()) if noise_hidden is None else hidden.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hidden if noise_hidden is None else hidden * noise_hidden",
                            "IfExp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_70": {
                "input": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ],
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_163": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "input.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(num_layers, *next_h[0].size()), torch.cat(next_c, 0).view(num_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(num_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(num_layers, *next_h[0].size()), torch.cat(next_c, 0).view(num_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(num_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_13": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "cell(input[i], hidden)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask[i], cx + (cp1 - cx) * mask[i])",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask[i]",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ],
                        [
                            "cell(input, hidden)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask, cx + (cp1 - cx) * mask)",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_22": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "cell(input[i], hidden)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask[i], cx + (cp1 - cx) * mask[i])",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask[i]",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ],
                        [
                            "cell(input, hidden)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask, cx + (cp1 - cx) * mask)",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_53": {
                "input": {
                    "value": "hidden[0] * noise_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ],
                        [
                            "w_hh",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_168": {
                "tensors": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ],
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_169": {
                "tensors": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ],
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "tensors": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ],
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "tensors": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ],
                        [
                            "zip(*next_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "word-level/neuronlp2/nn/_functions/weight_drop.py": {
        "torch": {
            "dropout_40": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.ones(raw_w.size(0), 1))",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.dropout(mask, p=self.dropout, training=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_43": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self.module, name_w + '_raw')",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_38": {
                "*size": {
                    "value": "raw_w.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "word-level/neuronlp2/nn/gcn_optimizer.py": {
        "torch": {}
    },
    "word-level/neuronlp2/nn/init.py": {
        "torch": {
            "no_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "word-level/neuronlp2/nn/modules/attention.py": {
        "torch": {
            "Parameter_34": {
                "variable": {
                    "value": "self.W_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, self.input_size_decoder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.W_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, self.input_size_encoder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "out_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input_d.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_74": {
                "variable": {
                    "value": "out_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "out_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input_e.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_77": {
                "variable": {
                    "value": "out_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.W_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.input_size_decoder, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_128": {
                "variable": {
                    "value": "self.W_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.input_size_encoder, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_129": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_130": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.hidden_size, self.num_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_164": {
                "variable": {
                    "value": "out_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_d",
                            "Method Argument"
                        ],
                        [
                            "input_d",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.W_d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_164": {
                "variable": {
                    "value": "out_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_168": {
                "variable": {
                    "value": "out_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_e",
                            "Method Argument"
                        ],
                        [
                            "input_e",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.W_e",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_168": {
                "variable": {
                    "value": "out_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_171": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_d + out_e + self.b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, self.input_size_decoder, self.input_size_encoder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_d.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_d.unsqueeze(1), self.U)",
                            "Call"
                        ],
                        [
                            "torch.matmul(output, input_e.unsqueeze(1).transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "output + out_d + out_e + self.b",
                            "BinOp"
                        ],
                        [
                            "out_d + out_d + self.b",
                            "BinOp"
                        ],
                        [
                            "output * mask_d.unsqueeze(1).unsqueeze(3) * mask_e.unsqueeze(1).unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "input_e.unsqueeze(1).transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_177": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(out_d + out_e + self.b)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_177": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "word-level/neuronlp2/nn/modules/crf.py": {
        "torch": {
            "Linear_33": {
                "variable": {
                    "value": "self.state_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_115": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input_h.size()",
                            "Call"
                        ],
                        [
                            "input_h.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_228": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "energy_transpose.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_329": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(input, mask=mask)",
                            "Call"
                        ],
                        [
                            "self.forward(input, mask=mask)",
                            "Call"
                        ],
                        [
                            "self.forward(input_h, input_c, mask=mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_369": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "energy_transpose.size()",
                            "Call"
                        ],
                        [
                            "input_h.size()",
                            "Call"
                        ],
                        [
                            "input_h.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_371": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input_h.size()",
                            "Call"
                        ],
                        [
                            "input_h.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.trans_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_labels * self.num_labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.trans_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, self.num_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_241": {
                "variable": {
                    "value": "(pi[t], pointer[t])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "energy_transpose[t] + pi_prev.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_245": {
                "variable": {
                    "value": "(_, back_pointer[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pi[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_254": {
                "variable": {
                    "value": "(pi_final_kbest[i], back_pointer[lengths[i] - 1, i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pi[lengths[i] - 1, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "kbest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_305": {
                "input": {
                    "value": "output.new_full((length,), -np.inf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_347": {
                "n": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "energy_transpose.size()",
                            "Call"
                        ],
                        [
                            "input_h.size()",
                            "Call"
                        ],
                        [
                            "input_h.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_260": {
                "input": {
                    "value": "pi_final_kbest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, kbest).fill_(0.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "word-level/neuronlp2/nn/modules/gcn.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.to_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_graph",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout_gcn_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_gcn[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self.gcn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GNN_Layer(d_graph, d_graph, p_gcn[1], n_graph=n_graph) if gcn_model in ['gnn', 'gnn1'] else GNN_Att_Layer(n_head=n_head, d_input=d_graph, d_model=d_graph, globalnode=globalnode) if gcn_model == 'gnnattn' else AttEncoderLayer(n_head, d_graph, d_inner_hid, d_k, d_v, p_gcn[1]) if 'transformer' in gcn_model else None for _ in range(n_gcn_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.linear_gcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_input * n_graph",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_129": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_gcn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_gcn",
                            "Method Argument"
                        ],
                        [
                            "p_gcn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_140": {
                "variable": {
                    "value": "h_gcn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adjs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjs if gcn_model in ['gnn', 'gnn1'] else adjs.squeeze(1)",
                            "IfExp"
                        ],
                        [
                            "adjs",
                            "Method Argument"
                        ],
                        [
                            "adjs",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1).expand(-1, self.n_graph, -1, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_140": {
                "variable": {
                    "value": "h_gcn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_112": {
                "variable": {
                    "value": "edge_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(edge_weights)",
                            "Call"
                        ],
                        [
                            "edge_weights + [edge_weig]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_62": {
                "tensors": {
                    "value": "posi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sent.nonzero().view(-1) for sent in doc_word_mask]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(posi) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "elu_74": {
                "input": {
                    "value": "self.to_graph(h_gcn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_115": {
                "tensors": {
                    "value": "edge_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(edge_weights)",
                            "Call"
                        ],
                        [
                            "edge_weights + [edge_weig]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "word-level/neuronlp2/nn/modules/linear.py": {
        "torch": {
            "Parameter_29": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_features, self.left_features, self.right_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.W_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_features, self.left_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.W_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_features, self.left_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bilinear_70": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input1": {
                    "value": "input_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_left.view(batch, self.left_features)",
                            "Call"
                        ],
                        [
                            "input_left",
                            "Method Argument"
                        ]
                    ]
                },
                "input2": {
                    "value": "input_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_right.view(batch, self.right_features)",
                            "Call"
                        ],
                        [
                            "input_right",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_71": {
                "input": {
                    "value": "input_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_left.view(batch, self.left_features)",
                            "Call"
                        ],
                        [
                            "input_left",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "word-level/neuronlp2/nn/modules/masked_rnn.py": {
        "torch": {}
    },
    "word-level/neuronlp2/nn/modules/transformer.py": {
        "torch": {
            "clamp_62": {
                "variable": {
                    "value": "rowsum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj.sum(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_63": {
                "variable": {
                    "value": "d_inv_sqrt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rowsum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(adj.sum(-1), min=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_65": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_67": {
                "input": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(adj)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_out",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_155": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(n_head, d_model, d_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_156": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(n_head, d_model, d_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_157": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(n_head, d_model, d_v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_163": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_191": {
                "variable": {
                    "value": "q_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.repeat(n_head, 1, 1).view(n_head, -1, d_model)",
                            "Call"
                        ],
                        [
                            "torch.bmm(q_s, self.w_qs).view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_192": {
                "variable": {
                    "value": "k_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k.repeat(n_head, 1, 1).view(n_head, -1, d_model)",
                            "Call"
                        ],
                        [
                            "torch.bmm(k_s, self.w_ks).view(-1, len_k, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_220": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Method Argument"
                        ],
                        [
                            "d_hid",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d_inner_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_inner_hid",
                            "Method Argument"
                        ],
                        [
                            "d_inner_hid",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_221": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_inner_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_inner_hid",
                            "Method Argument"
                        ],
                        [
                            "d_inner_hid",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Method Argument"
                        ],
                        [
                            "d_hid",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_223": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_224": {
                "variable": {
                    "value": "self.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_241": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(d_hid)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_242": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(d_hid)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_248": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "std_249": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_262": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_283": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2)) / self.temper",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "torch.bmm(q_out, k_out.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "q_out + k_out",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "attn",
                            "Method Argument"
                        ],
                        [
                            "attn",
                            "Method Argument"
                        ],
                        [
                            "attn",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_295": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_299": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.size()",
                            "Call"
                        ],
                        [
                            "k.size()",
                            "Call"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.size()",
                            "Call"
                        ],
                        [
                            "k.size()",
                            "Call"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_300": {
                "variable": {
                    "value": "self.ff_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "ff_drop_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_344": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lin(q)",
                            "Call"
                        ],
                        [
                            "self.ff_dropout(q_out)",
                            "Call"
                        ],
                        [
                            "self.elu(q_out)",
                            "Call"
                        ],
                        [
                            "self._fc(self.linear1, q, k, use_elu=False)",
                            "Call"
                        ],
                        [
                            "self._fc(self.linear1, q, k)",
                            "Call"
                        ],
                        [
                            "self._fc(self.linear2, q_out, k_out, use_elu=False)",
                            "Call"
                        ],
                        [
                            "lin(q)",
                            "Call"
                        ],
                        [
                            "self.ff_dropout(q_out)",
                            "Call"
                        ],
                        [
                            "self.elu(q_out)",
                            "Call"
                        ],
                        [
                            "self._fc(self.linear1, q)",
                            "Call"
                        ],
                        [
                            "q_out.expand(batch, sent_len, sent_len)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k_out.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_386": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_389": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.size()",
                            "Call"
                        ],
                        [
                            "k.size()",
                            "Call"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_390": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.size()",
                            "Call"
                        ],
                        [
                            "k.size()",
                            "Call"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_391": {
                "variable": {
                    "value": "self.ff_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "ff_drop_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_434": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2)) / self.temper",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "torch.bmm(q_out, k_out.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "q_out + k_out",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "attn",
                            "Method Argument"
                        ],
                        [
                            "attn",
                            "Method Argument"
                        ],
                        [
                            "attn",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_80": {
                "variable": {
                    "value": "self.position_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_n_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_doc_n_words",
                            "variable"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "d_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_graph",
                            "Method Argument"
                        ],
                        [
                            "d_graph",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "ndarray": {
                    "value": "position_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[pos / np.power(10000, 2 * (j // 2) / d_pos_vec) for j in range(d_pos_vec)] if pos != 0 else np.zeros(d_pos_vec) for pos in range(n_position)])",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_184": {
                "variable": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.repeat(n_head, 1, 1)",
                            "Call"
                        ],
                        [
                            "v.repeat(n_head, 1, 1).view(n_head, -1, d_value)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v_s, self.w_vs).view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(outputs, mb_size, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_302": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.size()",
                            "Call"
                        ],
                        [
                            "k.size()",
                            "Call"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.size()",
                            "Call"
                        ],
                        [
                            "k.size()",
                            "Call"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.position_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_graph",
                            "Method Argument"
                        ],
                        [
                            "d_graph",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_241": {
                "*size": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Method Argument"
                        ],
                        [
                            "d_hid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_242": {
                "*size": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Method Argument"
                        ],
                        [
                            "d_hid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_266": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_106": {
                "variable": {
                    "value": "pos_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_gcn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_gcn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_200": {
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=attn_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, mb_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.mean(0, True)",
                            "Call"
                        ],
                        [
                            "self.dropout(outputs)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(outputs + residual)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "mb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_q.size()",
                            "Call"
                        ],
                        [
                            "seq_k.size()",
                            "Call"
                        ],
                        [
                            "q.size()",
                            "Call"
                        ],
                        [
                            "k.size()",
                            "Call"
                        ],
                        [
                            "v.size()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "word-level/neuronlp2/nn/modules/weight_drop_rnn.py": {
        "torch": {
            "ModuleList_26": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "cell_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_18": {
                "*args": {
                    "value": "input_size if l == 0 else hidden_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "word-level/neuronlp2/nn/utils.py": {
        "torch": {
            "tensor_30": {
                "variable": {
                    "value": "rev_order",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rev_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*sorted(enumerate(order), key=lambda x: x[1]))",
                            "Call"
                        ],
                        [
                            "torch.tensor(rev_order, dtype=longtensor.dtype, device=longtensor.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.sort(order)",
                            "Call"
                        ],
                        [
                            "rev_order",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "longtensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "longtensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_35": {
                "variable": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sorted_ls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*sorted(enumerate(ls), key=lambda x: -len(x[1])))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "padding_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_sequence_38": {
                "variable": {
                    "value": "sorted_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sorted_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(i[..., 0].squeeze(-1)).view(-1) for i in sorted_ls]",
                            "ListComp"
                        ],
                        [
                            "pad_sequence(sorted_mask, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_85": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_input.index_select(batch_dim, order)",
                            "Call"
                        ],
                        [
                            "rnn_input",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths",
                            "variable"
                        ],
                        [
                            "lens.tolist()",
                            "Call"
                        ],
                        [
                            "torch.sort(lengths, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_95": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_utils.pack_padded_sequence(rnn_input, lens, batch_first=batch_first)",
                            "Call"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_58": {
                "variable": {
                    "value": "(lens, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_33": {
                "input": {
                    "value": "i[..., 0].squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_62": {
                "variable": {
                    "value": "(_, rev_order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*sorted(enumerate(ls), key=lambda x: -len(x[1])))",
                            "Call"
                        ],
                        [
                            "torch.sort(lengths, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ne_59": {
                "input": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths",
                            "variable"
                        ],
                        [
                            "lens.tolist()",
                            "Call"
                        ],
                        [
                            "torch.sort(lengths, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}