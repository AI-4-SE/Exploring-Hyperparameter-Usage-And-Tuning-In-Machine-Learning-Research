{
    "src/attentions.py": {
        "torch": {
            "sum_53": {
                "variable": {
                    "value": "qk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queries.index_select(dim=-3, index=edges[0]) * keys.index_select(dim=-3, index=edges[1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_60": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spmm_(edges, alpha, l, k, values)",
                            "Call"
                        ],
                        [
                            "fn.dropout(v, p=self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_69": {
                "variable": {
                    "value": "self.ln",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "normalized_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, hidden_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_133": {
                "variable": {
                    "value": "self.path_weight_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_meta_paths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_134": {
                "variable": {
                    "value": "self.path_weight_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_meta_paths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.lin_qkv_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hd_channels * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.lin_qkv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hd_channels * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.lin_kv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hd_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.lin_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hd_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_141": {
                "variable": {
                    "value": "self.mha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SparseAttention(dropout=dropout)] * num_meta_paths * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_171": {
                "variable": {
                    "value": "self.lin_kv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_channels, hd_channels * 2)] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_172": {
                "variable": {
                    "value": "self.lin_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_channels, hd_channels)] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_174": {
                "variable": {
                    "value": "self.mha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SparseAttention(dropout=dropout)] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GELU_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_133": {
                "*size": {
                    "value": "num_meta_paths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_134": {
                "*size": {
                    "value": "num_meta_paths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hd_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hd_channels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/cnf.py": {
        "torch": {
            "device_35": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ones_like_42": {
                "variable": {
                    "value": "val_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_pos[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_43": {
                "variable": {
                    "value": "val_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_neg[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_163": {
                "variable": {
                    "value": "xv",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.num_variables, var_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "pos_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.edge_index_pos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "variable": {
                    "value": "neg_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.edge_index_neg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "[[self.xc.size(0)], [self.xv.size(0)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_164": {
                "size": {
                    "value": "(self.num_clauses, cls_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "[[self.xv.size(0)], [self.xv.size(0)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "data": {
                    "value": "[[self.xc.size(0)], [self.xc.size(0)]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/conflict.py": {
        "torch": {
            "cat_10": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([0]), torch.nonzero(rows[1:] - rows[:-1], as_tuple=True)[0] + 1, torch.tensor([len(cols)])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_18": {
                "variable": {
                    "value": "(u, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([t, s])",
                    "type": "Call",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.max(adj[0]).item() + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unique_13": {
                "input": {
                    "value": "torch.cat([cols[s[i]:s[i + 1]] for i in clauses])",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_5": {
                "input": {
                    "value": "clauses",
                    "type": "variable",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_13": {
                "tensors": {
                    "value": "[cols[s[i]:s[i + 1]] for i in clauses]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_18": {
                "tensors": {
                    "value": "[t, s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "nonzero_24": {
                "input": {
                    "value": "clauses",
                    "type": "variable",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_27": {
                "indices": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "torch.ones(torch.max(adj[0]).item() + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_10": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_12": {
                "data": {
                    "value": "[len(cols)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_25": {
                "input": {
                    "value": "adj[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "torch.max(adj[0]).item() + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_28": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(adj, torch.ones(torch.max(adj[0]).item() + 1)) @ v",
                            "BinOp"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_11": {
                "input": {
                    "value": "rows[1:] - rows[:-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_27": {
                "input": {
                    "value": "adj[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/data.py": {
        "torch": {
            "load_59": {
                "variable": {
                    "value": "(self.data, self.sat, self.num_literals, self.num_clauses)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(self.processed_dir, self.processed_file_names)",
                            "Call"
                        ],
                        [
                            "download_url(self.url.format(name), self.raw_dir)",
                            "Call"
                        ],
                        [
                            "download_url(self.url.format(name), self.raw_dir)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.raw_dir, f)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_95": {
                "variable": {
                    "value": "sat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(fs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "num_literals",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "num_literals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(num_literals)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "num_clauses",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "num_clauses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(num_clauses)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_119": {
                "obj": {
                    "value": "[data_list, sat, num_literals, num_clauses]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(self.processed_dir, self.processed_file_names)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/evaluation.py": {
        "torch": {
            "device_19": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/hybrid_cdcl.py": {
        "torch": {
            "cat_22": {
                "tensors": {
                    "value": "[cp, cn]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_22": {
                "input": {
                    "value": "torch.cat([cp, cn])",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_55": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/layers.py": {
        "torch": {
            "ModuleList_21": {
                "modules": {
                    "value": "(copy.deepcopy(module) for i in range(k))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "LayerNorm_34": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.var_path_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_meta_paths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.cls_path_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_meta_paths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.var_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.cls_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "xv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.var_embedding(xv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "xc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cls_embedding(xc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_111": {
                "variable": {
                    "value": "xv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sublayer_var(xv, lambda x: self._attention_meta_path(x, meta_paths_var, self.self_var_attentions, self.var_path_weights))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "xc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sublayer_cls(xc, lambda x: self._attention_meta_path(x, meta_paths_cls, self.self_cls_attentions, self.cls_path_weights))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_145": {
                "variable": {
                    "value": "self.ff_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.ff_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_193": {
                "variable": {
                    "value": "self.att_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(out_channels, heads, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_194": {
                "variable": {
                    "value": "self.att_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(out_channels, heads, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_250": {
                "variable": {
                    "value": "alpha_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin_l(x_l)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.att_l",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_323": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.edge_score(adj=adj, a_l=alpha[0], a_r=alpha[1])",
                            "Call"
                        ],
                        [
                            "(score, score_)",
                            "Tuple"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "variable": {
                    "value": "self.lin_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_190": {
                "variable": {
                    "value": "self.lin_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self.lin_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_197": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(out_channels * heads, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_253": {
                "variable": {
                    "value": "alpha_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin_r(x_r)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.att_r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_254": {
                "variable": {
                    "value": "alpha_r_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin_l(x_l)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.att_r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_255": {
                "variable": {
                    "value": "alpha_l_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin_r(x_r)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.att_l",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_258": {
                "variable": {
                    "value": "alpha_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin_l(x_l)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.att_r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_326": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(alpha_l, alpha_r)",
                            "Tuple"
                        ],
                        [
                            "self._alpha",
                            "Attribute"
                        ],
                        [
                            "kwargs.get('alpha', Pr.empty)",
                            "Call"
                        ],
                        [
                            "fn.leaky_relu(score, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, adj[1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self._attention(adj, score)",
                            "Call"
                        ],
                        [
                            "self._attention(adj, score[0])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_345": {
                "variable": {
                    "value": "out_l",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(m, c2, self.heads)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_66": {
                "*size": {
                    "value": "num_meta_paths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_67": {
                "*size": {
                    "value": "num_meta_paths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_193": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "heads",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_194": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "heads",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_199": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(out_channels, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_104": {
                "input": {
                    "value": "att_layers[i](x, meta_paths[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_197": {
                "*size": {
                    "value": "out_channels * heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_154": {
                "input": {
                    "value": "self.ff_v(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_155": {
                "input": {
                    "value": "self.ff_c(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_199": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_353": {
                "tensors": {
                    "value": "(adj[1], adj[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/linalg.py": {
        "torch": {
            "tensor_77": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[m], [n]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "adj_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[adj + offset * i for i in range(heads)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[m], [n]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "adj_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[adj[i] + offset * i for i in range(heads)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_99": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "vs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "value.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss.py": {
        "torch": {
            "cat_34": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj_pos[0], adj_neg[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "xe",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.exp(p * v)[adj_pos[1]], torch.exp(p * nv)[adj_neg[1]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_36": {
                "variable": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((v[adj_pos[1]], nv[adj_neg[1]]))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "xe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.exp(p * v)[adj_pos[1]], torch.exp(p * nv)[adj_neg[1]]))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_134": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "xv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1], [0.2], [0.7], [0.9]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "edge_index_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 1, 2], [0, 1, 2, 3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "edge_index_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xp, xn)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_19": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj_pos[0], adj_neg[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "div_39": {
                "input": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(torch.cat((v[adj_pos[1]], nv[adj_neg[1]])), xe)",
                            "Call"
                        ],
                        [
                            "scatter(numerator, idx, reduce='sum')",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dominator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scatter(xe, idx, reduce='sum')",
                            "Call"
                        ]
                    ]
                }
            },
            "log_109": {
                "variable": {
                    "value": "log_smooth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sm + 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_141": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            [
                                100,
                                200,
                                300,
                                400,
                                500,
                                600,
                                700,
                                800,
                                900
                            ],
                            "Call"
                        ]
                    ]
                }
            },
            "cat_36": {
                "tensors": {
                    "value": "(v[adj_pos[1]], nv[adj_neg[1]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mse_loss_114": {
                "input": {
                    "value": "sm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "smooth_max(x, 30)",
                            "Call"
                        ],
                        [
                            "smooth_max_(v, adj_pos, adj_neg, self.p)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "(torch.ones(clause_count) + 0.1).to(sm.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_135": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(i)",
                            "Call"
                        ],
                        [
                            "torch.cat((xp, xn))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(p * x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_135": {
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(p * x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_110": {
                "input": {
                    "value": "log_smooth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(sm + 0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_143": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(i)",
                            "Call"
                        ],
                        [
                            "torch.cat((xp, xn))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_35": {
                "input": {
                    "value": "p * nv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_66": {
                "input": {
                    "value": "10 * (sm - 0.45)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_79": {
                "input": {
                    "value": "self.a * (0.5 - x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_114": {
                "*size": {
                    "value": "clause_count",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models.py": {
        "torch": {
            "ModuleList_22": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(channels[i], channels[i + 1], channels[i + 1], args.num_meta_paths, args.self_att_heads, args.cross_att_heads, args.drop_rate) for i in range(len(channels) - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_31": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_65": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DecoderLayer(channels[i], channels[i + 1], channels[i + 1], args.cross_att_heads, args.drop_rate) for i in range(len(channels) - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_73": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.last_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_83": {
                "variable": {
                    "value": "xv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.last_layer(xv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "input": {
                    "value": "xv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigmoid(self.last_layer(xv))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_17": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models2.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.emb_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[int(n) for n in args.decoder_channels.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.emb_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[int(n) for n in args.decoder_channels.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ModuleList_18": {
                "variable": {
                    "value": "self.enc_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(in_channels=channels[i], hd_channels=channels[i + 1], heads=args.heads, num_meta_paths=args.num_meta_paths, dropout=args.drop_rate) for i in range(len(channels) - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_25": {
                "variable": {
                    "value": "self.dec_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DecoderLayer(in_channels=channels[i], hd_channels=channels[i + 1], heads=args.heads, dropout=args.drop_rate) for i in range(len(channels) - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_48": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_v(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/optimizer.py": {
        "torch": {
            "Adam_40": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "torch": {
            "cat_54": {
                "variable": {
                    "value": "gr_idx_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([i] * num_cls[i]) for i in range(num_cls.size(0))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "save_142": {
                "obj": {
                    "value": "[sat_valid, sat_test]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(args.save_root, 'result_' + str(args.epoch_num + last_epoch) + '.pickle')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_78": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_138": {
                "input": {
                    "value": "torch.tensor(sat_valid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_139": {
                "input": {
                    "value": "torch.tensor(sat_valid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_grad_enabled_55": {
                "mode": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_detect_anomaly_55": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "data": {
                    "value": "sat_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sat_valid + sat_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_139": {
                "data": {
                    "value": "sat_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sat_valid + sat_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_54": {
                "data": {
                    "value": "[i] * num_cls[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "load_121": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_112": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(root, name + '_' + str(epoch) + '.pickle')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}