{
    "onlstm_cell.py": {
        "tensorflow": {
            "softmax_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(x, axis=axis)",
                            "Call"
                        ],
                        [
                            "tf.cumsum(x, axis=axis)",
                            "Call"
                        ],
                        [
                            "tf.cumsum(x, axis=axis, reverse=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "constant_328": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1, 3, 1], [2, 3, 2]], [[2, 3, 4], [2, 3, 2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_331": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 2, 3, 4], [2, 3, 4, 5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cumsum_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(x, axis=axis)",
                            "Call"
                        ],
                        [
                            "tf.cumsum(x, axis=axis)",
                            "Call"
                        ],
                        [
                            "tf.cumsum(x, axis=axis, reverse=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "InputSpec_150": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_201": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_208": {
                "variable": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "array_ops.concat([inputs, h], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self._kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_210": {
                "variable": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(array_ops.concat([inputs, h], 1), self._kernel)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, self._bias)",
                            "Call"
                        ],
                        [
                            "gen_array_ops.reshape(gate_inputs[:, self._levels * 2:], [-1, self._levels * 4, self._chunk_size])",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(array_ops.concat([inputs, h], 1), self._kernel)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, self._bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_213": {
                "variable": {
                    "value": "f_master_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_master_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_cumsoftmax(gate_inputs[:, :self._levels], 'l2r')",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(f_master_gate, 2)",
                            "Call"
                        ],
                        [
                            "_cumsoftmax(gate_inputs[:, :self._levels], 'l2r')",
                            "Call"
                        ],
                        [
                            "tf.tile(f_master_gate, [1, self._chunk_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_215": {
                "variable": {
                    "value": "i_master_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_master_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_cumsoftmax(gate_inputs[:, self._levels:self._levels * 2], 'r2l')",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(i_master_gate, 2)",
                            "Call"
                        ],
                        [
                            "_cumsoftmax(gate_inputs[:, self._levels:self._levels * 2], 'r2l')",
                            "Call"
                        ],
                        [
                            "tf.tile(i_master_gate, [1, self._chunk_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_217": {
                "variable": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gate_inputs[:, self._levels * 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self._levels * 4, self._chunk_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_220": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(array_ops.concat([inputs, h], 1), self._kernel)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, self._bias)",
                            "Call"
                        ],
                        [
                            "gen_array_ops.reshape(gate_inputs[:, self._levels * 2:], [-1, self._levels * 4, self._chunk_size])",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(array_ops.concat([inputs, h], 1), self._kernel)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, self._bias)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ],
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_223": {
                "variable": {
                    "value": "forget_bias_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._forget_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "f.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_230": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(value=state, num_or_size_splits=2, axis=one)",
                            "Call"
                        ],
                        [
                            "gen_array_ops.reshape(c, [-1, self._levels, self._chunk_size])",
                            "Call"
                        ],
                        [
                            "array_ops.split(value=state, num_or_size_splits=2, axis=one)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._levels, self._chunk_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_245": {
                "variable": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "add(multiply(c, sigmoid(add(f, forget_bias_tensor))), multiply(sigmoid(i), self._activation(j)))",
                            "Call"
                        ],
                        [
                            "add(add(multiply(overlap, new_c), multiply(f_master_gate - overlap, c)), multiply(i_master_gate - overlap, self._activation(j)))",
                            "Call"
                        ],
                        [
                            "gen_array_ops.reshape(new_c, [-1, self._num_units])",
                            "Call"
                        ],
                        [
                            "add(multiply(c, sigmoid(add(f, forget_bias_tensor))), multiply(sigmoid(i), self._activation(j)))",
                            "Call"
                        ],
                        [
                            "add(add(multiply(overlap, new_c), multiply(f_master_gate - overlap, c)), multiply(i_master_gate - overlap, self._activation(j)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_246": {
                "variable": {
                    "value": "new_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "new_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiply(self._activation(new_c), sigmoid(o))",
                            "Call"
                        ],
                        [
                            "gen_array_ops.reshape(new_h, [-1, self._num_units])",
                            "Call"
                        ],
                        [
                            "multiply(self._activation(new_c), sigmoid(o))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_270": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_277": {
                "variable": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "array_ops.concat([inputs, h], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self._kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_279": {
                "variable": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(array_ops.concat([inputs, h], 1), self._kernel)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, self._bias)",
                            "Call"
                        ],
                        [
                            "gen_array_ops.reshape(gate_inputs[:, self._levels * 2:], [-1, self._levels * 4, self._chunk_size])",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(array_ops.concat([inputs, h], 1), self._kernel)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, self._bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_282": {
                "variable": {
                    "value": "f_master_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_master_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_cumsoftmax(gate_inputs[:, :self._levels], 'l2r')",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(f_master_gate, 2)",
                            "Call"
                        ],
                        [
                            "_cumsoftmax(gate_inputs[:, :self._levels], 'l2r')",
                            "Call"
                        ],
                        [
                            "tf.tile(f_master_gate, [1, self._chunk_size])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self._chunk_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_285": {
                "variable": {
                    "value": "i_master_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_master_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_cumsoftmax(gate_inputs[:, self._levels:self._levels * 2], 'r2l')",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(i_master_gate, 2)",
                            "Call"
                        ],
                        [
                            "_cumsoftmax(gate_inputs[:, self._levels:self._levels * 2], 'r2l')",
                            "Call"
                        ],
                        [
                            "tf.tile(i_master_gate, [1, self._chunk_size])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self._chunk_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_294": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "gate_inputs[:, self._levels * 2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "math_ops.matmul(array_ops.concat([inputs, h], 1), self._kernel)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, self._bias)",
                            "Call"
                        ],
                        [
                            "gen_array_ops.reshape(gate_inputs[:, self._levels * 2:], [-1, self._levels * 4, self._chunk_size])",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(array_ops.concat([inputs, h], 1), self._kernel)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, self._bias)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ],
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_297": {
                "variable": {
                    "value": "forget_bias_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._forget_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "f.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(x, axis=axis)",
                            "Call"
                        ],
                        [
                            "tf.cumsum(x, axis=axis)",
                            "Call"
                        ],
                        [
                            "tf.cumsum(x, axis=axis, reverse=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_206": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ],
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_251": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[new_c, new_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_275": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ],
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_321": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[new_c, new_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "warn_146": {
                "msg": {
                    "value": "%s: Using a concatenated state is slower and will soon be deprecated.  Use state_is_tuple=True.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_209": {
                "values": {
                    "value": "[inputs, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_278": {
                "values": {
                    "value": "[inputs, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_181": {
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}