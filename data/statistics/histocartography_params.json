{
    "histocartography/metrics/metrics.py": {
        "sklearn": {},
        "torch": {
            "as_tensor_27": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(y_true, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_28": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(y_pred, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bincount_30": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nr_classes * y_true + y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.bincount(y)",
                            "Call"
                        ],
                        [
                            "torch.cat((y, torch.zeros(nr_classes * nr_classes - len(y), dtype=torch.long)))",
                            "Call"
                        ],
                        [
                            "y.reshape(nr_classes, nr_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_32": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, torch.zeros(nr_classes * nr_classes - len(y), dtype=torch.long))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "nr_classes * nr_classes - len(y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "histocartography/preprocessing/feature_extraction.py": {
        "sklearn": {
            "euclidean_distances_298": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[r.centroid for r in regions]",
                            "ListComp"
                        ],
                        [
                            "centroids",
                            "Method Argument"
                        ]
                    ]
                },
                "Y": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[r.centroid for r in regions]",
                            "ListComp"
                        ],
                        [
                            "centroids",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "zeros_382": {
                "variable": {
                    "value": "dummy_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_396": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_741": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_742": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_764": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item[1] for item in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(patches)",
                            "Call"
                        ],
                        [
                            "tqdm(image_loader, total=len(image_loader), disable=not self.verbose)",
                            "Call"
                        ],
                        [
                            "image.unfold(0, self.patch_size, self.stride).unfold(1, self.patch_size, self.stride)",
                            "Call"
                        ],
                        [
                            "patches.reshape([-1, n_channels, self.patch_size, self.patch_size])",
                            "Call"
                        ],
                        [
                            "[item[1] for item in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(patches)",
                            "Call"
                        ],
                        [
                            "tqdm(patch_loader, total=len(patch_loader), disable=not self.verbose)",
                            "Call"
                        ],
                        [
                            "[item[1] for item in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(patches)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_800": {
                "variable": {
                    "value": "image_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "image_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "InstanceMapPatchDataset(image=input_image, instance_map=instance_map, resize_size=self.resize_size, patch_size=self.patch_size, stride=self.stride, fill_value=self.fill_value, mean=self.normalizer_mean, std=self.normalizer_std, transform=transform, with_instance_masking=self.with_instance_masking)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self._collate_patches",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_807": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(image_dataset.properties), self.patch_feature_extractor.num_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_885": {
                "variable": {
                    "value": "all_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.stack(all_features)",
                            "Call"
                        ],
                        [
                            "all_features.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.stack(all_features)",
                            "Call"
                        ],
                        [
                            "all_features.permute(1, 2, 0, 3)",
                            "Call"
                        ],
                        [
                            "deepcopy(all_index_filter)",
                            "Call"
                        ],
                        [
                            "pd.DataFrame(np.transpose(np.stack(list(all_features.values()))), columns=list(all_features.keys()))",
                            "Call"
                        ]
                    ]
                }
            },
            "ConstantPad2d_931": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.x_bottom_pad, self.x_top_pad, self.y_bottom_pad, self.y_top_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConstantPad2d_989": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.x_bottom_pad, self.x_top_pad, self.y_bottom_pad, self.y_top_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_1069": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_1070": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_1092": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item[1] for item in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(patches)",
                            "Call"
                        ],
                        [
                            "tqdm(image_loader, total=len(image_loader), disable=not self.verbose)",
                            "Call"
                        ],
                        [
                            "image.unfold(0, self.patch_size, self.stride).unfold(1, self.patch_size, self.stride)",
                            "Call"
                        ],
                        [
                            "patches.reshape([-1, n_channels, self.patch_size, self.patch_size])",
                            "Call"
                        ],
                        [
                            "[item[1] for item in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(patches)",
                            "Call"
                        ],
                        [
                            "tqdm(patch_loader, total=len(patch_loader), disable=not self.verbose)",
                            "Call"
                        ],
                        [
                            "[item[1] for item in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(patches)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_1125": {
                "variable": {
                    "value": "patch_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "patch_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GridPatchDataset(image=input_image, patch_size=self.patch_size, resize_size=self.resize_size, stride=self.stride, mean=self.normalizer_mean, std=self.normalizer_std, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self._collate_patches",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_1132": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(patch_dataset), self.patch_feature_extractor.num_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1193": {
                "variable": {
                    "value": "all_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.stack(all_features)",
                            "Call"
                        ],
                        [
                            "all_features.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.stack(all_features)",
                            "Call"
                        ],
                        [
                            "all_features.permute(1, 2, 0, 3)",
                            "Call"
                        ],
                        [
                            "deepcopy(all_index_filter)",
                            "Call"
                        ],
                        [
                            "pd.DataFrame(np.transpose(np.stack(list(all_features.values()))), columns=list(all_features.keys()))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1218": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item[1] for item in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(patches)",
                            "Call"
                        ],
                        [
                            "tqdm(image_loader, total=len(image_loader), disable=not self.verbose)",
                            "Call"
                        ],
                        [
                            "image.unfold(0, self.patch_size, self.stride).unfold(1, self.patch_size, self.stride)",
                            "Call"
                        ],
                        [
                            "patches.reshape([-1, n_channels, self.patch_size, self.patch_size])",
                            "Call"
                        ],
                        [
                            "[item[1] for item in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(patches)",
                            "Call"
                        ],
                        [
                            "tqdm(patch_loader, total=len(patch_loader), disable=not self.verbose)",
                            "Call"
                        ],
                        [
                            "[item[1] for item in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(patches)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1219": {
                "variable": {
                    "value": "mask_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item[2] for item in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(mask_patches)",
                            "Call"
                        ],
                        [
                            "tqdm(patch_loader, total=len(patch_loader), disable=not self.verbose)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_1253": {
                "variable": {
                    "value": "patch_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "masked_patch_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MaskedGridPatchDataset(image=input_image, mask=mask, resize_size=self.resize_size, patch_size=self.patch_size, stride=self.stride, mean=self.normalizer_mean, std=self.normalizer_std)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self._collate_patches",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_453": {
                "variable": {
                    "value": "model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_1010": {
                "variable": {
                    "value": "mask_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_transform(255 * self.mask_patches[index].numpy().transpose([1, 2, 0]))",
                            "Call"
                        ],
                        [
                            "torch.round(mask_patch).type(torch.uint8)",
                            "Call"
                        ],
                        [
                            "self.mask_patches[index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_447": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_473": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_num_threads_758": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_num_threads_1086": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_1383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_457": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "numel_1306": {
                "input": {
                    "value": "mask_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_patches",
                            "variable"
                        ]
                    ]
                }
            },
            "as_tensor_934": {
                "data": {
                    "value": "np.array(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_934": {
                "input": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_992": {
                "data": {
                    "value": "np.array(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_992": {
                "input": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "histocartography/preprocessing/graph_builders.py": {
        "sklearn": {
            "kneighbors_graph_379": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_node_centroids(instance_map)",
                            "Call"
                        ],
                        [
                            "np.empty((len(regions), 2))",
                            "Call"
                        ],
                        [
                            "graph.ndata[CENTROID]",
                            "Subscript"
                        ]
                    ]
                },
                "n_neighbors": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "distance",
                    "type": "str",
                    "possible_values": []
                },
                "include_self": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "empty_296": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(regions)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_321": {
                "variable": {
                    "value": "instance_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(regions)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_36": {
                "n": {
                    "value": "A.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_190": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_201": {
                "variable": {
                    "value": "normalized_centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_node_centroids(instance_map)",
                            "Call"
                        ],
                        [
                            "np.empty((len(regions), 2))",
                            "Call"
                        ],
                        [
                            "graph.ndata[CENTROID]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_213": {
                "variable": {
                    "value": "concat_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, normalized_centroids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "histocartography/preprocessing/stain_normalizers.py": {
        "sklearn": {
            "DictionaryLearning_470": {
                "variable": {
                    "value": "dict_learner",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "self.lambda_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "fit_algorithm": {
                    "value": "lars",
                    "type": "str",
                    "possible_values": []
                },
                "transform_algorithm": {
                    "value": "lasso_lars",
                    "type": "str",
                    "possible_values": []
                },
                "transform_n_nonzero_coefs": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optical_density.T.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "positive_dict": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "examples/cell_graph_explainer.py": {
        "torch": {
            "is_available_24": {
                "variable": {
                    "value": "IS_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/masked_patch_feature_extraction_from_layer.py": {
        "torch": {
            "AdaptiveAvgPool2d_51": {
                "variable": {
                    "value": "avg_pooler",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "feat_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_52": {
                "variable": {
                    "value": "feat_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "histocartography/interpretability/base_explainer.py": {
        "torch": {
            "is_available_31": {
                "variable": {
                    "value": "self.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_32": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if self.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "histocartography/interpretability/grad_cam.py": {
        "torch": {
            "stack_114": {
                "variable": {
                    "value": "forwards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.forward_hook",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(reversed(self.backward_hook))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_198": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_weights(class_idx, scores)",
                            "Call"
                        ],
                        [
                            "[a.squeeze_(0).mul_(torch.relu(g.squeeze(0))).sum(axis=0) for (a, g) in zip(alpha, self.backward_hook)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(weights, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_291": {
                "variable": {
                    "value": "node_importances",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_class_importances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_124": {
                "variable": {
                    "value": "batch_cams",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_cams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(weights.unsqueeze(0).repeat(num_nodes, 1, 1) * forwards.squeeze(0)).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "batch_cams.cuda()",
                            "Call"
                        ],
                        [
                            "F.relu(batch_cams, inplace=True)",
                            "Call"
                        ],
                        [
                            "self._normalize(batch_cams)",
                            "Call"
                        ],
                        [
                            "batch_cams.mean(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_194": {
                "input": {
                    "value": "g.squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "histocartography/interpretability/graph_pruning_explainer.py": {
        "torch": {
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_140": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sub_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.adjacency_matrix().to_dense().unsqueeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sub_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.ndata[GNN_NODE_FEAT_IN].unsqueeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_146": {
                "variable": {
                    "value": "init_pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(graph)",
                            "Call"
                        ],
                        [
                            "init_logits.cpu().detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_146": {
                "variable": {
                    "value": "init_pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_244": {
                "variable": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "init_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Softmax()(init_logits)",
                            "Call"
                        ],
                        [
                            "init_probs.numpy().squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_274": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.mask, self.node_mask]",
                            "List"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "train_params['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_params",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "train_params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_params",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_284": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(num_nodes, num_nodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_307": {
                "variable": {
                    "value": "node_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(num_nodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_391": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred.unsqueeze(dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_186": {
                "variable": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "explainer()",
                            "Call"
                        ],
                        [
                            "init_logits.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_186": {
                "variable": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_295": {
                "variable": {
                    "value": "mask_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(num_nodes, num_nodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_259": {
                "*size": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj.size()[1]",
                            "Subscript"
                        ],
                        [
                            "num_nodes",
                            "Method Argument"
                        ],
                        [
                            "num_nodes",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj.size()[1]",
                            "Subscript"
                        ],
                        [
                            "num_nodes",
                            "Method Argument"
                        ],
                        [
                            "num_nodes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_260": {
                "n": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj.size()[1]",
                            "Subscript"
                        ],
                        [
                            "num_nodes",
                            "Method Argument"
                        ],
                        [
                            "num_nodes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_363": {
                "tensors": {
                    "value": "self.x.shape[-1] * [node_mask]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_363": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_379": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_381": {
                "input": {
                    "value": "torch.sum(cross_entropy, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_394": {
                "input": {
                    "value": "torch.FloatTensor([self.init_probs.shape[1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_401": {
                "input": {
                    "value": "node_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.FloatTensor(num_nodes))",
                            "Call"
                        ],
                        [
                            "self.sigmoid(self.node_mask, t=10)",
                            "Call"
                        ],
                        [
                            "nn.ReLU()(self.node_mask)",
                            "Call"
                        ],
                        [
                            "self._get_node_feats_mask()",
                            "Call"
                        ],
                        [
                            "self._get_node_feats_mask()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_406": {
                "input": {
                    "value": "node_ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-node_mask * torch.log(node_mask) - (1 - node_mask) * torch.log(1 - node_mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_184": {
                "tensors": {
                    "value": "masked_feats.shape[-1] * [node_importance]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_184": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_358": {
                "input": {
                    "value": "-t * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_381": {
                "input": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_probs * log_output",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_405": {
                "input": {
                    "value": "1 - node_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU6_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "histocartography/interpretability/lrp_gnn_explainer.py": {
        "torch": {
            "zeros_like_18": {
                "variable": {
                    "value": "init_relevance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(deepcopy(graph)).squeeze()",
                            "Call"
                        ],
                        [
                            "self._apply_lrp(graph)",
                            "Call"
                        ],
                        [
                            "torch_to_numpy(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_21": {
                "variable": {
                    "value": "node_importance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_importance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.lrp(init_relevance)",
                            "Call"
                        ],
                        [
                            "torch.sum(node_importance, dim=1)",
                            "Call"
                        ],
                        [
                            "self._apply_lrp(graph)",
                            "Call"
                        ],
                        [
                            "torch_to_numpy(node_importance)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "histocartography/ml/layers/constants.py": {
        "torch": {
            "mean_88": {
                "variable": {
                    "value": "h_mean_squares",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_89": {
                "variable": {
                    "value": "h_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_mean_squares - h_mean * h_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PReLU_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_72": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_84": {
                "input": {
                    "value": "aggregate_var(h) + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_54": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_58": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_76": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_80": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "histocartography/ml/layers/dense_gin_layer.py": {
        "torch": {
            "matmul_94": {
                "variable": {
                    "value": "h_k_N",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dgl.unbatch(adj)",
                            "Call"
                        ],
                        [
                            "adj[0].adjacency_matrix().to_dense().unsqueeze(dim=0).to(h.device)",
                            "Call"
                        ],
                        [
                            "adj / degree",
                            "BinOp"
                        ],
                        [
                            "adj.float() + torch.eye(adj.size(1)).to(adj.device)",
                            "BinOp"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_99": {
                "variable": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp(h_k_N)",
                            "Call"
                        ],
                        [
                            "h_k.view(bs, n_nodes, self.out_dim)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_99": {
                "variable": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_88": {
                "n": {
                    "value": "adj.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "histocartography/ml/layers/gin_layer.py": {
        "torch": {
            "relu_101": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes.data[GNN_NODE_FEAT_IN]",
                            "Subscript"
                        ],
                        [
                            "self.mlp(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "g.ndata[GNN_NODE_FEAT_OUT]",
                            "Subscript"
                        ],
                        [
                            "h * snorm_n[:, None]",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_149": {
                "variable": {
                    "value": "adjacency_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.adjacency_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_156": {
                "variable": {
                    "value": "contrib",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adjacency_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(self.adjacency_matrix, min=0)",
                            "Call"
                        ],
                        [
                            "torch.div(adjacency_matrix, self.in_degrees.to(adjacency_matrix.device))",
                            "Call"
                        ],
                        [
                            "adjacency_matrix + torch.eye(self.adjacency_matrix.shape[0]).to(relevance_score.device)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rel_unnorm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(self.input_features, adjacency_matrix.t()) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "relevance_score / rel_unnorm.t()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm1d_66": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "div_151": {
                "variable": {
                    "value": "adjacency_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adjacency_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(self.adjacency_matrix, min=0)",
                            "Call"
                        ],
                        [
                            "torch.div(adjacency_matrix, self.in_degrees.to(adjacency_matrix.device))",
                            "Call"
                        ],
                        [
                            "adjacency_matrix + torch.eye(self.adjacency_matrix.shape[0]).to(relevance_score.device)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.in_degrees.to(adjacency_matrix.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_153": {
                "n": {
                    "value": "self.adjacency_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_154": {
                "input": {
                    "value": "self.input_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "adjacency_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "histocartography/ml/layers/mlp.py": {
        "torch": {
            "ModuleList_63": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_93": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.dims[layer_id + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_188": {
                "variable": {
                    "value": "pos_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mlp[layer_id][0].weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_193": {
                "variable": {
                    "value": "contrib",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_unnorm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(self.forward_activations[layer_id], pos_weights.t()) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "relevance_score / rel_unnorm",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "pos_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(self.mlp[layer_id][0].weight, min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "self.dims[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dims[layer_id + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_96": {
                "p": {
                    "value": "self.dropout[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_189": {
                "input": {
                    "value": "self.forward_activations[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pos_weights.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "histocartography/ml/layers/multi_layer_gnn.py": {
        "torch": {
            "ModuleList_55": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_90": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * (num_layers * output_dim // 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "g.ndata[GNN_NODE_FEAT_OUT]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[h.squeeze() for h in h_concat]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[h.squeeze() for h in h_concat]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[h.squeeze() for h in h_concat]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_123": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "self.att(alpha).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(alpha, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "histocartography/ml/layers/pna_layer.py": {
        "torch": {
            "ModuleList_82": {
                "variable": {
                    "value": "self.towers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.mixing_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(out_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.attn_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * out_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_148": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.pretrans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MLP(in_dim=2 * in_dim, hidden_dim=out_dim, out_dim=out_dim, num_layers=pretrans_layers, act='relu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.posttrans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MLP(in_dim=len(aggregators) * len(scalers) * out_dim + in_dim, hidden_dim=out_dim, out_dim=out_dim, num_layers=posttrans_layers, act='relu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edges.src[GNN_NODE_FEAT_IN], edges.dst[GNN_NODE_FEAT_IN]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aggregate(h) for aggregate in self.aggregators]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, g.ndata[GNN_NODE_FEAT_IN]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_216": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(h) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata[GNN_NODE_FEAT_IN]], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "h * snorm_n[:, None]",
                            "BinOp"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "h_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tower(g, h[:, n_tower * self.input_tower:(n_tower + 1) * self.input_tower]) for (n_tower, tower) in enumerate(self.towers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "h_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tower(g, h) for tower in self.towers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "in_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "histocartography/ml/models/base_model.py": {
        "torch": {
            "load_67": {
                "f": {
                    "value": "os.path.join(checkpoint_path, model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "histocartography/ml/models/cell_graph_model.py": {
        "torch": {}
    },
    "histocartography/ml/models/hact_model.py": {
        "torch": {
            "cat_211": {
                "variable": {
                    "value": "tissue_graph.ndata[GNN_NODE_FEAT_IN]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ll_h_concat, tissue_graph.ndata[GNN_NODE_FEAT_IN])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_178": {
                "variable": {
                    "value": "h_agg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assignment[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "feats[intervals[i - 1]:intervals[i], :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_183": {
                "tensors": {
                    "value": "ll_h_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self._compute_assigned_feats(cell_graph, ll_h, assignment_matrix)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "histocartography/ml/models/hovernet.py": {
        "torch": {
            "softmax_61": {
                "variable": {
                    "value": "soft_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logi_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_out_np(npx)",
                            "Call"
                        ],
                        [
                            "logi_np.permute([0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_62": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_np[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prob_np, pred_hv]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_136": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "F.pad(x, padding, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'blk_' + str(i) + 'preact_bna')(l)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'blk_' + str(i) + 'conv1')(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'blk_' + str(i) + 'conv2')(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pad_val, pad_val, pad_val, pad_val)",
                            "Tuple"
                        ],
                        [
                            "(pad_val_start, pad_val_end, pad_val_start, pad_val_end)",
                            "Tuple"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_231": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm2d_343": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_344": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_368": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_output",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pad_val, pad_val, pad_val, pad_val)",
                            "Tuple"
                        ],
                        [
                            "(pad_val_start, pad_val_end, pad_val_start, pad_val_end)",
                            "Tuple"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_331": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "histocartography/ml/models/tissue_graph_model.py": {
        "torch": {}
    },
    "histocartography/preprocessing/nuclei_concept_extraction.py": {
        "torch": {}
    },
    "histocartography/preprocessing/nuclei_extraction.py": {
        "torch": {
            "is_available_63": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_64": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_88": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(__file__), CHECKPOINT_PATH, pretrained_data + '.pt')",
                            "Call"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_128": {
                "variable": {
                    "value": "image_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "image_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageToPatchDataset(input_image)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_133": {
                "variable": {
                    "value": "pred_map",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(image_dataset.max_x_coord, image_dataset.max_y_coord, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_125": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[1] for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "histocartography/utils/io.py": {
        "torch": {
            "from_numpy_46": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(h5_object[()])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "histocartography/utils/torch.py": {
        "torch": {}
    },
    "test/interpretability/test_gnnexplainer.py": {
        "torch": {
            "is_available_16": {
                "variable": {
                    "value": "IS_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/interpretability/test_graphgradcam.py": {
        "torch": {
            "is_available_17": {
                "variable": {
                    "value": "IS_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/interpretability/test_graphlrp.py": {
        "torch": {
            "is_available_16": {
                "variable": {
                    "value": "IS_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/metrics/test_segmentation_metrics.py": {
        "torch": {}
    },
    "test/ml/test_cell_graph_model.py": {
        "torch": {
            "is_available_12": {
                "variable": {
                    "value": "IS_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/ml/test_hact_model.py": {
        "torch": {
            "is_available_13": {
                "variable": {
                    "value": "IS_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_51": {
                "variable": {
                    "value": "assignment_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(tissue_graph.number_of_nodes(), cell_graph.number_of_nodes())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_95": {
                "variable": {
                    "value": "assignment_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(tissue_graph.number_of_nodes(), cell_graph.number_of_nodes())",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "test/ml/test_multi_layer_gnn.py": {
        "torch": {
            "rand_33": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_58": {
                "variable": {
                    "value": "adjacency",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(100, 100)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_59": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_85": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test/ml/test_tissue_graph_model.py": {
        "torch": {
            "is_available_13": {
                "variable": {
                    "value": "IS_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/preprocessing/test_feature_extraction.py": {
        "torch": {}
    },
    "test/preprocessing/test_graph_builders.py": {
        "torch": {}
    },
    "test/preprocessing/test_io.py": {
        "torch": {}
    }
}