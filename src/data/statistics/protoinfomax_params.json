{
    "notebooks/cal_methods.py": {
        "sklearn": {
            "log_loss_200": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "brier_score_loss_203": {
                "variable": {
                    "value": "brier",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_prob": {
                    "value": "y_prob_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([probs[i, idx] for (i, idx) in enumerate(y_true)])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_loss_129": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "true.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "scaled_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.predict(probs, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_192": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argmax(probs, axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "notebooks/utility/evaluation.py": {
        "sklearn": {
            "accuracy_score_50": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_test",
                            "Name"
                        ],
                        [
                            "np.array([[np.where(r == 1)[0][0]] for r in y_true])",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argmax(y_probs, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_82": {
                "y_true": {
                    "value": "y_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[np.where(r == 1)[0][0]] for r in y_val])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_preds_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argmax(y_probs_val, axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/eval_imax_intent_n2.py": {
        "sklearn": {},
        "torch": {
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_525": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([c])",
                            "Call"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_526": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([c])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_528": {
                "variable": {
                    "value": "valid_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TestLoader(dev_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_529": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TestLoader(test_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_651": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_654": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('~/results/', 'imax_intent_k100.best.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_656": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('~/results/', 'imax_intent_k100_%s.pth' % ep)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_473": {
                "ndarray": {
                    "value": "self.Y_neg_onehot.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_239": {
                "ndarray": {
                    "value": "self.Y_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/eval_imax_kw.py": {
        "sklearn": {},
        "torch": {
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_634": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([c])",
                            "Call"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_635": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([c])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_637": {
                "variable": {
                    "value": "valid_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TestLoader(dev_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_638": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TestLoader(test_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_764": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_767": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('~/results/', 'imax_kw_sentiment_k100.best.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_769": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('~/results/', 'imax_kw_sentiment_k100_%s.pth' % ep)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_581": {
                "ndarray": {
                    "value": "self.Y_neg_onehot.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_309": {
                "ndarray": {
                    "value": "self.Y_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/eval_imax_kw_intent_n2.py": {
        "sklearn": {},
        "torch": {
            "device_59": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_607": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([c])",
                            "Call"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_608": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([c])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_610": {
                "variable": {
                    "value": "valid_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TestLoader(dev_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_611": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TestLoader(test_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_738": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_741": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('~/results/', 'imax_kw_intent_k100.best.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_743": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('~/results/', 'imax_kw_intent_k100_%s.pth' % ep)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_553": {
                "ndarray": {
                    "value": "self.Y_neg_onehot.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_271": {
                "ndarray": {
                    "value": "self.Y_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/eval_oproto.py": {
        "sklearn": {},
        "torch": {
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_527": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([c])",
                            "Call"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_528": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([c])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_530": {
                "variable": {
                    "value": "valid_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TestLoader(dev_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_531": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TestLoader(test_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_652": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_655": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('~/results/', 'oproto_sentiment_k100.best.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_657": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('~/results/', 'oproto_sentiment_k100_%s.pth' % ep)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_475": {
                "ndarray": {
                    "value": "self.Y_neg_onehot.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_245": {
                "ndarray": {
                    "value": "self.Y_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/eval_oproto_intent_n2.py": {
        "sklearn": {},
        "torch": {
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_521": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([c])",
                            "Call"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_522": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([c])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_524": {
                "variable": {
                    "value": "valid_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TestLoader(dev_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_525": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TestLoader(test_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_649": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_652": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('~/results/', 'oproto_intent_k100.best.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_654": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('~/results/', 'oproto_intent_k100_%s.pth' % ep)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_468": {
                "ndarray": {
                    "value": "self.Y_neg_onehot.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_237": {
                "ndarray": {
                    "value": "self.Y_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/eval_proto.py": {
        "sklearn": {},
        "torch": {
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_527": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([c])",
                            "Call"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_528": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([c])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_530": {
                "variable": {
                    "value": "valid_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TestLoader(dev_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_531": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TestLoader(test_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_653": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_656": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('~/results/', 'proto_sentiment_k100.best.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_658": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('~/results/', 'proto_sentiment_k100_%s.pth' % ep)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_475": {
                "ndarray": {
                    "value": "self.Y_neg_onehot.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_245": {
                "ndarray": {
                    "value": "self.Y_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/eval_proto_intent_n2.py": {
        "sklearn": {},
        "torch": {
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_530": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([c])",
                            "Call"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_531": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([c])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_533": {
                "variable": {
                    "value": "valid_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TestLoader(dev_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_534": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TestLoader(test_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_656": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_659": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('~/results/', 'proto_intent_k100.best.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_661": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('~/results/', 'proto_intent_k100_%s.pth' % ep)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_479": {
                "ndarray": {
                    "value": "self.Y_neg_onehot.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_245": {
                "ndarray": {
                    "value": "self.Y_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_fasttext.py": {
        "sklearn": {},
        "torch": {
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/train_imax_intent.py": {
        "sklearn": {},
        "torch": {
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_601": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_539": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_tr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b",
                            "Name"
                        ],
                        [
                            "np.array([id_tr])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_540": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AmazonLoader(train_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_tr)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_483": {
                "ndarray": {
                    "value": "self.Y_neg_onehot.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_556": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': e, 'state_dict': model.state_dict(), 'optim_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(os.path.join(RSL_PATH, 'imax_intent_k100.best.pth'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_249": {
                "ndarray": {
                    "value": "self.Y_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_imax_kw.py": {
        "sklearn": {},
        "torch": {
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_721": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_655": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_tr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b",
                            "Name"
                        ],
                        [
                            "np.array([id_tr])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_656": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AmazonLoader(train_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_tr)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_595": {
                "ndarray": {
                    "value": "self.Y_neg_onehot.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_672": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': e, 'state_dict': model.state_dict(), 'optim_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(os.path.join(RSL_PATH, 'imax_kw_sentiment_k100.best.pth'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_323": {
                "ndarray": {
                    "value": "self.Y_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_imax_kw_intent.py": {
        "sklearn": {},
        "torch": {
            "device_59": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_685": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_620": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_tr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b",
                            "Name"
                        ],
                        [
                            "np.array([id_tr])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_621": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AmazonLoader(train_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_tr)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_562": {
                "ndarray": {
                    "value": "self.Y_neg_onehot.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_637": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': e, 'state_dict': model.state_dict(), 'optim_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(os.path.join(RSL_PATH, 'imax_kw_intent_k100.best.pth'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_280": {
                "ndarray": {
                    "value": "self.Y_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_oproto.py": {
        "sklearn": {},
        "torch": {
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_594": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_530": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_tr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b",
                            "Name"
                        ],
                        [
                            "np.array([id_tr])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_531": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AmazonLoader(train_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_tr)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_492": {
                "ndarray": {
                    "value": "self.Y_neg_onehot.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_549": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': e, 'state_dict': model.state_dict(), 'optim_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(os.path.join(RSL_PATH, 'oproto_sentiment_k100.best.pth'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_262": {
                "ndarray": {
                    "value": "self.Y_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_oproto_intent.py": {
        "sklearn": {},
        "torch": {
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_575": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_514": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_tr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b",
                            "Name"
                        ],
                        [
                            "np.array([id_tr])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_515": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AmazonLoader(train_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_tr)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_477": {
                "ndarray": {
                    "value": "self.Y_neg_onehot.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_531": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': e, 'state_dict': model.state_dict(), 'optim_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(os.path.join(RSL_PATH, 'oproto_intent_k100.best.pth'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_246": {
                "ndarray": {
                    "value": "self.Y_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_proto.py": {
        "sklearn": {},
        "torch": {
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_594": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_530": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_tr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b",
                            "Name"
                        ],
                        [
                            "np.array([id_tr])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_531": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AmazonLoader(train_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_tr)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_492": {
                "ndarray": {
                    "value": "self.Y_neg_onehot.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_549": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': e, 'state_dict': model.state_dict(), 'optim_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(os.path.join(RSL_PATH, 'proto_sentiment_k100.best.pth'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_262": {
                "ndarray": {
                    "value": "self.Y_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_proto_intent.py": {
        "sklearn": {},
        "torch": {
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_595": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_531": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_tr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b",
                            "Name"
                        ],
                        [
                            "np.array([id_tr])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_532": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AmazonLoader(train_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_tr)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_494": {
                "ndarray": {
                    "value": "self.Y_neg_onehot.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_548": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': e, 'state_dict': model.state_dict(), 'optim_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(os.path.join(RSL_PATH, 'proto_intent_k100.best.pth'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_260": {
                "ndarray": {
                    "value": "self.Y_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/cal_methods.py": {
        "sklearn": {
            "log_loss_200": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_loss_129": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "true.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "scaled_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.predict(probs, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_192": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argmax(probs, axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/utility/evaluation.py": {
        "sklearn": {
            "accuracy_score_50": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_test",
                            "Name"
                        ],
                        [
                            "np.array([[np.where(r == 1)[0][0]] for r in y_true])",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argmax(y_probs, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_82": {
                "y_true": {
                    "value": "y_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[np.where(r == 1)[0][0]] for r in y_val])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_preds_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argmax(y_probs_val, axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "workspace/workspace_cls_kw.py": {
        "sklearn": {}
    },
    "workspace/workspace_intent_kw.py": {
        "sklearn": {}
    },
    "models/model_imax_intent.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_19": {
                "variable": {
                    "value": "self.bce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_21": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.params['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GRU_26": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.params['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.params['hidden_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.params['hidden_size'], self.r).uniform_(-0.1, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.params['hidden_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_43": {
                "variable": {
                    "value": "soft_max_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans_input.contiguous().view(-1, trans_size[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_63": {
                "variable": {
                    "value": "proj_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj(x.view(batch_size * max_text_len, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_64": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.proj(x.view(batch_size * max_text_len, -1)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_89": {
                "variable": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XQ.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XQ, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_90": {
                "variable": {
                    "value": "XS",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XS.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XS, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XQ.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XQ, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "XS.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_116": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_119": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_121": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_122": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_128": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_130": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_132": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_133": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_139": {
                "variable": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_neg",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_141": {
                "variable": {
                    "value": "(x_neg, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_143": {
                "variable": {
                    "value": "hs_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_144": {
                "variable": {
                    "value": "sebd_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_neg, x_neg)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_152": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(1000, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(1, self.params['min_ss_size'], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "x_q_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "y_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_q, y_q, y_q, y_q, y_q, y_q, y_q, y_q, y_q, y_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_170": {
                "variable": {
                    "value": "mean_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "logits * y_q",
                            "BinOp"
                        ],
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_175": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_q_enc.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "x_neg_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "y_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_neg, y_neg, y_neg, y_neg, y_neg, y_neg, y_neg, y_neg, y_neg, y_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_190": {
                "variable": {
                    "value": "mean_logits_ood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(encoded_prototype.float(), x_neg_enc.float())",
                            "Call"
                        ],
                        [
                            "_logits.squeeze()",
                            "Call"
                        ],
                        [
                            "_logits.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "_logits * y_neg",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_196": {
                "variable": {
                    "value": "_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs_ood",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_229": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_231": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_233": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_234": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_240": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_242": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_244": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_245": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_252": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(1000, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(1, self.params['min_ss_size'], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_258": {
                "variable": {
                    "value": "mean_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "logits * y_q",
                            "BinOp"
                        ],
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_69": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_text_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.cuda.LongTensor(max_text_len, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_69": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_71": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_text_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.LongTensor(max_text_len, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_22": {
                "ndarray": {
                    "value": "w2v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_198": {
                "tensors": {
                    "value": "(labels, _labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_imax_kw_intent.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "pow_14": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.div(X, norm)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_14": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_14": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "div_15": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.div(X, norm)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.pow(X, 2).sum(dim=-1, keepdim=True).sqrt()",
                            "Call"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_25": {
                "variable": {
                    "value": "self.bce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_27": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.params['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GRU_32": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.params['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.params['hidden_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.params['hidden_size'], self.r).uniform_(-0.1, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.params['hidden_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_49": {
                "variable": {
                    "value": "soft_max_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans_input.contiguous().view(-1, trans_size[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_69": {
                "variable": {
                    "value": "proj_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj(x.view(batch_size * max_text_len, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_70": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.proj(x.view(batch_size * max_text_len, -1)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_97": {
                "variable": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XQ.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XQ, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_98": {
                "variable": {
                    "value": "XS",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XS.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XS, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XQ.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XQ, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "XS.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "repeat_interleave_130": {
                "variable": {
                    "value": "kwidf_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kwidf_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwidf_sup.contiguous().view(1000, self.params['min_ss_size'] * 10, -1)",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(kwidf_sup, repeats=self.params['hidden_size'], dim=-1)",
                            "Call"
                        ],
                        [
                            "kwidf_sup.contiguous().view(1000, self.params['min_ss_size'] * 10, self.params['hidden_size'])",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "repeat_interleave_131": {
                "variable": {
                    "value": "kwidf_xq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kwidf_xq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.repeat_interleave(kwidf_xq, repeats=self.params['hidden_size'], dim=-1)",
                            "Call"
                        ],
                        [
                            "kwidf_xq.contiguous().view(100, 10, self.params['hidden_size'])",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "repeat_interleave_132": {
                "variable": {
                    "value": "kwidf_xneg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kwidf_xneg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.repeat_interleave(kwidf_xneg, repeats=self.params['hidden_size'], dim=-1)",
                            "Call"
                        ],
                        [
                            "kwidf_xneg.contiguous().view(100, 10, self.params['hidden_size'])",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_140": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_143": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_145": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_146": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_152": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_154": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_156": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_157": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_163": {
                "variable": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_neg",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_165": {
                "variable": {
                    "value": "(x_neg, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_167": {
                "variable": {
                    "value": "hs_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_168": {
                "variable": {
                    "value": "sebd_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_neg, x_neg)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_179": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(1000, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(100, self.params['min_ss_size'], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_186": {
                "variable": {
                    "value": "kw_sup_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kw_sup * kwidf_sup",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_193": {
                "variable": {
                    "value": "kw_xq_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kw_xq * kwidf_xq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_200": {
                "variable": {
                    "value": "kw_xneg_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kw_xneg * kwidf_xneg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "x_q_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "y_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_q, y_q, y_q, y_q, y_q, y_q, y_q, y_q, y_q, y_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "kw_xq_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kw_xq_prototype, kw_xq_prototype, kw_xq_prototype, kw_xq_prototype, kw_xq_prototype, kw_xq_prototype, kw_xq_prototype, kw_xq_prototype, kw_xq_prototype, kw_xq_prototype)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "kw_xneg_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kw_xneg_prototype, kw_xneg_prototype, kw_xneg_prototype, kw_xneg_prototype, kw_xneg_prototype, kw_xneg_prototype, kw_xneg_prototype, kw_xneg_prototype, kw_xneg_prototype, kw_xneg_prototype)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_228": {
                "variable": {
                    "value": "mean_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "logits * y_q",
                            "BinOp"
                        ],
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_236": {
                "variable": {
                    "value": "mean_logits_c2c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_c2c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(kw_sup_prototype.float(), kw_xq_prototype.float())",
                            "Call"
                        ],
                        [
                            "logits_c2c.squeeze()",
                            "Call"
                        ],
                        [
                            "logits_c2c.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "logits_c2c * y_q",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_244": {
                "variable": {
                    "value": "mean_logits_c2s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_c2s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(c2s_sup.float(), c2s_xq.float())",
                            "Call"
                        ],
                        [
                            "logits_c2s.squeeze()",
                            "Call"
                        ],
                        [
                            "logits_c2s.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "logits_c2s * y_q",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_250": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_q_enc.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "x_neg_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "y_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_neg, y_neg, y_neg, y_neg, y_neg, y_neg, y_neg, y_neg, y_neg, y_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_269": {
                "variable": {
                    "value": "mean_logits_ood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(encoded_prototype.float(), x_neg_enc.float())",
                            "Call"
                        ],
                        [
                            "_logits.squeeze()",
                            "Call"
                        ],
                        [
                            "_logits.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "_logits * y_neg",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_276": {
                "variable": {
                    "value": "mean_logits_c2c_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits_c2c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(kw_sup_prototype.float(), kw_xneg_prototype.float())",
                            "Call"
                        ],
                        [
                            "_logits_c2c.squeeze()",
                            "Call"
                        ],
                        [
                            "_logits_c2c.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "_logits_c2c * y_neg",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_283": {
                "variable": {
                    "value": "mean_logits_c2s_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits_c2s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(c2s_sup.float(), c2s_xneg.float())",
                            "Call"
                        ],
                        [
                            "_logits_c2s.squeeze()",
                            "Call"
                        ],
                        [
                            "_logits_c2s.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "_logits_c2s * y_neg",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_289": {
                "variable": {
                    "value": "_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs_ood",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_324": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_326": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_328": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_329": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_335": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_337": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_339": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_340": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_346": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(1000, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(100, self.params['min_ss_size'], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_360": {
                "variable": {
                    "value": "mean_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "logits * y_q",
                            "BinOp"
                        ],
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_75": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_text_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.cuda.LongTensor(max_text_len, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_77": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_text_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.LongTensor(max_text_len, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_77": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_28": {
                "ndarray": {
                    "value": "w2v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_291": {
                "tensors": {
                    "value": "(labels, labels, labels, _labels, _labels, _labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_imax_kw_sentiment.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_20": {
                "variable": {
                    "value": "self.bce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_22": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.params['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GRU_27": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.params['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.params['hidden_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.params['hidden_size'], self.r).uniform_(-0.1, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.params['hidden_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "soft_max_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans_input.contiguous().view(-1, trans_size[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_63": {
                "variable": {
                    "value": "proj_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj(x.view(batch_size * max_text_len, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_64": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.proj(x.view(batch_size * max_text_len, -1)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_90": {
                "variable": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XQ.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XQ, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_91": {
                "variable": {
                    "value": "XS",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XS.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XS, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XQ.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XQ, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "XS.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "repeat_interleave_125": {
                "variable": {
                    "value": "kwidf_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kwidf_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwidf_sup.contiguous().view(200, self.params['min_ss_size'] * 10, -1)",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(kwidf_sup, repeats=self.params['hidden_size'], dim=-1)",
                            "Call"
                        ],
                        [
                            "kwidf_sup.contiguous().view(200, self.params['min_ss_size'] * 10, self.params['hidden_size'])",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "repeat_interleave_126": {
                "variable": {
                    "value": "kwidf_xq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kwidf_xq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.repeat_interleave(kwidf_xq, repeats=self.params['hidden_size'], dim=-1)",
                            "Call"
                        ],
                        [
                            "kwidf_xq.contiguous().view(100, 10, self.params['hidden_size'])",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "repeat_interleave_127": {
                "variable": {
                    "value": "kwidf_xneg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kwidf_xneg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.repeat_interleave(kwidf_xneg, repeats=self.params['hidden_size'], dim=-1)",
                            "Call"
                        ],
                        [
                            "kwidf_xneg.contiguous().view(100, 10, self.params['hidden_size'])",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_136": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_139": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_141": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_142": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_148": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_150": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_152": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_153": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_159": {
                "variable": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_neg",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_161": {
                "variable": {
                    "value": "(x_neg, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_163": {
                "variable": {
                    "value": "hs_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_164": {
                "variable": {
                    "value": "sebd_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_neg, x_neg)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_172": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(200, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "x_sup_enc.cpu().data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_180": {
                "variable": {
                    "value": "kw_sup_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kw_sup * kwidf_sup",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_187": {
                "variable": {
                    "value": "kw_xq_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kw_xq * kwidf_xq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_194": {
                "variable": {
                    "value": "kw_xneg_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kw_xneg * kwidf_xneg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "kw_xq_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kw_xq_prototype, kw_xq_prototype)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "kw_xneg_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kw_xneg_prototype, kw_xneg_prototype)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "x_q_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_q_enc, x_q_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "y_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_q, y_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_222": {
                "variable": {
                    "value": "mean_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "logits * y_q",
                            "BinOp"
                        ],
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_230": {
                "variable": {
                    "value": "mean_logits_c2c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_c2c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(kw_sup_prototype.float(), kw_xq_prototype.float())",
                            "Call"
                        ],
                        [
                            "logits_c2c.squeeze()",
                            "Call"
                        ],
                        [
                            "logits_c2c.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "logits_c2c * y_q",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_238": {
                "variable": {
                    "value": "mean_logits_c2s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_c2s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(c2s_sup.float(), c2s_xq.float())",
                            "Call"
                        ],
                        [
                            "logits_c2s.squeeze()",
                            "Call"
                        ],
                        [
                            "logits_c2s.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "logits_c2s * y_q",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_245": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_q_enc.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_250": {
                "variable": {
                    "value": "x_neg_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_neg_enc, x_neg_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "y_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_neg, y_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_264": {
                "variable": {
                    "value": "mean_logits_ood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(encoded_prototype.float(), x_neg_enc.float())",
                            "Call"
                        ],
                        [
                            "_logits.squeeze()",
                            "Call"
                        ],
                        [
                            "_logits.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "_logits * y_neg",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_271": {
                "variable": {
                    "value": "mean_logits_c2c_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits_c2c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(kw_sup_prototype.float(), kw_xneg_prototype.float())",
                            "Call"
                        ],
                        [
                            "_logits_c2c.squeeze()",
                            "Call"
                        ],
                        [
                            "_logits_c2c.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "_logits_c2c * y_neg",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_278": {
                "variable": {
                    "value": "mean_logits_c2s_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits_c2s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(c2s_sup.float(), c2s_xneg.float())",
                            "Call"
                        ],
                        [
                            "_logits_c2s.squeeze()",
                            "Call"
                        ],
                        [
                            "_logits_c2s.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "_logits_c2s * y_neg",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_285": {
                "variable": {
                    "value": "_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs_ood",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_319": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_321": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_323": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_324": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_330": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_332": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_334": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_335": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_342": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(200, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "x_sup_enc.cpu().data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_384": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_386": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_388": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_389": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_395": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_397": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_399": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_400": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_407": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(200, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "x_sup_enc.cpu().data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_69": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_text_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.cuda.LongTensor(max_text_len, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_69": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_71": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_text_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.LongTensor(max_text_len, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "ndarray": {
                    "value": "w2v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_287": {
                "tensors": {
                    "value": "(labels, labels, labels, _labels, _labels, _labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_imax_sentiment.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_19": {
                "variable": {
                    "value": "self.bce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_21": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.params['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GRU_26": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.params['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.params['hidden_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.params['hidden_size'], self.r).uniform_(-0.1, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.params['hidden_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_43": {
                "variable": {
                    "value": "soft_max_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans_input.contiguous().view(-1, trans_size[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_62": {
                "variable": {
                    "value": "proj_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj(x.view(batch_size * max_text_len, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_63": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.proj(x.view(batch_size * max_text_len, -1)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_88": {
                "variable": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XQ.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XQ, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_89": {
                "variable": {
                    "value": "XS",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XS.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XS, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_91": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XQ.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XQ, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "XS.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_115": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_118": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_120": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_121": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_127": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_129": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_131": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_132": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_138": {
                "variable": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_neg",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_140": {
                "variable": {
                    "value": "(x_neg, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_142": {
                "variable": {
                    "value": "hs_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_143": {
                "variable": {
                    "value": "sebd_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_neg, x_neg)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_152": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(200, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "x_sup_enc.cpu().data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "x_q_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_q_enc, x_q_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "y_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_q, y_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_171": {
                "variable": {
                    "value": "mean_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "logits * y_q",
                            "BinOp"
                        ],
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_175": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_q_enc.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "x_neg_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_neg_enc, x_neg_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "y_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_neg, y_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_189": {
                "variable": {
                    "value": "mean_logits_ood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(encoded_prototype.float(), x_neg_enc.float())",
                            "Call"
                        ],
                        [
                            "_logits.squeeze()",
                            "Call"
                        ],
                        [
                            "_logits.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "_logits * y_neg",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs_ood",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_230": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_232": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_234": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_235": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_241": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_243": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_245": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_246": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_253": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(200, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "x_sup_enc.cpu().data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_293": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_295": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_297": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_298": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_304": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_306": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_308": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_309": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_316": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(200, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "x_sup_enc.cpu().data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_68": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_text_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.cuda.LongTensor(max_text_len, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_68": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_70": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_text_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.LongTensor(max_text_len, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_70": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_22": {
                "ndarray": {
                    "value": "w2v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_197": {
                "tensors": {
                    "value": "(labels, _labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_oproto_intent.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_20": {
                "variable": {
                    "value": "self.ent_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_22": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.params['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GRU_27": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.params['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.params['hidden_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.params['hidden_size'], self.r).uniform_(-0.1, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.params['hidden_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "soft_max_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans_input.contiguous().view(-1, trans_size[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_64": {
                "variable": {
                    "value": "proj_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj(x.view(batch_size * max_text_len, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_65": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.proj(x.view(batch_size * max_text_len, -1)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_92": {
                "variable": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XQ.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XQ, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_93": {
                "variable": {
                    "value": "XS",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XS.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XS, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_95": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XQ.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XQ, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "XS.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_121": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_124": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_126": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_127": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_133": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_135": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_137": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_138": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_144": {
                "variable": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_neg",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_146": {
                "variable": {
                    "value": "(x_neg, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_148": {
                "variable": {
                    "value": "hs_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_149": {
                "variable": {
                    "value": "sebd_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_neg, x_neg)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_157": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(1000, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(1, self.params['min_ss_size'], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "x_q_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "y_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_q, y_q, y_q, y_q, y_q, y_q, y_q, y_q, y_q, y_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "y_q_oh",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_q_oh, y_q_oh, y_q_oh, y_q_oh, y_q_oh, y_q_oh, y_q_oh, y_q_oh, y_q_oh, y_q_oh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_179": {
                "variable": {
                    "value": "mean_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_181": {
                "variable": {
                    "value": "mean_logits_soft",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_soft",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.params['softmax_factor'] * logits",
                            "BinOp"
                        ],
                        [
                            "logits_soft * y_q_oh",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "x_neg_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc, x_neg_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_213": {
                "variable": {
                    "value": "mean_logits_ood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(encoded_prototype.float(), x_neg_enc.float())",
                            "Call"
                        ],
                        [
                            "_logits.squeeze()",
                            "Call"
                        ],
                        [
                            "_logits.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_250": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_252": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_254": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_255": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_261": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_263": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_265": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_266": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_273": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(1000, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(1, self.params['min_ss_size'], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_281": {
                "variable": {
                    "value": "mean_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_70": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_text_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.cuda.LongTensor(max_text_len, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_70": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_72": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_text_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.LongTensor(max_text_len, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "ndarray": {
                    "value": "w2v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_196": {
                "input": {
                    "value": "torch.tensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_216": {
                "input": {
                    "value": "torch.tensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_196": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_oproto_sentiment.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_19": {
                "variable": {
                    "value": "self.ent_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_21": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.params['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GRU_26": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.params['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.params['hidden_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.params['hidden_size'], self.r).uniform_(-0.1, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.params['hidden_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "soft_max_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans_input.contiguous().view(-1, trans_size[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_63": {
                "variable": {
                    "value": "proj_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj(x.view(batch_size * max_text_len, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_64": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.proj(x.view(batch_size * max_text_len, -1)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_91": {
                "variable": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XQ.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XQ, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_92": {
                "variable": {
                    "value": "XS",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XS.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XS, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XQ.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XQ, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "XS.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_120": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_123": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_125": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_126": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_132": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_134": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_136": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_137": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_143": {
                "variable": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_neg",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_145": {
                "variable": {
                    "value": "(x_neg, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_147": {
                "variable": {
                    "value": "hs_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_148": {
                "variable": {
                    "value": "sebd_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_neg, x_neg)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_157": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(200, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "x_sup_enc.cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "x_q_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_q_enc, x_q_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "y_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_q, y_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "y_q_oh",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_q_oh, y_q_oh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_179": {
                "variable": {
                    "value": "mean_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_180": {
                "variable": {
                    "value": "mean_logits_soft",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_soft",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.params['softmax_factor'] * logits",
                            "BinOp"
                        ],
                        [
                            "logits_soft * y_q_oh",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "x_neg_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_neg_enc, x_neg_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_215": {
                "variable": {
                    "value": "mean_logits_ood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(encoded_prototype.float(), x_neg_enc.float())",
                            "Call"
                        ],
                        [
                            "_logits.squeeze()",
                            "Call"
                        ],
                        [
                            "_logits.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_252": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_254": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_256": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_257": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_263": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_265": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_267": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_268": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_276": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(200, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "x_sup_enc.cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_319": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_321": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_323": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_324": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_330": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_332": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_334": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_raw_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_335": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_344": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(200, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "x_sup_enc.cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_69": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_text_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.cuda.LongTensor(max_text_len, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_69": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_71": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_text_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.LongTensor(max_text_len, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_22": {
                "ndarray": {
                    "value": "w2v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_196": {
                "input": {
                    "value": "torch.tensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_218": {
                "input": {
                    "value": "torch.tensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_196": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_proto_intent.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_20": {
                "variable": {
                    "value": "self.ent_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_22": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.params['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GRU_27": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.params['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.params['hidden_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.params['hidden_size'], self.r).uniform_(-0.1, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.params['hidden_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "soft_max_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans_input.contiguous().view(-1, trans_size[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_65": {
                "variable": {
                    "value": "proj_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj(x.view(batch_size * max_text_len, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_66": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.proj(x.view(batch_size * max_text_len, -1)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_93": {
                "variable": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XQ.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XQ, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_94": {
                "variable": {
                    "value": "XS",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XS.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XS, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XQ.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XQ, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "XS.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_121": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_124": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_126": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_127": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_133": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_135": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_137": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_138": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_144": {
                "variable": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_neg",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_146": {
                "variable": {
                    "value": "(x_neg, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_148": {
                "variable": {
                    "value": "hs_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_149": {
                "variable": {
                    "value": "sebd_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_neg, x_neg)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_158": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(1000, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(1, self.params['min_ss_size'], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "x_q_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc, x_q_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "y_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_q, y_q, y_q, y_q, y_q, y_q, y_q, y_q, y_q, y_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "y_q_oh",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_q_oh, y_q_oh, y_q_oh, y_q_oh, y_q_oh, y_q_oh, y_q_oh, y_q_oh, y_q_oh, y_q_oh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_178": {
                "variable": {
                    "value": "mean_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "logits * y_q_oh",
                            "BinOp"
                        ],
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_217": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_219": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_221": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_222": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_228": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_230": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_232": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_233": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_240": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(1000, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(1, self.params['min_ss_size'], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_71": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_text_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.cuda.LongTensor(max_text_len, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_73": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_text_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.LongTensor(max_text_len, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "ndarray": {
                    "value": "w2v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_proto_sentiment.py": {
        "torch": {
            "device_12": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_21": {
                "variable": {
                    "value": "self.ent_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_23": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.params['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "variable": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GRU_28": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.params['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.params['hidden_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.params['hidden_size'], self.r).uniform_(-0.1, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.params['hidden_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_45": {
                "variable": {
                    "value": "soft_max_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans_input.contiguous().view(-1, trans_size[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_65": {
                "variable": {
                    "value": "proj_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj(x.view(batch_size * max_text_len, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_66": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.proj(x.view(batch_size * max_text_len, -1)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_94": {
                "variable": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XQ.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XQ, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_95": {
                "variable": {
                    "value": "XS",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XS.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XS, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XQ.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.normalize(XQ, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "XS.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_123": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_126": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_128": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_129": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_135": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_137": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_139": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_140": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_146": {
                "variable": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_neg",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_148": {
                "variable": {
                    "value": "(x_neg, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_150": {
                "variable": {
                    "value": "hs_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_neg))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_neg, l_q_neg, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_151": {
                "variable": {
                    "value": "sebd_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_neg, x_neg)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_159": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(200, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "x_q_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_q_enc, x_q_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "y_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_q, y_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "y_q_oh",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_q_oh, y_q_oh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "x_neg_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_neg_enc, x_neg_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_185": {
                "variable": {
                    "value": "mean_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "logits * y_q_oh",
                            "BinOp"
                        ],
                        [
                            "self._compute_cos(encoded_prototype.float(), x_q_enc.float())",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_227": {
                "variable": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_sup",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_229": {
                "variable": {
                    "value": "(x_sup, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_231": {
                "variable": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_sup.squeeze()",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_sup))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_sup, l_sup, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_232": {
                "variable": {
                    "value": "sebd_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_sup, x_sup)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_238": {
                "variable": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "l_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ],
                        [
                            "[self.params['max_length']] * bs_q",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_240": {
                "variable": {
                    "value": "(x_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_242": {
                "variable": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(self.embed(x_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(x_test_q))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_q, l_q, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_243": {
                "variable": {
                    "value": "sebd_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(alpha_q, x_q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_251": {
                "variable": {
                    "value": "encoded_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sup_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.contiguous().view(200, self.params['min_ss_size'], -1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(sebd_sup[0])",
                            "Call"
                        ],
                        [
                            "x_sup_enc.view(2, self.params['min_ss_size'], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_72": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_text_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.cuda.LongTensor(max_text_len, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_74": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_text_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.LongTensor(max_text_len, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_74": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_24": {
                "ndarray": {
                    "value": "w2v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/eval_imax.py": {
        "torch": {
            "device_54": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_645": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([c])",
                            "Call"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_646": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([c])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_648": {
                "variable": {
                    "value": "valid_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TestLoader(dev_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_649": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TestLoader(test_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_774": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_583": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_tr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b",
                            "Name"
                        ],
                        [
                            "np.array([id_tr])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_584": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AmazonLoader(train_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_tr)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_777": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('~/results/', 'imax_sentiment_k100.best.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_779": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('~/results/', 'imax_sentiment_k100_%s.pth' % ep)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_525": {
                "ndarray": {
                    "value": "self.Y_neg_onehot.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_599": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': e, 'state_dict': model.state_dict(), 'optim_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(os.path.join(RSL_PATH, 'imax_sentiment_k100.best.pth'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_293": {
                "ndarray": {
                    "value": "self.Y_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/experiment_imax_intent.py": {
        "torch": {
            "save_84": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'optim_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(os.path.join(RSL_PATH, 'imax_intent_k100_%s.pth' % epoch), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/experiment_imax_kw_intent.py": {
        "torch": {
            "save_89": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'optim_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(os.path.join(RSL_PATH, 'imax_kw_intent_k100_%s.pth' % epoch), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/experiment_imax_kw_sentiment.py": {
        "torch": {
            "sort_262": {
                "variable": {
                    "value": "srt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.squeeze()",
                            "Call"
                        ],
                        [
                            "y.view(200 * self.params['min_ss_size'])",
                            "Call"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_103": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'optim_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(os.path.join(RSL_PATH, 'imax_kw_sentiment_k100_%s.pth' % epoch), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_136": {
                "variable": {
                    "value": "srt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.squeeze()",
                            "Call"
                        ],
                        [
                            "y.view(200 * self.params['min_ss_size'])",
                            "Call"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_227": {
                "variable": {
                    "value": "srt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.squeeze()",
                            "Call"
                        ],
                        [
                            "y.view(200 * self.params['min_ss_size'])",
                            "Call"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/experiment_imax_sentiment.py": {
        "torch": {
            "sort_254": {
                "variable": {
                    "value": "srt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.squeeze()",
                            "Call"
                        ],
                        [
                            "y.view(200 * self.params['min_ss_size'])",
                            "Call"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_100": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'optim_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(os.path.join(RSL_PATH, 'imax_sentiment_k100_%s.pth' % epoch), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_131": {
                "variable": {
                    "value": "srt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.squeeze()",
                            "Call"
                        ],
                        [
                            "y.view(200 * self.params['min_ss_size'])",
                            "Call"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_219": {
                "variable": {
                    "value": "srt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.squeeze()",
                            "Call"
                        ],
                        [
                            "y.view(200 * self.params['min_ss_size'])",
                            "Call"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/experiment_oproto_intent.py": {
        "torch": {
            "save_81": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'optim_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(os.path.join(RSL_PATH, 'oproto_intent_k100_%s.pth' % epoch), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/experiment_oproto_sentiment.py": {
        "torch": {
            "sort_250": {
                "variable": {
                    "value": "srt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.squeeze()",
                            "Call"
                        ],
                        [
                            "y.view(200 * self.params['min_ss_size'])",
                            "Call"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_97": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'optim_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(os.path.join(RSL_PATH, 'oproto_sentiment_k100_%s.pth' % epoch), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_129": {
                "variable": {
                    "value": "srt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.squeeze()",
                            "Call"
                        ],
                        [
                            "y.view(200 * self.params['min_ss_size'])",
                            "Call"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_215": {
                "variable": {
                    "value": "srt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.squeeze()",
                            "Call"
                        ],
                        [
                            "y.view(200 * self.params['min_ss_size'])",
                            "Call"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/experiment_proto_intent.py": {
        "torch": {
            "save_80": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'optim_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(os.path.join(RSL_PATH, 'proto_intent_k100_%s.pth' % epoch), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/experiment_proto_sentiment.py": {
        "torch": {
            "sort_250": {
                "variable": {
                    "value": "srt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.squeeze()",
                            "Call"
                        ],
                        [
                            "y.view(200 * self.params['min_ss_size'])",
                            "Call"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_97": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'optim_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(os.path.join(RSL_PATH, 'proto_sentiment_k100_%s.pth' % epoch), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_129": {
                "variable": {
                    "value": "srt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.squeeze()",
                            "Call"
                        ],
                        [
                            "y.view(200 * self.params['min_ss_size'])",
                            "Call"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_215": {
                "variable": {
                    "value": "srt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.squeeze()",
                            "Call"
                        ],
                        [
                            "y.view(200 * self.params['min_ss_size'])",
                            "Call"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ],
                        [
                            "y.squeeze(0)",
                            "Call"
                        ],
                        [
                            "y[id_srt]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/extract_sentiment.py": {
        "torch": {}
    },
    "src/train_imax.py": {
        "torch": {
            "device_54": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_619": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_560": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "id_tr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b",
                            "Name"
                        ],
                        [
                            "np.array([id_tr])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_561": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AmazonLoader(train_data, params)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(id_tr)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_502": {
                "ndarray": {
                    "value": "self.Y_neg_onehot.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_576": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': e, 'state_dict': model.state_dict(), 'optim_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "open(os.path.join(RSL_PATH, 'imax_sentiment_k100.best.pth'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_270": {
                "ndarray": {
                    "value": "self.Y_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}