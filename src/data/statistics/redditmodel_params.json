{
    "code_tests/hawkes_tree/MHP.py": {
        "sklearn": {
            "pairwise_distances_136": {
                "variable": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.array([seq[:, 0]]).T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "code_tests/tensor_testing/tf-decompose/dtensor.py": {
        "tensorflow": {
            "Variable_34": {
                "variable": {
                    "value": "X_var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "X_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_data",
                            "Method Argument"
                        ],
                        [
                            "X_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_37": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_55": {
                "variable": {
                    "value": "X_var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "X_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_data",
                            "Method Argument"
                        ],
                        [
                            "X_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_59": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code_tests/tensor_testing/tf-decompose/ktensor.py": {
        "tensorflow": {
            "Variable_38": {
                "variable": {
                    "value": "self.Lambda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.rank], a, b, self.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "Lambda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_76": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones((self.rank, self.rank), dtype=self.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "a": {
                    "value": "self.Lambda[None, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones((self.rank, self.rank), dtype=self.dtype))",
                            "Call"
                        ],
                        [
                            "U * tf.matmul(tf.transpose(self.U[n]), self.U[n])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "reduced",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "reduced",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce(bilinear, self.U[1:][::-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reduced, [np.prod(rs[:-1]), rs[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[np.prod(rs[:-1]), rs[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_65": {
                "variable": {
                    "value": "u0",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.U[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.diag(self.Lambda)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "interpolated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u0, tf.transpose(reduced))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "reshape",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_41": {
                "name": {
                    "value": "U",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "variable": {
                    "value": "self.U[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "init_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nvecs(X_data, self.rank, n)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(low=a, high=b, size=shape)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "str(n)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_60": {
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "variable": {
                    "value": "interpolated",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.U[0], tf.diag(self.Lambda))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(reduced)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_76": {
                "shape": {
                    "value": "(self.rank, self.rank)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_78": {
                "a": {
                    "value": "tf.transpose(self.U[n])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.U[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_88": {
                "input_tensor": {
                    "value": "errors ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_65": {
                "diagonal": {
                    "value": "self.Lambda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_66": {
                "name": {
                    "value": "interpolate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_78": {
                "a": {
                    "value": "self.U[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_67": {
                "a": {
                    "value": "reduced",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce(bilinear, self.U[1:][::-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reduced, [np.prod(rs[:-1]), rs[-1]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code_tests/tensor_testing/tf-decompose/scripts/ktest.py": {
        "tensorflow": {
            "AdadeltaOptimizer_14": {
                "learning_rate": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "code_tests/tensor_testing/tf-decompose/scripts/ttest.py": {
        "tensorflow": {}
    },
    "code_tests/tensor_testing/tf-decompose/test.py": {
        "tensorflow": {
            "AdadeltaOptimizer_19": {
                "learning_rate": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "code_tests/tensor_testing/tf-decompose/ttensor.py": {
        "tensorflow": {
            "Variable_28": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "self.G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform(self.ranks, a, b, self.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "G",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_73": {
                "variable": {
                    "value": "X_to_G",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(X_data)",
                            "Call"
                        ],
                        [
                            "tf.Variable(X_data)",
                            "Call"
                        ],
                        [
                            "X_var",
                            "Method Argument"
                        ],
                        [
                            "X_var",
                            "Method Argument"
                        ],
                        [
                            "X_var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_89": {
                "variable": {
                    "value": "X_var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "X_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "X_data",
                            "Method Argument"
                        ],
                        [
                            "X_data",
                            "Method Argument"
                        ],
                        [
                            "X_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_90": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_126": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(X_data)",
                            "Call"
                        ],
                        [
                            "tf.Variable(X_data)",
                            "Call"
                        ],
                        [
                            "X_var",
                            "Method Argument"
                        ],
                        [
                            "X_var",
                            "Method Argument"
                        ],
                        [
                            "X_var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_145": {
                "variable": {
                    "value": "X_var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "X_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "X_data",
                            "Method Argument"
                        ],
                        [
                            "X_data",
                            "Method Argument"
                        ],
                        [
                            "X_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_146": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_61": {
                "variable": {
                    "value": "Un_mul_G",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.U[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "unfold_tf(G_to_X, n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_79": {
                "variable": {
                    "value": "Un_mul_X",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(self.U[n])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "unfold_tf(X_to_G, n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_82": {
                "ref": {
                    "value": "self.G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "X_to_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(X_var)",
                            "Call"
                        ],
                        [
                            "refold_tf(Un_mul_X, shape, n)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_134": {
                "variable": {
                    "value": "Un_mul_X",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(self.U[n_])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "unfold_tf(Y, n_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_38": {
                "name": {
                    "value": "U",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "self.U[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "init_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nvecs(X_data, self.ranks[n], n)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(low=a, high=b, size=shape)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "str(n)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "svd_96": {
                "variable": {
                    "value": "(_, u, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "unfold_tf(X_var, n)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'svd%3d' % n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_99": {
                "variable": {
                    "value": "new_U",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u[:self.ranks[n]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assign_100": {
                "variable": {
                    "value": "svd_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.U[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "new_U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(u[:self.ranks[n]])",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_185": {
                "input_tensor": {
                    "value": "errors ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_62": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if n < self.order - 1 else 'X'",
                            "IfExp"
                        ],
                        [
                            "None if n_ < idxs[-1] else 'Y%3d' % n_",
                            "IfExp"
                        ]
                    ]
                }
            },
            "transpose_79": {
                "a": {
                    "value": "self.U[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_134": {
                "a": {
                    "value": "self.U[n_]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "svd_156": {
                "variable": {
                    "value": "(_, u, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "unfold_tf(Y, n)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'svd%3d' % n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_157": {
                "variable": {
                    "value": "svd_ops[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.U[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "u[:, :self.ranks[n]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "code_tests/tensor_testing/tf-decompose/utils.py": {
        "tensorflow": {
            "transpose_58": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "new_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n] + idxs[:n] + idxs[n + 1:]",
                            "BinOp"
                        ],
                        [
                            "idxs[1:n + 1] + [0] + idxs[n + 1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[shape[n]] + shape[:n] + shape[n + 1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_101": {
                "variable": {
                    "value": "A_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_105": {
                "variable": {
                    "value": "B_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(A, new_idxs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(A, shape_temp)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_112": {
                "variable": {
                    "value": "A_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(A, -2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(A_expand, -2)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "a_shape_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * (a_order + b_order - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_116": {
                "variable": {
                    "value": "B_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(B, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(B_expand, 0)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "b_shape_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * (b_order + a_order - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_61": {
                "tensor": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(A, new_idxs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(A, shape_temp)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[dim, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_80": {
                "a": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(A, new_idxs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(A, shape_temp)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "new_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n] + idxs[:n] + idxs[n + 1:]",
                            "BinOp"
                        ],
                        [
                            "idxs[1:n + 1] + [0] + idxs[n + 1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_103": {
                "variable": {
                    "value": "A_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(A, -2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(A_expand, -2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_107": {
                "variable": {
                    "value": "B_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(B, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(B_expand, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}