{
    "src/solver.py": {
        "sklearn": {},
        "torch": {
            "ReduceLROnPlateau_85": {
                "variable": {
                    "value": "self.scheduler_mmilb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer_mmilb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "hp.when",
                    "type": "Attribute",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_86": {
                "variable": {
                    "value": "self.scheduler_main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer_main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "hp.when",
                    "type": "Attribute",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_40": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_43": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_47": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "L1Loss_49": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(results)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_264": {
                "variable": {
                    "value": "truths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "truths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(truths)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_137": {
                "type": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__200": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.hp.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "L1Loss_253": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_237": {
                "type": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/eval_metrics.py": {
        "sklearn": {
            "f1_score_47": {
                "variable": {
                    "value": "f_score_non0",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "binary_truth_non0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_truth[non_zeros] > 0",
                            "Compare"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "binary_preds_non0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_preds[non_zeros] > 0",
                            "Compare"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_48": {
                "variable": {
                    "value": "acc_2_non0",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "binary_truth_non0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_truth[non_zeros] > 0",
                            "Compare"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "binary_preds_non0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_preds[non_zeros] > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "accuracy_score_52": {
                "variable": {
                    "value": "acc_2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "binary_truth_has0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_truth >= 0",
                            "Compare"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "binary_preds_has0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_preds >= 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "f1_score_53": {
                "variable": {
                    "value": "f_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "binary_truth_has0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_truth >= 0",
                            "Compare"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "binary_preds_has0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_preds >= 0",
                            "Compare"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/config.py": {
        "torch": {}
    },
    "src/create_dataset.py": {
        "torch": {}
    },
    "src/data_loader.py": {
        "torch": {
            "DataLoader_146": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MSADataset(config)",
                            "Call"
                        ],
                        [
                            "MOSI(config)",
                            "Call"
                        ],
                        [
                            "MOSEI(config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "vlens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_85": {
                "variable": {
                    "value": "alens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_86": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "labels[:, 0][:, None]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_117": {
                "variable": {
                    "value": "sentences",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[torch.LongTensor(sample[0][0]) for sample in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "PAD",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_sequence_118": {
                "variable": {
                    "value": "visual",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[torch.FloatTensor(sample[0][1]) for sample in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "target_len": {
                    "value": "vlens.max().item()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_119": {
                "variable": {
                    "value": "acoustic",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[torch.FloatTensor(sample[0][2]) for sample in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "target_len": {
                    "value": "alens.max().item()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "ndarray": {
                    "value": "sample[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/main.py": {
        "torch": {
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_detect_anomaly_41": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_all_15": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_16": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/model.py": {
        "torch": {
            "cat_118": {
                "tensors": {
                    "value": "[text, acoustic, visual]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/encoders.py": {
        "torch": {
            "Dropout_43": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.linear_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_55": {
                "variable": {
                    "value": "y_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_1(dropped)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_57": {
                "variable": {
                    "value": "y_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_2(y_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.mlp_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.mlp_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_108": {
                "variable": {
                    "value": "lld",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(positive, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_109": {
                "variable": {
                    "value": "bound",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(positive, -1) - torch.sum(negative, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.mlp_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(x_size, y_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.mlp_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(x_size, y_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "self.entropy_prj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(y_size, y_size // 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_153": {
                "variable": {
                    "value": "lld",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(positive, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_235": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * x_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_236": {
                "variable": {
                    "value": "neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(x, x_pred.t())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTM_255": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_256": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_257": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "(2 if bidirectional else 1) * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_266": {
                "variable": {
                    "value": "packed_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / x.norm(dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.to(torch.int64)",
                            "Call"
                        ]
                    ]
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_211": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_223": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_10": {
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_105": {
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_106": {
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_108": {
                "input": {
                    "value": "positive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(mu - modal_b) ** 2 / 2.0 / torch.exp(logvar)",
                            "BinOp"
                        ],
                        [
                            "-(mu - y) ** 2 / 2.0 / torch.exp(logvar)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "in_features": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "in_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "in_features": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "in_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "in_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "y_size // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_152": {
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_153": {
                "input": {
                    "value": "positive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(mu - modal_b) ** 2 / 2.0 / torch.exp(logvar)",
                            "BinOp"
                        ],
                        [
                            "-(mu - y) ** 2 / 2.0 / torch.exp(logvar)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "pos_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_history + [pos_y]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "neg_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neg_history + [neg_y]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_189": {
                "variable": {
                    "value": "sigma_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm((pos_all - mu_pos).unsqueeze(-1), (pos_all - mu_pos).unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_190": {
                "variable": {
                    "value": "sigma_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm((neg_all - mu_neg).unsqueeze(-1), (neg_all - mu_neg).unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_236": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / x.norm(dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "x_pred.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_109": {
                "input": {
                    "value": "negative",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.mean((true_tile - pred_tile) ** 2, dim=1) / 2.0 / torch.exp(logvar)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_270": {
                "tensors": {
                    "value": "(final_states[0][0], final_states[0][1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_106": {
                "input": {
                    "value": "(true_tile - pred_tile) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_189": {
                "input": {
                    "value": "(pos_all - mu_pos).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "(pos_all - mu_pos).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_190": {
                "input": {
                    "value": "(neg_all - mu_neg).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "(neg_all - mu_neg).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logdet_192": {
                "input": {
                    "value": "sigma_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.bmm((neg_all - mu_neg).unsqueeze(-1), (neg_all - mu_neg).unsqueeze(1)), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_219": {
                "in_features": {
                    "value": "self.y_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.x_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_222": {
                "in_features": {
                    "value": "self.x_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.x_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/position_embedding.py": {
        "torch": {
            "arange_52": {
                "variable": {
                    "value": "emb_c2",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_54": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(emb_c2 // 2).to(torch.float) * -emb_c1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_58": {
                "variable": {
                    "value": "emb[:, emb_c2 % 2 == 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "emb[:, emb_c2 % 2 == 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_59": {
                "variable": {
                    "value": "emb[:, emb_c2 % 2 == 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "emb[:, emb_c2 % 2 == 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_21": {
                "start": {
                    "value": "padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "max_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_idx + 1 + tensor.size(1)",
                            "BinOp"
                        ],
                        [
                            "self.padding_idx + 1 + seq_len",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "getattr(make_positions, buf_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb, torch.zeros(num_embeddings, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_55": {
                "start": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_55": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/functions.py": {
        "torch": {
            "add_30": {
                "variable": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "-pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "numel_31": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diffs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_43": {
                "variable": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "-pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "numel_44": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diffs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_62": {
                "variable": {
                    "value": "input1_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input1.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "input1 - input1_mean",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_63": {
                "variable": {
                    "value": "input2_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input2.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "input2 - input2_mean",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_67": {
                "variable": {
                    "value": "input1_l2_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input1.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "input1 - input1_mean",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_71": {
                "variable": {
                    "value": "input2_l2_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input2.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "input2 - input2_mean",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_74": {
                "variable": {
                    "value": "diff_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input1_l2.t().mm(input2_l2).pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_87": {
                "variable": {
                    "value": "mx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_88": {
                "variable": {
                    "value": "mx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_98": {
                "variable": {
                    "value": "power",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_99": {
                "variable": {
                    "value": "summed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "power",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(x1 - x2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_105": {
                "variable": {
                    "value": "ss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(sx1, k)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_106": {
                "variable": {
                    "value": "ss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(sx2, k)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_113": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.attn_weights_mask",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_32": {
                "input": {
                    "value": "diffs.pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.add(real, -pred)",
                            "Call"
                        ],
                        [
                            "torch.add(real, -pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_45": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_105": {
                "input": {
                    "value": "sx1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1 - mx1",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_106": {
                "input": {
                    "value": "sx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2 - mx2",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/tools.py": {
        "torch": {
            "load_28": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.BytesIO(f.read())",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_39": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "t.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_20": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'pre_trained_models/{name}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    }
}