{
    "DNN/data_reader.py": {
        "sklearn": {}
    },
    "DNN/model_evaluator.py": {
        "sklearn": {
            "f1_score_47": {
                "variable": {
                    "value": "self.f1_hs_wei",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_true": {
                    "value": "hs_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_hateSpeech(self.task_idx_test, self.test_y_label, self.test_pred_label)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "hs_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_hateSpeech(self.task_idx_test, self.test_y_label, self.test_pred_label)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_48": {
                "variable": {
                    "value": "self.f1_hs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_true": {
                    "value": "hs_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_hateSpeech(self.task_idx_test, self.test_y_label, self.test_pred_label)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "hs_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_hateSpeech(self.task_idx_test, self.test_y_label, self.test_pred_label)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_50": {
                "variable": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_true": {
                    "value": "hs_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_hateSpeech(self.task_idx_test, self.test_y_label, self.test_pred_label)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "hs_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_hateSpeech(self.task_idx_test, self.test_y_label, self.test_pred_label)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "f1_score_51": {
                "variable": {
                    "value": "self.f1_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.test_y_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.test_pred_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "classification_report_52": {
                "variable": {
                    "value": "self.report",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_true": {
                    "value": "hs_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_hateSpeech(self.task_idx_test, self.test_y_label, self.test_pred_label)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "hs_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_hateSpeech(self.task_idx_test, self.test_y_label, self.test_pred_label)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "DNN/models.py": {
        "tensorflow": {
            "Input_36": {
                "variable": {
                    "value": "sequence_input_word",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(overal_maxlen,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "sequence_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_37": {
                "variable": {
                    "value": "taskid_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(task_num,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "taskid_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_38": {
                "variable": {
                    "value": "ruling_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(ruling_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concatenate_41": {
                "variable": {
                    "value": "emb_output",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[embedded_sequences_word, emb_ruling]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack(tower_outputs, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(taskid_input, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_54": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.stack(tower_outputs, axis=-1), tf.expand_dims(taskid_input, -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Model_56": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[sequence_input_word, taskid_input, ruling_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(out, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_66": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(overal_maxlen,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concatenate_75": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[avg, max1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_39": {
                "input_dim": {
                    "value": "len(vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "args.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_40": {
                "input_dim": {
                    "value": "len(vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_53": {
                "values": {
                    "value": "tower_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_53": {
                "input": {
                    "value": "taskid_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=(task_num,), dtype='float32', name='taskid_input')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_68": {
                "input_dim": {
                    "value": "len(vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "args.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "emb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "DNN/my_layers.py": {
        "tensorflow": {
            "stack_147": {
                "variable": {
                    "value": "self.expert_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "expert_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_148": {
                "variable": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.expert_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_149": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[m1, m1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_156": {
                "variable": {
                    "value": "self.expert_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "expert_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_157": {
                "variable": {
                    "value": "self.gate_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "gate_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gate_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.expert_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_37": {
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_38": {
                "units": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling1D_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_42": {
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_43": {
                "units": {
                    "value": "self.units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_44": {
                "units": {
                    "value": "self.units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_78": {
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_79": {
                "units": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling1D_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_84": {
                "units": {
                    "value": "self.units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_85": {
                "units": {
                    "value": "self.units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_87": {
                "units": {
                    "value": "self.units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_176": {
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_177": {
                "units": {
                    "value": "self.units[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_233": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dense_175": {
                "units": {
                    "value": "unit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.units[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "DNN/train.py": {
        "tensorflow": {
            "ConfigProto_18": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_20": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}