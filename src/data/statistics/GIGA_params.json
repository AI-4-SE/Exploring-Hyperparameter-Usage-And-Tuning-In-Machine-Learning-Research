{
    "src/vgn/ConvONets/utils/icp.py": {
        "sklearn": {
            "NearestNeighbors_63": {
                "variable": {
                    "value": "neigh",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convonet_setup.py": {
        "torch": {}
    },
    "scripts/eval_geometry_voxel.py": {
        "torch": {
            "is_available_24": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_127": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetVoxelOccGeoROI(root, root_raw, num_point_occ=num_point_occ)",
                            "Call"
                        ],
                        [
                            "DatasetVoxelOccGeo(root, root_raw, num_point_occ=num_point_occ)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_155": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.infer_geo(pc_input, points_occ)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/train_giga.py": {
        "torch": {
            "is_available_20": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_21": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_157": {
                "variable": {
                    "value": "occ",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(occ)",
                            "Call"
                        ]
                    ]
                }
            },
            "SummaryWriter_242": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir / 'train'",
                            "BinOp"
                        ]
                    ]
                },
                "flush_secs": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SummaryWriter_243": {
                "variable": {
                    "value": "val_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "val_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir / 'validation'",
                            "BinOp"
                        ]
                    ]
                },
                "flush_secs": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_178": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_184": {
                "input": {
                    "value": "loss0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_quat_loss_fn(pred, target[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_192": {
                "input": {
                    "value": "40 * pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "40 * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_195": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_195": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_188": {
                "input": {
                    "value": "torch.sum(pred * target, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_188": {
                "input": {
                    "value": "pred * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_54": {
                "input": {
                    "value": "out[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_55": {
                "input": {
                    "value": "out[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_56": {
                "input": {
                    "value": "out[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/train_giga_aff.py": {
        "torch": {
            "is_available_19": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_20": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SummaryWriter_234": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir / 'train'",
                            "BinOp"
                        ]
                    ]
                },
                "flush_secs": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SummaryWriter_235": {
                "variable": {
                    "value": "val_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "val_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir / 'validation'",
                            "BinOp"
                        ]
                    ]
                },
                "flush_secs": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_172": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_178": {
                "input": {
                    "value": "loss0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_quat_loss_fn(pred, target[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_186": {
                "input": {
                    "value": "40 * pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "40 * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_182": {
                "input": {
                    "value": "torch.sum(pred * target, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_182": {
                "input": {
                    "value": "pred * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_54": {
                "input": {
                    "value": "out[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_55": {
                "input": {
                    "value": "out[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_56": {
                "input": {
                    "value": "out[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/train_giga_geo.py": {
        "torch": {
            "is_available_19": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_20": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_130": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_153": {
                "variable": {
                    "value": "occ",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SummaryWriter_212": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir / 'train'",
                            "BinOp"
                        ]
                    ]
                },
                "flush_secs": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SummaryWriter_213": {
                "variable": {
                    "value": "val_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "val_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir / 'validation'",
                            "BinOp"
                        ]
                    ]
                },
                "flush_secs": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_165": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_165": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_54": {
                "input": {
                    "value": "out[1][3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_55": {
                "input": {
                    "value": "out[1][3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_56": {
                "input": {
                    "value": "out[1][3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/train_vgn.py": {
        "torch": {
            "is_available_19": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_20": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_152": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "qual_out.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SummaryWriter_236": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir / 'train'",
                            "BinOp"
                        ]
                    ]
                },
                "flush_secs": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SummaryWriter_237": {
                "variable": {
                    "value": "val_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "val_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir / 'validation'",
                            "BinOp"
                        ]
                    ]
                },
                "flush_secs": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_174": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_180": {
                "input": {
                    "value": "loss0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_quat_loss_fn(pred, target[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_188": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_184": {
                "input": {
                    "value": "torch.sum(pred * target, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_184": {
                "input": {
                    "value": "pred * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_54": {
                "input": {
                    "value": "out[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_55": {
                "input": {
                    "value": "out[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_56": {
                "input": {
                    "value": "out[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/vgn/ConvONets/checkpoints.py": {
        "torch": {
            "save_38": {
                "obj": {
                    "value": "outdict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs",
                            "variable"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_64": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/vgn/ConvONets/common.py": {
        "torch": {
            "gather_108": {
                "variable": {
                    "value": "points_12",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points2.view(batch_size, 1, T, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_nn_12_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_nn_12.view(batch_size, -1, 1).expand_as(points1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_112": {
                "variable": {
                    "value": "points_21",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points1.view(batch_size, T, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_nn_21_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_nn_21.view(batch_size, -1, 1).expand_as(points2)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_158": {
                "variable": {
                    "value": "pxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bb_min[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "bb_max[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_159": {
                "variable": {
                    "value": "pys",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bb_min[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "bb_max[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_160": {
                "variable": {
                    "value": "pzs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bb_min[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "bb_max[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_165": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pxs, pys, pzs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "Rt_new",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[R_new, t_new]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_443": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "remainder_417": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([pxs, pys, pzs], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.remainder(p, self.s) / self.s",
                            "BinOp"
                        ],
                        [
                            "self.pe(p)",
                            "Call"
                        ],
                        [
                            "2.0 * p - 1.0",
                            "BinOp"
                        ],
                        [
                            "torch.cat(out, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_441": {
                "input": {
                    "value": "freq * p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_442": {
                "input": {
                    "value": "freq * p",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/vgn/ConvONets/conv_onet/config.py": {
        "torch": {
            "Embedding_73": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['c_dim']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/vgn/ConvONets/conv_onet/generation.py": {
        "torch": {
            "split_333": {
                "variable": {
                    "value": "p_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.points_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_357": {
                "variable": {
                    "value": "occ_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "occ_hats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_439": {
                "variable": {
                    "value": "vertices_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices / np.array([n_x - 1, n_y - 1, n_z - 1])",
                            "BinOp"
                        ],
                        [
                            "vertices * mc_unit + bb_min",
                            "BinOp"
                        ],
                        [
                            "box_size * (vertices - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor(vertices)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.points_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_476": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "v0.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSprop_482": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[v]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_495": {
                "variable": {
                    "value": "face_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "face_vertex[:, 1, :] - face_vertex[:, 0, :]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "face_v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "face_vertex[:, 2, :] - face_vertex[:, 1, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_498": {
                "variable": {
                    "value": "face_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model.decode_occ(face_point.unsqueeze(0), c).logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_192": {
                "variable": {
                    "value": "pp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mgrid[bb_min[0]:bb_max[0]:t[0], bb_min[1]:bb_max[1]:t[1], bb_min[2]:bb_max[2]:t[2]].reshape(3, -1).T",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(pp).to(device)",
                            "Call"
                        ],
                        [
                            "points / mesh_extractor.resolution",
                            "BinOp"
                        ],
                        [
                            "pp * (bb_max - bb_min) + bb_min",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(pp).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_201": {
                "variable": {
                    "value": "pp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mgrid[bb_min[0]:bb_max[0]:t[0], bb_min[1]:bb_max[1]:t[1], bb_min[2]:bb_max[2]:t[2]].reshape(3, -1).T",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(pp).to(device)",
                            "Call"
                        ],
                        [
                            "points / mesh_extractor.resolution",
                            "BinOp"
                        ],
                        [
                            "pp * (bb_max - bb_min) + bb_min",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(pp).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_450": {
                "input": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-vi.grad",
                            "UnaryOp"
                        ],
                        [
                            "ni / torch.norm(ni, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "ni.squeeze(0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_79": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_164": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_501": {
                "outputs": {
                    "value": "[face_value.sum()]",
                    "type": "List",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[face_point]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/vgn/ConvONets/conv_onet/models/__init__.py": {
        "torch": {
            "sigmoid_94": {
                "variable": {
                    "value": "qual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder_qual.compute_out(p, feature)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(qual)",
                            "Call"
                        ],
                        [
                            "self.decoder_qual(p, c, **kwargs)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(qual)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_96": {
                "variable": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder_rot.compute_out(p, feature)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(rot, dim=2)",
                            "Call"
                        ],
                        [
                            "self.decoder_rot(p, c, **kwargs)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(rot, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Bernoulli_108": {
                "variable": {
                    "value": "p_r",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder_tsdf(p, c, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.decoder_tsdf(p, c, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_120": {
                "variable": {
                    "value": "qual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder_qual.compute_out(p, feature)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(qual)",
                            "Call"
                        ],
                        [
                            "self.decoder_qual(p, c, **kwargs)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(qual)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_122": {
                "variable": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder_rot.compute_out(p, feature)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(rot, dim=2)",
                            "Call"
                        ],
                        [
                            "self.decoder_rot(p, c, **kwargs)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(rot, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_141": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[pos_tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Bernoulli_225": {
                "variable": {
                    "value": "p_r",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder_tsdf(p, c, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.decoder_tsdf(p, c, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_85": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_155": {
                "variable": {
                    "value": "pos_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.minimum(pos_tmp, u_bound)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "l_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos - bound_value",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_213": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "minimum_155": {
                "input": {
                    "value": "pos_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos.clone()",
                            "Call"
                        ],
                        [
                            "torch.maximum(torch.minimum(pos_tmp, u_bound), l_bound)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "u_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos + bound_value",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/vgn/ConvONets/conv_onet/models/decoder.py": {
        "torch": {
            "Linear_22": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim + c_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grid_sample_31": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c + self.sample_feature(p_n['yz'], c_plane['yz'])",
                            "BinOp"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "self.sample_grid_feature(p, c_plane['grid'])",
                            "Call"
                        ],
                        [
                            "torch.cat(c, dim=1)",
                            "Call"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.sample_point_feature(p, pp, fea)",
                            "Call"
                        ],
                        [
                            "torch.cat(c_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.sample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_31": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grid_sample_39": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c + self.sample_feature(p_n['yz'], c_plane['yz'])",
                            "BinOp"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "self.sample_grid_feature(p, c_plane['grid'])",
                            "Call"
                        ],
                        [
                            "torch.cat(c, dim=1)",
                            "Call"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.sample_point_feature(p, pp, fea)",
                            "Call"
                        ],
                        [
                            "torch.cat(c_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.sample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_102": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResnetBlockFC(hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grid_sample_121": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c + self.sample_feature(p_n['yz'], c_plane['yz'])",
                            "BinOp"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "self.sample_grid_feature(p, c_plane['grid'])",
                            "Call"
                        ],
                        [
                            "torch.cat(c, dim=1)",
                            "Call"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.sample_point_feature(p, pp, fea)",
                            "Call"
                        ],
                        [
                            "torch.cat(c_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.sample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_121": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grid_sample_129": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c + self.sample_feature(p_n['yz'], c_plane['yz'])",
                            "BinOp"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "self.sample_grid_feature(p, c_plane['grid'])",
                            "Call"
                        ],
                        [
                            "torch.cat(c, dim=1)",
                            "Call"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.sample_point_feature(p, pp, fea)",
                            "Call"
                        ],
                        [
                            "torch.cat(c_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.sample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_129": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_238": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_239": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResnetBlockFC(hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_327": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_329": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResnetBlockFC(hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_333": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_95": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(c_dim, hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "p.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_233": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(c_dim, hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_256": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_258": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grid_sample_264": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c + self.sample_feature(p_n['yz'], c_plane['yz'])",
                            "BinOp"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "self.sample_grid_feature(p, c_plane['grid'])",
                            "Call"
                        ],
                        [
                            "torch.cat(c, dim=1)",
                            "Call"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.sample_point_feature(p, pp, fea)",
                            "Call"
                        ],
                        [
                            "torch.cat(c_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.sample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_264": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grid_sample_268": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c + self.sample_feature(p_n['yz'], c_plane['yz'])",
                            "BinOp"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "self.sample_grid_feature(p, c_plane['grid'])",
                            "Call"
                        ],
                        [
                            "torch.cat(c, dim=1)",
                            "Call"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.sample_point_feature(p, pp, fea)",
                            "Call"
                        ],
                        [
                            "torch.cat(c_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.sample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_268": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_322": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(c_dim, hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_372": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c + self.sample_feature(p_n['yz'], c_plane['yz'])",
                            "BinOp"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "self.sample_grid_feature(p, c_plane['grid'])",
                            "Call"
                        ],
                        [
                            "torch.cat(c, dim=1)",
                            "Call"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.sample_point_feature(p, pp, fea)",
                            "Call"
                        ],
                        [
                            "torch.cat(c_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_369": {
                "tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.float()",
                            "Call"
                        ],
                        [
                            "p.float()",
                            "Call"
                        ],
                        [
                            "p['p']",
                            "Subscript"
                        ],
                        [
                            "p.float()",
                            "Call"
                        ],
                        [
                            "self.map2local(p)",
                            "Call"
                        ],
                        [
                            "p.float()",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_111": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_246": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_338": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "(c, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_dim * 3",
                            "BinOp"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_234": {
                "in_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_dim * 3",
                            "BinOp"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_323": {
                "in_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_dim * 3",
                            "BinOp"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/vgn/ConvONets/conv_onet/training.py": {
        "torch": {
            "binary_cross_entropy_with_logits_138": {
                "variable": {
                    "value": "loss_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.decode(p, c, **kwargs).logits",
                            "Attribute"
                        ]
                    ]
                },
                "target": {
                    "value": "occ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.get('points.occ').to(device)",
                            "Call"
                        ],
                        [
                            "data.get('points.occ').to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_68": {
                "*size": {
                    "value": "points.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_124": {
                "*size": {
                    "value": "p.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/vgn/ConvONets/data/core.py": {
        "torch": {}
    },
    "src/vgn/ConvONets/encoder/pointnet.py": {
        "torch": {
            "Linear_37": {
                "variable": {
                    "value": "self.fc_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResnetBlockFC(2 * hidden_dim, hidden_dim) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_190": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResnetBlockFC(2 * hidden_dim, hidden_dim) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_195": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[net, pooled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_225": {
                "variable": {
                    "value": "self.fc_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "variable": {
                    "value": "self.fc_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_299": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[net, pooled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/vgn/ConvONets/encoder/pointnetpp.py": {
        "torch": {
            "arange_183": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_198": {
                "variable": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "npoint",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_200": {
                "variable": {
                    "value": "farthest",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_201": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_225": {
                "variable": {
                    "value": "group_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_282": {
                "variable": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_293": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_16": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_17": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_56": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_57": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_163": {
                "input": {
                    "value": "src ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_164": {
                "input": {
                    "value": "dst ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_205": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(xyz - centroid) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_cache_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz_norm, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, points.view(B, 1, N, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(new_points))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_89": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (dists + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_91": {
                "variable": {
                    "value": "interpolated_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index_points(points2, idx) * weight.view(B, N, 3, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points1, interpolated_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(new_points))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_162": {
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "dst.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_199": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_49": {
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[batch_indices, idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([grouped_xyz_norm, grouped_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz_norm",
                            "variable"
                        ],
                        [
                            "torch.cat([grouped_xyz, points.view(B, 1, N, -1)], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "new_points.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ],
                        [
                            "torch.max(new_points, 2)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([points1, interpolated_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "interpolated_points",
                            "variable"
                        ],
                        [
                            "new_points.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_208": {
                "input": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(B, N).to(device) * 10000000000.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv1d_60": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_61": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "src/vgn/ConvONets/encoder/unet.py": {
        "torch": {
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_206": {
                "variable": {
                    "value": "self.down_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.down_convs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_207": {
                "variable": {
                    "value": "self.up_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.up_convs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_27": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "*args": {
                    "value": "nn.Upsample(mode='bilinear', scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_64": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(from_up, from_down)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_36": {
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_255": {
                "input": {
                    "value": "torch.isnan(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_255": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/vgn/ConvONets/encoder/unet3d.py": {
        "torch": {
            "Conv3d_16": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "not ('g' in order or 'b' in order)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Conv3d_358": {
                "variable": {
                    "value": "final_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_415": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "encoders",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_433": {
                "variable": {
                    "value": "self.decoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "decoders",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv3d_437": {
                "variable": {
                    "value": "self.final_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "f_maps[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_174": {
                "variable": {
                    "value": "self.non_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_319": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2",
                            "Method Argument"
                        ],
                        [
                            "(2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_330": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 1, reso, reso, reso))",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(x)",
                            "Call"
                        ],
                        [
                            "self.pooling(x)",
                            "Call"
                        ],
                        [
                            "self.basic_module(x)",
                            "Call"
                        ],
                        [
                            "self.upsampling(encoder_features=encoder_features, x=x)",
                            "Call"
                        ],
                        [
                            "self.joining(encoder_features, x)",
                            "Call"
                        ],
                        [
                            "self.basic_module(x)",
                            "Call"
                        ],
                        [
                            "encoder(x)",
                            "Call"
                        ],
                        [
                            "decoder(encoder_features, x)",
                            "Call"
                        ],
                        [
                            "self.final_conv(x)",
                            "Call"
                        ],
                        [
                            "self.final_activation(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'nearest'",
                            "Method Argument"
                        ],
                        [
                            "'nearest'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ELU_176": {
                "variable": {
                    "value": "self.non_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_178": {
                "variable": {
                    "value": "self.non_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_222": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pool_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool3d_224": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pool_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_291": {
                "tensors": {
                    "value": "(encoder_features, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_442": {
                "variable": {
                    "value": "self.final_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_444": {
                "variable": {
                    "value": "self.final_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_544": {
                "input": {
                    "value": "torch.isnan(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_47": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ELU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_66": {
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                }
            },
            "BatchNorm3d_70": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_72": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "isnan_544": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.non_linearity(out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/vgn/ConvONets/encoder/voxels.py": {
        "torch": {
            "linspace_95": {
                "variable": {
                    "value": "coord1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_96": {
                "variable": {
                    "value": "coord2",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_97": {
                "variable": {
                    "value": "coord3",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "x.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_102": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coord1, coord2, coord3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_135": {
                "variable": {
                    "value": "self.conv_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_137": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_138": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_139": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_140": {
                "variable": {
                    "value": "self.conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * 2 * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_34": {
                "variable": {
                    "value": "self.conv_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_36": {
                "variable": {
                    "value": "self.conv_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/vgn/ConvONets/layers.py": {
        "torch": {
            "Linear_28": {
                "variable": {
                    "value": "self.fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(size_in, size_out)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(size_in, size_out)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size_in",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size_in",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/vgn/dataset.py": {
        "torch": {}
    },
    "src/vgn/dataset_voxel.py": {
        "torch": {}
    },
    "src/vgn/dataset_voxel_occ.py": {
        "torch": {}
    },
    "src/vgn/detection.py": {
        "torch": {
            "from_numpy_99": {
                "variable": {
                    "value": "tsdf_vol",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tsdf_vol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(tsdf_vol).unsqueeze(0).to(device)",
                            "Call"
                        ],
                        [
                            "tsdf_vol.squeeze()",
                            "Call"
                        ],
                        [
                            "state.tsdf",
                            "Attribute"
                        ],
                        [
                            "state.tsdf.get_grid()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_99": {
                "variable": {
                    "value": "tsdf_vol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_28": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/vgn/detection_implicit.py": {
        "torch": {
            "from_numpy_103": {
                "variable": {
                    "value": "tsdf_vol",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tsdf_vol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(tsdf_vol).to(device)",
                            "Call"
                        ],
                        [
                            "tsdf_vol.squeeze()",
                            "Call"
                        ],
                        [
                            "state.tsdf",
                            "Attribute"
                        ],
                        [
                            "state.tsdf.get_grid()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_19": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "meshgrid_28": {
                "variable": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.linspace(start=-0.5, end=0.5 - 1.0 / self.resolution, steps=self.resolution)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.linspace(start=-0.5, end=0.5 - 1.0 / self.resolution, steps=self.resolution)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_30": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_30": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_28": {
                "start": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.5 - 1.0 / self.resolution",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.resolution",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/vgn/networks.py": {
        "torch": {
            "Conv3d_39": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_43": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_60": {
                "variable": {
                    "value": "qual_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_qual(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_61": {
                "variable": {
                    "value": "rot_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_rot(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_181": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 10)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 20)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 40)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_184": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 10)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 20)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 40)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_187": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 10)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 20)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 40)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_201": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 10)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 20)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 40)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_203": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 10)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 20)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 40)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_205": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 10)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 20)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 40)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_207": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 10)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 20)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 40)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_209": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 10)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 20)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 40)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_211": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 10)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 20)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 40)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_238": {
                "variable": {
                    "value": "self.fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(size_in, size_out)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(size_in, size_out)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size_in",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_240": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_34": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_245": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size_in",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/vgn/utils/misc.py": {
        "torch": {
            "manual_seed_11": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_14": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}