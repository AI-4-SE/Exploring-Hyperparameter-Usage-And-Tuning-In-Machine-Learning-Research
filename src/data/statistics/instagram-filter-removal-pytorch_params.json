{
    "engine/tester.py": {
        "sklearn": {
            "confusion_matrix_135": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "tgts",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "clss",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "self.image_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_62": {
                "variable": {
                    "value": "checkpoints",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_148": {
                "variable": {
                    "value": "cm_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "variable": {
                    "value": "cmt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "y_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(y_imgs, dim=0).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_89": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(self.classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_targets, y.float().cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_94": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(output, max=1.0, min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "current_device_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_87": {
                "tensors": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear_scaling(torch.cat(imgs, dim=0).float().cuda())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_95": {
                "input": {
                    "value": "self.mlp(aux)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_96": {
                "tensors": {
                    "value": "(all_preds, y_pred.float().cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "all_preds == all_targets",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/iffi.py": {
        "torch": {}
    },
    "datasets/transforms.py": {
        "torch": {
            "randint_32": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "h - th + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_33": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "w - tw + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_154": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "load_28": {
                "variable": {
                    "value": "checkpoints",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_42": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(out, max=1.0, min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.expand_dims(np.transpose(img, (2, 0, 1)), axis=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(arr).float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "linear_scaling(arr)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_28": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "engine/trainer.py": {
        "torch": {
            "DataLoader_42": {
                "variable": {
                    "value": "self.image_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.opt.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "self.opt.TRAIN.SHUFFLE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.opt.SYSTEM.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "losses/adversarial.py": {
        "torch": {
            "is_available_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_19": {
                "input": {
                    "value": "d_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(interpolates)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_21": {
                "outputs": {
                    "value": "d_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(alpha * real_samples + (1 - alpha) * fake_samples).requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.ones_like(d_interpolates), requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "losses/consistency.py": {
        "torch": {
            "exp_53": {
                "variable": {
                    "value": "dist_before_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(self.bias - scaled_dist) / self.nn_stretch_sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "cosine_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cosine_dist_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_80": {
                "variable": {
                    "value": "div_mrf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_max_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(rela_dist.view(dims_div_mrf[0], dims_div_mrf[1], -1), dim=2)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_82": {
                "variable": {
                    "value": "div_mrf_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "div_mrf_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.log(div_mrf)",
                            "UnaryOp"
                        ],
                        [
                            "torch.sum(div_mrf_sum)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_16": {
                "input": {
                    "value": "torch.abs(o - t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "variable": {
                    "value": "cosine_dist_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_feat_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o_normalized[i:i + 1, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "patches_OIHW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.patch_extraction(t_feat_i)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_16": {
                "input": {
                    "value": "o - t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_36": {
                "input": {
                    "value": "feature_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_58": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_59": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_60": {
                "input": {
                    "value": "o_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o - torch.mean(t, 1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_61": {
                "input": {
                    "value": "t_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t - torch.mean(t, 1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_79": {
                "input": {
                    "value": "rela_dist.view(dims_div_mrf[0], dims_div_mrf[1], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_81": {
                "input": {
                    "value": "div_mrf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(k_max_nc, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_49": {
                "input": {
                    "value": "cdist",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/ssim.py": {
        "torch": {
            "Tensor_8": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_20": {
                "variable": {
                    "value": "mu1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_21": {
                "variable": {
                    "value": "mu2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_27": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_28": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_29": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "modeling/base.py": {
        "torch": {}
    },
    "modeling/benchmark.py": {
        "torch": {
            "rand_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_20": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "base_n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modeling/ifrnet.py": {
        "torch": {
            "rand_151": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.ds_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "destyler_n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "base_n_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.ds_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "destyler_n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "base_n_channels * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.ds_fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "destyler_n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "base_n_channels * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.ds_fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "destyler_n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "base_n_channels * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.ds_fc5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "destyler_n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "base_n_channels * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.ds_fc6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "destyler_n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "base_n_channels * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_27": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "base_n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.aux_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(base_n_channels * 8, base_n_channels * 4, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.image_to_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(nn.Conv2d(3, base_n_channels, 5, 2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.features_to_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(nn.Conv2d(8 * base_n_channels, 2 * base_n_channels, 5, 2, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.features_to_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(nn.Conv2d(8 * base_n_channels, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "base_n_channels * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "base_n_channels * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_69": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "base_n_channels * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "base_n_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_71": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "base_n_channels * 8 * 8 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "14",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "spectral_norm_106": {
                "module": {
                    "value": "nn.Conv2d(3, base_n_channels, 5, 2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_107": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_108": {
                "module": {
                    "value": "nn.Conv2d(base_n_channels, 2 * base_n_channels, 5, 2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_109": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_110": {
                "module": {
                    "value": "nn.Conv2d(2 * base_n_channels, 2 * base_n_channels, 5, 2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_111": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_112": {
                "module": {
                    "value": "nn.Conv2d(2 * base_n_channels, 4 * base_n_channels, 5, 2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_113": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_116": {
                "module": {
                    "value": "nn.Conv2d(4 * base_n_channels, 8 * base_n_channels, 5, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_117": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_122": {
                "module": {
                    "value": "nn.Conv2d(8 * base_n_channels, 2 * base_n_channels, 5, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "in_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 * base_n_channels * 3 * 3",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_139": {
                "module": {
                    "value": "nn.Conv2d(8 * base_n_channels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "base_n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "base_n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * base_n_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "in_channels": {
                    "value": "2 * base_n_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * base_n_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "2 * base_n_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * base_n_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "4 * base_n_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8 * base_n_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "in_channels": {
                    "value": "8 * base_n_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * base_n_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "8 * base_n_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "modeling/vgg.py": {
        "torch": {
            "tensor_10": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modules/blocks.py": {
        "torch": {
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels_out",
                            "Name"
                        ],
                        [
                            "channels_out",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_19": {
                "variable": {
                    "value": "self.lrelu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_24": {
                "variable": {
                    "value": "self.lrelu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels_out",
                            "Name"
                        ],
                        [
                            "channels_out",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_55": {
                "variable": {
                    "value": "self.lrelu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.n2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_60": {
                "variable": {
                    "value": "self.lrelu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.fc5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels_out",
                            "Name"
                        ],
                        [
                            "channels_out",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels_out",
                            "Name"
                        ],
                        [
                            "channels_out",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modules/normalization.py": {
        "torch": {
            "split_11": {
                "variable": {
                    "value": "(sigma, mu)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y.unsqueeze(-1).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[ch // 2, ch // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}