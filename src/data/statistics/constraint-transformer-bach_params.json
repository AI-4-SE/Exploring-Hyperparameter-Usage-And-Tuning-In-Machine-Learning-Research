{
    "Grader/grader.py": {
        "sklearn": {
            "GaussianMixture_329": {
                "variable": {
                    "value": "gm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/analyze_ablations.py": {
        "sklearn": {}
    },
    "experiments/grade_ablations.py": {
        "sklearn": {}
    },
    "experiments/grading_function_ablations.py": {
        "sklearn": {}
    },
    "human_evaluation/plot_results.py": {
        "sklearn": {
            "confusion_matrix_85": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "grading_function_pick",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a > b for (a, b) in zip(df[f'{labels[0]}_grade'], df[f'{labels[1]}_grade'])]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "human_pick",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['correct']",
                            "Subscript"
                        ]
                    ]
                },
                "labels": {
                    "value": "[True, False]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "human_evaluation/plot_results_for_one_comparison.py": {
        "sklearn": {
            "confusion_matrix_69": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "grading_function_pick",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a < b for (a, b) in zip(df[f'bach_grade'], df[f'base_grade'])]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "human_pick",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['correct']",
                            "Subscript"
                        ]
                    ]
                },
                "labels": {
                    "value": "[True, False]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_count_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformer_bach/DatasetManager/chorale_dataset.py": {
        "torch": {
            "cat_179": {
                "variable": {
                    "value": "chorale_tensor_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "chorale_tensor_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(chorale_tensor_dataset, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(chorale_tensor_dataset, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "metadata_tensor_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "metadata_tensor_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(metadata_tensor_dataset, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(metadata_tensor_dataset, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_182": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "chorale_tensor_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_223": {
                "variable": {
                    "value": "voice_id_metada",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(self.num_voices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_223": {
                "variable": {
                    "value": "voice_id_metada",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_224": {
                "variable": {
                    "value": "square_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voice_id_metada.repeat(chorale_length, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "all_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "md",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_250": {
                "variable": {
                    "value": "fermata_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.sequences_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_491": {
                "variable": {
                    "value": "padded_chorale",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded_chorale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(padded_chorale, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_525": {
                "variable": {
                    "value": "padded_tensor_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded_tensor_metadata",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(padded_tensor_metadata, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_532": {
                "variable": {
                    "value": "start_symbols",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "start_symbols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([note2index[START_SYMBOL] for note2index in self.note2index_dicts])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(start_symbols).long().clone()",
                            "Call"
                        ],
                        [
                            "start_symbols.repeat(1, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "np.zeros((self.num_voices, -start_tick, num_metadatas))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(start_symbols).long().clone()",
                            "Call"
                        ],
                        [
                            "np.array([note2index[START_SYMBOL] for note2index in self.note2index_dicts])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(start_symbols).long().clone()",
                            "Call"
                        ],
                        [
                            "start_symbols.repeat(score_length, 1).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_532": {
                "variable": {
                    "value": "start_symbols",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_541": {
                "variable": {
                    "value": "chorale_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "chorale_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chorale_transpositions[semi_tone]",
                            "Subscript"
                        ],
                        [
                            "self.get_score_tensor(chorale_tranposed, offsetStart=0.0, offsetEnd=chorale_tranposed.flat.highestTime)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array([np.random.randint(len(note2index), size=score_length) for note2index in self.note2index_dicts])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(chorale_tensor).long().clone()",
                            "Call"
                        ],
                        [
                            "chorale_transpositions[semi_tone]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clone_541": {
                "variable": {
                    "value": "chorale_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_706": {
                "variable": {
                    "value": "chorale_tensor_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "chorale_tensor_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(chorale_tensor_dataset, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(chorale_tensor_dataset, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_707": {
                "variable": {
                    "value": "metadata_tensor_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "metadata_tensor_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(metadata_tensor_dataset, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(metadata_tensor_dataset, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_709": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "chorale_tensor_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_280": {
                "tensors": {
                    "value": "chorale_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chorale_transpositions[semi_tone]",
                            "Subscript"
                        ],
                        [
                            "self.get_score_tensor(chorale_tranposed, offsetStart=0.0, offsetEnd=chorale_tranposed.flat.highestTime)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array([np.random.randint(len(note2index), size=score_length) for note2index in self.note2index_dicts])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(chorale_tensor).long().clone()",
                            "Call"
                        ],
                        [
                            "chorale_transpositions[semi_tone]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_459": {
                "variable": {
                    "value": "start_symbols",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "start_symbols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([note2index[START_SYMBOL] for note2index in self.note2index_dicts])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(start_symbols).long().clone()",
                            "Call"
                        ],
                        [
                            "start_symbols.repeat(1, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "np.zeros((self.num_voices, -start_tick, num_metadatas))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(start_symbols).long().clone()",
                            "Call"
                        ],
                        [
                            "np.array([note2index[START_SYMBOL] for note2index in self.note2index_dicts])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(start_symbols).long().clone()",
                            "Call"
                        ],
                        [
                            "start_symbols.repeat(score_length, 1).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_459": {
                "variable": {
                    "value": "start_symbols",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_460": {
                "variable": {
                    "value": "pad_symbols",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pad_symbols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([note2index[PAD_SYMBOL] for note2index in self.note2index_dicts])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pad_symbols).long().clone()",
                            "Call"
                        ],
                        [
                            "pad_symbols.repeat(-start_tick - 1, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "np.array([note2index[PAD_SYMBOL] for note2index in self.note2index_dicts])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pad_symbols).long().clone()",
                            "Call"
                        ],
                        [
                            "pad_symbols.repeat(end_tick - length - 1, 1).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_460": {
                "variable": {
                    "value": "pad_symbols",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_478": {
                "variable": {
                    "value": "end_symbols",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "end_symbols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([note2index[END_SYMBOL] for note2index in self.note2index_dicts])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(end_symbols).long().clone()",
                            "Call"
                        ],
                        [
                            "end_symbols.repeat(1, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "np.zeros((self.num_voices, end_tick - length, num_metadatas))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(end_symbols).long().clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_478": {
                "variable": {
                    "value": "end_symbols",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_481": {
                "variable": {
                    "value": "pad_symbols",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pad_symbols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([note2index[PAD_SYMBOL] for note2index in self.note2index_dicts])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pad_symbols).long().clone()",
                            "Call"
                        ],
                        [
                            "pad_symbols.repeat(-start_tick - 1, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "np.array([note2index[PAD_SYMBOL] for note2index in self.note2index_dicts])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pad_symbols).long().clone()",
                            "Call"
                        ],
                        [
                            "pad_symbols.repeat(end_tick - length - 1, 1).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_481": {
                "variable": {
                    "value": "pad_symbols",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_511": {
                "variable": {
                    "value": "start_symbols",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "start_symbols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([note2index[START_SYMBOL] for note2index in self.note2index_dicts])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(start_symbols).long().clone()",
                            "Call"
                        ],
                        [
                            "start_symbols.repeat(1, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "np.zeros((self.num_voices, -start_tick, num_metadatas))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(start_symbols).long().clone()",
                            "Call"
                        ],
                        [
                            "np.array([note2index[START_SYMBOL] for note2index in self.note2index_dicts])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(start_symbols).long().clone()",
                            "Call"
                        ],
                        [
                            "start_symbols.repeat(score_length, 1).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_511": {
                "variable": {
                    "value": "start_symbols",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_522": {
                "variable": {
                    "value": "end_symbols",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "end_symbols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([note2index[END_SYMBOL] for note2index in self.note2index_dicts])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(end_symbols).long().clone()",
                            "Call"
                        ],
                        [
                            "end_symbols.repeat(1, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "np.zeros((self.num_voices, end_tick - length, num_metadatas))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(end_symbols).long().clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_522": {
                "variable": {
                    "value": "end_symbols",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_216": {
                "variable": {
                    "value": "sequence_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "metadata.evaluate(score, self.subdivision)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_216": {
                "variable": {
                    "value": "sequence_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_344": {
                "ndarray": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t[:, 0] * t[:, 1] + (1 - t[:, 1]) * note2index[SLUR_SYMBOL]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_467": {
                "variable": {
                    "value": "padding_sequence_start",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad_symbols, start_symbols]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_488": {
                "variable": {
                    "value": "padding_sequence_end",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[end_symbols, pad_symbols]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformer_bach/DatasetManager/dataset_manager.py": {
        "torch": {
            "load_77": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dataset.filepath(self.cache_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transformer_bach/DatasetManager/helpers.py": {
        "torch": {}
    },
    "transformer_bach/DatasetManager/music_dataset.py": {
        "torch": {
            "DataLoader_178": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_tensor_dataset(self.cache_dir)",
                            "Call"
                        ],
                        [
                            "self.get_tensor_dataset(self.cache_dir)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_137": {
                "variable": {
                    "value": "self.tensor_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.tensor_dataset_filepath(cache_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_149": {
                "obj": {
                    "value": "self.tensor_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.tensor_dataset_filepath(cache_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transformer_bach/data_processor.py": {
        "torch": {
            "ModuleList_25": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(num_embeddings + additional_token, self.embedding_size) for num_embeddings in self.num_tokens_per_channel]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_38": {
                "tensors": {
                    "value": "[embedding(t) for (t, embedding) in zip(x.split(1, dim=-1), self.embeddings)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_27": {
                "num_embeddings": {
                    "value": "num_embeddings + additional_token",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformer_bach/decoder_relative.py": {
        "torch": {
            "Parameter_70": {
                "variable": {
                    "value": "self.channel_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((1, self.num_channels, positional_embedding_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.events_grouped_positioning_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((1, self.num_events_grouped, positional_embedding_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.linear_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.data_processor.embedding_size + positional_embedding_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_126": {
                "variable": {
                    "value": "self.sos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((1, 1, self.d_model))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_128": {
                "variable": {
                    "value": "self.mask_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((1, 1, self.data_processor.embedding_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_132": {
                "variable": {
                    "value": "self.pre_softmaxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.d_model, num_tokens_of_channel) for num_tokens_of_channel in self.num_tokens_per_channel]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Adam_140": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_182": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seq, self.channel_embeddings.repeat(batch_size, num_tokens // self.num_channels, 1), self.events_grouped_positioning_embeddings.repeat_interleave(self.num_channels, dim=1).repeat((batch_size, num_tokens // (self.num_channels * self.num_events_grouped), 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "target_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dummy_input, target_seq[:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_549": {
                "variable": {
                    "value": "aa",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_549": {
                "variable": {
                    "value": "aa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_550": {
                "variable": {
                    "value": "bb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_550": {
                "variable": {
                    "value": "bb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_551": {
                "variable": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_551": {
                "variable": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_552": {
                "variable": {
                    "value": "dd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_552": {
                "variable": {
                    "value": "dd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_553": {
                "variable": {
                    "value": "init_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aa, bb, cc, dd]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_555": {
                "variable": {
                    "value": "masked_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([aa, bb, cc, dd], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_161": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/decoder'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "SummaryWriter_350": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "f'{self.model_dir}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "randn_71": {
                "*size": {
                    "value": "(1, self.num_channels, positional_embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_77": {
                "*size": {
                    "value": "(1, self.num_events_grouped, positional_embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_126": {
                "*size": {
                    "value": "(1, 1, self.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_129": {
                "*size": {
                    "value": "(1, 1, self.data_processor.embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_177": {
                "f": {
                    "value": "f'{model_dir}/decoder'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "rand_283": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_409": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_484": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_132": {
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_tokens_of_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_262": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data_processor.preprocess(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__316": {
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_429": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[top_k_top_p_filtering(logit, top_p=0.9) for logit in logits]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_435": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights[:, event_index, :]",
                            "Subscript"
                        ],
                        [
                            "torch.stack([top_k_top_p_filtering(logit, top_p=0.9) for logit in logits], dim=0)",
                            "Call"
                        ],
                        [
                            "logits / temperature",
                            "BinOp"
                        ],
                        [
                            "weights[:, event_relative, :]",
                            "Subscript"
                        ],
                        [
                            "logits / temperature",
                            "BinOp"
                        ],
                        [
                            "torch.stack([top_k_top_p_filtering(logit, top_p=top_p) for logit in logits], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_518": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[top_k_top_p_filtering(logit, top_p=top_p) for logit in logits]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_523": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights[:, event_index, :]",
                            "Subscript"
                        ],
                        [
                            "torch.stack([top_k_top_p_filtering(logit, top_p=0.9) for logit in logits], dim=0)",
                            "Call"
                        ],
                        [
                            "logits / temperature",
                            "BinOp"
                        ],
                        [
                            "weights[:, event_relative, :]",
                            "Subscript"
                        ],
                        [
                            "logits / temperature",
                            "BinOp"
                        ],
                        [
                            "torch.stack([top_k_top_p_filtering(logit, top_p=top_p) for logit in logits], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_277": {
                "input": {
                    "value": "torch.ones(sz, sz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_277": {
                "*size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_like_285": {
                "input": {
                    "value": "x[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "transformer_bach/getters.py": {
        "torch": {
            "cat_15": {
                "variable": {
                    "value": "tensor_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformer_bach/losses.py": {
        "torch": {
            "cat_18": {
                "variable": {
                    "value": "negatives_and_positive",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[negatives, positive.unsqueeze(2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_24": {
                "variable": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "negatives_and_positive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([negatives, positive.unsqueeze(2)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([positive.unsqueeze(2), negatives], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "negatives_and_positive",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[positive.unsqueeze(2), negatives]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_50": {
                "variable": {
                    "value": "loss_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entmax[:, :, 0] + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_71": {
                "variable": {
                    "value": "D_ap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_a - z_p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_72": {
                "variable": {
                    "value": "D_an_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_a_negative - z_n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "D_an",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D_ap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(z_a - z_p, p=2, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_83": {
                "variable": {
                    "value": "loss_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "contrast > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "contrast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D_ap - D_an + alpha",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros_like(contrast)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_83": {
                "input": {
                    "value": "contrast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D_ap - D_an + alpha",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_109": {
                "input": {
                    "value": "v + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "transformer_bach/multihead_attention_custom.py": {
        "torch": {
            "arange_363": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels * num_events",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_363": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "equal_138": {
                "variable": {
                    "value": "kv_same",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bmm_297": {
                "variable": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q * scaling",
                            "BinOp"
                        ],
                        [
                            "F.linear(query, _w, _b)",
                            "Call"
                        ],
                        [
                            "F.linear(query, _w, _b)",
                            "Call"
                        ],
                        [
                            "F.linear(query, q_proj_weight_non_opt, self.in_proj_bias[0:embed_dim])",
                            "Call"
                        ],
                        [
                            "F.linear(query, q_proj_weight_non_opt, self.in_proj_bias)",
                            "Call"
                        ],
                        [
                            "q.contiguous().view(tgt_len, bsz * self.num_heads, head_dim).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_321": {
                "variable": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_output_weights + attn_bias",
                            "BinOp"
                        ],
                        [
                            "attn_output_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), float('-inf'))",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_output_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_output_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_322": {
                "variable": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_output_weights + attn_bias",
                            "BinOp"
                        ],
                        [
                            "attn_output_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), float('-inf'))",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_output_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_output_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_326": {
                "variable": {
                    "value": "attn_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_output_weights + attn_bias",
                            "BinOp"
                        ],
                        [
                            "attn_output_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), float('-inf'))",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_output_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_output_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([v, self.bias_v.repeat(1, bsz, 1)])",
                            "Call"
                        ],
                        [
                            "F.linear(value, v_proj_weight_non_opt, self.in_proj_bias[embed_dim * 2:])",
                            "Call"
                        ],
                        [
                            "F.linear(value, v_proj_weight_non_opt, self.in_proj_bias)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "F.linear(value, _w, _b)",
                            "Call"
                        ],
                        [
                            "v.contiguous().view(-1, bsz * self.num_heads, head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "static_v",
                            "Name"
                        ],
                        [
                            "torch.cat([v, torch.zeros((v.size(0), 1) + v.size()[2:], dtype=v.dtype, device=v.device)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_329": {
                "variable": {
                    "value": "attn_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(attn_output_weights, v)",
                            "Call"
                        ],
                        [
                            "attn_output.transpose(0, 1).contiguous().view(tgt_len, bsz, embed_dim)",
                            "Call"
                        ],
                        [
                            "F.linear(attn_output, self.out_proj.weight, self.out_proj.bias)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.out_proj.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.out_proj.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "self.k_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.kdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "self.v_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.vdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_63": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, torch.zeros((k.size(0), 1) + k.size()[2:], dtype=k.dtype, device=k.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, torch.zeros((v.size(0), 1) + v.size()[2:], dtype=v.dtype, device=v.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_55": {
                "*size": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "equal_137": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linear_154": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_154": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_223": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "q_proj_weight_non_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit._unwrap_optional(self.q_proj_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.in_proj_bias[0:embed_dim]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_224": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "k_proj_weight_non_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit._unwrap_optional(self.k_proj_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.in_proj_bias[embed_dim:embed_dim * 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_225": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "v_proj_weight_non_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit._unwrap_optional(self.v_proj_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.in_proj_bias[embed_dim * 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_227": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "q_proj_weight_non_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit._unwrap_optional(self.q_proj_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_228": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "k_proj_weight_non_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit._unwrap_optional(self.k_proj_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_229": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "v_proj_weight_non_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit._unwrap_optional(self.v_proj_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, self.bias_k.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, self.bias_v.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, torch.zeros((attn_mask.size(0), 1), dtype=attn_mask.dtype, device=attn_mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_padding_mask, torch.zeros((key_padding_mask.size(0), 1), dtype=key_padding_mask.dtype, device=key_padding_mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_63": {
                "*size": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_69": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "empty_70": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "linear_165": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_190": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_199": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_208": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_239": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, torch.zeros((attn_mask.size(0), 1), dtype=attn_mask.dtype, device=attn_mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_padding_mask, torch.zeros((key_padding_mask.size(0), 1), dtype=key_padding_mask.dtype, device=key_padding_mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_368": {
                "input": {
                    "value": "torch.ones(seq_len, seq_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_180": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "chunk_180": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_283": {
                "*size": {
                    "value": "(k.size(0), 1) + k.size()[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "k.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "k.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_284": {
                "*size": {
                    "value": "(v.size(0), 1) + v.size()[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_368": {
                "*size": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels * num_events",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels * num_events",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_286": {
                "*size": {
                    "value": "(attn_mask.size(0), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "attn_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "attn_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_291": {
                "*size": {
                    "value": "(key_padding_mask.size(0), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "key_padding_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "key_padding_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_240": {
                "*size": {
                    "value": "(attn_mask.size(0), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "attn_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "attn_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_245": {
                "*size": {
                    "value": "(key_padding_mask.size(0), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "key_padding_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "key_padding_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformer_bach/relative_attention.py": {
        "torch": {
            "Parameter_14": {
                "variable": {
                    "value": "self.e1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_heads * max_seq_len, self.head_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.e2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_heads * max_seq_len, self.head_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_34": {
                "variable": {
                    "value": "rel_attn_1",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bld,bmd->blm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(q, e1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_42": {
                "variable": {
                    "value": "rel_attn_2",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bld,bmd->blm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(q, e2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "rel_attn_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rel_attn_1, cuda_variable(torch.ones(1, 1, 1) * -100).repeat(batch_size, l, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "rel_attn_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cuda_variable(torch.ones(1, 1, 1) * -100).repeat(batch_size, l, 1), rel_attn_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_74": {
                "variable": {
                    "value": "masks_down",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones_like(rel_attn_1[0]).byte()",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_74": {
                "variable": {
                    "value": "masks_down",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_74": {
                "variable": {
                    "value": "masks_down",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_77": {
                "variable": {
                    "value": "masks_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones_like(rel_attn_2[0]).byte()",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_77": {
                "variable": {
                    "value": "masks_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_93": {
                "*size": {
                    "value": "(batch_size * num_heads, seq_len, head_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_14": {
                "*size": {
                    "value": "num_heads * max_seq_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.head_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_15": {
                "*size": {
                    "value": "num_heads * max_seq_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.head_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_51": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_63": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_77": {
                "input": {
                    "value": "rel_attn_2[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_74": {
                "input": {
                    "value": "rel_attn_1[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "transformer_bach/transformer_custom.py": {
        "torch": {
            "Linear_256": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_257": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_258": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_260": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_261": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_262": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_263": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_329": {
                "variable": {
                    "value": "self.diagonal_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_332": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_333": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_334": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_336": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_337": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_338": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_339": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_340": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_341": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_285": {
                "input": {
                    "value": "self.linear1(src)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_373": {
                "input": {
                    "value": "self.linear1(tgt)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transformer_bach/utils.py": {
        "torch": {
            "CrossEntropyLoss_62": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_47": {
                "variable": {
                    "value": "(max_values, max_indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "voice",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_129": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_130": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_167": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "input": {
                    "value": "sorted_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_126": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(top_k, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}