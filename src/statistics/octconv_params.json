{
    "benchmarks/benchmark.py": {
        "torch": {
            "rand_13": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "no_grad_11": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rand_39": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/models/layers.py": {
        "torch": {
            "ReLU_43": {
                "variable": {
                    "value": "activation_layer",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/models/resnets.py": {
        "torch": {
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_73": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_78": {
                "variable": {
                    "value": "self.avgpool",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_120": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "OctConvBn(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, alpha=(self.alpha, 0.0))",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "OctConvBn(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, alpha=self.alpha if not first_layer else (0.0, self.alpha))",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/models/resnets_small.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "AvgPool2d_17": {
                "variable": {
                    "value": "self.avg_pool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/train.py": {
        "torch": {
            "CrossEntropyLoss_349": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SGD_351": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            },
            "DataLoader_93": {
                "variable": {
                    "value": "loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "ImageNet(root=root, split='train', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageNet(root=root, split='val', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=True, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=False, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "'imagenet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "image.shape[0]",
                            "Subscript"
                        ],
                        [
                            "image.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "workers",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_115": {
                "variable": {
                    "value": "loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "ImageNet(root=root, split='train', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageNet(root=root, split='val', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=True, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=False, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "'imagenet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "image.shape[0]",
                            "Subscript"
                        ],
                        [
                            "image.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "workers",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_150": {
                "variable": {
                    "value": "loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "ImageNet(root=root, split='train', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageNet(root=root, split='val', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=True, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=False, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "'imagenet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "image.shape[0]",
                            "Subscript"
                        ],
                        [
                            "image.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "workers",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_170": {
                "variable": {
                    "value": "loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "ImageNet(root=root, split='train', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageNet(root=root, split='val', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=True, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=False, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "'imagenet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "image.shape[0]",
                            "Subscript"
                        ],
                        [
                            "image.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "workers",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_197": {
                "variable": {
                    "value": "all_losses",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_losses",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_losses, dim=0)",
                            "Call"
                        ],
                        [
                            "all_losses / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "load_391": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "DistributedSampler_89": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "ImageNet(root=root, split='train', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageNet(root=root, split='val', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=True, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=False, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "'imagenet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RandomSampler_91": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "ImageNet(root=root, split='train', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageNet(root=root, split='val', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=True, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=False, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "'imagenet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DistributedSampler_111": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "ImageNet(root=root, split='train', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageNet(root=root, split='val', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=True, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=False, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "'imagenet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SequentialSampler_113": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "ImageNet(root=root, split='train', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageNet(root=root, split='val', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=True, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=False, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "'imagenet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DistributedSampler_146": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "ImageNet(root=root, split='train', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageNet(root=root, split='val', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=True, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=False, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "'imagenet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RandomSampler_148": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "ImageNet(root=root, split='train', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageNet(root=root, split='val', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=True, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=False, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "'imagenet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DistributedSampler_166": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "ImageNet(root=root, split='train', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageNet(root=root, split='val', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=True, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=False, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "'imagenet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SequentialSampler_168": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "ImageNet(root=root, split='train', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageNet(root=root, split='val', download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=True, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(root=root, train=False, download=download, transform=transform)",
                            "Call"
                        ],
                        [
                            "'imagenet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_189": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_264": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "set_device_293": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "device_361": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_384": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "get_model(args.arch, **kwargs)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, args.devices)",
                            "Call"
                        ],
                        [
                            "apex.parallel.DistributedDataParallel(model, delay_allreduce=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "DataParallel_363": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "get_model(args.arch, **kwargs)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, args.devices)",
                            "Call"
                        ],
                        [
                            "apex.parallel.DistributedDataParallel(model, delay_allreduce=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.devices",
                    "possible_values": []
                }
            },
            "device_366": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "device_368": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(args.devices)",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/utils.py": {
        "torch": {
            "tensor_38": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_220": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_222": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_229": {
                "obj": {
                    "value": "*args",
                    "possible_values": []
                }
            },
            "is_available_233": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_235": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_241": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_243": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_257": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_259": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "max_memory_allocated_141": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "octconv/octconv.py": {
        "torch": {
            "AvgPool2d_85": {
                "variable": {
                    "value": "self.pool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "self.in_channels['high']",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels['high']",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups['high']",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "self.in_channels['high']",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels['low']",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups['high']",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "self.in_channels['low']",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels['high']",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups['low']",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "self.in_channels['low']",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels['low']",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups['low']",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_147": {
                "input": {
                    "value": "x_l2h",
                    "possible_values": [
                        [
                            "self.conv_l2h(x_l) if self.out_channels['high'] > 0 and self.in_channels['low'] > 0 else None",
                            "IfExp"
                        ],
                        [
                            "F.interpolate(x_l2h, size=x_h2h.shape[-2:]) if self.out_channels['high'] > 0 and self.stride == 1 else x_l2h",
                            "IfExp"
                        ]
                    ]
                },
                "size": {
                    "value": "x_h2h.shape[-2:]",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_octconv.py": {
        "torch": {
            "rand_8": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "200",
                    "possible_values": []
                },
                "layout": {
                    "value": "200",
                    "possible_values": []
                }
            },
            "no_grad_6": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rand_21": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "200",
                    "possible_values": []
                },
                "layout": {
                    "value": "200",
                    "possible_values": []
                }
            },
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rand_34": {
                "variable": {
                    "value": "x_h",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "possible_values": []
                },
                "dtype": {
                    "value": "200",
                    "possible_values": []
                },
                "layout": {
                    "value": "200",
                    "possible_values": []
                }
            },
            "rand_35": {
                "variable": {
                    "value": "x_l",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "100",
                    "possible_values": []
                },
                "layout": {
                    "value": "100",
                    "possible_values": []
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rand_48": {
                "variable": {
                    "value": "x_h",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "200",
                    "possible_values": []
                },
                "layout": {
                    "value": "200",
                    "possible_values": []
                }
            },
            "rand_49": {
                "variable": {
                    "value": "x_l",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "100",
                    "possible_values": []
                },
                "layout": {
                    "value": "100",
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rand_58": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "200",
                    "possible_values": []
                },
                "layout": {
                    "value": "200",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rand_71": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "200",
                    "possible_values": []
                },
                "layout": {
                    "value": "200",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}