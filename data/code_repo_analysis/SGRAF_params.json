{
    "data.py": {
        "torch": {
            "stack_80": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*data)",
                            "Call"
                        ],
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(captions)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PrecompDataset(data_path, data_split, vocab)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_44": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_55": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_76": {
                "key": {
                    "value": "lambda x: len(x[1])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation.py": {
        "torch": {
            "load_120": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_218": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_embs[im_start:im_end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_219": {
                "variable": {
                    "value": "ca",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cap_embs[ca_start:ca_end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "div_19": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(X, norm)",
                            "Call"
                        ],
                        [
                            "torch.div(X, norm)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(X).sum(dim=dim, keepdim=True) + eps",
                            "BinOp"
                        ],
                        [
                            "torch.pow(X, 2).sum(dim=dim, keepdim=True).sqrt() + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_26": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(X, norm)",
                            "Call"
                        ],
                        [
                            "torch.div(X, norm)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(X).sum(dim=dim, keepdim=True) + eps",
                            "BinOp"
                        ],
                        [
                            "torch.pow(X, 2).sum(dim=dim, keepdim=True).sqrt() + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_32": {
                "variable": {
                    "value": "w12",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1 * x2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_33": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_34": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_390": {
                "variable": {
                    "value": "queryT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_394": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "queryT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(query, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_400": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(context, queryT)",
                            "Call"
                        ],
                        [
                            "nn.LeakyReLU(0.1)(attn)",
                            "Call"
                        ],
                        [
                            "l2norm(attn, 2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(attn, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "F.softmax(attn * smooth, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_402": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn * smooth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_405": {
                "variable": {
                    "value": "attnT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(context, queryT)",
                            "Call"
                        ],
                        [
                            "nn.LeakyReLU(0.1)(attn)",
                            "Call"
                        ],
                        [
                            "l2norm(attn, 2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(attn, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "F.softmax(attn * smooth, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_408": {
                "variable": {
                    "value": "contextT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_411": {
                "variable": {
                    "value": "weightedContext",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "contextT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(context, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attnT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(attn, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_413": {
                "variable": {
                    "value": "weightedContext",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weightedContext",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(contextT, attnT)",
                            "Call"
                        ],
                        [
                            "torch.transpose(weightedContext, 1, 2)",
                            "Call"
                        ],
                        [
                            "l2norm(weightedContext, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "img_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_94": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "word_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_95": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GRU_99": {
                "variable": {
                    "value": "self.cap_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "word_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "use_bi_gru",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_113": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cap_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed(captions)",
                            "Call"
                        ],
                        [
                            "self.dropout(cap_emb)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(out, batch_first=True)",
                            "Call"
                        ],
                        [
                            "(cap_emb[:, :, :cap_emb.size(2) / 2] + cap_emb[:, :, cap_emb.size(2) / 2:]) / 2",
                            "BinOp"
                        ],
                        [
                            "l2norm(cap_emb, dim=-1)",
                            "Call"
                        ],
                        [
                            "cap_emb",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_119": {
                "variable": {
                    "value": "(cap_emb, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cap_rnn(packed)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.embedding_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.embedding_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.embedding_common",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(embed_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_150": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "variable": {
                    "value": "self.embedding_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "variable": {
                    "value": "self.embedding_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_196": {
                "variable": {
                    "value": "self.embedding_common",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(embed_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_199": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "self.graph_query_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sim_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "sim_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_240": {
                "variable": {
                    "value": "self.graph_key_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sim_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "sim_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_241": {
                "variable": {
                    "value": "self.sim_graph_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sim_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "sim_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_242": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_249": {
                "variable": {
                    "value": "sim_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(sim_query, sim_key.permute(0, 2, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_250": {
                "variable": {
                    "value": "sim_sgr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(torch.bmm(sim_query, sim_key.permute(0, 2, 1)), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "sim_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([sim_glo.unsqueeze(1), sim_loc], 1)",
                            "Call"
                        ],
                        [
                            "module(sim_emb)",
                            "Call"
                        ],
                        [
                            "sim_emb",
                            "Method Argument"
                        ],
                        [
                            "sim_emb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_274": {
                "variable": {
                    "value": "self.attn_sim_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sim_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_275": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_281": {
                "variable": {
                    "value": "sim_saf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l1norm(torch.sigmoid(self.bn(self.attn_sim_w(sim_emb).permute(0, 2, 1))), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sim_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([sim_glo.unsqueeze(1), sim_loc], 1)",
                            "Call"
                        ],
                        [
                            "module(sim_emb)",
                            "Call"
                        ],
                        [
                            "sim_emb",
                            "Method Argument"
                        ],
                        [
                            "sim_emb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_311": {
                "variable": {
                    "value": "self.sim_tranloc_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "sim_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_312": {
                "variable": {
                    "value": "self.sim_tranglo_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "sim_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_314": {
                "variable": {
                    "value": "self.sim_eval_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sim_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ],
                        [
                            "sim_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_315": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_332": {
                "variable": {
                    "value": "img_ave",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(images)",
                            "Call"
                        ],
                        [
                            "l2norm(img_emb, dim=-1)",
                            "Call"
                        ],
                        [
                            "img_emb",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_369": {
                "variable": {
                    "value": "sim_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sim_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sim_all, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_485": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.txt_enc.parameters())",
                            "Call"
                        ],
                        [
                            "params + list(self.sim_enc.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_18": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(X, norm)",
                            "Call"
                        ],
                        [
                            "torch.div(X, norm)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_18": {
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_25": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(X, norm)",
                            "Call"
                        ],
                        [
                            "torch.div(X, norm)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_25": {
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_318": {
                "variable": {
                    "value": "self.SGR_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GraphReasoning(sim_dim) for i in range(sgr_step)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_342": {
                "variable": {
                    "value": "cap_ave_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cap_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cap_emb[i, :n_word, :].unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_347": {
                "variable": {
                    "value": "sim_loc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sub(Context_img, cap_i_expand)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_350": {
                "variable": {
                    "value": "sim_glo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sub(img_glo, cap_glo_i)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "sim_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sim_glo.unsqueeze(1), sim_loc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_396": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_443": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_471": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_511": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_141": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_142": {
                "num_features": {
                    "value": "num_region",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_region",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_143": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_145": {
                "num_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_146": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_147": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_192": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_193": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_194": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_195": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_196": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_249": {
                "input": {
                    "value": "sim_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.graph_query_w(sim_emb)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "sim_key.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_280": {
                "input": {
                    "value": "self.bn(self.attn_sim_w(sim_emb).permute(0, 2, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_442": {
                "n": {
                    "value": "scores.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__550": {
                "parameters": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sub_347": {
                "input": {
                    "value": "Context_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SCAN_attention(cap_i_expand, img_emb, smooth=9.0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cap_i_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cap_i.repeat(n_image, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sub_350": {
                "input": {
                    "value": "img_glo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_global_w(img_emb, img_ave)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cap_glo_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.t_global_w(cap_i, cap_ave_i)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "save_168": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "prefix + filename",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}