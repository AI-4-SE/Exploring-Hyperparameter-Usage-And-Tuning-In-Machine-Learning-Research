{
    "attention/attention.py": {
        "torch": {
            "softmax_265": {
                "variable": {
                    "value": "w_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.view(batch_size * n_q, n_c)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_269": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dot(q, c)",
                            "Call"
                        ],
                        [
                            "score(q, c)",
                            "Call"
                        ],
                        [
                            "context_mask + s",
                            "BinOp"
                        ],
                        [
                            "context_mask + s",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_attention.py": {
        "torch": {
            "randn_11": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context_sizes[i] if context_sizes is not None else n_c",
                            "IfExp"
                        ]
                    ]
                }
            },
            "randn_28": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_q",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "n_c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "ndarray": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(0, 1, (batch_size, n_q, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_q, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_q, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_q, d))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_48": {
                "ndarray": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(0, 1, (batch_size, n_c, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_c, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_c, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_c, d))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_69": {
                "ndarray": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(0, 1, (batch_size, n_q, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_q, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_q, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_q, d))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_70": {
                "ndarray": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(0, 1, (batch_size, n_c, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_c, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_c, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_c, d))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_103": {
                "ndarray": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(0, 1, (batch_size, n_q, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_q, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_q, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_q, d))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_104": {
                "ndarray": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(0, 1, (batch_size, n_c, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_c, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_c, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_c, d))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_136": {
                "ndarray": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(0, 1, (batch_size, n_q, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_q, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_q, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_q, d))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_137": {
                "ndarray": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(0, 1, (batch_size, n_c, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_c, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_c, d))",
                            "Call"
                        ],
                        [
                            "np.random.normal(0, 1, (batch_size, n_c, d))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(0, 1, (batch_size, n_c, p))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}