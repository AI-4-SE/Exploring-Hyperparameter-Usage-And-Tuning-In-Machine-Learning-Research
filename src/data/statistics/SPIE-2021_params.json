{
    "code/IND/PCA_Aug.py": {
        "sklearn": {
            "PCA_32": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_24": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DiskSet_example(path, file)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "pca.components_.reshape(1, n_components, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.sqrt(pca.explained_variance_).reshape(1, n_components, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "self.Smean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.mean(S, axis=0, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(X, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(S, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Generator_53": {
                "variable": {
                    "value": "self.rng1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Generator_55": {
                "variable": {
                    "value": "self.rng2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s, border]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_91": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c * self.V * self.P",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "data_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data_x, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data_x, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "data_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data_s, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data_s, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "data_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data_x, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data_x, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "data_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data_s, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data_s, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Generator_73": {
                "variable": {
                    "value": "self.rng1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "sth",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Generator_75": {
                "variable": {
                    "value": "self.rng2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "sth",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_85": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.c_list.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, self.n_components, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.P.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "self.rng2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_104": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.X.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.P.device",
                            "Attribute"
                        ]
                    ]
                },
                "generator": {
                    "value": "self.rng1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "border",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.border.expand(s.shape[0], self.border.shape[1], self.border.shape[2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_60": {
                "variable": {
                    "value": "self.c_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "-c_max",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "c_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "self.c_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "c_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randint_110": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.X.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.P.device",
                            "Attribute"
                        ]
                    ]
                },
                "generator": {
                    "value": "self.rng1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_166": {
                "obj": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[data_x, data_s]",
                            "List"
                        ],
                        [
                            "self.generate_one_set()",
                            "Call"
                        ],
                        [
                            "self.generate_one_set()",
                            "Call"
                        ],
                        [
                            "torch.load(filename)",
                            "Call"
                        ],
                        [
                            "self.generate_one_set()",
                            "Call"
                        ],
                        [
                            "[data_x, data_s]",
                            "List"
                        ],
                        [
                            "self.generate_one_epoch()",
                            "Call"
                        ],
                        [
                            "self.generate_one_epoch()",
                            "Call"
                        ],
                        [
                            "torch.load(filename)",
                            "Call"
                        ],
                        [
                            "self.generate_one_epoch()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filename + '_set' + str(idx) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.filename + '_set' + str(set_idx) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.filename + '_epoch' + str(epoch) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.filename + '_epoch' + str(epoch) + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_179": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filename + '_set' + str(idx) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.filename + '_set' + str(set_idx) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.filename + '_epoch' + str(epoch) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.filename + '_epoch' + str(epoch) + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_255": {
                "obj": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[data_x, data_s]",
                            "List"
                        ],
                        [
                            "self.generate_one_set()",
                            "Call"
                        ],
                        [
                            "self.generate_one_set()",
                            "Call"
                        ],
                        [
                            "torch.load(filename)",
                            "Call"
                        ],
                        [
                            "self.generate_one_set()",
                            "Call"
                        ],
                        [
                            "[data_x, data_s]",
                            "List"
                        ],
                        [
                            "self.generate_one_epoch()",
                            "Call"
                        ],
                        [
                            "self.generate_one_epoch()",
                            "Call"
                        ],
                        [
                            "torch.load(filename)",
                            "Call"
                        ],
                        [
                            "self.generate_one_epoch()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filename + '_set' + str(idx) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.filename + '_set' + str(set_idx) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.filename + '_epoch' + str(epoch) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.filename + '_epoch' + str(epoch) + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_268": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filename + '_set' + str(idx) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.filename + '_set' + str(set_idx) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.filename + '_epoch' + str(epoch) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.filename + '_epoch' + str(epoch) + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randint_116": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.X.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.P.device",
                            "Attribute"
                        ]
                    ]
                },
                "generator": {
                    "value": "self.rng1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_203": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(self.buffer[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_291": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(self.buffer[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_89": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.P.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.P.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "self.rng2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[data_x, data_s]",
                            "List"
                        ],
                        [
                            "self.generate_one_set()",
                            "Call"
                        ],
                        [
                            "self.generate_one_set()",
                            "Call"
                        ],
                        [
                            "torch.load(filename)",
                            "Call"
                        ],
                        [
                            "self.generate_one_set()",
                            "Call"
                        ],
                        [
                            "[data_x, data_s]",
                            "List"
                        ],
                        [
                            "self.generate_one_epoch()",
                            "Call"
                        ],
                        [
                            "self.generate_one_epoch()",
                            "Call"
                        ],
                        [
                            "torch.load(filename)",
                            "Call"
                        ],
                        [
                            "self.generate_one_epoch()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filename + '_set' + str(idx) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.filename + '_set' + str(set_idx) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.filename + '_epoch' + str(epoch) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.filename + '_epoch' + str(epoch) + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_275": {
                "obj": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[data_x, data_s]",
                            "List"
                        ],
                        [
                            "self.generate_one_set()",
                            "Call"
                        ],
                        [
                            "self.generate_one_set()",
                            "Call"
                        ],
                        [
                            "torch.load(filename)",
                            "Call"
                        ],
                        [
                            "self.generate_one_set()",
                            "Call"
                        ],
                        [
                            "[data_x, data_s]",
                            "List"
                        ],
                        [
                            "self.generate_one_epoch()",
                            "Call"
                        ],
                        [
                            "self.generate_one_epoch()",
                            "Call"
                        ],
                        [
                            "torch.load(filename)",
                            "Call"
                        ],
                        [
                            "self.generate_one_epoch()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filename + '_set' + str(idx) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.filename + '_set' + str(set_idx) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.filename + '_epoch' + str(epoch) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.filename + '_epoch' + str(epoch) + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "code/OOD/OOD_Attack_Disk_regseg.py": {
        "sklearn": {
            "roc_curve_67": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([label_out, label_in])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "score21",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([OODScoreOut, OODScoreIn])",
                            "Call"
                        ]
                    ]
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roc_auc_score_68": {
                "variable": {
                    "value": "auc_ood",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([label_out, label_in])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "score21",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([OODScoreOut, OODScoreIn])",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_31": {
                "variable": {
                    "value": "loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DiskSet_example(data_path, 'aug_data_example_test.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_39": {
                "variable": {
                    "value": "Mp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mp1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_43": {
                "variable": {
                    "value": "Mp2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mp2)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_92": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(arg.cuda_id) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x1.reshape(1, 1, 128, 128)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(arg.cuda_id) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x2.reshape(1, 1, 128, 128)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(arg.cuda_id) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_297": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "result/ + filename + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_276": {
                "obj": {
                    "value": "{'dice_seg_out': dice_seg_out, 'dice_shape_out': dice_shape_out, 'X2_list': X2_list, 'rec_error_in': rec_error_in, 'rec_error_out': rec_error_out}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_321": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X2_list[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(arg.cuda_id) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_146": {
                "input": {
                    "value": "xn - x2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "norm_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_like_255": {
                "variable": {
                    "value": "X2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X1.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_99": {
                "f": {
                    "value": "filename_pre",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'result/Resnet18Unet_disk_pca_regseg_P10b100_epoch99.pt'",
                            "Constant"
                        ],
                        [
                            "'result/Resnet18Unet_ab_disk_pca_regseg_P10b100_epoch99.pt'",
                            "Constant"
                        ],
                        [
                            "'result/Resnet18Unet_disk_pca_regseg_advregseg_0.07Linfi20s0.01_P10b100e100_ptm_epoch99.pt'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_103": {
                "f": {
                    "value": "filename_pre",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'result/Resnet18Unet_disk_pca_regseg_P10b100_epoch99.pt'",
                            "Constant"
                        ],
                        [
                            "'result/Resnet18Unet_ab_disk_pca_regseg_P10b100_epoch99.pt'",
                            "Constant"
                        ],
                        [
                            "'result/Resnet18Unet_disk_pca_regseg_advregseg_0.07Linfi20s0.01_P10b100e100_ptm_epoch99.pt'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_107": {
                "f": {
                    "value": "filename_pre",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'result/Resnet18Unet_disk_pca_regseg_P10b100_epoch99.pt'",
                            "Constant"
                        ],
                        [
                            "'result/Resnet18Unet_ab_disk_pca_regseg_P10b100_epoch99.pt'",
                            "Constant"
                        ],
                        [
                            "'result/Resnet18Unet_disk_pca_regseg_advregseg_0.07Linfi20s0.01_P10b100e100_ptm_epoch99.pt'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "code/IND/Disk_evaluate_reg.py": {
        "torch": {
            "manual_seed_27": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "Mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((S.shape[0], 1, 128, 128), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(Mask, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(arg.cuda_id) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "S.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_106": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DiskSet_example(path, 'aug_data_example_test.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_134": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(arg.cuda_id) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "save_118": {
                "obj": {
                    "value": "{'result': result, 'noise_norm_list': noise_norm_list}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename_save + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_106": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/IND/Disk_evaluate_seg.py": {
        "torch": {
            "manual_seed_27": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_34": {
                "variable": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "(Mp > 0).to(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_77": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_104": {
                "variable": {
                    "value": "loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DiskSet_example(path, 'aug_data_example_test.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_105": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(arg.cuda_id) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "save_89": {
                "obj": {
                    "value": "{'result': result, 'noise_norm_list': noise_norm_list}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename_save + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_77": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/IND/Disk_pca_regseg_train.py": {
        "torch": {
            "manual_seed_27": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_46": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(arg.cuda_id) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DiskSet_example(arg.path, 'aug_data_example_test.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adamax_62": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/IND/Disk_pca_regseg_train_advreg.py": {
        "torch": {
            "manual_seed_31": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_122": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(arg.cuda_id) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DiskSet_example(arg.path, 'aug_data_example_test.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adamax_148": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_80": {
                "variable": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_81": {
                "variable": {
                    "value": "Mpn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mpn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mpn)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_79": {
                "input": {
                    "value": "Mpn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mpn)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "poly_disk(S)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/IND/Disk_pca_regseg_train_advregseg.py": {
        "torch": {
            "manual_seed_33": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_34": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_116": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(arg.cuda_id) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "variable": {
                    "value": "loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DiskSet_example(arg.path, 'aug_data_example_test.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adamax_142": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_67": {
                "variable": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_68": {
                "variable": {
                    "value": "Mpn1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mpn1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mpn1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "Mpn2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mpn2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mpn2)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_64": {
                "input": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "poly_disk(S)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_66": {
                "input": {
                    "value": "Mpn2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mpn2)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "poly_disk(S)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_65": {
                "input": {
                    "value": "Mpn1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mpn1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "poly_disk(S)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/IND/Disk_pca_regseg_train_advseg.py": {
        "torch": {
            "manual_seed_31": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_43": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "poly_disk(S)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_47": {
                "variable": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_52": {
                "variable": {
                    "value": "loss_ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "poly_disk(S)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_53": {
                "variable": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_135": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(arg.cuda_id) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_144": {
                "variable": {
                    "value": "loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DiskSet_example(arg.path, 'aug_data_example_test.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adamax_161": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_93": {
                "variable": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_94": {
                "variable": {
                    "value": "Mpn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mpn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mpn)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_92": {
                "input": {
                    "value": "Mpn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mpn)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "poly_disk(S)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/IND/Disk_pca_regseg_train_rand.py": {
        "torch": {
            "manual_seed_30": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_31": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_88": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(arg.cuda_id) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DiskSet_example(arg.path, 'aug_data_example_test.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adamax_114": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_53": {
                "variable": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_54": {
                "variable": {
                    "value": "Mpn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mpn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mpn)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_50": {
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_52": {
                "input": {
                    "value": "Mpn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mpn)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "poly_disk(S)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/IND/Disk_regseg_train.py": {
        "torch": {
            "manual_seed_28": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_29": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "Mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((S.shape[0], 1, 128, 128), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(Mask, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(arg.cuda_id) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "S.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_179": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'result/' + arg.net_name + '_disk_regseg'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_203": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(arg.cuda_id) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_207": {
                "variable": {
                    "value": "loader_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DiskSet_example(arg.path, 'aug_data_example_train.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_208": {
                "variable": {
                    "value": "loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DiskSet_example(arg.path, 'aug_data_example_test.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adamax_219": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_83": {
                "variable": {
                    "value": "loss_ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "poly_disk(Sp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "Mp > 0",
                            "Compare"
                        ]
                    ]
                },
                "target": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "poly_disk(S)",
                            "Call"
                        ],
                        [
                            "poly_disk(S)",
                            "Call"
                        ],
                        [
                            "poly_disk(S).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_84": {
                "variable": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "poly_disk(Sp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "Mp > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "save_171": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'history': history}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'result/' + arg.net_name + '_disk_regseg'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_179": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/IND/Lumbar_Dataset.py": {
        "torch": {
            "tensor_60": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data['img']",
                            "Subscript"
                        ],
                        [
                            "x.reshape(1, x.shape[0], x.shape[1])",
                            "Call"
                        ],
                        [
                            "(x - x.min()) / (x.max() - x.min())",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "data['img']",
                            "Subscript"
                        ],
                        [
                            "x.reshape(1, x.shape[0], x.shape[1])",
                            "Call"
                        ],
                        [
                            "(x - x.min()) / (x.max() - x.min())",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate((point1, point2, point3, point4), axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate((disk_left, disk_bot, disk_right, disk_up, up_bon_left, up_bon_right, up_bon_top, bot_bon_left, bot_bon_right, bot_bon_low), axis=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(s, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "data['shape']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(s, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data['img']",
                            "Subscript"
                        ],
                        [
                            "x.reshape(1, x.shape[0], x.shape[1])",
                            "Call"
                        ],
                        [
                            "(x - x.min()) / (x.max() - x.min())",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "data['img']",
                            "Subscript"
                        ],
                        [
                            "x.reshape(1, x.shape[0], x.shape[1])",
                            "Call"
                        ],
                        [
                            "(x - x.min()) / (x.max() - x.min())",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate((point1, point2, point3, point4), axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate((disk_left, disk_bot, disk_right, disk_up, up_bon_left, up_bon_right, up_bon_top, bot_bon_left, bot_bon_right, bot_bon_low), axis=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(s, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "data['shape']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(s, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/IND/OOD_Attack_Disk_regseg.py": {
        "torch": {
            "DataLoader_30": {
                "variable": {
                    "value": "loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DiskSetexample(data_path, 'aug_data_example_test.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_38": {
                "variable": {
                    "value": "Mp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mp1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_42": {
                "variable": {
                    "value": "Mp2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mp2)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_69": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(arg.cuda_id) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x1.reshape(1, 1, 128, 128)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(arg.cuda_id) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x2.reshape(1, 1, 128, 128)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(arg.cuda_id) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_236": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "result/ + filename + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_226": {
                "obj": {
                    "value": "{'dice_seg_out': dice_seg_out, 'dice_shape_out': dice_shape_out, 'X2_list': X2_list}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_253": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X2_list[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(arg.cuda_id) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_119": {
                "input": {
                    "value": "xn - x2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "norm_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_like_209": {
                "variable": {
                    "value": "X2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X1.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_76": {
                "f": {
                    "value": "filename_pre",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'result/Resnet18Unet_disk_pca_regseg_P10b100_epoch99.pt'",
                            "Constant"
                        ],
                        [
                            "'result/Resnet18Unet_disk_pca_regseg_advregseg_mae_bce_dice_0.07Linfi20s0.01_P10b100e100_ptm_epoch99.pt'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_80": {
                "f": {
                    "value": "filename_pre",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'result/Resnet18Unet_disk_pca_regseg_P10b100_epoch99.pt'",
                            "Constant"
                        ],
                        [
                            "'result/Resnet18Unet_disk_pca_regseg_advregseg_mae_bce_dice_0.07Linfi20s0.01_P10b100e100_ptm_epoch99.pt'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "code/IND/PGD.py": {
        "torch": {
            "clamp_125": {
                "variable": {
                    "value": "Xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X + noise_init",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "clip_X_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_X_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adamax_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[noise_new]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_153": {
                "variable": {
                    "value": "Xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X + noise_new",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "clip_X_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_X_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_51": {
                "variable": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(N, norm_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_30": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(N ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_56": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(N ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_77": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(g ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_78": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.sum(N ** 2, dim=1, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.sum(N ** 2, dim=1, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.sum(g ** 2, dim=1, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.max(l2_norm, torch.tensor(eps, dtype=l2_norm.dtype, device=l2_norm.device))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.sum(N ** 2, dim=1, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.max(l2_norm, torch.tensor(eps, dtype=l2_norm.dtype, device=l2_norm.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_93": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(N ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_94": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.sum(N ** 2, dim=1, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.sum(N ** 2, dim=1, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.sum(g ** 2, dim=1, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.max(l2_norm, torch.tensor(eps, dtype=l2_norm.dtype, device=l2_norm.device))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.sum(N ** 2, dim=1, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.max(l2_norm, torch.tensor(eps, dtype=l2_norm.dtype, device=l2_norm.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_101": {
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_143": {
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss_fn(Zn, Y)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Xn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X.clone().detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(X + noise_init, clip_X_min, clip_X_max)",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(X + noise_new, clip_X_min, clip_X_max)",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "min_51": {
                "input": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "noise.view(noise.size(0), -1)",
                            "Call"
                        ],
                        [
                            "noise.view(noise.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.max(torch.min(N, norm_max), -norm_max)",
                            "Call"
                        ],
                        [
                            "N.view(noise.size())",
                            "Call"
                        ],
                        [
                            "noise.view(noise.size(0), -1)",
                            "Call"
                        ],
                        [
                            "noise.view(noise.size(0), -1)",
                            "Call"
                        ],
                        [
                            "N * (1 / l2_norm)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_30": {
                "input": {
                    "value": "N ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_56": {
                "input": {
                    "value": "N ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_77": {
                "input": {
                    "value": "g ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "l2_norm.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "l2_norm.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_93": {
                "input": {
                    "value": "N ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "l2_norm.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "l2_norm.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/IND/PolyToImage2D.py": {
        "torch": {
            "tensor_91": {
                "variable": {
                    "value": "map",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(map, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(map, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "linspace_30": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "origin[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "H - 1 + origin[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image.shape[2]",
                            "Subscript"
                        ],
                        [
                            "self.grid.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "poly.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "poly.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_31": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "origin[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "W - 1 + origin[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image.shape[3]",
                            "Subscript"
                        ],
                        [
                            "self.grid.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "poly.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "poly.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_32": {
                "variable": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.linspace(origin[0], H - 1 + origin[0], H, dtype=poly.dtype, device=poly.device)",
                            "Call"
                        ],
                        [
                            "h.view(h.shape[0], h.shape[1], 1)",
                            "Call"
                        ],
                        [
                            "grid[:, :, 1:2]",
                            "Subscript"
                        ],
                        [
                            "-1 + (h - self.origin[0]) * 2 / (H - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "indexing": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.linspace(origin[1], W - 1 + origin[1], W, dtype=poly.dtype, device=poly.device)",
                            "Call"
                        ],
                        [
                            "w.view(w.shape[0], w.shape[1], 1)",
                            "Call"
                        ],
                        [
                            "grid[:, :, 0:1]",
                            "Subscript"
                        ],
                        [
                            "-1 + (w - self.origin[1]) * 2 / (W - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_35": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_62": {
                "variable": {
                    "value": "x_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.image",
                            "Attribute"
                        ],
                        [
                            "image.expand(x.shape[0], image.shape[1], image.shape[2], image.shape[3])",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.grid.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "grid.expand(x.shape[0], grid.shape[0], 2)",
                            "Call"
                        ],
                        [
                            "tps(grid)",
                            "Call"
                        ],
                        [
                            "torch.cat([w, h], dim=2)",
                            "Call"
                        ],
                        [
                            "grid.view(grid.shape[0], H, W, 2)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flip_42": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.flip(x, dims=[2])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_23": {
                "input": {
                    "value": "poly",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.poly",
                            "Attribute"
                        ],
                        [
                            "poly.expand(x.shape[0], poly.shape[1], poly.shape[2])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "code/IND/Resnet18Unet.py": {
        "torch": {
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_19": {
                "variable": {
                    "value": "self.gn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_20": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_22": {
                "variable": {
                    "value": "self.gn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_31": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.e0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 32, 7, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.e1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(64, 128, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.e2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(128, 256, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.e3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(256, 512, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.e4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(512, 1024, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.e5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.g3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 256, 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.g2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 128, 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.g1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 64, 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.g0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 32, 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "x3g",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x3e, x4g]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "x2g",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2e, x3g]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "x1g",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1e, x2g]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "x0g",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0e, x1g]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.process_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(stride, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.g4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(1024, 512, 3, 2, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.g4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_point, 1024, 1, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_28": {
                "variable": {
                    "value": "self.process_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_63": {
                "num_groups": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_71": {
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_74": {
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_point",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_98": {
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_100": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_101": {
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_102": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_105": {
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_106": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_107": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_108": {
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_109": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_112": {
                "num_groups": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_114": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_115": {
                "num_groups": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_116": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_119": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_120": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_121": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_122": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_123": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_124": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_seg",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_25": {
                "kernel_size": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.process_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_79": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_80": {
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_81": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_82": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_83": {
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_84": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "n_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_87": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_89": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_90": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_91": {
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_93": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_94": {
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_95": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/IND/TPS3D.py": {
        "torch": {
            "rand_128": {
                "variable": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, N, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_129": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, N, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cdist_140": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "source + 0.0 * torch.rand((1, N, 2))",
                            "BinOp"
                        ],
                        [
                            "source",
                            "Name"
                        ],
                        [
                            "x.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.rand((1, N, 2))",
                            "Call"
                        ],
                        [
                            "source.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cdist_24": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "self.source",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x2": {
                    "value": "self.source",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_25": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, N, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.source.dtype",
                            "Attribute"
                        ],
                        [
                            "self.source.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.source.device",
                            "Attribute"
                        ],
                        [
                            "self.source.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_26": {
                "variable": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ones, self.source]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "zero4x4",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.source.dtype",
                            "Attribute"
                        ],
                        [
                            "self.source.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.source.device",
                            "Attribute"
                        ],
                        [
                            "self.source.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_29": {
                "variable": {
                    "value": "La",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[K, P]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "Lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Pt, zero4x4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[La, Lb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "zero4x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.source.dtype",
                            "Attribute"
                        ],
                        [
                            "self.source.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.source.device",
                            "Attribute"
                        ],
                        [
                            "self.source.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_33": {
                "variable": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.target, zero4x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pinverse_36": {
                "variable": {
                    "value": "Linv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L.to(torch.double)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_37": {
                "variable": {
                    "value": "self.param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "Linv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.pinverse(L.to(torch.double)).to(L.dtype)",
                            "Call"
                        ],
                        [
                            "torch.pinverse(L.to(torch.double)).to(L.dtype)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([self.target, zero4x3], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.target, zero3x2], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cdist_41": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "source + 0.0 * torch.rand((1, N, 2))",
                            "BinOp"
                        ],
                        [
                            "source",
                            "Name"
                        ],
                        [
                            "x.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "self.source",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_49": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], x.shape[1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ones, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[K, P]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_52": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([La, Lb], dim=1)",
                            "Call"
                        ],
                        [
                            "L.detach()",
                            "Call"
                        ],
                        [
                            "torch.cat([K, P], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([La, Lb], dim=1)",
                            "Call"
                        ],
                        [
                            "L.detach()",
                            "Call"
                        ],
                        [
                            "torch.cat([K, P], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cdist_94": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "self.source",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x2": {
                    "value": "self.source",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_95": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, N, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.source.dtype",
                            "Attribute"
                        ],
                        [
                            "self.source.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.source.device",
                            "Attribute"
                        ],
                        [
                            "self.source.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_96": {
                "variable": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ones, self.source]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "zero3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.source.dtype",
                            "Attribute"
                        ],
                        [
                            "self.source.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.source.device",
                            "Attribute"
                        ],
                        [
                            "self.source.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_99": {
                "variable": {
                    "value": "La",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[K, P]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "Lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Pt, zero3x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[La, Lb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "zero3x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.source.dtype",
                            "Attribute"
                        ],
                        [
                            "self.source.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.source.device",
                            "Attribute"
                        ],
                        [
                            "self.source.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_103": {
                "variable": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.target, zero3x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pinverse_106": {
                "variable": {
                    "value": "Linv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L.to(torch.double)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_107": {
                "variable": {
                    "value": "self.param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "Linv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.pinverse(L.to(torch.double)).to(L.dtype)",
                            "Call"
                        ],
                        [
                            "torch.pinverse(L.to(torch.double)).to(L.dtype)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([self.target, zero4x3], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.target, zero3x2], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cdist_111": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "source + 0.0 * torch.rand((1, N, 2))",
                            "BinOp"
                        ],
                        [
                            "source",
                            "Name"
                        ],
                        [
                            "x.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "self.source",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_119": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], x.shape[1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ones, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[K, P]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_122": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([La, Lb], dim=1)",
                            "Call"
                        ],
                        [
                            "L.detach()",
                            "Call"
                        ],
                        [
                            "torch.cat([K, P], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([La, Lb], dim=1)",
                            "Call"
                        ],
                        [
                            "L.detach()",
                            "Call"
                        ],
                        [
                            "torch.cat([K, P], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_136": {
                "input": {
                    "value": "x.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_142": {
                "input": {
                    "value": "x.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_132": {
                "*size": {
                    "value": "(1, N, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "code/IND/analyze_result_adv_SPIE.py": {
        "torch": {
            "load_74": {
                "f": {
                    "value": "file + '_evaluate_reg_Linf.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_130": {
                "f": {
                    "value": "file + '_evaluate_seg_Linf.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/IND/analyze_result_adv_SPIE_figure_compare.py": {
        "torch": {
            "manual_seed_23": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_104": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_115": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "result/ + filename[m] + .pt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_45": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - xn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "norm_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[np.inf]",
                            "List"
                        ]
                    ]
                }
            },
            "norm_80": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - xn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "norm_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[np.inf]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "result[n - 1]['Xn'][idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "result[n - 1]['Xn'][idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_115": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_120": {
                "f": {
                    "value": "result/ + filename[m] + _evaluate_reg_Linf.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_121": {
                "f": {
                    "value": "result/ + filename[m] + _evaluate_seg_Linf.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/IND/analyze_result_adv_SPIE_table.py": {
        "torch": {
            "load_44": {
                "f": {
                    "value": "file + '_evaluate_reg_Linf.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_65": {
                "f": {
                    "value": "file + '_evaluate_seg_Linf.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/OOD/Disk_pca_regseg_train.py": {
        "torch": {
            "manual_seed_31": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_50": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(arg.cuda_id) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DiskSet_example(arg.path, 'aug_data_example_test.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adamax_66": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/OOD/Disk_pca_regseg_train_advregseg.py": {
        "torch": {
            "manual_seed_32": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_45": {
                "variable": {
                    "value": "loss_ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "poly_disk(S)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_46": {
                "variable": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_133": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(arg.cuda_id) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_142": {
                "variable": {
                    "value": "loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DiskSet_example(arg.path, 'aug_data_example_test.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adamax_159": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_80": {
                "variable": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_81": {
                "variable": {
                    "value": "Mpn1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mpn1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mpn1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_82": {
                "variable": {
                    "value": "Mpn2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mpn2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mpn2)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_77": {
                "input": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "poly_disk(S)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_79": {
                "input": {
                    "value": "Mpn2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mpn2)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "poly_disk(S)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_78": {
                "input": {
                    "value": "Mpn1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(Mpn1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "poly_disk(S)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/OOD/Disk_regseg_train.py": {
        "torch": {
            "manual_seed_30": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_31": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "Mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((S.shape[0], 1, 128, 128), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(Mask, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(arg.cuda_id) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "S.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_184": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'result/' + arg.net_name + '_disk_regseg'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_205": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(arg.cuda_id) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_209": {
                "variable": {
                    "value": "loader_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DiskSet_example(arg.path, 'aug_data_example_train.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_210": {
                "variable": {
                    "value": "loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DiskSet_example(arg.path, 'aug_data_example_test.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adamax_221": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_84": {
                "variable": {
                    "value": "loss_ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "poly_disk(Sp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "Mp > 0",
                            "Compare"
                        ]
                    ]
                },
                "target": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "poly_disk(S)",
                            "Call"
                        ],
                        [
                            "poly_disk(S)",
                            "Call"
                        ],
                        [
                            "poly_disk(S).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_85": {
                "variable": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "poly_disk(Sp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Mp)",
                            "Call"
                        ],
                        [
                            "Mp > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "save_176": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'history': history}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'result/' + arg.net_name + '_disk_regseg'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/OOD/Resnet18Unet.py": {
        "torch": {
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_19": {
                "variable": {
                    "value": "self.gn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_20": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_22": {
                "variable": {
                    "value": "self.gn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_31": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.e0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 32, 7, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.e1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(64, 128, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.e2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(128, 256, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.e3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(256, 512, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.e4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(512, 1024, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.e5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.g3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 256, 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.g2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 128, 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.g1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 64, 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.g0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 32, 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "x3g",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x3e, x4g]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "x2g",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2e, x3g]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "x1g",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1e, x2g]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "x0g",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0e, x1g]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.process_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(stride, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.g4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(1024, 512, 3, 2, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.g4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_point, 1024, 1, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_170": {
                "variable": {
                    "value": "x_rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0g[:, 1:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "AvgPool2d_28": {
                "variable": {
                    "value": "self.process_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_63": {
                "num_groups": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_71": {
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_74": {
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_point",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_98": {
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_100": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_101": {
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_102": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_105": {
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_106": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_107": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_108": {
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_109": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_112": {
                "num_groups": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_114": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_115": {
                "num_groups": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_116": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_119": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_120": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_121": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_122": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_123": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_124": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_seg",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_25": {
                "kernel_size": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.process_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_79": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_80": {
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_81": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_82": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_83": {
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_84": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "n_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_87": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_89": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_90": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_91": {
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_93": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_94": {
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_95": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/OOD/RobustDNN_PGD_OOD.py": {
        "torch": {
            "MSELoss_31": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adamax_50": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[noise_new]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_82": {
                "variable": {
                    "value": "Xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xout + noise_new",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "clip_X_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_X_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_38": {
                "variable": {
                    "value": "Xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rand_init_Xn.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "clip_X_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_X_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_44": {
                "variable": {
                    "value": "Xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xout + noise_init",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "clip_X_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_X_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "grad_69": {
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss_model(model, Xin, Y, Xn)",
                            "Call"
                        ],
                        [
                            "loss_fn(Zn, Y)",
                            "Call"
                        ],
                        [
                            "loss_fn(Zn, Z)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Xn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Xout.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(rand_init_Xn.detach(), clip_X_min, clip_X_max)",
                            "Call"
                        ],
                        [
                            "torch.clamp(Xout + noise_init, clip_X_min, clip_X_max)",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(Xout + noise_new, clip_X_min, clip_X_max)",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/PGD.py": {
        "torch": {
            "clamp_125": {
                "variable": {
                    "value": "Xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X + noise_init",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "clip_X_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_X_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adamax_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[noise_new]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_153": {
                "variable": {
                    "value": "Xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X + noise_new",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "clip_X_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_X_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_51": {
                "variable": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(N, norm_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_30": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(N ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_56": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(N ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_77": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(g ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_78": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.sum(N ** 2, dim=1, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.sum(N ** 2, dim=1, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.sum(g ** 2, dim=1, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.max(l2_norm, torch.tensor(eps, dtype=l2_norm.dtype, device=l2_norm.device))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.sum(N ** 2, dim=1, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.max(l2_norm, torch.tensor(eps, dtype=l2_norm.dtype, device=l2_norm.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_93": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(N ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_94": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.sum(N ** 2, dim=1, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.sum(N ** 2, dim=1, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.sum(g ** 2, dim=1, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.max(l2_norm, torch.tensor(eps, dtype=l2_norm.dtype, device=l2_norm.device))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.sum(N ** 2, dim=1, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.max(l2_norm, torch.tensor(eps, dtype=l2_norm.dtype, device=l2_norm.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_101": {
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_143": {
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss_fn(Zn, Y)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Xn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X.clone().detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(X + noise_init, clip_X_min, clip_X_max)",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(X + noise_new, clip_X_min, clip_X_max)",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "min_51": {
                "input": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "noise.view(noise.size(0), -1)",
                            "Call"
                        ],
                        [
                            "noise.view(noise.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.max(torch.min(N, norm_max), -norm_max)",
                            "Call"
                        ],
                        [
                            "N.view(noise.size())",
                            "Call"
                        ],
                        [
                            "noise.view(noise.size(0), -1)",
                            "Call"
                        ],
                        [
                            "noise.view(noise.size(0), -1)",
                            "Call"
                        ],
                        [
                            "N * (1 / l2_norm)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_30": {
                "input": {
                    "value": "N ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_56": {
                "input": {
                    "value": "N ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_77": {
                "input": {
                    "value": "g ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "l2_norm.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "l2_norm.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_93": {
                "input": {
                    "value": "N ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "l2_norm.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "l2_norm.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/PGD_OOD.py": {
        "torch": {
            "MSELoss_33": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adamax_52": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[noise_new]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_84": {
                "variable": {
                    "value": "Xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xout + noise_new",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "clip_X_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_X_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_40": {
                "variable": {
                    "value": "Xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rand_init_Xn.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "clip_X_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_X_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_46": {
                "variable": {
                    "value": "Xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xout + noise_init",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "clip_X_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_X_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "grad_71": {
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss_model(model, Xin, Y, Xn)",
                            "Call"
                        ],
                        [
                            "loss_fn(Zn, Y)",
                            "Call"
                        ],
                        [
                            "loss_fn(Zn, Z)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Xn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Xout.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(rand_init_Xn.detach(), clip_X_min, clip_X_max)",
                            "Call"
                        ],
                        [
                            "torch.clamp(Xout + noise_init, clip_X_min, clip_X_max)",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(Xout + noise_new, clip_X_min, clip_X_max)",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}