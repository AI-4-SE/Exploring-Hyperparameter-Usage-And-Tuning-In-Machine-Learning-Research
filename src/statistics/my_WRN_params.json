{
    "compress.py": {
        "sklearn": {
            "KMeans_84": {
                "variable": {
                    "value": "k_means",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters == cluster_num",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "full",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "DEFINE_string_25": {
                "name": {
                    "value": "data_dir",
                    "possible_values": []
                },
                "default": {
                    "value": "./cifar-100-binary",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the CIFAR-100 binary data.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_26": {
                "name": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes in the dataset.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_27": {
                "name": {
                    "value": "num_test_instance",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of test images.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_28": {
                "name": {
                    "value": "num_train_instance",
                    "possible_values": []
                },
                "default": {
                    "value": "50000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of training images.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_31": {
                "name": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of images to process in a batch.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "num_residual_units",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of residual block per group.\\n                                                Total number of conv layers will be 6n+4",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "k",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "possible_values": []
                },
                "help": {
                    "value": "Network width multiplier",
                    "possible_values": []
                }
            },
            "DEFINE_string_37": {
                "name": {
                    "value": "ckpt_path",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the checkpoint or dir.",
                    "possible_values": []
                }
            },
            "DEFINE_bool_38": {
                "name": {
                    "value": "train_data",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to test over training set.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_39": {
                "name": {
                    "value": "test_iter",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations during a test",
                    "possible_values": []
                }
            },
            "DEFINE_string_40": {
                "name": {
                    "value": "output",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the output txt.",
                    "possible_values": []
                }
            },
            "DEFINE_float_41": {
                "name": {
                    "value": "gpu_fraction",
                    "possible_values": []
                },
                "default": {
                    "value": "0.95",
                    "possible_values": []
                },
                "help": {
                    "value": "The fraction of GPU memory to be allocated",
                    "possible_values": []
                }
            },
            "DEFINE_integer_45": {
                "name": {
                    "value": "new_k",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "possible_values": []
                },
                "help": {
                    "value": "New Network width multiplier",
                    "possible_values": []
                }
            },
            "DEFINE_float_49": {
                "name": {
                    "value": "l2_weight",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "possible_values": []
                },
                "help": {
                    "value": "L2 loss weight applied all the weights",
                    "possible_values": []
                }
            },
            "DEFINE_float_50": {
                "name": {
                    "value": "momentum",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "possible_values": []
                },
                "help": {
                    "value": "The momentum of MomentumOptimizer",
                    "possible_values": []
                }
            },
            "DEFINE_float_51": {
                "name": {
                    "value": "initial_lr",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate",
                    "possible_values": []
                }
            },
            "DEFINE_float_52": {
                "name": {
                    "value": "lr_step_epoch",
                    "possible_values": []
                },
                "default": {
                    "value": "100.0",
                    "possible_values": []
                },
                "help": {
                    "value": "Epochs after which learing rate decays",
                    "possible_values": []
                }
            },
            "DEFINE_float_53": {
                "name": {
                    "value": "lr_decay",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decay factor",
                    "possible_values": []
                }
            },
            "placeholder_142": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, data_input.HEIGHT, data_input.WIDTH, 3]",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "possible_values": []
                }
            },
            "initialize_all_variables_160": {
                "variable": {
                    "value": "init",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_163": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction), log_device_placement=FLAGS.log_device_placement)",
                    "possible_values": []
                }
            },
            "Saver_169": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10000",
                    "possible_values": []
                }
            },
            "get_default_graph_186": {
                "variable": {
                    "value": "graph",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reset_default_graph_229": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "placeholder_241": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, data_input.HEIGHT, data_input.WIDTH, 3]",
                    "possible_values": []
                }
            },
            "placeholder_242": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "possible_values": []
                }
            },
            "initialize_all_variables_247": {
                "variable": {
                    "value": "init",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_248": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction), log_device_placement=FLAGS.log_device_placement)",
                    "possible_values": []
                }
            },
            "run_294": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Graph_139": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_171": {
                "variable": {
                    "value": "ckpt",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.ckpt_path",
                    "possible_values": []
                }
            },
            "global_variables_215": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Graph_232": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "all_variables_169": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "test_image",
                    "possible_values": []
                }
            },
            "ConfigProto_163": {
                "gpu_options": {
                    "value": "tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction)",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "possible_values": []
                }
            },
            "ConfigProto_248": {
                "gpu_options": {
                    "value": "tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction)",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "possible_values": []
                }
            },
            "GPUOptions_164": {
                "per_process_gpu_memory_fraction": {
                    "value": "FLAGS.gpu_fraction",
                    "possible_values": []
                }
            },
            "GPUOptions_249": {
                "per_process_gpu_memory_fraction": {
                    "value": "FLAGS.gpu_fraction",
                    "possible_values": []
                }
            }
        }
    },
    "compress_and_train.py": {
        "sklearn": {
            "KMeans_92": {
                "variable": {
                    "value": "k_means",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "cluster_num",
                    "possible_values": [
                        [
                            "new_width[int(i / 4) + 1]",
                            "Subscript"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "full",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "DEFINE_string_25": {
                "name": {
                    "value": "data_dir",
                    "possible_values": []
                },
                "default": {
                    "value": "./cifar-100-binary",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the CIFAR-100 binary data.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_26": {
                "name": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes in the dataset.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_27": {
                "name": {
                    "value": "num_test_instance",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of test images.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_28": {
                "name": {
                    "value": "num_train_instance",
                    "possible_values": []
                },
                "default": {
                    "value": "50000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of training images.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_31": {
                "name": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of images to process in a batch.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "num_residual_units",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of residual block per group.\\n                                                Total number of conv layers will be 6n+4",
                    "possible_values": []
                }
            },
            "DEFINE_float_34": {
                "name": {
                    "value": "k",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "possible_values": []
                },
                "help": {
                    "value": "Network width multiplier",
                    "possible_values": []
                }
            },
            "DEFINE_string_37": {
                "name": {
                    "value": "ckpt_path",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the checkpoint or dir.",
                    "possible_values": []
                }
            },
            "DEFINE_bool_38": {
                "name": {
                    "value": "train_data",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to test over training set.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_39": {
                "name": {
                    "value": "test_iter",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations during a test",
                    "possible_values": []
                }
            },
            "DEFINE_string_40": {
                "name": {
                    "value": "output",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the output txt.",
                    "possible_values": []
                }
            },
            "DEFINE_float_41": {
                "name": {
                    "value": "gpu_fraction",
                    "possible_values": []
                },
                "default": {
                    "value": "0.95",
                    "possible_values": []
                },
                "help": {
                    "value": "The fraction of GPU memory to be allocated",
                    "possible_values": []
                }
            },
            "DEFINE_float_45": {
                "name": {
                    "value": "new_k",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "possible_values": []
                },
                "help": {
                    "value": "New Network width multiplier",
                    "possible_values": []
                }
            },
            "DEFINE_float_49": {
                "name": {
                    "value": "l2_weight",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "possible_values": []
                },
                "help": {
                    "value": "L2 loss weight applied all the weights",
                    "possible_values": []
                }
            },
            "DEFINE_float_50": {
                "name": {
                    "value": "momentum",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "possible_values": []
                },
                "help": {
                    "value": "The momentum of MomentumOptimizer",
                    "possible_values": []
                }
            },
            "DEFINE_float_51": {
                "name": {
                    "value": "initial_lr",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate",
                    "possible_values": []
                }
            },
            "DEFINE_float_52": {
                "name": {
                    "value": "lr_step_epoch",
                    "possible_values": []
                },
                "default": {
                    "value": "100.0",
                    "possible_values": []
                },
                "help": {
                    "value": "Epochs after which learing rate decays",
                    "possible_values": []
                }
            },
            "DEFINE_float_53": {
                "name": {
                    "value": "lr_decay",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decay factor",
                    "possible_values": []
                }
            },
            "DEFINE_string_56": {
                "name": {
                    "value": "train_dir",
                    "possible_values": []
                },
                "default": {
                    "value": "./train",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to write log and checkpoint.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "max_steps",
                    "possible_values": []
                },
                "default": {
                    "value": "50000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of batches to run.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_58": {
                "name": {
                    "value": "display",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations to display training info.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_59": {
                "name": {
                    "value": "checkpoint_interval",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations to save parameters as a checkpoint",
                    "possible_values": []
                }
            },
            "DEFINE_integer_60": {
                "name": {
                    "value": "test_interval",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations to run a test",
                    "possible_values": []
                }
            },
            "placeholder_159": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, data_input.HEIGHT, data_input.WIDTH, 3]",
                    "possible_values": []
                }
            },
            "placeholder_160": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "possible_values": []
                }
            },
            "initialize_all_variables_177": {
                "variable": {
                    "value": "init",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_180": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction), log_device_placement=FLAGS.log_device_placement)",
                    "possible_values": []
                }
            },
            "Saver_186": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10000",
                    "possible_values": []
                }
            },
            "get_default_graph_203": {
                "variable": {
                    "value": "graph",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reset_default_graph_246": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Variable_251": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                }
            },
            "placeholder_263": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, data_input.HEIGHT, data_input.WIDTH, 3]",
                    "possible_values": []
                }
            },
            "placeholder_264": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "possible_values": []
                }
            },
            "merge_all_270": {
                "variable": {
                    "value": "train_summary_op",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "initialize_all_variables_272": {
                "variable": {
                    "value": "init",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_273": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction), log_device_placement=FLAGS.log_device_placement)",
                    "possible_values": []
                }
            },
            "Saver_279": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10000",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_280": {
                "variable": {
                    "value": "ckpt",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.train_dir",
                    "possible_values": []
                }
            },
            "FileWriter_293": {
                "variable": {
                    "value": "summary_writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.train_dir",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "possible_values": []
                }
            },
            "run_349": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Graph_156": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_188": {
                "variable": {
                    "value": "ckpt",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.ckpt_path",
                    "possible_values": []
                }
            },
            "global_variables_232": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Graph_249": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "start_queue_runners_290": {
                "sess": {
                    "value": "sess",
                    "possible_values": [
                        [
                            "tf.Session(config=tf.ConfigProto(gpu_options=tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction), log_device_placement=FLAGS.log_device_placement))",
                            "Call"
                        ],
                        [
                            "tf.Session(config=tf.ConfigProto(gpu_options=tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction), log_device_placement=FLAGS.log_device_placement))",
                            "Call"
                        ]
                    ]
                }
            },
            "all_variables_186": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "variable_scope_254": {
                "name_or_scope": {
                    "value": "train_image",
                    "possible_values": []
                }
            },
            "variable_scope_256": {
                "name_or_scope": {
                    "value": "test_image",
                    "possible_values": []
                }
            },
            "all_variables_279": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Summary_312": {
                "variable": {
                    "value": "test_summary",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConfigProto_180": {
                "gpu_options": {
                    "value": "tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction)",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "possible_values": []
                }
            },
            "ConfigProto_273": {
                "gpu_options": {
                    "value": "tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction)",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "possible_values": []
                }
            },
            "GPUOptions_181": {
                "per_process_gpu_memory_fraction": {
                    "value": "FLAGS.gpu_fraction",
                    "possible_values": []
                }
            },
            "GPUOptions_274": {
                "per_process_gpu_memory_fraction": {
                    "value": "FLAGS.gpu_fraction",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100.py": {
        "tensorflow": {
            "decode_raw_32": {
                "variable": {
                    "value": "raw_record",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "value",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "possible_values": []
                }
            },
            "cast_33": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "x": {
                    "value": "raw_record[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "depth_major",
                    "possible_values": []
                },
                "tensor": {
                    "value": "raw_record[label_bytes:record_bytes]",
                    "possible_values": []
                },
                "shape": {
                    "value": "[DEPTH, HEIGHT, WIDTH]",
                    "possible_values": []
                }
            },
            "cast_37": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(depth_major, [1, 2, 0])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "random_crop_46": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.cast(tf.transpose(depth_major, [1, 2, 0]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, NEW_HEIGHT + 4, NEW_WIDTH + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [NEW_HEIGHT, NEW_WIDTH, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) - cifar100_mean) / cifar100_std",
                            "BinOp"
                        ],
                        [
                            "(tf.cast(image, tf.float32) - cifar100_mean) / cifar100_std",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[NEW_HEIGHT, NEW_WIDTH, 3]",
                    "possible_values": []
                }
            },
            "random_flip_left_right_47": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.cast(tf.transpose(depth_major, [1, 2, 0]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, NEW_HEIGHT + 4, NEW_WIDTH + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [NEW_HEIGHT, NEW_WIDTH, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) - cifar100_mean) / cifar100_std",
                            "BinOp"
                        ],
                        [
                            "(tf.cast(image, tf.float32) - cifar100_mean) / cifar100_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_37": {
                "a": {
                    "value": "depth_major",
                    "possible_values": [
                        [
                            "tf.reshape(raw_record[label_bytes:record_bytes], [DEPTH, HEIGHT, WIDTH])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "possible_values": []
                }
            },
            "cast_49": {
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.cast(tf.transpose(depth_major, [1, 2, 0]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, NEW_HEIGHT + 4, NEW_WIDTH + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [NEW_HEIGHT, NEW_WIDTH, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) - cifar100_mean) / cifar100_std",
                            "BinOp"
                        ],
                        [
                            "(tf.cast(image, tf.float32) - cifar100_mean) / cifar100_std",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_56": {
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.cast(tf.transpose(depth_major, [1, 2, 0]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, NEW_HEIGHT + 4, NEW_WIDTH + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [NEW_HEIGHT, NEW_WIDTH, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) - cifar100_mean) / cifar100_std",
                            "BinOp"
                        ],
                        [
                            "(tf.cast(image, tf.float32) - cifar100_mean) / cifar100_std",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "shuffle_and_repeat_82": {
                "buffer_size": {
                    "value": "buffer_size",
                    "possible_values": [
                        [
                            "int(50000 * 0.4) + 3 * batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "map_and_batch_83": {
                "map_func": {
                    "value": "train_preprocess_fn",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "num_parallel_batches": {
                    "value": "num_threads",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "map_and_batch_86": {
                "map_func": {
                    "value": "test_preprocess_fn",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "num_parallel_batches": {
                    "value": "num_threads",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "prefetch_to_device_91": {
                "device": {
                    "value": "/GPU:0",
                    "possible_values": []
                }
            }
        }
    },
    "dataset.py": {
        "tensorflow": {
            "DEFINE_string_37": {
                "name": {
                    "value": "data_dir",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/mydata",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the processed data, i.e. TFRecord of Example protos.",
                    "possible_values": []
                }
            },
            "Glob_85": {
                "variable": {
                    "value": "data_files",
                    "possible_values": []
                },
                "filename": {
                    "value": "tf_record_pattern",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.data_dir, '%s-*' % self.subset)",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordReader_103": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "tensorflow": {
            "DEFINE_string_17": {
                "name": {
                    "value": "data_dir",
                    "possible_values": []
                },
                "default": {
                    "value": "./cifar-100-binary",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the CIFAR-100 binary data.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_18": {
                "name": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes in the dataset.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_19": {
                "name": {
                    "value": "num_test_instance",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of test images.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_20": {
                "name": {
                    "value": "num_train_instance",
                    "possible_values": []
                },
                "default": {
                    "value": "50000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of training images.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_23": {
                "name": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of images to process in a batch.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_24": {
                "name": {
                    "value": "num_residual_units",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of residual block per group.\\n                                                Total number of conv layers will be 6n+4",
                    "possible_values": []
                }
            },
            "DEFINE_float_26": {
                "name": {
                    "value": "k",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "possible_values": []
                },
                "help": {
                    "value": "Network width multiplier",
                    "possible_values": []
                }
            },
            "DEFINE_float_27": {
                "name": {
                    "value": "new_k",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "possible_values": []
                },
                "help": {
                    "value": "Network width multiplier",
                    "possible_values": []
                }
            },
            "DEFINE_string_30": {
                "name": {
                    "value": "ckpt_path",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the checkpoint or dir.",
                    "possible_values": []
                }
            },
            "DEFINE_bool_31": {
                "name": {
                    "value": "train_data",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to test over training set.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "test_iter",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations during a test",
                    "possible_values": []
                }
            },
            "DEFINE_string_33": {
                "name": {
                    "value": "output",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the output txt.",
                    "possible_values": []
                }
            },
            "DEFINE_float_34": {
                "name": {
                    "value": "gpu_fraction",
                    "possible_values": []
                },
                "default": {
                    "value": "0.95",
                    "possible_values": []
                },
                "help": {
                    "value": "The fraction of GPU memory to be allocated",
                    "possible_values": []
                }
            },
            "DEFINE_float_39": {
                "name": {
                    "value": "l2_weight",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "possible_values": []
                },
                "help": {
                    "value": "L2 loss weight applied all the weights",
                    "possible_values": []
                }
            },
            "DEFINE_float_40": {
                "name": {
                    "value": "momentum",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "possible_values": []
                },
                "help": {
                    "value": "The momentum of MomentumOptimizer",
                    "possible_values": []
                }
            },
            "DEFINE_float_41": {
                "name": {
                    "value": "initial_lr",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate",
                    "possible_values": []
                }
            },
            "DEFINE_float_42": {
                "name": {
                    "value": "lr_step_epoch",
                    "possible_values": []
                },
                "default": {
                    "value": "100.0",
                    "possible_values": []
                },
                "help": {
                    "value": "Epochs after which learing rate decays",
                    "possible_values": []
                }
            },
            "DEFINE_float_43": {
                "name": {
                    "value": "lr_decay",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decay factor",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, data_input.HEIGHT, data_input.WIDTH, 3]",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "possible_values": []
                }
            },
            "initialize_all_variables_97": {
                "variable": {
                    "value": "init",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_100": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction), log_device_placement=FLAGS.log_device_placement)",
                    "possible_values": []
                }
            },
            "Saver_106": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10000",
                    "possible_values": []
                }
            },
            "run_167": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Graph_68": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_108": {
                "variable": {
                    "value": "ckpt",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.ckpt_path",
                    "possible_values": []
                }
            },
            "start_queue_runners_124": {
                "sess": {
                    "value": "sess",
                    "possible_values": [
                        [
                            "tf.Session(config=tf.ConfigProto(gpu_options=tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction), log_device_placement=FLAGS.log_device_placement))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "test_image",
                    "possible_values": []
                }
            },
            "all_variables_106": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConfigProto_100": {
                "gpu_options": {
                    "value": "tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction)",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "possible_values": []
                }
            },
            "GPUOptions_101": {
                "per_process_gpu_memory_fraction": {
                    "value": "FLAGS.gpu_fraction",
                    "possible_values": []
                }
            }
        }
    },
    "image_processing.py": {
        "tensorflow": {
            "DEFINE_integer_47": {
                "name": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of images to process in a batch.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_49": {
                "name": {
                    "value": "image_size",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "possible_values": []
                },
                "help": {
                    "value": "Provide square images of this size.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "num_preprocess_threads",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of preprocessing threads per tower. Please make this a multiple of 4.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_54": {
                "name": {
                    "value": "num_readers",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of parallel readers during train.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_67": {
                "name": {
                    "value": "input_queue_memory_factor",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of the queue of preprocessed images. Default is ideal but try smaller values, e.g. 4, 2 or 1, if host memory is constrained. See comments in code for more details.",
                    "possible_values": []
                }
            },
            "subtract_334": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "multiply_335": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "possible_values": []
                }
            },
            "VarLenFeature_383": {
                "variable": {
                    "value": "sparse_float32",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "parse_single_example_391": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example_serialized",
                    "possible_values": [
                        [
                            "examples_queue.dequeue()",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "feature_map",
                    "possible_values": [
                        [
                            "{'image/encoded': tf.FixedLenFeature([], dtype=tf.string, default_value=''), 'image/class/label': tf.FixedLenFeature([1], dtype=tf.int64, default_value=-1), 'image/class/text': tf.FixedLenFeature([], dtype=tf.string, default_value='')}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cast_392": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "x": {
                    "value": "features['image/class/label']",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "expand_dims_394": {
                "variable": {
                    "value": "xmin",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/xmin'].values",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_395": {
                "variable": {
                    "value": "ymin",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/ymin'].values",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_396": {
                "variable": {
                    "value": "xmax",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/xmax'].values",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_397": {
                "variable": {
                    "value": "ymax",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/ymax'].values",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_400": {
                "variable": {
                    "value": "bbox",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                },
                "values": {
                    "value": "[ymin, xmin, ymax, xmax]",
                    "possible_values": []
                }
            },
            "expand_dims_404": {
                "variable": {
                    "value": "bbox",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[ymin, xmin, ymax, xmax])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bbox, 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(bbox, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "transpose_405": {
                "variable": {
                    "value": "bbox",
                    "possible_values": []
                },
                "a": {
                    "value": "bbox",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[ymin, xmin, ymax, xmax])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bbox, 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(bbox, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "possible_values": []
                }
            },
            "decode_jpeg_155": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_buffer",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "convert_image_dtype_160": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "clip_by_value_194": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "sample_distorted_bounding_box_235": {
                "variable": {
                    "value": "sample_distorted_bounding_box",
                    "possible_values": []
                },
                "image_size": {
                    "value": "tf.shape(image)",
                    "possible_values": []
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[ymin, xmin, ymax, xmax])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bbox, 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(bbox, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "0.1",
                    "possible_values": []
                },
                "aspect_ratio_range": {
                    "value": "[0.75, 1.33]",
                    "possible_values": []
                },
                "area_range": {
                    "value": "[0.05, 1.0]",
                    "possible_values": []
                },
                "max_attempts": {
                    "value": "100",
                    "possible_values": []
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "slice_251": {
                "variable": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "bbox_begin",
                    "possible_values": []
                },
                "size": {
                    "value": "bbox_size",
                    "possible_values": []
                }
            },
            "random_flip_left_right_268": {
                "variable": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "tf.slice(image, bbox_begin, bbox_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(distorted_image, [height, width], method=resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "distort_color(distorted_image, thread_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "central_crop_294": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "central_fraction": {
                    "value": "0.875",
                    "possible_values": []
                }
            },
            "expand_dims_297": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "resize_bilinear_298": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "squeeze_300": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "possible_values": []
                }
            },
            "batch_join_497": {
                "variable": {
                    "value": "(images, label_index_batch)",
                    "possible_values": []
                },
                "tensors_list": {
                    "value": "images_and_labels",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "FLAGS.batch_size",
                            "Attribute"
                        ],
                        [
                            "FLAGS.batch_size",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "2 * num_preprocess_threads * batch_size",
                    "possible_values": []
                }
            },
            "cast_507": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, shape=[batch_size, height, width, depth])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reshape_508": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, shape=[batch_size, height, width, depth])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height, width, depth]",
                    "possible_values": []
                }
            },
            "device_98": {
                "device_name": {
                    "value": "/cpu:0",
                    "possible_values": []
                }
            },
            "device_132": {
                "device_name": {
                    "value": "/cpu:0",
                    "possible_values": []
                }
            },
            "name_scope_149": {
                "values": {
                    "value": "[image_buffer]",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "decode_jpeg",
                    "possible_values": []
                }
            },
            "name_scope_179": {
                "values": {
                    "value": "[image]",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "distort_color",
                    "possible_values": []
                }
            },
            "random_brightness_183": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "possible_values": []
                }
            },
            "random_saturation_184": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_hue_185": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "random_contrast_186": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "name_scope_217": {
                "values": {
                    "value": "[image, height, width, bbox]",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "distort_image",
                    "possible_values": []
                }
            },
            "draw_bounding_boxes_224": {
                "variable": {
                    "value": "image_with_box",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(image, 0)",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bbox",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[ymin, xmin, ymax, xmax])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bbox, 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(bbox, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "draw_bounding_boxes_245": {
                "variable": {
                    "value": "image_with_distorted_box",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(image, 0)",
                    "possible_values": []
                },
                "boxes": {
                    "value": "distort_bbox",
                    "possible_values": []
                }
            },
            "name_scope_290": {
                "values": {
                    "value": "[image, height, width]",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "eval_image",
                    "possible_values": []
                }
            },
            "FixedLenFeature_376": {
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "possible_values": []
                }
            },
            "FixedLenFeature_378": {
                "shape": {
                    "value": "[1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "FixedLenFeature_380": {
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "possible_values": []
                }
            },
            "name_scope_429": {
                "name": {
                    "value": "batch_processing",
                    "possible_values": []
                }
            },
            "string_input_producer_436": {
                "variable": {
                    "value": "filename_queue",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "data_files",
                    "possible_values": [
                        [
                            "dataset.data_files()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "capacity": {
                    "value": "16",
                    "possible_values": []
                }
            },
            "string_input_producer_440": {
                "variable": {
                    "value": "filename_queue",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "data_files",
                    "possible_values": [
                        [
                            "dataset.data_files()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "RandomShuffleQueue_465": {
                "variable": {
                    "value": "examples_queue",
                    "possible_values": []
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "possible_values": [
                        [
                            "examples_per_shard * FLAGS.input_queue_memory_factor",
                            "BinOp"
                        ]
                    ]
                },
                "dtypes": {
                    "value": "[tf.string]",
                    "possible_values": []
                }
            },
            "FIFOQueue_470": {
                "variable": {
                    "value": "examples_queue",
                    "possible_values": []
                },
                "capacity": {
                    "value": "examples_per_shard + 3 * batch_size",
                    "possible_values": []
                },
                "dtypes": {
                    "value": "[tf.string]",
                    "possible_values": []
                }
            },
            "image_511": {
                "name": {
                    "value": "images",
                    "possible_values": []
                },
                "data": {
                    "value": "images",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, shape=[batch_size, height, width, depth])",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_188": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "possible_values": []
                }
            },
            "random_contrast_189": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_saturation_190": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_hue_191": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "image_226": {
                "name": {
                    "value": "image_with_bounding_boxes",
                    "possible_values": []
                },
                "data": {
                    "value": "image_with_box",
                    "possible_values": [
                        [
                            "tf.image.draw_bounding_boxes(tf.expand_dims(image, 0), bbox)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_236": {
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_247": {
                "name": {
                    "value": "images_with_distorted_bounding_box",
                    "possible_values": []
                },
                "data": {
                    "value": "image_with_distorted_box",
                    "possible_values": [
                        [
                            "tf.image.draw_bounding_boxes(tf.expand_dims(image, 0), distort_bbox)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_264": {
                "name": {
                    "value": "cropped_resized_image",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "possible_values": []
                }
            },
            "image_274": {
                "name": {
                    "value": "final_distorted_image",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "possible_values": []
                }
            },
            "add_queue_runner_482": {
                "qr": {
                    "value": "tf.train.queue_runner.QueueRunner(examples_queue, enqueue_ops)",
                    "possible_values": []
                }
            },
            "reshape_513": {
                "tensor": {
                    "value": "label_index_batch",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "possible_values": []
                }
            },
            "expand_dims_224": {
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_246": {
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_265": {
                "input": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "tf.slice(image, bbox_begin, bbox_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(distorted_image, [height, width], method=resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "distort_color(distorted_image, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_275": {
                "input": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "tf.slice(image, bbox_begin, bbox_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(distorted_image, [height, width], method=resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "distort_color(distorted_image, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "QueueRunner_483": {
                "queue": {
                    "value": "examples_queue",
                    "possible_values": [
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.string])",
                            "Call"
                        ],
                        [
                            "tf.FIFOQueue(capacity=examples_per_shard + 3 * batch_size, dtypes=[tf.string])",
                            "Call"
                        ]
                    ]
                },
                "enqueue_ops": {
                    "value": "enqueue_ops",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "resnet.py": {
        "tensorflow": {
            "convert_to_tensor_8": {
                "value": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv_with_init(self._images, 3, 16, 1, name='init_conv')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_1')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step)",
                            "Call"
                        ],
                        [
                            "utils._relu(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x_shape[1]])",
                            "Call"
                        ],
                        [
                            "self.fc_with_init(x, self._hp.num_classes)",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters_new[i], strides[i - 1], name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], strides[i - 1], name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_2')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_2')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_1')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters_new[i], 1, name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_2')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_2')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "np.float32",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.is_train",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "possible_values": []
                }
            },
            "softmax_136": {
                "variable": {
                    "value": "self.probs",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv_with_init(self._images, 3, 16, 1, name='init_conv')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_1')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step)",
                            "Call"
                        ],
                        [
                            "utils._relu(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x_shape[1]])",
                            "Call"
                        ],
                        [
                            "self.fc_with_init(x, self._hp.num_classes)",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters_new[i], strides[i - 1], name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], strides[i - 1], name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_2')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_2')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_1')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters_new[i], 1, name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_2')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_2')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "probs",
                    "possible_values": []
                }
            },
            "to_int32_137": {
                "variable": {
                    "value": "self.preds",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self._logits, 1, name='preds')",
                    "possible_values": []
                }
            },
            "constant_138": {
                "variable": {
                    "value": "ones",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones([self._hp.batch_size])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "constant_139": {
                "variable": {
                    "value": "zeros",
                    "possible_values": []
                },
                "value": {
                    "value": "np.zeros([self._hp.batch_size])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "where_140": {
                "variable": {
                    "value": "correct",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(self.preds, self._labels)",
                    "possible_values": []
                },
                "x": {
                    "value": "ones",
                    "possible_values": [
                        [
                            "tf.constant(np.ones([self._hp.batch_size]), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "possible_values": [
                        [
                            "tf.constant(np.zeros([self._hp.batch_size]), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_141": {
                "variable": {
                    "value": "self.acc",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "correct",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(self.preds, self._labels), ones, zeros)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "acc",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_145": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv_with_init(self._images, 3, 16, 1, name='init_conv')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_1')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step)",
                            "Call"
                        ],
                        [
                            "utils._relu(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x_shape[1]])",
                            "Call"
                        ],
                        [
                            "self.fc_with_init(x, self._hp.num_classes)",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters_new[i], strides[i - 1], name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], strides[i - 1], name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_2')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_2')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_1')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters_new[i], 1, name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_2')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_2')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "self._labels",
                    "possible_values": []
                }
            },
            "reduce_mean_146": {
                "variable": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=x, labels=self._labels)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy",
                    "possible_values": []
                }
            },
            "exponential_decay_160": {
                "variable": {
                    "value": "self.lr",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._hp.initial_lr",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self._global_step",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self._hp.decay_step",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "self._hp.lr_decay",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_165": {
                "variable": {
                    "value": "opt",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self._hp.momentum",
                    "possible_values": []
                }
            },
            "get_collection_171": {
                "variable": {
                    "value": "update_ops",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "possible_values": []
                }
            },
            "reduce_mean_124": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv_with_init(self._images, 3, 16, 1, name='init_conv')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_1')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step)",
                            "Call"
                        ],
                        [
                            "utils._relu(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x_shape[1]])",
                            "Call"
                        ],
                        [
                            "self.fc_with_init(x, self._hp.num_classes)",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters_new[i], strides[i - 1], name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], strides[i - 1], name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_2')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_2')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_1')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters_new[i], 1, name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_2')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_2')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv_with_init(self._images, 3, 16, 1, name='init_conv')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_1')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step)",
                            "Call"
                        ],
                        [
                            "utils._relu(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x_shape[1]])",
                            "Call"
                        ],
                        [
                            "self.fc_with_init(x, self._hp.num_classes)",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters_new[i], strides[i - 1], name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], strides[i - 1], name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_2')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_2')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_1')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters_new[i], 1, name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_2')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_2')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, x_shape[1]]",
                    "possible_values": []
                }
            },
            "scalar_142": {
                "name": {
                    "value": "accuracy",
                    "possible_values": []
                },
                "data": {
                    "value": "self.acc",
                    "possible_values": []
                }
            },
            "scalar_147": {
                "name": {
                    "value": "cross_entropy",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "possible_values": []
                }
            },
            "multiply_156": {
                "variable": {
                    "value": "l2_loss",
                    "possible_values": []
                },
                "x": {
                    "value": "self._hp.weight_decay",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.add_n(costs)",
                    "possible_values": []
                }
            },
            "scalar_162": {
                "name": {
                    "value": "learing_rate",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lr",
                    "possible_values": []
                }
            },
            "trainable_variables_180": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "unit_last",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "logits",
                    "possible_values": []
                }
            },
            "argmax_137": {
                "input": {
                    "value": "self._logits",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "name": {
                    "value": "preds",
                    "possible_values": []
                }
            },
            "equal_140": {
                "x": {
                    "value": "self.preds",
                    "possible_values": []
                },
                "y": {
                    "value": "self._labels",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "l2_loss",
                    "possible_values": []
                }
            },
            "trainable_variables_166": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_op_174": {
                "variable": {
                    "value": "self.train_op",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "'unit_%d_0' % i",
                    "possible_values": []
                }
            },
            "l2_loss_153": {
                "t": {
                    "value": "var",
                    "possible_values": []
                }
            },
            "add_n_156": {
                "inputs": {
                    "value": "costs",
                    "possible_values": [
                        [
                            "[tf.nn.l2_loss(var) for var in tf.get_collection(utils.WEIGHT_DECAY_KEY)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "control_dependencies_173": {
                "control_inputs": {
                    "value": "update_ops + [apply_grad_op]",
                    "possible_values": []
                }
            },
            "identity_80": {
                "variable": {
                    "value": "shortcut",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv_with_init(self._images, 3, 16, 1, name='init_conv')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_1')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step)",
                            "Call"
                        ],
                        [
                            "utils._relu(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x_shape[1]])",
                            "Call"
                        ],
                        [
                            "self.fc_with_init(x, self._hp.num_classes)",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters_new[i], strides[i - 1], name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], strides[i - 1], name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_2')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_2')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_1')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters_new[i], 1, name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_2')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_2')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_pool_82": {
                "variable": {
                    "value": "shortcut",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv_with_init(self._images, 3, 16, 1, name='init_conv')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_1')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step)",
                            "Call"
                        ],
                        [
                            "utils._relu(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x_shape[1]])",
                            "Call"
                        ],
                        [
                            "self.fc_with_init(x, self._hp.num_classes)",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters_new[i], strides[i - 1], name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], strides[i - 1], name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_2')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_2')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_1')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters_new[i], 1, name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_1')",
                            "Call"
                        ],
                        [
                            "self.bn_with_init(x, self.is_train, self._global_step, name='bn_2')",
                            "Call"
                        ],
                        [
                            "utils._relu(x, name='relu_2')",
                            "Call"
                        ],
                        [
                            "self.conv_with_init(x, 3, filters[i], 1, name='conv_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, strides[i - 1], strides[i - 1], 1]",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, strides[i - 1], strides[i - 1], 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "possible_values": []
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "'unit_%d_%d' % (i, j)",
                    "possible_values": []
                }
            },
            "get_collection_153": {
                "key": {
                    "value": "utils.WEIGHT_DECAY_KEY",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "DEFINE_string_18": {
                "name": {
                    "value": "data_dir",
                    "possible_values": []
                },
                "default": {
                    "value": "./cifar-100-binary",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the CIFAR-100 binary data.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_19": {
                "name": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes in the dataset.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_20": {
                "name": {
                    "value": "num_train_instance",
                    "possible_values": []
                },
                "default": {
                    "value": "50000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of training images.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_21": {
                "name": {
                    "value": "num_test_instance",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of test images.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_24": {
                "name": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of images to process in a batch.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_25": {
                "name": {
                    "value": "num_residual_units",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of residual block per group.\\n                                                Total number of conv layers will be 6n+4",
                    "possible_values": []
                }
            },
            "DEFINE_float_27": {
                "name": {
                    "value": "k",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "possible_values": []
                },
                "help": {
                    "value": "Network width multiplier",
                    "possible_values": []
                }
            },
            "DEFINE_float_28": {
                "name": {
                    "value": "new_k",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "possible_values": []
                },
                "help": {
                    "value": "Network width multiplier",
                    "possible_values": []
                }
            },
            "DEFINE_float_31": {
                "name": {
                    "value": "l2_weight",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "possible_values": []
                },
                "help": {
                    "value": "L2 loss weight applied all the weights",
                    "possible_values": []
                }
            },
            "DEFINE_float_32": {
                "name": {
                    "value": "momentum",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "possible_values": []
                },
                "help": {
                    "value": "The momentum of MomentumOptimizer",
                    "possible_values": []
                }
            },
            "DEFINE_float_33": {
                "name": {
                    "value": "initial_lr",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate",
                    "possible_values": []
                }
            },
            "DEFINE_float_34": {
                "name": {
                    "value": "lr_step_epoch",
                    "possible_values": []
                },
                "default": {
                    "value": "100.0",
                    "possible_values": []
                },
                "help": {
                    "value": "Epochs after which learing rate decays",
                    "possible_values": []
                }
            },
            "DEFINE_float_35": {
                "name": {
                    "value": "lr_decay",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decay factor",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "train_dir",
                    "possible_values": []
                },
                "default": {
                    "value": "./train",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to write log and checkpoint.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_46": {
                "name": {
                    "value": "max_steps",
                    "possible_values": []
                },
                "default": {
                    "value": "100000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of batches to run.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_47": {
                "name": {
                    "value": "display",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations to display training info.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_48": {
                "name": {
                    "value": "test_interval",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations to run a test",
                    "possible_values": []
                }
            },
            "DEFINE_integer_49": {
                "name": {
                    "value": "test_iter",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations during a test",
                    "possible_values": []
                }
            },
            "DEFINE_integer_50": {
                "name": {
                    "value": "checkpoint_interval",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations to save parameters as a checkpoint",
                    "possible_values": []
                }
            },
            "DEFINE_float_51": {
                "name": {
                    "value": "gpu_fraction",
                    "possible_values": []
                },
                "default": {
                    "value": "0.95",
                    "possible_values": []
                },
                "help": {
                    "value": "The fraction of GPU memory to be allocated",
                    "possible_values": []
                }
            },
            "Variable_91": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, data_input.HEIGHT, data_input.WIDTH, 3]",
                    "possible_values": []
                }
            },
            "placeholder_101": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "possible_values": []
                }
            },
            "merge_all_120": {
                "variable": {
                    "value": "train_summary_op",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "initialize_all_variables_123": {
                "variable": {
                    "value": "init",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_126": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction), log_device_placement=FLAGS.log_device_placement)",
                    "possible_values": []
                }
            },
            "Saver_132": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10000",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_133": {
                "variable": {
                    "value": "ckpt",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.train_dir",
                    "possible_values": []
                }
            },
            "FileWriter_147": {
                "variable": {
                    "value": "summary_writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.train_dir",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "possible_values": []
                }
            },
            "run_217": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Graph_89": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "start_queue_runners_144": {
                "sess": {
                    "value": "sess",
                    "possible_values": [
                        [
                            "tf.Session(config=tf.ConfigProto(gpu_options=tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction), log_device_placement=FLAGS.log_device_placement))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "train_image",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "test_image",
                    "possible_values": []
                }
            },
            "all_variables_132": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Summary_168": {
                "variable": {
                    "value": "test_summary",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConfigProto_126": {
                "gpu_options": {
                    "value": "tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction)",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "possible_values": []
                }
            },
            "GPUOptions_127": {
                "per_process_gpu_memory_fraction": {
                    "value": "FLAGS.gpu_fraction",
                    "possible_values": []
                }
            }
        }
    },
    "train_imagenet.py": {
        "tensorflow": {
            "DEFINE_integer_20": {
                "name": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes in the dataset.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_21": {
                "name": {
                    "value": "num_train_instance",
                    "possible_values": []
                },
                "default": {
                    "value": "50000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of training images.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_22": {
                "name": {
                    "value": "num_test_instance",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of test images.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_26": {
                "name": {
                    "value": "num_residual_units",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of residual block per group.\\n                                                Total number of conv layers will be 6n+4",
                    "possible_values": []
                }
            },
            "DEFINE_float_28": {
                "name": {
                    "value": "k",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "possible_values": []
                },
                "help": {
                    "value": "Network width multiplier",
                    "possible_values": []
                }
            },
            "DEFINE_float_31": {
                "name": {
                    "value": "l2_weight",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "possible_values": []
                },
                "help": {
                    "value": "L2 loss weight applied all the weights",
                    "possible_values": []
                }
            },
            "DEFINE_float_32": {
                "name": {
                    "value": "momentum",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "possible_values": []
                },
                "help": {
                    "value": "The momentum of MomentumOptimizer",
                    "possible_values": []
                }
            },
            "DEFINE_float_33": {
                "name": {
                    "value": "initial_lr",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate",
                    "possible_values": []
                }
            },
            "DEFINE_float_34": {
                "name": {
                    "value": "lr_step_epoch",
                    "possible_values": []
                },
                "default": {
                    "value": "100.0",
                    "possible_values": []
                },
                "help": {
                    "value": "Epochs after which learing rate decays",
                    "possible_values": []
                }
            },
            "DEFINE_float_35": {
                "name": {
                    "value": "lr_decay",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decay factor",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "train_dir",
                    "possible_values": []
                },
                "default": {
                    "value": "./train",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to write log and checkpoint.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_46": {
                "name": {
                    "value": "max_steps",
                    "possible_values": []
                },
                "default": {
                    "value": "100000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of batches to run.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_47": {
                "name": {
                    "value": "display",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations to display training info.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_48": {
                "name": {
                    "value": "test_interval",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations to run a test",
                    "possible_values": []
                }
            },
            "DEFINE_integer_49": {
                "name": {
                    "value": "test_iter",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations during a test",
                    "possible_values": []
                }
            },
            "DEFINE_integer_50": {
                "name": {
                    "value": "checkpoint_interval",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations to save parameters as a checkpoint",
                    "possible_values": []
                }
            },
            "DEFINE_float_51": {
                "name": {
                    "value": "gpu_fraction",
                    "possible_values": []
                },
                "default": {
                    "value": "0.95",
                    "possible_values": []
                },
                "help": {
                    "value": "The fraction of GPU memory to be allocated",
                    "possible_values": []
                }
            },
            "Variable_91": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, FLAGS.image_size, FLAGS.image_size, 3]",
                    "possible_values": []
                }
            },
            "placeholder_101": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "possible_values": []
                }
            },
            "merge_all_120": {
                "variable": {
                    "value": "train_summary_op",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "initialize_all_variables_123": {
                "variable": {
                    "value": "init",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_126": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction), log_device_placement=FLAGS.log_device_placement)",
                    "possible_values": []
                }
            },
            "Saver_132": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10000",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_133": {
                "variable": {
                    "value": "ckpt",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.train_dir",
                    "possible_values": []
                }
            },
            "FileWriter_147": {
                "variable": {
                    "value": "summary_writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.train_dir",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "possible_values": []
                }
            },
            "run_219": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Graph_89": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "start_queue_runners_144": {
                "sess": {
                    "value": "sess",
                    "possible_values": [
                        [
                            "tf.Session(config=tf.ConfigProto(gpu_options=tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction), log_device_placement=FLAGS.log_device_placement))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "train_image",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "test_image",
                    "possible_values": []
                }
            },
            "all_variables_132": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Summary_169": {
                "variable": {
                    "value": "test_summary",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConfigProto_126": {
                "gpu_options": {
                    "value": "tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.gpu_fraction)",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "possible_values": []
                }
            },
            "GPUOptions_127": {
                "per_process_gpu_memory_fraction": {
                    "value": "FLAGS.gpu_fraction",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "conv2d_28": {
                "variable": {
                    "value": "conv",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', [filter_size, filter_size, in_shape[3], out_channel], tf.float32, initializer=tf.random_normal_initializer(stddev=np.sqrt(2.0 / filter_size / filter_size / out_channel)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', initializer=init_kernel)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_44": {
                "variable": {
                    "value": "fc",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, w)",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [out_dim], tf.float32, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=init_params[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_54": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "possible_values": []
                }
            },
            "cond_75": {
                "variable": {
                    "value": "(mean, var)",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_train",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : (batch_mean, batch_var)",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (mu, sigma)",
                    "possible_values": []
                }
            },
            "batch_normalization_77": {
                "variable": {
                    "value": "bn",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "possible_values": []
                },
                "variance": {
                    "value": "var",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', batch_mean.get_shape(), tf.float32, initializer=tf.zeros_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', initializer=init_params[2])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', batch_var.get_shape(), tf.float32, initializer=tf.ones_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', initializer=init_params[3])",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "1e-05",
                    "possible_values": []
                }
            },
            "maximum_11": {
                "x": {
                    "value": "x",
                    "possible_values": []
                },
                "y": {
                    "value": "x * leakness",
                    "possible_values": []
                },
                "name": {
                    "value": "lrelu",
                    "possible_values": []
                }
            },
            "relu_14": {
                "features": {
                    "value": "x",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'lrelu' if name is None else name",
                            "IfExp"
                        ],
                        [
                            "'relu' if name is None else name",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "kernel",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_size, filter_size, in_shape[3], out_channel]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=np.sqrt(2.0 / filter_size / filter_size / out_channel))",
                    "possible_values": []
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "kernel",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_kernel",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'lrelu' if name is None else name",
                            "IfExp"
                        ],
                        [
                            "'relu' if name is None else name",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[1], out_dim]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=np.sqrt(1.0 / out_dim))",
                    "possible_values": []
                }
            },
            "get_variable_37": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_dim]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "possible_values": []
                }
            },
            "get_variable_40": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_params[0]",
                    "possible_values": [
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_41": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_params[1]",
                    "possible_values": [
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'lrelu' if name is None else name",
                            "IfExp"
                        ],
                        [
                            "'relu' if name is None else name",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_56": {
                "variable": {
                    "value": "mu",
                    "possible_values": []
                },
                "name": {
                    "value": "mu",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_mean.get_shape()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "name": {
                    "value": "sigma",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_var.get_shape()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "get_variable_60": {
                "variable": {
                    "value": "beta",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_mean.get_shape()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "possible_values": []
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "gamma",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_var.get_shape()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "possible_values": []
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "mu",
                    "possible_values": []
                },
                "name": {
                    "value": "mu",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_params[0]",
                    "possible_values": [
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "name": {
                    "value": "sigma",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_params[1]",
                    "possible_values": [
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "beta",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_params[2]",
                    "possible_values": [
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_68": {
                "variable": {
                    "value": "gamma",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_params[3]",
                    "possible_values": [
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_to_collection_73": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "possible_values": []
                },
                "value": {
                    "value": "update_mu",
                    "possible_values": [
                        [
                            "mu.assign_sub(update * (mu - batch_mean))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_74": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "possible_values": []
                },
                "value": {
                    "value": "update_sigma",
                    "possible_values": [
                        [
                            "sigma.assign_sub(update * (sigma - batch_var))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_25": {
                "key": {
                    "value": "WEIGHT_DECAY_KEY",
                    "possible_values": [
                        [
                            "'WEIGHT_DECAY'",
                            "Constant"
                        ]
                    ]
                }
            },
            "add_to_collection_26": {
                "name": {
                    "value": "WEIGHT_DECAY_KEY",
                    "possible_values": [
                        [
                            "'WEIGHT_DECAY'",
                            "Constant"
                        ]
                    ]
                },
                "value": {
                    "value": "kernel",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', [filter_size, filter_size, in_shape[3], out_channel], tf.float32, initializer=tf.random_normal_initializer(stddev=np.sqrt(2.0 / filter_size / filter_size / out_channel)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', initializer=init_kernel)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_42": {
                "key": {
                    "value": "WEIGHT_DECAY_KEY",
                    "possible_values": [
                        [
                            "'WEIGHT_DECAY'",
                            "Constant"
                        ]
                    ]
                }
            },
            "add_to_collection_43": {
                "name": {
                    "value": "WEIGHT_DECAY_KEY",
                    "possible_values": [
                        [
                            "'WEIGHT_DECAY'",
                            "Constant"
                        ]
                    ]
                },
                "value": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', [x.get_shape()[1], out_dim], tf.float32, initializer=tf.random_normal_initializer(stddev=np.sqrt(1.0 / out_dim)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=init_params[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_44": {
                "a": {
                    "value": "x",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', [x.get_shape()[1], out_dim], tf.float32, initializer=tf.random_normal_initializer(stddev=np.sqrt(1.0 / out_dim)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=init_params[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_21": {
                "stddev": {
                    "value": "np.sqrt(2.0 / filter_size / filter_size / out_channel)",
                    "possible_values": []
                }
            },
            "random_normal_initializer_35": {
                "stddev": {
                    "value": "np.sqrt(1.0 / out_dim)",
                    "possible_values": []
                }
            },
            "constant_initializer_38": {
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            }
        }
    }
}