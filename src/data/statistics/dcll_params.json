{
    "dcll/load_mnist_pytorch.py": {
        "torch": {
            "zeros_14": {
                "variable": {
                    "value": "t_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*t.shape + (width,)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "empty_32": {
                "variable": {
                    "value": "td",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([len(dataset)]) + x.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_33": {
                "variable": {
                    "value": "tl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([len(dataset)]) + y.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dcll/pytorch_libdcll.py": {
        "torch": {
            "sum_52": {
                "input": {
                    "value": "(pvoutput - labels) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([alpha])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.tau_m__dt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.0 / (1 - self.alpha)])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "self.alphas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([alphas])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.tau_s__dt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.0 / (1 - self.alphas)])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_97": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1 - 0.001 / taum).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "self.tau_m__dt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / (1 - self.alpha)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_99": {
                "variable": {
                    "value": "self.alphas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1 - 0.001 / taus).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_100": {
                "variable": {
                    "value": "self.tau_s__dt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / (1 - self.alphas)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linear_113": {
                "variable": {
                    "value": "vmem",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eps1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha * self.state.eps1 + eps0 * self.tau_m__dt",
                            "BinOp"
                        ],
                        [
                            "self.alpha * self.state.eps1 + eps0 * self.tau_m__dt",
                            "BinOp"
                        ],
                        [
                            "self.alpha * self.state.eps1 + eps0 * self.tau_m__dt",
                            "BinOp"
                        ],
                        [
                            "self.alpha * self.state.eps1 + eps0 * self.tau_m__dt",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_149": {
                "variable": {
                    "value": "pvmem",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eps1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha * self.state.eps1 + eps0 * self.tau_m__dt",
                            "BinOp"
                        ],
                        [
                            "self.alpha * self.state.eps1 + eps0 * self.tau_m__dt",
                            "BinOp"
                        ],
                        [
                            "self.alpha * self.state.eps1 + eps0 * self.tau_m__dt",
                            "BinOp"
                        ],
                        [
                            "self.alpha * self.state.eps1 + eps0 * self.tau_m__dt",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.i2o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "target_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_242": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_246": {
                "variable": {
                    "value": "self.i2o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "target_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_299": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_305": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([alpha])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_306": {
                "variable": {
                    "value": "self.tau_m__dt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.0 / (1 - self.alpha)])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_307": {
                "variable": {
                    "value": "self.alphas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([alphas])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_308": {
                "variable": {
                    "value": "self.tau_s__dt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.0 / (1 - self.alphas)])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_347": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1 - 0.001 / taum).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_348": {
                "variable": {
                    "value": "self.tau_m__dt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / (1 - self.alpha)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_349": {
                "variable": {
                    "value": "self.alphas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1 - 0.001 / taus).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_350": {
                "variable": {
                    "value": "self.tau_s__dt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / (1 - self.alphas)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_365": {
                "variable": {
                    "value": "pvmem",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eps1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha * self.state.eps1 + eps0 * self.tau_m__dt",
                            "BinOp"
                        ],
                        [
                            "self.alpha * self.state.eps1 + eps0 * self.tau_m__dt",
                            "BinOp"
                        ],
                        [
                            "self.alpha * self.state.eps1 + eps0 * self.tau_m__dt",
                            "BinOp"
                        ],
                        [
                            "self.alpha * self.state.eps1 + eps0 * self.tau_m__dt",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_442": {
                "variable": {
                    "value": "pvmem",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eps1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha * self.state.eps1 + eps0 * self.tau_m__dt",
                            "BinOp"
                        ],
                        [
                            "self.alpha * self.state.eps1 + eps0 * self.tau_m__dt",
                            "BinOp"
                        ],
                        [
                            "self.alpha * self.state.eps1 + eps0 * self.tau_m__dt",
                            "BinOp"
                        ],
                        [
                            "self.alpha * self.state.eps1 + eps0 * self.tau_m__dt",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_507": {
                "variable": {
                    "value": "self.i2o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "np.prod(self.get_flat_size())",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "target_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_576": {
                "variable": {
                    "value": "self.output_crit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_682": {
                "variable": {
                    "value": "cl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.clout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_62": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_204": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "lc_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_301": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_377": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "48",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "im_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "im_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sigmoid_395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_472": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_493": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pooling[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(pooling, pooling)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "pooling[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(pooling, pooling)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pool_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pooling[0] - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "(pooling[1] - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dropout_510": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "lc_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_516": {
                "variable": {
                    "value": "self.output_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "np.prod(self.get_flat_size())",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "target_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_705": {
                "obj": {
                    "value": "s.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/slice_state{0}.pkl'.format(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_243": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_709": {
                "f": {
                    "value": "directory + '/slice_state{0}.pkl'.format(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_301": {},
            "zeros_421": {
                "*size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Size([batch_size, self.out_channels]) + self.get_output_shape(im_dims)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_87": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "48",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "48",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "48",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "48",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "48",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_332": {
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, self.in_channels, im_dims[0], im_dims[1]]",
                            "List"
                        ],
                        [
                            "[batch_size, self.in_channels, im_dims[0], im_dims[1]]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_333": {
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, self.in_channels, im_dims[0], im_dims[1]]",
                            "List"
                        ],
                        [
                            "[batch_size, self.in_channels, im_dims[0], im_dims[1]]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_419": {
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, self.in_channels, im_dims[0], im_dims[1]]",
                            "List"
                        ],
                        [
                            "[batch_size, self.in_channels, im_dims[0], im_dims[1]]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_420": {
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, self.in_channels, im_dims[0], im_dims[1]]",
                            "List"
                        ],
                        [
                            "[batch_size, self.in_channels, im_dims[0], im_dims[1]]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_506": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*conv_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mean_636": {
                "input": {
                    "value": "torch.relu(pvmem + 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_637": {
                "input": {
                    "value": "0.1 - torch.mean(pv)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_636": {
                "input": {
                    "value": "pvmem + 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_637": {
                "input": {
                    "value": "pv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.act(vmem)",
                            "Call"
                        ],
                        [
                            "self.act(outpvmem)",
                            "Call"
                        ],
                        [
                            "self.act(pvmem)",
                            "Call"
                        ],
                        [
                            "self.act(outpvmem)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dcll/pytorch_utils.py": {
        "torch": {
            "zeros_10": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "im.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "im.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_11": {
                "variable": {
                    "value": "new_im",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im.cpu(), pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_42": {
                "tensors": {
                    "value": "[after, before]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axis + tensor.dim()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p[1].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "p[1].shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "p[1].shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_119": {
                "tensors": {
                    "value": "(p[1].cpu(), pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_82": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(data.values())[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "samples/pytorch_conv3L_mnist.py": {
        "torch": {
            "Linear_79": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "np.prod(latent_size())",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_108": {
                "variable": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "(self.y_test.argmax(1) == labels.argmax(1)).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_179": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_260": {
                "variable": {
                    "value": "input_spikes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_261": {
                "variable": {
                    "value": "labels_spikes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_263": {
                "variable": {
                    "value": "ref_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_263": {
                "variable": {
                    "value": "ref_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "*im_dims",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Tensor_266": {
                "variable": {
                    "value": "ref_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=inp[0], out_channels=int(conf[0] * args.netscale), kernel_size=conf[1], padding=conf[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "im_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, 28, 28)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_289": {
                "variable": {
                    "value": "test_labels1h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_290": {
                "variable": {
                    "value": "test_ref_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_290": {
                "variable": {
                    "value": "test_ref_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "*im_dims",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Tensor_293": {
                "variable": {
                    "value": "test_ref_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "inp[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(conf[0] * args.netscale)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conf[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "conf[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_61": {
                "kernel_size": {
                    "value": "conf[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "conf[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "(conf[3] - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_284": {
                "variable": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}