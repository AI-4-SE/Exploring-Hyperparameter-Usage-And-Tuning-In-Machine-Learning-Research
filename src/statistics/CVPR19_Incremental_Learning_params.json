{
    "utils_incremental/compute_accuracy.py": {
        "sklearn": {},
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "tg_model(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "outputs / scale.repeat(outputs.shape[0], 1).type(torch.FloatTensor).to(device)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "score_icarl",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "(-sqd_icarl).T",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "score_ncm",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "(-sqd_ncm).T",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "utils_incremental/compute_confusion_matrix.py": {
        "sklearn": {
            "confusion_matrix_71": {
                "variable": {
                    "value": "cm[0, :, :]",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.concatenate(all_targets)",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.concatenate(all_predicted)",
                    "possible_values": []
                }
            },
            "confusion_matrix_72": {
                "variable": {
                    "value": "cm[1, :, :]",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.concatenate(all_targets)",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.concatenate(all_predicted_icarl)",
                    "possible_values": []
                }
            },
            "confusion_matrix_73": {
                "variable": {
                    "value": "cm[2, :, :]",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.concatenate(all_targets)",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.concatenate(all_predicted_ncm)",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "score_icarl",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "(-sqd_icarl).T",
                    "possible_values": []
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "score_ncm",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "(-sqd_ncm).T",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "utils_incremental/compute_features.py": {
        "sklearn": {},
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "utils_incremental/incremental_train_and_eval.py": {
        "sklearn": {},
        "torch": {
            "device_27": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_64": {
                "weight": {
                    "value": "weight_per_class",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_69": {
                "weight": {
                    "value": "weight_per_class",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_107": {
                "weight": {
                    "value": "weight_per_class",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KLDivLoss_67": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "log_softmax_67": {
                "input": {
                    "value": "outputs[:, :num_old_classes] / T",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_68": {
                "input": {
                    "value": "ref_outputs.detach() / T",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "utils_incremental/incremental_train_and_eval_AMR_LF.py": {
        "sklearn": {},
        "torch": {
            "device_48": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "outputs_bs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(old_scores, new_scores)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "gt_index",
                    "possible_values": []
                },
                "*size": {
                    "value": "outputs_bs.size()",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "none_gt_index",
                    "possible_values": []
                },
                "*size": {
                    "value": "outputs_bs.size()",
                    "possible_values": []
                }
            },
            "nonzero_112": {
                "variable": {
                    "value": "hard_num",
                    "possible_values": []
                },
                "input": {
                    "value": "hard_index",
                    "possible_values": [
                        [
                            "targets.lt(num_old_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_160": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "loss3",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_84": {
                "weight": {
                    "value": "weight_per_class",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_89": {
                "weight": {
                    "value": "weight_per_class",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_164": {
                "weight": {
                    "value": "weight_per_class",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CosineEmbeddingLoss_87": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "inputs.shape[0]",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_121": {
                "margin": {
                    "value": "dist",
                    "possible_values": []
                }
            },
            "ones_122": {
                "*size": {
                    "value": "hard_num * K",
                    "possible_values": []
                }
            }
        }
    },
    "utils_incremental/incremental_train_and_eval_LF.py": {
        "sklearn": {},
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_75": {
                "weight": {
                    "value": "weight_per_class",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_80": {
                "weight": {
                    "value": "weight_per_class",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_118": {
                "weight": {
                    "value": "weight_per_class",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CosineEmbeddingLoss_78": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_79": {
                "*size": {
                    "value": "inputs.shape[0]",
                    "possible_values": []
                }
            }
        }
    },
    "utils_incremental/incremental_train_and_eval_MR_LF.py": {
        "sklearn": {},
        "torch": {
            "device_48": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "outputs_bs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(old_scores, new_scores)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "gt_index",
                    "possible_values": []
                },
                "*size": {
                    "value": "outputs_bs.size()",
                    "possible_values": []
                }
            },
            "nonzero_111": {
                "variable": {
                    "value": "hard_num",
                    "possible_values": []
                },
                "input": {
                    "value": "hard_index",
                    "possible_values": [
                        [
                            "targets.lt(num_old_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_159": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "loss3",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_90": {
                "weight": {
                    "value": "weight_per_class",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_95": {
                "weight": {
                    "value": "weight_per_class",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_163": {
                "weight": {
                    "value": "weight_per_class",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CosineEmbeddingLoss_93": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_94": {
                "*size": {
                    "value": "inputs.shape[0]",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_120": {
                "margin": {
                    "value": "dist",
                    "possible_values": []
                }
            },
            "ones_121": {
                "*size": {
                    "value": "hard_num * K",
                    "possible_values": []
                }
            }
        }
    },
    "utils_incremental/incremental_train_and_eval_MS.py": {
        "sklearn": {},
        "torch": {
            "device_35": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_74": {
                "weight": {
                    "value": "weight_per_class",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_81": {
                "weight": {
                    "value": "weight_per_class",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_119": {
                "weight": {
                    "value": "weight_per_class",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MSELoss_80": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100-class-incremental/class_incremental_cifar100.py": {
        "torch": {
            "device_75": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_213": {
                "variable": {
                    "value": "testloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "variable": {
                    "value": "tg_feature_model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(tg_model.children())[:-1]",
                    "possible_values": []
                }
            },
            "DataLoader_329": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "DataLoader_339": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "save_353": {
                "obj": {
                    "value": "top1_acc_list_ori",
                    "possible_values": [
                        [
                            "np.zeros((int(args.num_classes / args.nb_cl), 3, args.nb_runs))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./checkpoint/{}_run_{}_top1_acc_list_ori.pth'.format(args.ckp_prefix, iteration_total)",
                    "possible_values": []
                }
            },
            "save_355": {
                "obj": {
                    "value": "top1_acc_list_cumul",
                    "possible_values": [
                        [
                            "np.zeros((int(args.num_classes / args.nb_cl), 3, args.nb_runs))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./checkpoint/{}_run_{}_top1_acc_list_cumul.pth'.format(args.ckp_prefix, iteration_total)",
                    "possible_values": []
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "new_fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "possible_values": [
                        [
                            "tg_model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features + args.nb_cl",
                    "possible_values": []
                }
            },
            "WeightedRandomSampler_205": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "weights": {
                    "value": "rs_sample_weights",
                    "possible_values": [
                        [
                            "np.concatenate((np.ones(len(X_train)), np.ones(len(X_protoset)) * scale_factor))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "rs_num_samples",
                    "possible_values": [
                        [
                            "int(len(X_train) / (1 - args.rs_ratio))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_206": {
                "variable": {
                    "value": "trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.WeightedRandomSampler(rs_sample_weights, rs_num_samples)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "DataLoader_209": {
                "variable": {
                    "value": "trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "load_223": {
                "variable": {
                    "value": "tg_model",
                    "possible_values": []
                },
                "f": {
                    "value": "ckp_name",
                    "possible_values": [
                        [
                            "'./checkpoint/{}_run_{}_iteration_{}_model.pth'.format(args.ckp_prefix, iteration_total, iteration)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_230": {
                "variable": {
                    "value": "tg_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "tg_params",
                    "possible_values": [
                        [
                            "tg_model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "base_lr",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "custom_momentum",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "custom_weight_decay",
                    "possible_values": [
                        [
                            "0.0005",
                            "Constant"
                        ]
                    ]
                }
            },
            "MultiStepLR_231": {
                "variable": {
                    "value": "tg_lr_scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "tg_optimizer",
                    "possible_values": [
                        [
                            "optim.SGD(tg_params, lr=base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_strat",
                    "possible_values": [
                        [
                            "[80, 120]",
                            "List"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr_factor",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_253": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "save_319": {
                "obj": {
                    "value": "class_means",
                    "possible_values": [
                        [
                            "np.zeros((64, 100, 2))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./checkpoint/{}_run_{}_iteration_{}_class_means.pth'.format(args.ckp_prefix, iteration_total, iteration)",
                    "possible_values": []
                }
            },
            "save_238": {
                "obj": {
                    "value": "tg_model",
                    "possible_values": [
                        [
                            "resnet_cifar.resnet32(num_classes=args.nb_cl_fg)",
                            "Call"
                        ],
                        [
                            "torch.load(ckp_name)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, args.T, args.beta)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "ckp_name",
                    "possible_values": [
                        [
                            "'./checkpoint/{}_run_{}_iteration_{}_model.pth'.format(args.ckp_prefix, iteration_total, iteration)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_291": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "DataLoader_299": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100-class-incremental/class_incremental_cosine_cifar100.py": {
        "torch": {
            "device_107": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_311": {
                "variable": {
                    "value": "testloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Sequential_384": {
                "variable": {
                    "value": "tg_feature_model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(tg_model.children())[:-1]",
                    "possible_values": []
                }
            },
            "DataLoader_468": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "DataLoader_478": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "save_492": {
                "obj": {
                    "value": "top1_acc_list_ori",
                    "possible_values": [
                        [
                            "np.zeros((int(args.num_classes / args.nb_cl), 3, args.nb_runs))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./checkpoint/{}_run_{}_top1_acc_list_ori.pth'.format(args.ckp_prefix, iteration_total)",
                    "possible_values": []
                }
            },
            "save_494": {
                "obj": {
                    "value": "top1_acc_list_cumul",
                    "possible_values": [
                        [
                            "np.zeros((int(args.num_classes / args.nb_cl), 3, args.nb_runs))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./checkpoint/{}_run_{}_top1_acc_list_cumul.pth'.format(args.ckp_prefix, iteration_total)",
                    "possible_values": []
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mean_269": {
                "variable": {
                    "value": "average_old_embedding_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "old_embedding_norm",
                    "possible_values": [
                        [
                            "tg_model.fc.fc1.weight.data.norm(dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Sequential_271": {
                "variable": {
                    "value": "tg_feature_model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(tg_model.children())[:-1]",
                    "possible_values": []
                }
            },
            "zeros_273": {
                "variable": {
                    "value": "novel_embedding",
                    "possible_values": []
                },
                "*size": {
                    "value": "(args.nb_cl, num_features)",
                    "possible_values": []
                }
            },
            "WeightedRandomSampler_303": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "weights": {
                    "value": "rs_sample_weights",
                    "possible_values": [
                        [
                            "np.concatenate((np.ones(len(X_train)), np.ones(len(X_protoset)) * scale_factor))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "rs_num_samples",
                    "possible_values": [
                        [
                            "int(len(X_train) / (1 - args.rs_ratio))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_304": {
                "variable": {
                    "value": "trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.WeightedRandomSampler(rs_sample_weights, rs_num_samples)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "DataLoader_307": {
                "variable": {
                    "value": "trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "load_321": {
                "variable": {
                    "value": "tg_model",
                    "possible_values": []
                },
                "f": {
                    "value": "ckp_name",
                    "possible_values": [
                        [
                            "'./checkpoint/{}_run_{}_iteration_{}_model.pth'.format(args.ckp_prefix, iteration_total, iteration)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_338": {
                "variable": {
                    "value": "tg_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "tg_params",
                    "possible_values": [
                        [
                            "[{'params': base_params, 'lr': base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}]",
                            "List"
                        ],
                        [
                            "tg_model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "base_lr",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "custom_momentum",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "custom_weight_decay",
                    "possible_values": [
                        [
                            "0.0005",
                            "Constant"
                        ]
                    ]
                }
            },
            "MultiStepLR_339": {
                "variable": {
                    "value": "tg_lr_scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "tg_optimizer",
                    "possible_values": [
                        [
                            "optim.SGD(tg_params, lr=base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_strat",
                    "possible_values": [
                        [
                            "[80, 120]",
                            "List"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr_factor",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_392": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "save_458": {
                "obj": {
                    "value": "class_means",
                    "possible_values": [
                        [
                            "np.zeros((64, 100, 2))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./checkpoint/{}_run_{}_iteration_{}_class_means.pth'.format(args.ckp_prefix, iteration_total, iteration)",
                    "possible_values": []
                }
            },
            "DataLoader_279": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "normalize_286": {
                "variable": {
                    "value": "norm_features",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(cls_features)",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_287": {
                "variable": {
                    "value": "cls_embedding",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_features",
                    "possible_values": [
                        [
                            "F.normalize(torch.from_numpy(cls_features), p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "save_377": {
                "obj": {
                    "value": "tg_model",
                    "possible_values": [
                        [
                            "modified_resnet_cifar.resnet32(num_classes=args.nb_cl_fg)",
                            "Call"
                        ],
                        [
                            "torch.load(ckp_name)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MR_LF(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_AMR_LF(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_LF(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MS(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, args.lw_ms)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, args.T, args.beta)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "ckp_name",
                    "possible_values": [
                        [
                            "'./checkpoint/{}_run_{}_iteration_{}_model.pth'.format(args.ckp_prefix, iteration_total, iteration)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_430": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "DataLoader_438": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "from_numpy_286": {
                "ndarray": {
                    "value": "cls_features",
                    "possible_values": [
                        [
                            "compute_features(tg_feature_model, evalloader, num_samples, num_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_289": {
                "input": {
                    "value": "cls_embedding",
                    "possible_values": [
                        [
                            "torch.mean(norm_features, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100-class-incremental/eval_cumul_acc.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "load_75": {
                "variable": {
                    "value": "tg_model",
                    "possible_values": []
                },
                "f": {
                    "value": "ckp_name",
                    "possible_values": [
                        [
                            "'{}iteration_{}_model.pth'.format(args.ckp_prefix, iteration)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "tg_feature_model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(tg_model.children())[:-1]",
                    "possible_values": []
                }
            },
            "load_77": {
                "variable": {
                    "value": "class_means",
                    "possible_values": []
                },
                "f": {
                    "value": "class_means_name",
                    "possible_values": [
                        [
                            "'{}iteration_{}_class_means.pth'.format(args.ckp_prefix, iteration)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100-class-incremental/modified_linear.py": {
        "torch": {
            "CosineLinear_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_features": {
                    "value": "in_features",
                    "possible_values": []
                },
                "self.out_features": {
                    "value": "out_features",
                    "possible_values": []
                },
                "Parameter_13": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(out_features, in_features)",
                        "possible_values": []
                    }
                }
            },
            "SplitCosineLinear_39": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_features": {
                    "value": "in_features",
                    "possible_values": []
                }
            },
            "linear_33": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(input, p=2, dim=1)",
                    "possible_values": []
                },
                "weight": {
                    "value": "F.normalize(self.weight, p=2, dim=1)",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.sigma",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.sigma",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "possible_values": []
                }
            },
            "normalize_33": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "normalize_34": {
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100-class-incremental/modified_resnet_cifar.py": {
        "torch": {
            "BasicBlock_12": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "BatchNorm2d_18": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "ReLU_19": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_21": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), nn.BatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.last": {
                    "value": "last",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResNet_45": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_50": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "3",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "16",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_52": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "16",
                        "possible_values": []
                    }
                },
                "ReLU_53": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "AvgPool2d_57": {
                    "variable": {
                        "value": "self.avgpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "8",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100-class-incremental/resnet_cifar.py": {
        "torch": {
            "BasicBlock_10": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "BatchNorm2d_16": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "ReLU_17": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_19": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), nn.BatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bottleneck_42": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_47": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "inplanes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_48": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "Conv2d_49": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_51": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "Conv2d_52": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes * self.expansion",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_53": {
                    "variable": {
                        "value": "self.bn3",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes * self.expansion",
                        "possible_values": []
                    }
                },
                "ReLU_54": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), nn.BatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResNet_81": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_86": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "3",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "16",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_88": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "16",
                        "possible_values": []
                    }
                },
                "ReLU_89": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "AvgPool2d_93": {
                    "variable": {
                        "value": "self.avgpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "8",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Linear_94": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "64 * block.expansion",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "10",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "Conv2d_7": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100-class-incremental/utils_pytorch.py": {
        "torch": {
            "DataLoader_45": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "mean",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "std",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "possible_values": []
                }
            }
        }
    },
    "imagenet-class-incremental/cbf_class_incremental_cosine_imagenet.py": {
        "torch": {
            "device_123": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_366": {
                "variable": {
                    "value": "testloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Sequential_439": {
                "variable": {
                    "value": "tg_feature_model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(tg_model.children())[:-1]",
                    "possible_values": []
                }
            },
            "DataLoader_538": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_550": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "save_771": {
                "obj": {
                    "value": "top1_acc_list_ori",
                    "possible_values": [
                        [
                            "np.zeros((int(args.num_classes / args.nb_cl), 3, args.nb_runs))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./checkpoint/{}_run_{}_top1_acc_list_ori.pth'.format(args.ckp_prefix, iteration_total)",
                    "possible_values": []
                }
            },
            "save_773": {
                "obj": {
                    "value": "top1_acc_list_cumul",
                    "possible_values": [
                        [
                            "np.zeros((int(args.num_classes / args.nb_cl), 3, args.nb_runs))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./checkpoint/{}_run_{}_top1_acc_list_cumul.pth'.format(args.ckp_prefix, iteration_total)",
                    "possible_values": []
                }
            },
            "is_available_123": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mean_314": {
                "variable": {
                    "value": "average_old_embedding_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "old_embedding_norm",
                    "possible_values": [
                        [
                            "tg_model.fc.fc1.weight.data.norm(dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Sequential_316": {
                "variable": {
                    "value": "tg_feature_model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(tg_model.children())[:-1]",
                    "possible_values": []
                }
            },
            "zeros_318": {
                "variable": {
                    "value": "novel_embedding",
                    "possible_values": []
                },
                "*size": {
                    "value": "(args.nb_cl, num_features)",
                    "possible_values": []
                }
            },
            "WeightedRandomSampler_352": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "weights": {
                    "value": "rs_sample_weights",
                    "possible_values": [
                        [
                            "np.concatenate((np.ones(len(X_train)), np.ones(len(X_protoset)) * scale_factor))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "rs_num_samples",
                    "possible_values": [
                        [
                            "int(len(X_train) / (1 - args.rs_ratio))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_355": {
                "variable": {
                    "value": "trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.WeightedRandomSampler(rs_sample_weights, rs_num_samples)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_360": {
                "variable": {
                    "value": "trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_376": {
                "variable": {
                    "value": "tg_model",
                    "possible_values": []
                },
                "f": {
                    "value": "ckp_name",
                    "possible_values": [
                        [
                            "'./checkpoint/{}_run_{}_iteration_{}_model.pth'.format(args.ckp_prefix, iteration_total, iteration)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_393": {
                "variable": {
                    "value": "tg_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "tg_params",
                    "possible_values": [
                        [
                            "[{'params': base_params, 'lr': base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}]",
                            "List"
                        ],
                        [
                            "tg_model.parameters()",
                            "Call"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc2.parameters(), 'lr': 0, 'weight_decay': 0}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc1.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "base_lr",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "custom_momentum",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "custom_weight_decay",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "MultiStepLR_394": {
                "variable": {
                    "value": "tg_lr_scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "tg_optimizer",
                    "possible_values": [
                        [
                            "optim.SGD(tg_params, lr=base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_strat",
                    "possible_values": [
                        [
                            "[30, 60]",
                            "List"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr_factor",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_449": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "save_527": {
                "obj": {
                    "value": "class_means",
                    "possible_values": [
                        [
                            "np.zeros((num_features, args.num_classes, 2))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "class_means_name",
                    "possible_values": [
                        [
                            "'./checkpoint/{}_run_{}_iteration_{}_class_means.pth'.format(args.ckp_prefix, iteration_total, iteration)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_573": {
                "variable": {
                    "value": "trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_580": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_582": {
                "variable": {
                    "value": "tg_feature_model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(tg_model.children())[:-1]",
                    "possible_values": []
                }
            },
            "DataLoader_589": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_592": {
                "variable": {
                    "value": "tg_feature_model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(tg_model.children())[:-1]",
                    "possible_values": []
                }
            },
            "DataLoader_599": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_602": {
                "variable": {
                    "value": "tg_feature_model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(tg_model.children())[:-1]",
                    "possible_values": []
                }
            },
            "DataLoader_719": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_721": {
                "variable": {
                    "value": "tg_feature_model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(tg_model.children())[:-1]",
                    "possible_values": []
                }
            },
            "DataLoader_728": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_731": {
                "variable": {
                    "value": "tg_feature_model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(tg_model.children())[:-1]",
                    "possible_values": []
                }
            },
            "DataLoader_738": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_741": {
                "variable": {
                    "value": "tg_feature_model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(tg_model.children())[:-1]",
                    "possible_values": []
                }
            },
            "DataLoader_752": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_764": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_326": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "normalize_333": {
                "variable": {
                    "value": "norm_features",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(cls_features)",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_334": {
                "variable": {
                    "value": "cls_embedding",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_features",
                    "possible_values": [
                        [
                            "F.normalize(torch.from_numpy(cls_features), p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "save_432": {
                "obj": {
                    "value": "tg_model",
                    "possible_values": [
                        [
                            "modified_resnet.resnet18(num_classes=args.nb_cl_fg)",
                            "Call"
                        ],
                        [
                            "torch.load(ckp_name)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MR_LF(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_AMR_LF(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_LF(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MS(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, args.lw_ms)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, args.T, args.beta)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MR_LF(args.ft_epochs, tg_model, ref_model, tg_ft_optimizer, tg_ft_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr, fix_bn=fix_bn_flag)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MR_LF(args.ft_epochs, tg_model, ref_model, tg_ft_optimizer, tg_ft_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr, fix_bn=fix_bn_flag)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MR_LF(args.ft_epochs, tg_model, ref_model, tg_ft_optimizer, tg_ft_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr, fix_bn=fix_bn_flag)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MR_LF(args.ft_epochs, tg_model, ref_model, tg_ft_optimizer, tg_ft_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr, fix_bn=fix_bn_flag)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_LF(args.ft_epochs, tg_model, ref_model, tg_ft_optimizer, tg_ft_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, fix_bn=fix_bn_flag)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "ckp_name",
                    "possible_values": [
                        [
                            "'./checkpoint/{}_run_{}_iteration_{}_model.pth'.format(args.ckp_prefix, iteration_total, iteration)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_491": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "save_563": {
                "obj": {
                    "value": "tg_model",
                    "possible_values": [
                        [
                            "modified_resnet.resnet18(num_classes=args.nb_cl_fg)",
                            "Call"
                        ],
                        [
                            "torch.load(ckp_name)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MR_LF(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_AMR_LF(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_LF(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MS(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, args.lw_ms)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, args.T, args.beta)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MR_LF(args.ft_epochs, tg_model, ref_model, tg_ft_optimizer, tg_ft_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr, fix_bn=fix_bn_flag)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MR_LF(args.ft_epochs, tg_model, ref_model, tg_ft_optimizer, tg_ft_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr, fix_bn=fix_bn_flag)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MR_LF(args.ft_epochs, tg_model, ref_model, tg_ft_optimizer, tg_ft_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr, fix_bn=fix_bn_flag)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MR_LF(args.ft_epochs, tg_model, ref_model, tg_ft_optimizer, tg_ft_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr, fix_bn=fix_bn_flag)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_LF(args.ft_epochs, tg_model, ref_model, tg_ft_optimizer, tg_ft_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, fix_bn=fix_bn_flag)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "ckp_name.replace('/checkpoint/', '/checkpoint/AFTER_CBF_')",
                    "possible_values": []
                }
            },
            "save_564": {
                "obj": {
                    "value": "class_means",
                    "possible_values": [
                        [
                            "np.zeros((num_features, args.num_classes, 2))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "class_means_name.replace('/checkpoint/', '/checkpoint/AFTER_CBF_')",
                    "possible_values": []
                }
            },
            "SGD_616": {
                "variable": {
                    "value": "tg_ft_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "tg_params",
                    "possible_values": [
                        [
                            "[{'params': base_params, 'lr': base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}]",
                            "List"
                        ],
                        [
                            "tg_model.parameters()",
                            "Call"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc2.parameters(), 'lr': 0, 'weight_decay': 0}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc1.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.ft_base_lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "custom_momentum",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "custom_weight_decay",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "MultiStepLR_617": {
                "variable": {
                    "value": "tg_ft_lr_scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "tg_ft_optimizer",
                    "possible_values": [
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.ft_lr_strat",
                    "possible_values": []
                },
                "gamma": {
                    "value": "lr_factor",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "save_712": {
                "obj": {
                    "value": "tg_model",
                    "possible_values": [
                        [
                            "modified_resnet.resnet18(num_classes=args.nb_cl_fg)",
                            "Call"
                        ],
                        [
                            "torch.load(ckp_name)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MR_LF(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_AMR_LF(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_LF(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MS(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, args.lw_ms)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, args.T, args.beta)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MR_LF(args.ft_epochs, tg_model, ref_model, tg_ft_optimizer, tg_ft_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr, fix_bn=fix_bn_flag)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MR_LF(args.ft_epochs, tg_model, ref_model, tg_ft_optimizer, tg_ft_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr, fix_bn=fix_bn_flag)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MR_LF(args.ft_epochs, tg_model, ref_model, tg_ft_optimizer, tg_ft_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr, fix_bn=fix_bn_flag)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MR_LF(args.ft_epochs, tg_model, ref_model, tg_ft_optimizer, tg_ft_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr, fix_bn=fix_bn_flag)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_LF(args.ft_epochs, tg_model, ref_model, tg_ft_optimizer, tg_ft_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, fix_bn=fix_bn_flag)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "ckp_name.replace('/checkpoint/', '/checkpoint/AFTER_CBF_')",
                    "possible_values": []
                }
            },
            "save_713": {
                "obj": {
                    "value": "class_means",
                    "possible_values": [
                        [
                            "np.zeros((num_features, args.num_classes, 2))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "class_means_name.replace('/checkpoint/', '/checkpoint/AFTER_CBF_')",
                    "possible_values": []
                }
            },
            "SGD_634": {
                "variable": {
                    "value": "tg_ft_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "tg_params",
                    "possible_values": [
                        [
                            "[{'params': base_params, 'lr': base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}]",
                            "List"
                        ],
                        [
                            "tg_model.parameters()",
                            "Call"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc2.parameters(), 'lr': 0, 'weight_decay': 0}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc1.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.ft_base_lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "custom_momentum",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "custom_weight_decay",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "MultiStepLR_635": {
                "variable": {
                    "value": "tg_ft_lr_scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "tg_ft_optimizer",
                    "possible_values": [
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.ft_lr_strat",
                    "possible_values": []
                },
                "gamma": {
                    "value": "lr_factor",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_333": {
                "ndarray": {
                    "value": "cls_features",
                    "possible_values": [
                        [
                            "compute_features(tg_feature_model, evalloader, num_samples, num_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_336": {
                "input": {
                    "value": "cls_embedding",
                    "possible_values": [
                        [
                            "torch.mean(norm_features, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "SGD_652": {
                "variable": {
                    "value": "tg_ft_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "tg_params",
                    "possible_values": [
                        [
                            "[{'params': base_params, 'lr': base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}]",
                            "List"
                        ],
                        [
                            "tg_model.parameters()",
                            "Call"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc2.parameters(), 'lr': 0, 'weight_decay': 0}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc1.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.ft_base_lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "custom_momentum",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "custom_weight_decay",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "MultiStepLR_653": {
                "variable": {
                    "value": "tg_ft_lr_scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "tg_ft_optimizer",
                    "possible_values": [
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.ft_lr_strat",
                    "possible_values": []
                },
                "gamma": {
                    "value": "lr_factor",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "SGD_670": {
                "variable": {
                    "value": "tg_ft_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "tg_params",
                    "possible_values": [
                        [
                            "[{'params': base_params, 'lr': base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}]",
                            "List"
                        ],
                        [
                            "tg_model.parameters()",
                            "Call"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc2.parameters(), 'lr': 0, 'weight_decay': 0}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc1.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.ft_base_lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "custom_momentum",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "custom_weight_decay",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "MultiStepLR_671": {
                "variable": {
                    "value": "tg_ft_lr_scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "tg_ft_optimizer",
                    "possible_values": [
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.ft_lr_strat",
                    "possible_values": []
                },
                "gamma": {
                    "value": "lr_factor",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "SGD_691": {
                "variable": {
                    "value": "tg_ft_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "tg_params",
                    "possible_values": [
                        [
                            "[{'params': base_params, 'lr': base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}]",
                            "List"
                        ],
                        [
                            "tg_model.parameters()",
                            "Call"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc2.parameters(), 'lr': 0, 'weight_decay': 0}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc1.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': base_params, 'lr': 0, 'weight_decay': 0}, {'params': tg_model.fc.fc1.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc2.parameters(), 'lr': args.ft_base_lr, 'weight_decay': custom_weight_decay}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.ft_base_lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "custom_momentum",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "custom_weight_decay",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "MultiStepLR_692": {
                "variable": {
                    "value": "tg_ft_lr_scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "tg_ft_optimizer",
                    "possible_values": [
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(tg_params, lr=args.ft_base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.ft_lr_strat",
                    "possible_values": []
                },
                "gamma": {
                    "value": "lr_factor",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "imagenet-class-incremental/class_incremental_cosine_imagenet.py": {
        "torch": {
            "device_112": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_355": {
                "variable": {
                    "value": "testloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Sequential_428": {
                "variable": {
                    "value": "tg_feature_model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(tg_model.children())[:-1]",
                    "possible_values": []
                }
            },
            "DataLoader_525": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_537": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "save_551": {
                "obj": {
                    "value": "top1_acc_list_ori",
                    "possible_values": [
                        [
                            "np.zeros((int(args.num_classes / args.nb_cl), 3, args.nb_runs))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./checkpoint/{}_run_{}_top1_acc_list_ori.pth'.format(args.ckp_prefix, iteration_total)",
                    "possible_values": []
                }
            },
            "save_553": {
                "obj": {
                    "value": "top1_acc_list_cumul",
                    "possible_values": [
                        [
                            "np.zeros((int(args.num_classes / args.nb_cl), 3, args.nb_runs))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./checkpoint/{}_run_{}_top1_acc_list_cumul.pth'.format(args.ckp_prefix, iteration_total)",
                    "possible_values": []
                }
            },
            "is_available_112": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mean_303": {
                "variable": {
                    "value": "average_old_embedding_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "old_embedding_norm",
                    "possible_values": [
                        [
                            "tg_model.fc.fc1.weight.data.norm(dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Sequential_305": {
                "variable": {
                    "value": "tg_feature_model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(tg_model.children())[:-1]",
                    "possible_values": []
                }
            },
            "zeros_307": {
                "variable": {
                    "value": "novel_embedding",
                    "possible_values": []
                },
                "*size": {
                    "value": "(args.nb_cl, num_features)",
                    "possible_values": []
                }
            },
            "WeightedRandomSampler_341": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "weights": {
                    "value": "rs_sample_weights",
                    "possible_values": [
                        [
                            "np.concatenate((np.ones(len(X_train)), np.ones(len(X_protoset)) * scale_factor))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "rs_num_samples",
                    "possible_values": [
                        [
                            "int(len(X_train) / (1 - args.rs_ratio))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_344": {
                "variable": {
                    "value": "trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.WeightedRandomSampler(rs_sample_weights, rs_num_samples)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_349": {
                "variable": {
                    "value": "trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_365": {
                "variable": {
                    "value": "tg_model",
                    "possible_values": []
                },
                "f": {
                    "value": "ckp_name",
                    "possible_values": [
                        [
                            "'./checkpoint/{}_run_{}_iteration_{}_model.pth'.format(args.ckp_prefix, iteration_total, iteration)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_382": {
                "variable": {
                    "value": "tg_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "tg_params",
                    "possible_values": [
                        [
                            "[{'params': base_params, 'lr': base_lr, 'weight_decay': custom_weight_decay}, {'params': tg_model.fc.fc1.parameters(), 'lr': 0, 'weight_decay': 0}]",
                            "List"
                        ],
                        [
                            "tg_model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "base_lr",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "custom_momentum",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "custom_weight_decay",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "MultiStepLR_383": {
                "variable": {
                    "value": "tg_lr_scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "tg_optimizer",
                    "possible_values": [
                        [
                            "optim.SGD(tg_params, lr=base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_strat",
                    "possible_values": [
                        [
                            "[30, 60]",
                            "List"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr_factor",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_438": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "save_513": {
                "obj": {
                    "value": "class_means",
                    "possible_values": [
                        [
                            "np.zeros((num_features, args.num_classes, 2))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./checkpoint/{}_run_{}_iteration_{}_class_means.pth'.format(args.ckp_prefix, iteration_total, iteration)",
                    "possible_values": []
                }
            },
            "DataLoader_315": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "normalize_322": {
                "variable": {
                    "value": "norm_features",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(cls_features)",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_323": {
                "variable": {
                    "value": "cls_embedding",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_features",
                    "possible_values": [
                        [
                            "F.normalize(torch.from_numpy(cls_features), p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "save_421": {
                "obj": {
                    "value": "tg_model",
                    "possible_values": [
                        [
                            "modified_resnet.resnet18(num_classes=args.nb_cl_fg)",
                            "Call"
                        ],
                        [
                            "torch.load(ckp_name)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MR_LF(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_AMR_LF(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda, args.dist, args.K, args.lw_mr)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_LF(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, cur_lamda)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval_MS(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, args.lw_ms)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, args.T, args.beta)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "ckp_name",
                    "possible_values": [
                        [
                            "'./checkpoint/{}_run_{}_iteration_{}_model.pth'.format(args.ckp_prefix, iteration_total, iteration)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_480": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "from_numpy_322": {
                "ndarray": {
                    "value": "cls_features",
                    "possible_values": [
                        [
                            "compute_features(tg_feature_model, evalloader, num_samples, num_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_325": {
                "input": {
                    "value": "cls_embedding",
                    "possible_values": [
                        [
                            "torch.mean(norm_features, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "imagenet-class-incremental/class_incremental_imagenet.py": {
        "torch": {
            "device_79": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_254": {
                "variable": {
                    "value": "testloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Sequential_286": {
                "variable": {
                    "value": "tg_feature_model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(tg_model.children())[:-1]",
                    "possible_values": []
                }
            },
            "DataLoader_383": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_395": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "save_409": {
                "obj": {
                    "value": "top1_acc_list_ori",
                    "possible_values": [
                        [
                            "np.zeros((int(args.num_classes / args.nb_cl), 3, args.nb_runs))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./checkpoint/{}_run_{}_top1_acc_list_ori.pth'.format(args.ckp_prefix, iteration_total)",
                    "possible_values": []
                }
            },
            "save_411": {
                "obj": {
                    "value": "top1_acc_list_cumul",
                    "possible_values": [
                        [
                            "np.zeros((int(args.num_classes / args.nb_cl), 3, args.nb_runs))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./checkpoint/{}_run_{}_top1_acc_list_cumul.pth'.format(args.ckp_prefix, iteration_total)",
                    "possible_values": []
                }
            },
            "is_available_79": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "new_fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "possible_values": [
                        [
                            "tg_model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features + args.nb_cl",
                    "possible_values": []
                }
            },
            "WeightedRandomSampler_240": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "weights": {
                    "value": "rs_sample_weights",
                    "possible_values": [
                        [
                            "np.concatenate((np.ones(len(X_train)), np.ones(len(X_protoset)) * scale_factor))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "rs_num_samples",
                    "possible_values": [
                        [
                            "int(len(X_train) / (1 - args.rs_ratio))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_243": {
                "variable": {
                    "value": "trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.WeightedRandomSampler(rs_sample_weights, rs_num_samples)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_248": {
                "variable": {
                    "value": "trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_264": {
                "variable": {
                    "value": "tg_model",
                    "possible_values": []
                },
                "f": {
                    "value": "ckp_name",
                    "possible_values": [
                        [
                            "'./checkpoint/{}_run_{}_iteration_{}_model.pth'.format(args.ckp_prefix, iteration_total, iteration)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_271": {
                "variable": {
                    "value": "tg_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "tg_params",
                    "possible_values": [
                        [
                            "tg_model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "base_lr",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "custom_momentum",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "custom_weight_decay",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "MultiStepLR_272": {
                "variable": {
                    "value": "tg_lr_scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "tg_optimizer",
                    "possible_values": [
                        [
                            "optim.SGD(tg_params, lr=base_lr, momentum=custom_momentum, weight_decay=custom_weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_strat",
                    "possible_values": [
                        [
                            "[30, 60]",
                            "List"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr_factor",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_296": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "save_371": {
                "obj": {
                    "value": "class_means",
                    "possible_values": [
                        [
                            "np.zeros((num_features, args.num_classes, 2))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./checkpoint/{}_run_{}_iteration_{}_class_means.pth'.format(args.ckp_prefix, iteration_total, iteration)",
                    "possible_values": []
                }
            },
            "save_279": {
                "obj": {
                    "value": "tg_model",
                    "possible_values": [
                        [
                            "models.resnet18(num_classes=args.nb_cl_fg)",
                            "Call"
                        ],
                        [
                            "torch.load(ckp_name)",
                            "Call"
                        ],
                        [
                            "tg_model.to(device)",
                            "Call"
                        ],
                        [
                            "incremental_train_and_eval(args.epochs, tg_model, ref_model, tg_optimizer, tg_lr_scheduler, trainloader, testloader, iteration, start_iter, args.T, args.beta)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "ckp_name",
                    "possible_values": [
                        [
                            "'./checkpoint/{}_run_{}_iteration_{}_model.pth'.format(args.ckp_prefix, iteration_total, iteration)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_338": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "imagenet-class-incremental/eval_cumul_acc.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "load_90": {
                "variable": {
                    "value": "tg_model",
                    "possible_values": []
                },
                "f": {
                    "value": "ckp_name",
                    "possible_values": [
                        [
                            "'{}iteration_{}_model.pth'.format(args.ckp_prefix, iteration)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "tg_feature_model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(tg_model.children())[:-1]",
                    "possible_values": []
                }
            },
            "load_92": {
                "variable": {
                    "value": "class_means",
                    "possible_values": []
                },
                "f": {
                    "value": "class_means_name",
                    "possible_values": [
                        [
                            "'{}iteration_{}_class_means.pth'.format(args.ckp_prefix, iteration)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_100": {
                "variable": {
                    "value": "evalloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "evalset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "imagenet-class-incremental/gen_imagenet_subset.py": {
        "torch": {}
    },
    "imagenet-class-incremental/gen_resized_imagenet.py": {
        "torch": {}
    },
    "imagenet-class-incremental/modified_linear.py": {
        "torch": {
            "CosineLinear_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_features": {
                    "value": "in_features",
                    "possible_values": []
                },
                "self.out_features": {
                    "value": "out_features",
                    "possible_values": []
                },
                "Parameter_13": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(out_features, in_features)",
                        "possible_values": []
                    }
                }
            },
            "SplitCosineLinear_39": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_features": {
                    "value": "in_features",
                    "possible_values": []
                }
            },
            "linear_33": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(input, p=2, dim=1)",
                    "possible_values": []
                },
                "weight": {
                    "value": "F.normalize(self.weight, p=2, dim=1)",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.sigma",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.sigma",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "possible_values": []
                }
            },
            "normalize_33": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "normalize_34": {
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "imagenet-class-incremental/modified_resnet.py": {
        "torch": {
            "BasicBlock_12": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "BatchNorm2d_18": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "ReLU_19": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_21": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), nn.BatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.last": {
                    "value": "last",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResNet_45": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_50": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "3",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "64",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "7",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "3",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_52": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "64",
                        "possible_values": []
                    }
                },
                "ReLU_53": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "MaxPool2d_54": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "AvgPool2d_59": {
                    "variable": {
                        "value": "self.avgpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "7",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "Conv2d_8": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                }
            }
        }
    },
    "imagenet-class-incremental/resnet.py": {
        "torch": {
            "BasicBlock_25": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "BatchNorm2d_31": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "ReLU_32": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_34": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), nn.BatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bottleneck_57": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_62": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "inplanes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_63": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "Conv2d_64": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_66": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "Conv2d_67": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes * self.expansion",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_68": {
                    "variable": {
                        "value": "self.bn3",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes * self.expansion",
                        "possible_values": []
                    }
                },
                "ReLU_69": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), nn.BatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResNet_96": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_101": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "3",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "64",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "7",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "3",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_103": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "64",
                        "possible_values": []
                    }
                },
                "ReLU_104": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "MaxPool2d_105": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "AvgPool2d_110": {
                    "variable": {
                        "value": "self.avgpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "7",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Linear_111": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "512 * block.expansion",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "1000",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                }
            }
        }
    },
    "imagenet-class-incremental/utils_imagenet/train_and_eval.py": {
        "torch": {
            "CrossEntropyLoss_45": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "imagenet-class-incremental/utils_imagenet/utils_train.py": {
        "torch": {
            "CrossEntropyLoss_26": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_28": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "imagenet-class-incremental/utils_pytorch.py": {
        "torch": {
            "DataLoader_45": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "mean",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "std",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "possible_values": []
                }
            }
        }
    }
}