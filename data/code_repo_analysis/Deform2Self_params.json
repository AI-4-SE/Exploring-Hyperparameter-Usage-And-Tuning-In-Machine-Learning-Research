{
    "deform2self.py": {
        "torch": {
            "Adam_35": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "config['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flip_14": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(img, axis)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_74": {
                "tensors": {
                    "value": "denoised",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__47": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config['clip_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(imgs, axis=0).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "imgs / imgs.max()",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(imgs).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_22": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "losses_metrics.py": {
        "torch": {
            "abs_14": {
                "variable": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s[:, :, 1:, :] - s[:, :, :-1, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_15": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s[:, :, :, 1:] - s[:, :, :, :-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_55": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_21": {
                "input": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(s[:, :, 1:, :] - s[:, :, :-1, :])",
                            "Call"
                        ],
                        [
                            "dy * dy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_9": {
                "input": {
                    "value": "mask * err2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_57": {
                "input": {
                    "value": "(x - y) ** 2 * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "leaky_relu_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.p_drop)",
                            "Call"
                        ],
                        [
                            "self.conv(x, mask)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, self.alpha)",
                            "Call"
                        ],
                        [
                            "self.convs[0](x, mask)",
                            "Call"
                        ],
                        [
                            "self.convs[0](x)",
                            "Call"
                        ],
                        [
                            "self.convs[i + 1](x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2)",
                            "Call"
                        ],
                        [
                            "self.convs[self.n_down + 1](skips.pop())",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skips.pop()], 1)",
                            "Call"
                        ],
                        [
                            "self.convs[self.n_down + 2 + 2 * i](x)",
                            "Call"
                        ],
                        [
                            "self.convs[self.n_down + 3 + 2 * i](x)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_65": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Normal_72": {
                "variable": {
                    "value": "nd",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.flow.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "nd.sample(self.flow.weight.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_74": {
                "variable": {
                    "value": "self.flow.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.flow.bias.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "meshgrid_124": {
                "variable": {
                    "value": "grids",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.arange(0, s, device=flow.device, dtype=flow.dtype) for s in flow.shape[2:]]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_125": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.meshgrid(vectors)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_126": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(grids)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(grid, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_170": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ConvBlock(2, c_in, c_feat, p_drop=0)]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_171": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.p_drop)",
                            "Call"
                        ],
                        [
                            "self.conv(x, mask)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, self.alpha)",
                            "Call"
                        ],
                        [
                            "self.convs[0](x, mask)",
                            "Call"
                        ],
                        [
                            "self.convs[0](x)",
                            "Call"
                        ],
                        [
                            "self.convs[i + 1](x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2)",
                            "Call"
                        ],
                        [
                            "self.convs[self.n_down + 1](skips.pop())",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skips.pop()], 1)",
                            "Call"
                        ],
                        [
                            "self.convs[self.n_down + 2 + 2 * i](x)",
                            "Call"
                        ],
                        [
                            "self.convs[self.n_down + 3 + 2 * i](x)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.p_drop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y, x_enc[-(i + 2)]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y, x_enc[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_183": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.p_drop)",
                            "Call"
                        ],
                        [
                            "self.conv(x, mask)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, self.alpha)",
                            "Call"
                        ],
                        [
                            "self.convs[0](x, mask)",
                            "Call"
                        ],
                        [
                            "self.convs[0](x)",
                            "Call"
                        ],
                        [
                            "self.convs[i + 1](x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2)",
                            "Call"
                        ],
                        [
                            "self.convs[self.n_down + 1](skips.pop())",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skips.pop()], 1)",
                            "Call"
                        ],
                        [
                            "self.convs[self.n_down + 2 + 2 * i](x)",
                            "Call"
                        ],
                        [
                            "self.convs[self.n_down + 3 + 2 * i](x)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_189": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.p_drop)",
                            "Call"
                        ],
                        [
                            "self.conv(x, mask)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, self.alpha)",
                            "Call"
                        ],
                        [
                            "self.convs[0](x, mask)",
                            "Call"
                        ],
                        [
                            "self.convs[0](x)",
                            "Call"
                        ],
                        [
                            "self.convs[i + 1](x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2)",
                            "Call"
                        ],
                        [
                            "self.convs[self.n_down + 1](skips.pop())",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skips.pop()], 1)",
                            "Call"
                        ],
                        [
                            "self.convs[self.n_down + 2 + 2 * i](x)",
                            "Call"
                        ],
                        [
                            "self.convs[self.n_down + 3 + 2 * i](x)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, skips.pop()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "*size": {
                    "value": "self.flow.bias.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_123": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "flow.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "flow.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grid_sample_152": {
                "input": {
                    "value": "args[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "new_locs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gen_grid(flow) + flow",
                            "BinOp"
                        ],
                        [
                            "new_locs.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "new_locs[..., [1, 0]]",
                            "Subscript"
                        ],
                        [
                            "new_locs.permute(0, 2, 3, 4, 1)",
                            "Call"
                        ],
                        [
                            "new_locs[..., [2, 1, 0]]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_226": {
                "variable": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy_img * mask1",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(input_img, (-1, 1, H, W))",
                            "Call"
                        ],
                        [
                            "torch.cat((denoise1_img.mean(dim=1, keepdim=True).detach_(), noisy_img), 1)",
                            "Call"
                        ],
                        [
                            "noisy_img",
                            "variable"
                        ],
                        [
                            "torch.cat((input_img[idx], input_img[[idx_tgt] * len(idx)]), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((tgt[:1], warp)).detach_()",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_img, end_dim=1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "noisy_img.permute(1, 0, 2, 3).clone()",
                            "Call"
                        ],
                        [
                            "torch.cat((denoise1_img.mean(dim=1, keepdim=True).detach_(), noisy_img), 1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_img, end_dim=1).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_228": {
                "variable": {
                    "value": "denoise1_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denoise1_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.denoise1(input_img)",
                            "Call"
                        ],
                        [
                            "torch.reshape(denoise1_img, (T, -1, H, W))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(T, -1, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_img[idx], input_img[[idx_tgt] * len(idx)])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_154": {
                "input": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "new_locs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gen_grid(flow) + flow",
                            "BinOp"
                        ],
                        [
                            "new_locs.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "new_locs[..., [1, 0]]",
                            "Subscript"
                        ],
                        [
                            "new_locs.permute(0, 2, 3, 4, 1)",
                            "Call"
                        ],
                        [
                            "new_locs[..., [2, 1, 0]]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(denoise1_img.mean(dim=1, keepdim=True).detach_(), noisy_img)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt[:1], warp)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flatten_247": {
                "variable": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy_img * mask1",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(input_img, (-1, 1, H, W))",
                            "Call"
                        ],
                        [
                            "torch.cat((denoise1_img.mean(dim=1, keepdim=True).detach_(), noisy_img), 1)",
                            "Call"
                        ],
                        [
                            "noisy_img",
                            "variable"
                        ],
                        [
                            "torch.cat((input_img[idx], input_img[[idx_tgt] * len(idx)]), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((tgt[:1], warp)).detach_()",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_img, end_dim=1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "noisy_img.permute(1, 0, 2, 3).clone()",
                            "Call"
                        ],
                        [
                            "torch.cat((denoise1_img.mean(dim=1, keepdim=True).detach_(), noisy_img), 1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_img, end_dim=1).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_247": {
                "variable": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(denoise1_img.mean(dim=1, keepdim=True).detach_(), noisy_img)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_254": {
                "variable": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy_img * mask1",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(input_img, (-1, 1, H, W))",
                            "Call"
                        ],
                        [
                            "torch.cat((denoise1_img.mean(dim=1, keepdim=True).detach_(), noisy_img), 1)",
                            "Call"
                        ],
                        [
                            "noisy_img",
                            "variable"
                        ],
                        [
                            "torch.cat((input_img[idx], input_img[[idx_tgt] * len(idx)]), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((tgt[:1], warp)).detach_()",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_img, end_dim=1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "noisy_img.permute(1, 0, 2, 3).clone()",
                            "Call"
                        ],
                        [
                            "torch.cat((denoise1_img.mean(dim=1, keepdim=True).detach_(), noisy_img), 1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_img, end_dim=1).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_254": {
                "variable": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_224": {
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "noisy_img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_243": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "noisy_img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "tensor_29": {
                "variable": {
                    "value": "noisy_img",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "noisy_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img + noise",
                            "BinOp"
                        ],
                        [
                            "img",
                            "variable"
                        ],
                        [
                            "torch.stack((noisy_img, torch.zeros_like(noisy_img)), -1)",
                            "Call"
                        ],
                        [
                            "torch.ifft(torch.fft(noisy_img, 2, True) + noise, 2, True)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(noisy_img[..., 0] ** 2 + noisy_img[..., 1] ** 2)",
                            "Call"
                        ],
                        [
                            "noise_g.poisson(img.cpu().numpy() * sigma) / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(noisy_img, dtype=img.dtype, device=img.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "img.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_10": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noise_g.randn(*img.shape) * (sigma / 255.0)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(noise, dtype=img.dtype, device=img.device)",
                            "Call"
                        ],
                        [
                            "torch.stack((noise1, noise2), -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "img.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "variable": {
                    "value": "noise1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "noise1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noise_g.randn(*img.shape) * (sigma / 255.0)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(noise1, dtype=img.dtype, device=img.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "img.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "variable": {
                    "value": "noise2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "noise2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noise_g.randn(*img.shape) * (sigma / 255.0)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(noise2, dtype=img.dtype, device=img.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "img.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_21": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(noise1, noise2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_22": {
                "variable": {
                    "value": "noisy_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(noisy_img, torch.zeros_like(noisy_img))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ifft_23": {
                "variable": {
                    "value": "noisy_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.fft(noisy_img, 2, True) + noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_24": {
                "variable": {
                    "value": "noisy_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noisy_img[..., 0] ** 2 + noisy_img[..., 1] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_22": {
                "input": {
                    "value": "noisy_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img + noise",
                            "BinOp"
                        ],
                        [
                            "img",
                            "variable"
                        ],
                        [
                            "torch.stack((noisy_img, torch.zeros_like(noisy_img)), -1)",
                            "Call"
                        ],
                        [
                            "torch.ifft(torch.fft(noisy_img, 2, True) + noise, 2, True)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(noisy_img[..., 0] ** 2 + noisy_img[..., 1] ** 2)",
                            "Call"
                        ],
                        [
                            "noise_g.poisson(img.cpu().numpy() * sigma) / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(noisy_img, dtype=img.dtype, device=img.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "fft_23": {
                "input": {
                    "value": "noisy_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img + noise",
                            "BinOp"
                        ],
                        [
                            "img",
                            "variable"
                        ],
                        [
                            "torch.stack((noisy_img, torch.zeros_like(noisy_img)), -1)",
                            "Call"
                        ],
                        [
                            "torch.ifft(torch.fft(noisy_img, 2, True) + noise, 2, True)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(noisy_img[..., 0] ** 2 + noisy_img[..., 1] ** 2)",
                            "Call"
                        ],
                        [
                            "noise_g.poisson(img.cpu().numpy() * sigma) / sigma",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(noisy_img, dtype=img.dtype, device=img.device)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}