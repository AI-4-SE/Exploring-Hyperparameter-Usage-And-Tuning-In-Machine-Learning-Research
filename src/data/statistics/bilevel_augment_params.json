{
    "src/datasets/__init__.py": {
        "sklearn": {
            "train_test_split_85": {
                "variable": {
                    "value": "(ind_train, ind_val, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "valratio",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_68": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "exp_dict['batch']['size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SaypraSampler(ind=ind_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "exp_dict['batch']['size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SaypraSampler(ind=ind_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/bach.py": {
        "torch": {}
    },
    "src/datasets/cifar.py": {
        "torch": {}
    },
    "src/datasets/imagenet.py": {
        "torch": {}
    },
    "src/datasets/tinyimagenet.py": {
        "torch": {}
    },
    "src/models/__init__.py": {
        "torch": {}
    },
    "src/models/base_netA/affine_color.py": {
        "torch": {
            "tensor_12": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "datasetmean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_13": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "datasetstd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "neurons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "neurons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10 * neurons",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.lin3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10 * neurons",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_22": {
                "variable": {
                    "value": "transparams",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin1(noise)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "transparams",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin2(transparams)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_27": {
                "variable": {
                    "value": "transparams",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transparams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.lin1(noise))",
                            "Call"
                        ],
                        [
                            "self.drop(transparams)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin2(transparams))",
                            "Call"
                        ],
                        [
                            "self.drop(transparams)",
                            "Call"
                        ],
                        [
                            "self.lin3(transparams)",
                            "Call"
                        ],
                        [
                            "torch.tanh(transparams)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_29": {
                "variable": {
                    "value": "identitymatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Uniform_45": {
                "variable": {
                    "value": "self.uniform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "-torch.ones(bs, self.nz).to(x.device)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.ones(bs, self.nz).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "affine_grid_52": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "affinematrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta + identitymatrix",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * self.std.view(1, 3, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(x, grid, align_corners=True)",
                            "Call"
                        ],
                        [
                            "x + self.mean.view(1, 3, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "(x - self.mean.view(1, 3, 1, 1)) / self.std.view(1, 3, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "adjust_brightness(x, 1 + colorparams[:, 0].squeeze(-1))",
                            "Call"
                        ],
                        [
                            "adjust_contrast(x, colorparams[:, 1].squeeze(-1))",
                            "Call"
                        ],
                        [
                            "adjust_saturation(x, 1 + colorparams[:, 2].squeeze(-1))",
                            "Call"
                        ],
                        [
                            "adjust_hue(x, colorparams[:, 3].squeeze(-1) * 0.5)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(affinematrix, x.size(), align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randperm_59": {
                "variable": {
                    "value": "transform_order",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "nb_transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "mean_81": {
                "variable": {
                    "value": "transformations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transparams.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/base_netA/color_utils.py": {
        "torch": {
            "chunk_38": {
                "variable": {
                    "value": "(h, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hsv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb_to_hsv(input)",
                            "Call"
                        ],
                        [
                            "rgb_to_hsv(input)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_83": {
                "variable": {
                    "value": "(h, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hsv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb_to_hsv(input)",
                            "Call"
                        ],
                        [
                            "rgb_to_hsv(input)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "saturation_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[saturation_factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_32": {
                "variable": {
                    "value": "saturation_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "saturation_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([saturation_factor])",
                            "Call"
                        ],
                        [
                            "saturation_factor.to(input.device).to(input.dtype)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(saturation_factor, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_41": {
                "input": {
                    "value": "s * saturation_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_44": {
                "tensors": {
                    "value": "[h, s_out, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "hue_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[hue_factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "hue_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hue_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([hue_factor])",
                            "Call"
                        ],
                        [
                            "hue_factor.to(input.device).to(input.dtype)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(hue_factor, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_86": {
                "input": {
                    "value": "h + h * hue_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "[h_out, s, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_118": {
                "input": {
                    "value": "x_adjust",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gain * torch.pow(input, gamma)",
                            "BinOp"
                        ],
                        [
                            "input + contrast_factor",
                            "BinOp"
                        ],
                        [
                            "input * brightness_factor",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "contrast_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[contrast_factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_151": {
                "variable": {
                    "value": "contrast_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "contrast_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([contrast_factor])",
                            "Call"
                        ],
                        [
                            "contrast_factor.to(input.device).to(input.dtype)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(contrast_factor, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_157": {
                "input": {
                    "value": "x_adjust",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gain * torch.pow(input, gamma)",
                            "BinOp"
                        ],
                        [
                            "input + contrast_factor",
                            "BinOp"
                        ],
                        [
                            "input * brightness_factor",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "variable": {
                    "value": "brightness_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[brightness_factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_186": {
                "variable": {
                    "value": "brightness_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "brightness_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([brightness_factor])",
                            "Call"
                        ],
                        [
                            "brightness_factor.to(input.device).to(input.dtype)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(brightness_factor, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_192": {
                "input": {
                    "value": "x_adjust",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gain * torch.pow(input, gamma)",
                            "BinOp"
                        ],
                        [
                            "input + contrast_factor",
                            "BinOp"
                        ],
                        [
                            "input * brightness_factor",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "flip_331": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_tensor_15": {
                "obj": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_60": {
                "obj": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_105": {
                "obj": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_115": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_131": {
                "obj": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_170": {
                "obj": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/base_netA/hsv.py": {
        "torch": {
            "floor_59": {
                "input": {
                    "value": "h * 6",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_157": {
                "tensors": {
                    "value": "[h, s, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_tensor_47": {
                "obj": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_65": {
                "tensors": {
                    "value": "[hi, hi, hi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_67": {
                "tensors": {
                    "value": "(v, t, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_68": {
                "tensors": {
                    "value": "(q, v, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_69": {
                "tensors": {
                    "value": "(p, v, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_70": {
                "tensors": {
                    "value": "(p, q, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_71": {
                "tensors": {
                    "value": "(t, p, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_72": {
                "tensors": {
                    "value": "(v, p, q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_tensor_119": {
                "obj": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/base_netA/small_affine.py": {
        "torch": {
            "tensor_13": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "datasetmean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_14": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "datasetstd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.fc_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.nz, neurons)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_37": {
                "variable": {
                    "value": "identitymatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Uniform_68": {
                "variable": {
                    "value": "self.uniform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "-torch.ones(bs, self.nz).to(x.device)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.ones(bs, self.nz).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "affine_grid_73": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "affinematrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "identitymatrix",
                            "Name"
                        ],
                        [
                            "identitymatrix",
                            "Name"
                        ],
                        [
                            "identitymatrix",
                            "Name"
                        ],
                        [
                            "theta + identitymatrix",
                            "BinOp"
                        ],
                        [
                            "self.get_affine_matrix(noise)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * self.std.view(1, 3, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(x, grid, align_corners=True)",
                            "Call"
                        ],
                        [
                            "x / self.std.view(1, 3, 1, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(affinematrix, x.size(), align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_81": {
                "variable": {
                    "value": "transformations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "affinematrix.clone().detach().view(-1, 6)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "neurons * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_43": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_loc(noise)",
                            "Call"
                        ],
                        [
                            "self.lin1(theta)",
                            "Call"
                        ],
                        [
                            "torch.tanh(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "neurons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "neurons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "neurons * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "neurons * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "neurons * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_68": {
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "neurons * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/base_netA/stn.py": {
        "torch": {
            "tensor_11": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "datasetmean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_12": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "datasetstd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_13": {
                "variable": {
                    "value": "self.buffer_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_14": {
                "variable": {
                    "value": "self.buffer_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_15": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(n_filters * 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "isize",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.inconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(n_filters * 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.localization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_filters, n_filters, 3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.fc_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256 * 4 * 4, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_44": {
                "variable": {
                    "value": "identitymatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Uniform_59": {
                "variable": {
                    "value": "self.uniform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "-torch.ones(bs, self.nz).to(x.device)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.ones(bs, self.nz).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xconv, noise]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_67": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "affinematrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "identitymatrix + theta",
                            "BinOp"
                        ],
                        [
                            "self.get_affine_matrix(input)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_71": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * self.std.view(1, 3, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(x, grid, align_corners=True)",
                            "Call"
                        ],
                        [
                            "x / self.std.view(1, 3, 1, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(affinematrix, x.size(), align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "self.buffer_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.buffer_in, z.clone().detach())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "self.buffer_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.buffer_out, affinematrix.clone().detach())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_20": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_23": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_26": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "256 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_59": {
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/base_netC/resnet.py": {
        "torch": {
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_149": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_157": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_214": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/base_netC/resnet_meta.py": {
        "torch": {
            "ReLU_52": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_153": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_161": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flatten_218": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x, params=self.get_subdict(params, 'conv1'))",
                            "Call"
                        ],
                        [
                            "self.bn1(x, params=self.get_subdict(params, 'bn1'))",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x, params=self.get_subdict(params, 'layer1'))",
                            "Call"
                        ],
                        [
                            "self.layer2(x, params=self.get_subdict(params, 'layer2'))",
                            "Call"
                        ],
                        [
                            "self.layer3(x, params=self.get_subdict(params, 'layer3'))",
                            "Call"
                        ],
                        [
                            "self.layer4(x, params=self.get_subdict(params, 'layer4'))",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x, params=self.get_subdict(params, 'fc'))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/base_netC/resnet_meta_2.py": {
        "torch": {
            "relu_37": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x, params=self.get_subdict(params, 'conv1')), params=self.get_subdict(params, 'bn1'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x, params=self.get_subdict(params, 'conv1')), params=self.get_subdict(params, 'bn1')))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out, params=self.get_subdict(params, 'conv2')), params=self.get_subdict(params, 'bn2'))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x, params=self.get_subdict(params, 'shortcut'))",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x, params=self.get_subdict(params, 'conv1')), params=self.get_subdict(params, 'bn1')))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out, params=self.get_subdict(params, 'conv2')), params=self.get_subdict(params, 'bn2')))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out, params=self.get_subdict(params, 'conv3')), params=self.get_subdict(params, 'bn3'))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x, params=self.get_subdict(params, 'conv1')), params=self.get_subdict(params, 'bn1')))",
                            "Call"
                        ],
                        [
                            "self.layer1(out, params=self.get_subdict(params, 'layer1'))",
                            "Call"
                        ],
                        [
                            "self.layer2(out, params=self.get_subdict(params, 'layer2'))",
                            "Call"
                        ],
                        [
                            "self.layer3(out, params=self.get_subdict(params, 'layer3'))",
                            "Call"
                        ],
                        [
                            "self.layer4(out, params=self.get_subdict(params, 'layer4'))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[2:])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out, params=self.get_subdict(params, 'linear'))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_64": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x, params=self.get_subdict(params, 'conv1')), params=self.get_subdict(params, 'bn1'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out, params=self.get_subdict(params, 'conv2')), params=self.get_subdict(params, 'bn2'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x, params=self.get_subdict(params, 'conv1')), params=self.get_subdict(params, 'bn1')))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out, params=self.get_subdict(params, 'conv2')), params=self.get_subdict(params, 'bn2'))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x, params=self.get_subdict(params, 'shortcut'))",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x, params=self.get_subdict(params, 'conv1')), params=self.get_subdict(params, 'bn1')))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out, params=self.get_subdict(params, 'conv2')), params=self.get_subdict(params, 'bn2')))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out, params=self.get_subdict(params, 'conv3')), params=self.get_subdict(params, 'bn3'))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x, params=self.get_subdict(params, 'conv1')), params=self.get_subdict(params, 'bn1')))",
                            "Call"
                        ],
                        [
                            "self.layer1(out, params=self.get_subdict(params, 'layer1'))",
                            "Call"
                        ],
                        [
                            "self.layer2(out, params=self.get_subdict(params, 'layer2'))",
                            "Call"
                        ],
                        [
                            "self.layer3(out, params=self.get_subdict(params, 'layer3'))",
                            "Call"
                        ],
                        [
                            "self.layer4(out, params=self.get_subdict(params, 'layer4'))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[2:])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out, params=self.get_subdict(params, 'linear'))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_93": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x, params=self.get_subdict(params, 'conv1')), params=self.get_subdict(params, 'bn1'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_98": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x, params=self.get_subdict(params, 'conv1')), params=self.get_subdict(params, 'bn1')))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out, params=self.get_subdict(params, 'conv2')), params=self.get_subdict(params, 'bn2'))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x, params=self.get_subdict(params, 'shortcut'))",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x, params=self.get_subdict(params, 'conv1')), params=self.get_subdict(params, 'bn1')))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out, params=self.get_subdict(params, 'conv2')), params=self.get_subdict(params, 'bn2')))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out, params=self.get_subdict(params, 'conv3')), params=self.get_subdict(params, 'bn3'))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x, params=self.get_subdict(params, 'conv1')), params=self.get_subdict(params, 'bn1')))",
                            "Call"
                        ],
                        [
                            "self.layer1(out, params=self.get_subdict(params, 'layer1'))",
                            "Call"
                        ],
                        [
                            "self.layer2(out, params=self.get_subdict(params, 'layer2'))",
                            "Call"
                        ],
                        [
                            "self.layer3(out, params=self.get_subdict(params, 'layer3'))",
                            "Call"
                        ],
                        [
                            "self.layer4(out, params=self.get_subdict(params, 'layer4'))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[2:])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out, params=self.get_subdict(params, 'linear'))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_122": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/base_netC/resnet_meta_old.py": {
        "torch": {}
    },
    "src/models/base_netC/utils.py": {
        "torch": {}
    },
    "src/models/blvl.py": {
        "torch": {
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.netC.dataset.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.netC.dataset.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_185": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netC.net(images)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_92": {
                "variable": {
                    "value": "transformations_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "transformations.detach()",
                            "Call"
                        ],
                        [
                            "torch.cat((transforms, transformations.detach()))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_93": {
                "variable": {
                    "value": "transformations_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "transformations.detach()",
                            "Call"
                        ],
                        [
                            "torch.cat((transforms, transformations.detach()))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "transforms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(transforms, transformations.detach())",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/netA.py": {
        "torch": {
            "cross_entropy_123": {
                "variable": {
                    "value": "loss_clf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netC.net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.repeat(factor)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_60": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.opt_dict['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.opt_dict['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.opt_dict['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_93": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "self.moms[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "p.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_175": {
                "variable": {
                    "value": "loss_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valoutput",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netC.net(valimages, params=self.w_t_1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "vallabels",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/netC.py": {
        "torch": {
            "cross_entropy_87": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_60": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.opt_dict['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.opt_dict['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.opt_dict['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.net.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dataset.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/optimizers.py": {
        "torch": {
            "Adam_7": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "optimparams['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "optimparams['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "AdamW_11": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "optimparams['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(optimparams['beta_1'], 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "optimparams['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "RMSprop_14": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "optimparams['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_17": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "optimparams['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "optimparams['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "optimparams['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "optimparams.get('nesterov', False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {}
    },
    "trainval.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(exp_dict['dataset'], 'test', exp_dict=exp_dict, datadir_base=datadir_base, n_samples=exp_dict['dataset_size']['test'], transform_lvl=0, val_transform=exp_dict['dataset']['val_transform'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(exp_dict['dataset'], 'test', exp_dict=exp_dict, datadir_base=datadir_base, n_samples=exp_dict['dataset_size']['test'], transform_lvl=0, val_transform=exp_dict['dataset']['val_transform'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "exp_dict['batch']['size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hu.load_json(os.path.join(savedir, 'exp_dict.json'))",
                            "Call"
                        ],
                        [
                            "exp_list",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_121": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_dict['fixedSeed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_all_122": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_dict['fixedSeed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "val.py": {
        "torch": {}
    }
}