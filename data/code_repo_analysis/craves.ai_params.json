{
    "data_generation/load_data_and_vis.py": {
        "torch": {
            "load_30": {
                "variable": {
                    "value": "meanstd",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "meanstd_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'../datasets/arm/mean.pth.tar'",
                            "str"
                        ]
                    ]
                }
            }
        }
    },
    "pose/datasets/arm.py": {
        "torch": {
            "load_114": {
                "variable": {
                    "value": "meanstd",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "meanstd_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'../datasets/arm/mean.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_240": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nparts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.out_res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.out_res",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_132": {
                "obj": {
                    "value": "meanstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(meanstd_file)",
                            "Call"
                        ],
                        [
                            "{'mean': mean, 'std': std}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "meanstd_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'../datasets/arm/mean.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "from_numpy_225": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fliplr(img.numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pose/datasets/arm_realtime_loader.py": {
        "torch": {
            "from_numpy_8": {
                "ndarray": {
                    "value": "ndarray",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndarray",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_9": {
                "obj": {
                    "value": "ndarray",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndarray",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pose/datasets/arm_resnet.py": {
        "torch": {
            "load_52": {
                "variable": {
                    "value": "meanstd",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "meanstd_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./datasets/arm/mean.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "from_numpy_63": {
                "ndarray": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(obj[0:4], detype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_109": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fliplr(img.numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pose/datasets/concat.py": {
        "torch": {}
    },
    "pose/datasets/lsp.py": {
        "torch": {
            "Tensor_84": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_88": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nparts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.out_res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.out_res",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_52": {
                "variable": {
                    "value": "meanstd",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "meanstd_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./data/lsp/mean.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_68": {
                "obj": {
                    "value": "meanstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(meanstd_file)",
                            "Call"
                        ],
                        [
                            "{'mean': mean, 'std': std}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "meanstd_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./data/lsp/mean.pth.tar'",
                            "str"
                        ]
                    ]
                }
            }
        }
    },
    "pose/datasets/mpii.py": {
        "torch": {
            "Tensor_76": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_80": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nparts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.out_res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.out_res",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_44": {
                "variable": {
                    "value": "meanstd",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "meanstd_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./data/mpii/mean.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_60": {
                "obj": {
                    "value": "meanstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(meanstd_file)",
                            "Call"
                        ],
                        [
                            "{'mean': mean, 'std': std}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "meanstd_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./data/mpii/mean.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fliplr(img.numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_94": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_94": {
                "input": {
                    "value": "1 - sf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1 + sf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_95": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_95": {
                "input": {
                    "value": "-2 * rf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "2 * rf",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pose/datasets/mscoco.py": {
        "torch": {
            "Tensor_80": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_84": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nparts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.out_res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.out_res",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_44": {
                "variable": {
                    "value": "meanstd",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "meanstd_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./data/mscoco/mean.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_64": {
                "obj": {
                    "value": "meanstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(meanstd_file)",
                            "Call"
                        ],
                        [
                            "{'mean': mean, 'std': std}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "meanstd_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./data/mscoco/mean.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fliplr(img.numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_98": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_98": {
                "input": {
                    "value": "1 - sf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1 + sf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_99": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_99": {
                "input": {
                    "value": "-2 * rf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "2 * rf",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pose/models/hourglass.py": {
        "torch": {
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_59": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_81": {
                "variable": {
                    "value": "low1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "x + fc_ + score_",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "x + fc_ + score_",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_112": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.hg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "hg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hg",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_127": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_128": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.score[i](y)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.score[i](y)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_129": {
                "variable": {
                    "value": "self.fc_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "fc_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.fc_[i](y)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.fc_[i](y)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_130": {
                "variable": {
                    "value": "self.score_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "score_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.score_[i](score)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.score_[i](score)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_149": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_150": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outplanes",
                            "Method Argument"
                        ],
                        [
                            "outplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_192": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_194": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_195": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_199": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_212": {
                "variable": {
                    "value": "self.hg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "hg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hg",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_213": {
                "variable": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_214": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_215": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.score[i](y)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.score[i](y)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_216": {
                "variable": {
                    "value": "self.fc_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "fc_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.fc_[i](y)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.fc_[i](y)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_217": {
                "variable": {
                    "value": "self.score_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "score_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.score_[i](score)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.score_[i](score)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_236": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_237": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outplanes",
                            "Method Argument"
                        ],
                        [
                            "outplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_77": {
                "modules": {
                    "value": "hg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hg",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "*args": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_222": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_233": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_238": {
                "*args": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_76": {
                "modules": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_121": {
                "in_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ],
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ],
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_223": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ],
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ],
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ],
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "in_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ],
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ],
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "in_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ],
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pose/models/preresnet.py": {
        "torch": {
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_56": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pose/utils/evaluation.py": {
        "torch": {
            "max_19": {
                "variable": {
                    "value": "(maxval, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(scores.size(0), scores.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "preds.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "preds.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(idxs) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "ndarray": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.repeat(1, 1, 2).float()",
                            "Call"
                        ],
                        [
                            "preds * pred_mask",
                            "BinOp"
                        ],
                        [
                            "preds.float()",
                            "Call"
                        ],
                        [
                            "get_preds(output)",
                            "Call"
                        ],
                        [
                            "get_preds(output)",
                            "Call"
                        ],
                        [
                            "preds.numpy()",
                            "Call"
                        ],
                        [
                            "coords.clone()",
                            "Call"
                        ],
                        [
                            "preds.view(1, preds.size())",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_27": {
                "input": {
                    "value": "(preds[:, :, 1] - 1) / scores.size(3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_58": {
                "*size": {
                    "value": "preds.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_97": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dist_40": {
                "input": {
                    "value": "preds[n, c, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "target[n, c, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pose/utils/imutils.py": {
        "torch": {
            "cat_140": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, tgt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pose/utils/misc.py": {
        "torch": {
            "is_tensor_12": {
                "obj": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_31": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_22": {
                "ndarray": {
                    "value": "ndarray",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndarray",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_23": {
                "obj": {
                    "value": "ndarray",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndarray",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pose/utils/transforms.py": {
        "torch": {
            "from_numpy_53": {
                "ndarray": {
                    "value": "flip_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fliplr(flip_output.numpy())",
                            "Call"
                        ],
                        [
                            "flip_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_243": {
                "*size": {
                    "value": "res[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "res[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "img.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_244": {
                "*size": {
                    "value": "res[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "res[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "train_arm.py": {
        "torch": {
            "DataParallel_83": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](num_stacks=args.stacks, num_blocks=args.blocks, num_classes=args.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MSELoss_86": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RMSprop_88": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_137": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.Concat(datasets=val_set_list, ratio=None)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_283": {
                "variable": {
                    "value": "meanstd",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "meanstd_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'../datasets/arm/mean.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "DataLoader_127": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.Concat(datasets=train_set_list, ratio=args.ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_98": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_346": {
                "variable": {
                    "value": "score_map",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack(new_score_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_347": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack(new_inp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_349": {
                "variable": {
                    "value": "score_map",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.expand_dims(new_score_map[0], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_350": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.expand_dims(new_inp[0], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_309": {
                "ndarray": {
                    "value": "fliplr(inputs.clone().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}