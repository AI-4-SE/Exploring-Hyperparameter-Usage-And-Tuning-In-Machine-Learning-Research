{
    "util/visualizer.py": {
        "tensorflow": {
            "FileWriter_28": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data/__init__.py": {
        "torch": {}
    },
    "data/base_dataset.py": {
        "torch": {}
    },
    "data/gta5_dataset.py": {
        "torch": {
            "from_numpy_124": {
                "ndarray": {
                    "value": "self.loss_masks[index].copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_124": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/image_folder.py": {
        "torch": {}
    },
    "models/__init__.py": {
        "torch": {}
    },
    "models/networks/__init__.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/architecture.py": {
        "torch": {
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fmiddle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(fin, fout)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fmiddle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(fin, fout)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fout",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fout",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_36": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_37": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_70": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in range(2)",
                            "Call"
                        ],
                        [
                            "x in range(2, 7)",
                            "Call"
                        ],
                        [
                            "x in range(7, 12)",
                            "Call"
                        ],
                        [
                            "x in range(12, 21)",
                            "Call"
                        ],
                        [
                            "x in range(21, 30)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_39": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_81": {
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_84": {
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks/base_network.py": {
        "torch": {}
    },
    "models/networks/discriminator.py": {
        "torch": {
            "avg_pool2d_62": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "151",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_D_input_nc(opt)",
                            "Call"
                        ],
                        [
                            "opt.label_nc + opt.output_nc",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_100": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_115": {
                "*args": {
                    "value": "*sequence[n]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LeakyReLU_108": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "nf_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if n == opt.n_layers_D - 1 else 2",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks/encoder.py": {
        "torch": {
            "Linear_33": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 8 * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 8 * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_36": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc_mu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.nc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.fc_var1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.nc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.fc_mu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.fc_var2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.fc_mu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.fc_var3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.fc_mu4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.fc_var4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fc_mu5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.fc_var5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(256, 256), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer3(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer4(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer5(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer6(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.actvn(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_55": {
                "variable": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(seg, size=(256, 256), mode='nearest')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "label_mu[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_mu[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "label_logvar[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_logvar[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "ndf * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_98": {
                "variable": {
                    "value": "mu_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mu_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mu_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "logvar_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logvar_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(logvar_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_70": {
                "input": {
                    "value": "label_map.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(int(seg.shape[2] / 2 ** i), int(seg.shape[3] / 2 ** i))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nc",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/generator.py": {
        "torch": {
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "variable"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_66": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_154": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.fc(z['global'])",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_34": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "opt.semantic_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt.z_dim_local",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16 * nf * self.sw * self.sh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.opt.semantic_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_123": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.clone()",
                            "Call"
                        ],
                        [
                            "embed_seg_list[0] + z_maps_list[0] if self.opt.use_vae else seg",
                            "IfExp"
                        ],
                        [
                            "embed_seg_list[1] + z_maps_list[1] if self.opt.use_vae else seg",
                            "IfExp"
                        ],
                        [
                            "embed_seg_list[2] + z_maps_list[2] if self.opt.use_vae else seg",
                            "IfExp"
                        ],
                        [
                            "embed_seg_list[3] + z_maps_list[3] if self.opt.use_vae else seg",
                            "IfExp"
                        ],
                        [
                            "embed_seg_list[4] + z_maps_list[4] if self.opt.use_vae else seg",
                            "IfExp"
                        ],
                        [
                            "input.clone() if self.opt.use_vae else seg",
                            "IfExp"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_100": {
                "variable": {
                    "value": "_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "z_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_maps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(z_maps, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_153": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.fc(z['global'])",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_97": {
                "variable": {
                    "value": "_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "z_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "label_maps[layer_id].shape[1:] + (self.opt.z_dim_local,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_89": {
                "input": {
                    "value": "label_map.float().unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(int(label_map.shape[1] / 2 ** i), int(label_map.shape[2] / 2 ** i))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/loss.py": {
        "torch": {
            "L1Loss_106": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_60": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_94": {
                "variable": {
                    "value": "new_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_tensor.view(bs, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_117": {
                "variable": {
                    "value": "loss_mask_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_vgg[i].shape[2], x_vgg[i].shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_126": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_64": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_68": {
                "variable": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_71": {
                "variable": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-input - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_75": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_69": {
                "input": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ],
                        [
                            "torch.min(-input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_72": {
                "input": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ],
                        [
                            "torch.min(-input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks/normalization.py": {
        "torch": {
            "Sequential_89": {
                "variable": {
                    "value": "self.mlp_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(label_nc, nhidden, kernel_size=ks, padding=pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.mlp_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.mlp_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_102": {
                "variable": {
                    "value": "segmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(segmap, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "segmap",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_27": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spectral_norm(layer)",
                            "Call"
                        ],
                        [
                            "layer",
                            "Method Argument"
                        ],
                        [
                            "layer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "get_out_channel(layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "*args": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_76": {
                "variable": {
                    "value": "self.param_free_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "label_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_44": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "get_out_channel(layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.param_free_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/pix2pix_model.py": {
        "torch": {
            "Adam_80": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.netG.parameters())",
                            "Call"
                        ],
                        [
                            "G_params + list(self.netE.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "G_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.lr",
                            "Attribute"
                        ],
                        [
                            "opt.lr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_81": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.netD.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "D_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.lr",
                            "Attribute"
                        ],
                        [
                            "opt.lr * 2",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "fake_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, fake_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "real_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, real_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "fake_and_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_concat, real_concat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_292": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_293": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_31": {
                "variable": {
                    "value": "self.criterionFeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "input_semantics",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_semantics, instance_edge_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_218": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mu.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mu.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "options/base_options.py": {
        "torch": {
            "set_device_174": {
                "device": {
                    "value": "opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {}
    },
    "util/util.py": {
        "torch": {
            "load_207": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoints_dir, opt.name, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_198": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoints_dir, opt.name, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_273": {
                "variable": {
                    "value": "self.cmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}